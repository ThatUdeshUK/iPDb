/* A Bison parser, made by GNU Bison 3.8.2.  */

/* Bison implementation for Yacc-like parsers in C

   Copyright (C) 1984, 1989-1990, 2000-2015, 2018-2021 Free Software Foundation,
   Inc.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <https://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* DO NOT RELY ON FEATURES THAT ARE NOT DOCUMENTED in the manual,
   especially those whose name start with YY_ or yy_.  They are
   private implementation details that can be changed or removed.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output, and Bison version.  */
#define YYBISON 30802

/* Bison version string.  */
#define YYBISON_VERSION "3.8.2"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1


/* Substitute the variable and function names.  */
#define yyparse         base_yyparse
#define yylex           base_yylex
#define yyerror         base_yyerror
#define yydebug         base_yydebug
#define yynerrs         base_yynerrs

/* First part of user prologue.  */
#line 1 "third_party/libpg_query/grammar/grammar.y.tmp"

#line 1 "third_party/libpg_query/grammar/grammar.hpp"
/*#define YYDEBUG 1*/
/*-------------------------------------------------------------------------
 *
 * gram.y
 *	  POSTGRESQL BISON rules/actions
 *
 * Portions Copyright (c) 1996-2017, PostgreSQL Global Development PGGroup
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *	  src/backend/parser/gram.y
 *
 * HISTORY
 *	  AUTHOR			DATE			MAJOR EVENT
 *	  Andrew Yu			Sept, 1994		POSTQUEL to SQL conversion
 *	  Andrew Yu			Oct, 1994		lispy code conversion
 *
 * NOTES
 *	  CAPITALS are used to represent terminal symbols.
 *	  non-capitals are used to represent non-terminals.
 *
 *	  In general, nothing in this file should initiate database accesses
 *	  nor depend on changeable state (such as SET variables).  If you do
 *	  database accesses, your code will fail when we have aborted the
 *	  current transaction and are just parsing commands to find the next
 *	  ROLLBACK or COMMIT.  If you make use of SET variables, then you
 *	  will do the wrong thing in multi-query strings like this:
 *			SET constraint_exclusion TO off; SELECT * FROM foo;
 *	  because the entire string is parsed by gram.y before the SET gets
 *	  executed.  Anything that depends on the database or changeable state
 *	  should be handled during parse analysis so that it happens at the
 *	  right time not the wrong time.
 *
 * WARNINGS
 *	  If you use a list, make sure the datum is a node so that the printing
 *	  routines work.
 *
 *	  Sometimes we assign constants to makeStrings. Make sure we don't free
 *	  those.
 *
 *-------------------------------------------------------------------------
 */
#include "pg_functions.hpp"
#include <string.h>

#include <ctype.h>
#include <limits.h>

#include "nodes/makefuncs.hpp"
#include "nodes/nodeFuncs.hpp"
#include "parser/gramparse.hpp"
#include "parser/parser.hpp"
#include "utils/datetime.hpp"

namespace duckdb_libpgquery {
#define DEFAULT_SCHEMA "main"

/*
 * Location tracking support --- simpler than bison's default, since we only
 * want to track the start position not the end position of each nonterminal.
 */
#define YYLLOC_DEFAULT(Current, Rhs, N) \
	do { \
		if ((N) > 0) \
			(Current) = (Rhs)[1]; \
		else \
			(Current) = (-1); \
	} while (0)

/*
 * The above macro assigns -1 (unknown) as the parse location of any
 * nonterminal that was reduced from an empty rule, or whose leftmost
 * component was reduced from an empty rule.  This is problematic
 * for nonterminals defined like
 *		OptFooList: / * EMPTY * / { ... } | OptFooList Foo { ... } ;
 * because we'll set -1 as the location during the first reduction and then
 * copy it during each subsequent reduction, leaving us with -1 for the
 * location even when the list is not empty.  To fix that, do this in the
 * action for the nonempty rule(s):
 *		if (@$ < 0) @$ = @2;
 * (Although we have many nonterminals that follow this pattern, we only
 * bother with fixing @$ like this when the nonterminal's parse location
 * is actually referenced in some rule.)
 *
 * A cleaner answer would be to make YYLLOC_DEFAULT scan all the Rhs
 * locations until it's found one that's not -1.  Then we'd get a correct
 * location for any nonterminal that isn't entirely empty.  But this way
 * would add overhead to every rule reduction, and so far there's not been
 * a compelling reason to pay that overhead.
 */

/*
 * Bison doesn't allocate anything that needs to live across parser calls,
 * so we can easily have it use palloc instead of malloc.  This prevents
 * memory leaks if we error out during parsing.  Note this only works with
 * bison >= 2.0.  However, in bison 1.875 the default is to use alloca()
 * if possible, so there's not really much problem anyhow, at least if
 * you're building with gcc.
 */
#define YYMALLOC palloc
#define YYFREE   pfree
#define YYINITDEPTH 1000

/* yields an integer bitmask of these flags: */
#define CAS_NOT_DEFERRABLE			0x01
#define CAS_DEFERRABLE				0x02
#define CAS_INITIALLY_IMMEDIATE		0x04
#define CAS_INITIALLY_DEFERRED		0x08
#define CAS_NOT_VALID				0x10
#define CAS_NO_INHERIT				0x20


#define parser_yyerror(msg)  scanner_yyerror(msg, yyscanner)
#define parser_errposition(pos)  scanner_errposition(pos, yyscanner)

#if YYBISON == 1
// explicitly define stack growing support
// yacc cannot handle stack growing by default YYLTYPE is overriden - which the Postgres parser overrides with an `int`
// so we need to copy these definitions here explicitly
/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  short int yyss;
  YYSTYPE yyvs;
  YYLTYPE yyls;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE) + sizeof (YYLTYPE)) \
      + 2 * YYSTACK_GAP_MAXIMUM)

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  YYSIZE_T yyi;				\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (YYID (0))
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack)					\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack, Stack, yysize);				\
	Stack = &yyptr->Stack;						\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (YYID (0))
#endif

static void base_yyerror(YYLTYPE *yylloc, core_yyscan_t yyscanner,
						 const char *msg);
static PGRawStmt *makeRawStmt(PGNode *stmt, int stmt_location);
static void updateRawStmtEnd(PGRawStmt *rs, int end_location);
static PGNode *makeColumnRef(char *colname, PGList *indirection,
						   int location, core_yyscan_t yyscanner);
static PGNode *makeTypeCast(PGNode *arg, PGTypeName *tpname, int trycast, int location);
static PGNode *makeStringConst(char *str, int location);
static PGNode *makeStringConstCast(char *str, int location, PGTypeName *tpname);
static PGNode *makeIntervalNode(char *str, int location, PGList *typmods);
static PGNode *makeIntervalNode(int val, int location, PGList *typmods);
static PGNode *makeIntervalNode(PGNode *arg, int location, PGList *typmods);
static PGNode *makeSampleSize(PGValue *sample_size, bool is_percentage);
static PGNode *makeSampleOptions(PGNode *sample_size, char *method, int *seed, int location);
static PGNode *makeIntConst(int val, int location);
static PGNode *makeFloatConst(char *str, int location);
static PGNode *makeBitStringConst(char *str, int location);
static PGNode *makeNullAConst(int location);
static PGNode *makeAConst(PGValue *v, int location);
static PGNode *makeBoolAConst(bool state, int location);
static PGNode *makeParamRef(int number, int location);
static PGNode *makeNamedParamRef(char* name, int location);
static void check_qualified_name(PGList *names, core_yyscan_t yyscanner);
static PGList *check_func_name(PGList *names, core_yyscan_t yyscanner);
static PGList *check_indirection(PGList *indirection, core_yyscan_t yyscanner);
static void insertSelectOptions(PGSelectStmt *stmt,
								PGList *sortClause, PGList *lockingClause,
								PGNode *limitOffset, PGNode *limitCount,
								PGWithClause *withClause,
								core_yyscan_t yyscanner);
static PGNode *makeSetOp(PGSetOperation op, bool all, PGNode *larg, PGNode *rarg);
static PGNode *doNegate(PGNode *n, int location);
static void doNegateFloat(PGValue *v);
static PGNode *makeAndExpr(PGNode *lexpr, PGNode *rexpr, int location);
static PGNode *makeOrExpr(PGNode *lexpr, PGNode *rexpr, int location);
static PGNode *makeNotExpr(PGNode *expr, int location);
static void SplitColQualList(PGList *qualList,
							 PGList **constraintList, PGCollateClause **collClause,
							 core_yyscan_t yyscanner);
static void processCASbits(int cas_bits, int location, const char *constrType,
			   bool *deferrable, bool *initdeferred, bool *not_valid,
			   bool *no_inherit, core_yyscan_t yyscanner);
static PGNode *makeRecursiveViewSelect(char *relname, PGList *aliases, PGNode *query);
static PGNode *makeLimitPercent(PGNode *limit_percent);


#line 297 "third_party/libpg_query/grammar/grammar_out.cpp"

# ifndef YY_CAST
#  ifdef __cplusplus
#   define YY_CAST(Type, Val) static_cast<Type> (Val)
#   define YY_REINTERPRET_CAST(Type, Val) reinterpret_cast<Type> (Val)
#  else
#   define YY_CAST(Type, Val) ((Type) (Val))
#   define YY_REINTERPRET_CAST(Type, Val) ((Type) (Val))
#  endif
# endif
# ifndef YY_NULLPTR
#  if defined __cplusplus
#   if 201103L <= __cplusplus
#    define YY_NULLPTR nullptr
#   else
#    define YY_NULLPTR 0
#   endif
#  else
#   define YY_NULLPTR ((void*)0)
#  endif
# endif

#include "include/parser/gram.hpp"
/* Symbol kind.  */
enum yysymbol_kind_t
{
  YYSYMBOL_YYEMPTY = -2,
  YYSYMBOL_YYEOF = 0,                      /* "end of file"  */
  YYSYMBOL_YYerror = 1,                    /* error  */
  YYSYMBOL_YYUNDEF = 2,                    /* "invalid token"  */
  YYSYMBOL_IDENT = 3,                      /* IDENT  */
  YYSYMBOL_FCONST = 4,                     /* FCONST  */
  YYSYMBOL_SCONST = 5,                     /* SCONST  */
  YYSYMBOL_BCONST = 6,                     /* BCONST  */
  YYSYMBOL_XCONST = 7,                     /* XCONST  */
  YYSYMBOL_Op = 8,                         /* Op  */
  YYSYMBOL_ICONST = 9,                     /* ICONST  */
  YYSYMBOL_PARAM = 10,                     /* PARAM  */
  YYSYMBOL_TYPECAST = 11,                  /* TYPECAST  */
  YYSYMBOL_DOT_DOT = 12,                   /* DOT_DOT  */
  YYSYMBOL_COLON_EQUALS = 13,              /* COLON_EQUALS  */
  YYSYMBOL_EQUALS_GREATER = 14,            /* EQUALS_GREATER  */
  YYSYMBOL_INTEGER_DIVISION = 15,          /* INTEGER_DIVISION  */
  YYSYMBOL_POWER_OF = 16,                  /* POWER_OF  */
  YYSYMBOL_LAMBDA_ARROW = 17,              /* LAMBDA_ARROW  */
  YYSYMBOL_DOUBLE_ARROW = 18,              /* DOUBLE_ARROW  */
  YYSYMBOL_LESS_EQUALS = 19,               /* LESS_EQUALS  */
  YYSYMBOL_GREATER_EQUALS = 20,            /* GREATER_EQUALS  */
  YYSYMBOL_NOT_EQUALS = 21,                /* NOT_EQUALS  */
  YYSYMBOL_ABORT_P = 22,                   /* ABORT_P  */
  YYSYMBOL_ABSOLUTE_P = 23,                /* ABSOLUTE_P  */
  YYSYMBOL_ACCESS = 24,                    /* ACCESS  */
  YYSYMBOL_ACTION = 25,                    /* ACTION  */
  YYSYMBOL_ADD_P = 26,                     /* ADD_P  */
  YYSYMBOL_ADMIN = 27,                     /* ADMIN  */
  YYSYMBOL_AFTER = 28,                     /* AFTER  */
  YYSYMBOL_AGGREGATE = 29,                 /* AGGREGATE  */
  YYSYMBOL_ALL = 30,                       /* ALL  */
  YYSYMBOL_ALSO = 31,                      /* ALSO  */
  YYSYMBOL_ALTER = 32,                     /* ALTER  */
  YYSYMBOL_ALWAYS = 33,                    /* ALWAYS  */
  YYSYMBOL_ANALYSE = 34,                   /* ANALYSE  */
  YYSYMBOL_ANALYZE = 35,                   /* ANALYZE  */
  YYSYMBOL_AND = 36,                       /* AND  */
  YYSYMBOL_ANTI = 37,                      /* ANTI  */
  YYSYMBOL_ANY = 38,                       /* ANY  */
  YYSYMBOL_ARRAY = 39,                     /* ARRAY  */
  YYSYMBOL_AS = 40,                        /* AS  */
  YYSYMBOL_ASC_P = 41,                     /* ASC_P  */
  YYSYMBOL_ASOF = 42,                      /* ASOF  */
  YYSYMBOL_ASSERTION = 43,                 /* ASSERTION  */
  YYSYMBOL_ASSIGNMENT = 44,                /* ASSIGNMENT  */
  YYSYMBOL_ASYMMETRIC = 45,                /* ASYMMETRIC  */
  YYSYMBOL_AT = 46,                        /* AT  */
  YYSYMBOL_ATTACH = 47,                    /* ATTACH  */
  YYSYMBOL_ATTRIBUTE = 48,                 /* ATTRIBUTE  */
  YYSYMBOL_AUTHORIZATION = 49,             /* AUTHORIZATION  */
  YYSYMBOL_BACKWARD = 50,                  /* BACKWARD  */
  YYSYMBOL_BEFORE = 51,                    /* BEFORE  */
  YYSYMBOL_BEGIN_P = 52,                   /* BEGIN_P  */
  YYSYMBOL_BETWEEN = 53,                   /* BETWEEN  */
  YYSYMBOL_BIGINT = 54,                    /* BIGINT  */
  YYSYMBOL_BINARY = 55,                    /* BINARY  */
  YYSYMBOL_BIT = 56,                       /* BIT  */
  YYSYMBOL_BOOLEAN_P = 57,                 /* BOOLEAN_P  */
  YYSYMBOL_BOTH = 58,                      /* BOTH  */
  YYSYMBOL_BY = 59,                        /* BY  */
  YYSYMBOL_CACHE = 60,                     /* CACHE  */
  YYSYMBOL_CALL_P = 61,                    /* CALL_P  */
  YYSYMBOL_CALLED = 62,                    /* CALLED  */
  YYSYMBOL_CASCADE = 63,                   /* CASCADE  */
  YYSYMBOL_CASCADED = 64,                  /* CASCADED  */
  YYSYMBOL_CASE = 65,                      /* CASE  */
  YYSYMBOL_CAST = 66,                      /* CAST  */
  YYSYMBOL_CATALOG_P = 67,                 /* CATALOG_P  */
  YYSYMBOL_CENTURIES_P = 68,               /* CENTURIES_P  */
  YYSYMBOL_CENTURY_P = 69,                 /* CENTURY_P  */
  YYSYMBOL_CHAIN = 70,                     /* CHAIN  */
  YYSYMBOL_CHAR_P = 71,                    /* CHAR_P  */
  YYSYMBOL_CHARACTER = 72,                 /* CHARACTER  */
  YYSYMBOL_CHARACTERISTICS = 73,           /* CHARACTERISTICS  */
  YYSYMBOL_CHECK_P = 74,                   /* CHECK_P  */
  YYSYMBOL_CHECKPOINT = 75,                /* CHECKPOINT  */
  YYSYMBOL_CLASS = 76,                     /* CLASS  */
  YYSYMBOL_CLOSE = 77,                     /* CLOSE  */
  YYSYMBOL_CLUSTER = 78,                   /* CLUSTER  */
  YYSYMBOL_COALESCE = 79,                  /* COALESCE  */
  YYSYMBOL_COLLATE = 80,                   /* COLLATE  */
  YYSYMBOL_COLLATION = 81,                 /* COLLATION  */
  YYSYMBOL_COLUMN = 82,                    /* COLUMN  */
  YYSYMBOL_COLUMNS = 83,                   /* COLUMNS  */
  YYSYMBOL_COMMENT = 84,                   /* COMMENT  */
  YYSYMBOL_COMMENTS = 85,                  /* COMMENTS  */
  YYSYMBOL_COMMIT = 86,                    /* COMMIT  */
  YYSYMBOL_COMMITTED = 87,                 /* COMMITTED  */
  YYSYMBOL_COMPRESSION = 88,               /* COMPRESSION  */
  YYSYMBOL_CONCURRENTLY = 89,              /* CONCURRENTLY  */
  YYSYMBOL_CONFIGURATION = 90,             /* CONFIGURATION  */
  YYSYMBOL_CONFLICT = 91,                  /* CONFLICT  */
  YYSYMBOL_CONNECTION = 92,                /* CONNECTION  */
  YYSYMBOL_CONSTRAINT = 93,                /* CONSTRAINT  */
  YYSYMBOL_CONSTRAINTS = 94,               /* CONSTRAINTS  */
  YYSYMBOL_CONTENT_P = 95,                 /* CONTENT_P  */
  YYSYMBOL_CONTINUE_P = 96,                /* CONTINUE_P  */
  YYSYMBOL_CONVERSION_P = 97,              /* CONVERSION_P  */
  YYSYMBOL_COPY = 98,                      /* COPY  */
  YYSYMBOL_COST = 99,                      /* COST  */
  YYSYMBOL_CREATE_P = 100,                 /* CREATE_P  */
  YYSYMBOL_CROSS = 101,                    /* CROSS  */
  YYSYMBOL_CSV = 102,                      /* CSV  */
  YYSYMBOL_CUBE = 103,                     /* CUBE  */
  YYSYMBOL_CURRENT_P = 104,                /* CURRENT_P  */
  YYSYMBOL_CURSOR = 105,                   /* CURSOR  */
  YYSYMBOL_CYCLE = 106,                    /* CYCLE  */
  YYSYMBOL_DATA_P = 107,                   /* DATA_P  */
  YYSYMBOL_DATABASE = 108,                 /* DATABASE  */
  YYSYMBOL_DAY_P = 109,                    /* DAY_P  */
  YYSYMBOL_DAYS_P = 110,                   /* DAYS_P  */
  YYSYMBOL_DEALLOCATE = 111,               /* DEALLOCATE  */
  YYSYMBOL_DEC = 112,                      /* DEC  */
  YYSYMBOL_DECADE_P = 113,                 /* DECADE_P  */
  YYSYMBOL_DECADES_P = 114,                /* DECADES_P  */
  YYSYMBOL_DECIMAL_P = 115,                /* DECIMAL_P  */
  YYSYMBOL_DECLARE = 116,                  /* DECLARE  */
  YYSYMBOL_DEFAULT = 117,                  /* DEFAULT  */
  YYSYMBOL_DEFAULTS = 118,                 /* DEFAULTS  */
  YYSYMBOL_DEFERRABLE = 119,               /* DEFERRABLE  */
  YYSYMBOL_DEFERRED = 120,                 /* DEFERRED  */
  YYSYMBOL_DEFINER = 121,                  /* DEFINER  */
  YYSYMBOL_DELETE_P = 122,                 /* DELETE_P  */
  YYSYMBOL_DELIMITER = 123,                /* DELIMITER  */
  YYSYMBOL_DELIMITERS = 124,               /* DELIMITERS  */
  YYSYMBOL_DEPENDS = 125,                  /* DEPENDS  */
  YYSYMBOL_DESC_P = 126,                   /* DESC_P  */
  YYSYMBOL_DESCRIBE = 127,                 /* DESCRIBE  */
  YYSYMBOL_DETACH = 128,                   /* DETACH  */
  YYSYMBOL_DICTIONARY = 129,               /* DICTIONARY  */
  YYSYMBOL_DISABLE_P = 130,                /* DISABLE_P  */
  YYSYMBOL_DISCARD = 131,                  /* DISCARD  */
  YYSYMBOL_DISTINCT = 132,                 /* DISTINCT  */
  YYSYMBOL_DO = 133,                       /* DO  */
  YYSYMBOL_DOCUMENT_P = 134,               /* DOCUMENT_P  */
  YYSYMBOL_DOMAIN_P = 135,                 /* DOMAIN_P  */
  YYSYMBOL_DOUBLE_P = 136,                 /* DOUBLE_P  */
  YYSYMBOL_DROP = 137,                     /* DROP  */
  YYSYMBOL_EACH = 138,                     /* EACH  */
  YYSYMBOL_EDGES = 139,                    /* EDGES  */
  YYSYMBOL_ELSE = 140,                     /* ELSE  */
  YYSYMBOL_ENABLE_P = 141,                 /* ENABLE_P  */
  YYSYMBOL_ENCODING = 142,                 /* ENCODING  */
  YYSYMBOL_ENCRYPTED = 143,                /* ENCRYPTED  */
  YYSYMBOL_END_P = 144,                    /* END_P  */
  YYSYMBOL_ENUM_P = 145,                   /* ENUM_P  */
  YYSYMBOL_ESCAPE = 146,                   /* ESCAPE  */
  YYSYMBOL_EVENT = 147,                    /* EVENT  */
  YYSYMBOL_EXCEPT = 148,                   /* EXCEPT  */
  YYSYMBOL_EXCLUDE = 149,                  /* EXCLUDE  */
  YYSYMBOL_EXCLUDING = 150,                /* EXCLUDING  */
  YYSYMBOL_EXCLUSIVE = 151,                /* EXCLUSIVE  */
  YYSYMBOL_EXECUTE = 152,                  /* EXECUTE  */
  YYSYMBOL_EXISTS = 153,                   /* EXISTS  */
  YYSYMBOL_EXPLAIN = 154,                  /* EXPLAIN  */
  YYSYMBOL_EXPORT_P = 155,                 /* EXPORT_P  */
  YYSYMBOL_EXPORT_STATE = 156,             /* EXPORT_STATE  */
  YYSYMBOL_EXTENSION = 157,                /* EXTENSION  */
  YYSYMBOL_EXTENSIONS = 158,               /* EXTENSIONS  */
  YYSYMBOL_EXTERNAL = 159,                 /* EXTERNAL  */
  YYSYMBOL_EXTRACT = 160,                  /* EXTRACT  */
  YYSYMBOL_FALSE_P = 161,                  /* FALSE_P  */
  YYSYMBOL_FAMILY = 162,                   /* FAMILY  */
  YYSYMBOL_FEATURES = 163,                 /* FEATURES  */
  YYSYMBOL_FETCH = 164,                    /* FETCH  */
  YYSYMBOL_FILTER = 165,                   /* FILTER  */
  YYSYMBOL_FIRST_P = 166,                  /* FIRST_P  */
  YYSYMBOL_FLOAT_P = 167,                  /* FLOAT_P  */
  YYSYMBOL_FOLLOWING = 168,                /* FOLLOWING  */
  YYSYMBOL_FOR = 169,                      /* FOR  */
  YYSYMBOL_FORCE = 170,                    /* FORCE  */
  YYSYMBOL_FOREIGN = 171,                  /* FOREIGN  */
  YYSYMBOL_FORWARD = 172,                  /* FORWARD  */
  YYSYMBOL_FREEZE = 173,                   /* FREEZE  */
  YYSYMBOL_FROM = 174,                     /* FROM  */
  YYSYMBOL_FULL = 175,                     /* FULL  */
  YYSYMBOL_FUNCTION = 176,                 /* FUNCTION  */
  YYSYMBOL_FUNCTIONS = 177,                /* FUNCTIONS  */
  YYSYMBOL_GENERATED = 178,                /* GENERATED  */
  YYSYMBOL_GLOB = 179,                     /* GLOB  */
  YYSYMBOL_GLOBAL = 180,                   /* GLOBAL  */
  YYSYMBOL_GNN = 181,                      /* GNN  */
  YYSYMBOL_GRANT = 182,                    /* GRANT  */
  YYSYMBOL_GRANTED = 183,                  /* GRANTED  */
  YYSYMBOL_GROUP_P = 184,                  /* GROUP_P  */
  YYSYMBOL_GROUPING = 185,                 /* GROUPING  */
  YYSYMBOL_GROUPING_ID = 186,              /* GROUPING_ID  */
  YYSYMBOL_GROUPS = 187,                   /* GROUPS  */
  YYSYMBOL_HANDLER = 188,                  /* HANDLER  */
  YYSYMBOL_HAVING = 189,                   /* HAVING  */
  YYSYMBOL_HEADER_P = 190,                 /* HEADER_P  */
  YYSYMBOL_HOLD = 191,                     /* HOLD  */
  YYSYMBOL_HOUR_P = 192,                   /* HOUR_P  */
  YYSYMBOL_HOURS_P = 193,                  /* HOURS_P  */
  YYSYMBOL_IDENTITY_P = 194,               /* IDENTITY_P  */
  YYSYMBOL_IF_P = 195,                     /* IF_P  */
  YYSYMBOL_IGNORE_P = 196,                 /* IGNORE_P  */
  YYSYMBOL_ILIKE = 197,                    /* ILIKE  */
  YYSYMBOL_IMMEDIATE = 198,                /* IMMEDIATE  */
  YYSYMBOL_IMMUTABLE = 199,                /* IMMUTABLE  */
  YYSYMBOL_IMPLICIT_P = 200,               /* IMPLICIT_P  */
  YYSYMBOL_IMPORT_P = 201,                 /* IMPORT_P  */
  YYSYMBOL_IN_P = 202,                     /* IN_P  */
  YYSYMBOL_INCLUDE_P = 203,                /* INCLUDE_P  */
  YYSYMBOL_INCLUDING = 204,                /* INCLUDING  */
  YYSYMBOL_INCREMENT = 205,                /* INCREMENT  */
  YYSYMBOL_INDEX = 206,                    /* INDEX  */
  YYSYMBOL_INDEXES = 207,                  /* INDEXES  */
  YYSYMBOL_INHERIT = 208,                  /* INHERIT  */
  YYSYMBOL_INHERITS = 209,                 /* INHERITS  */
  YYSYMBOL_INITIALLY = 210,                /* INITIALLY  */
  YYSYMBOL_INLINE_P = 211,                 /* INLINE_P  */
  YYSYMBOL_INNER_P = 212,                  /* INNER_P  */
  YYSYMBOL_INOUT = 213,                    /* INOUT  */
  YYSYMBOL_INPUT_P = 214,                  /* INPUT_P  */
  YYSYMBOL_INSENSITIVE = 215,              /* INSENSITIVE  */
  YYSYMBOL_INSERT = 216,                   /* INSERT  */
  YYSYMBOL_INSTALL = 217,                  /* INSTALL  */
  YYSYMBOL_INSTEAD = 218,                  /* INSTEAD  */
  YYSYMBOL_INT_P = 219,                    /* INT_P  */
  YYSYMBOL_INTEGER = 220,                  /* INTEGER  */
  YYSYMBOL_INTERSECT = 221,                /* INTERSECT  */
  YYSYMBOL_INTERVAL = 222,                 /* INTERVAL  */
  YYSYMBOL_INTO = 223,                     /* INTO  */
  YYSYMBOL_INVOKER = 224,                  /* INVOKER  */
  YYSYMBOL_IS = 225,                       /* IS  */
  YYSYMBOL_ISNULL = 226,                   /* ISNULL  */
  YYSYMBOL_ISOLATION = 227,                /* ISOLATION  */
  YYSYMBOL_JOIN = 228,                     /* JOIN  */
  YYSYMBOL_JSON = 229,                     /* JSON  */
  YYSYMBOL_KEY = 230,                      /* KEY  */
  YYSYMBOL_LABEL = 231,                    /* LABEL  */
  YYSYMBOL_LANGUAGE = 232,                 /* LANGUAGE  */
  YYSYMBOL_LARGE_P = 233,                  /* LARGE_P  */
  YYSYMBOL_LAST_P = 234,                   /* LAST_P  */
  YYSYMBOL_LATERAL_P = 235,                /* LATERAL_P  */
  YYSYMBOL_LEADING = 236,                  /* LEADING  */
  YYSYMBOL_LEAKPROOF = 237,                /* LEAKPROOF  */
  YYSYMBOL_LEFT = 238,                     /* LEFT  */
  YYSYMBOL_LEVEL = 239,                    /* LEVEL  */
  YYSYMBOL_LIKE = 240,                     /* LIKE  */
  YYSYMBOL_LIMIT = 241,                    /* LIMIT  */
  YYSYMBOL_LISTEN = 242,                   /* LISTEN  */
  YYSYMBOL_LLM = 243,                      /* LLM  */
  YYSYMBOL_LLM_API = 244,                  /* LLM_API  */
  YYSYMBOL_LOAD = 245,                     /* LOAD  */
  YYSYMBOL_LOCAL = 246,                    /* LOCAL  */
  YYSYMBOL_LOCATION = 247,                 /* LOCATION  */
  YYSYMBOL_LOCK_P = 248,                   /* LOCK_P  */
  YYSYMBOL_LOCKED = 249,                   /* LOCKED  */
  YYSYMBOL_LOGGED = 250,                   /* LOGGED  */
  YYSYMBOL_MACRO = 251,                    /* MACRO  */
  YYSYMBOL_MAP = 252,                      /* MAP  */
  YYSYMBOL_MAPPING = 253,                  /* MAPPING  */
  YYSYMBOL_MATCH = 254,                    /* MATCH  */
  YYSYMBOL_MATERIALIZED = 255,             /* MATERIALIZED  */
  YYSYMBOL_MAXVALUE = 256,                 /* MAXVALUE  */
  YYSYMBOL_METHOD = 257,                   /* METHOD  */
  YYSYMBOL_MICROSECOND_P = 258,            /* MICROSECOND_P  */
  YYSYMBOL_MICROSECONDS_P = 259,           /* MICROSECONDS_P  */
  YYSYMBOL_MILLENNIA_P = 260,              /* MILLENNIA_P  */
  YYSYMBOL_MILLENNIUM_P = 261,             /* MILLENNIUM_P  */
  YYSYMBOL_MILLISECOND_P = 262,            /* MILLISECOND_P  */
  YYSYMBOL_MILLISECONDS_P = 263,           /* MILLISECONDS_P  */
  YYSYMBOL_MINUTE_P = 264,                 /* MINUTE_P  */
  YYSYMBOL_MINUTES_P = 265,                /* MINUTES_P  */
  YYSYMBOL_MINVALUE = 266,                 /* MINVALUE  */
  YYSYMBOL_MODE = 267,                     /* MODE  */
  YYSYMBOL_MODEL = 268,                    /* MODEL  */
  YYSYMBOL_MONTH_P = 269,                  /* MONTH_P  */
  YYSYMBOL_MONTHS_P = 270,                 /* MONTHS_P  */
  YYSYMBOL_MOVE = 271,                     /* MOVE  */
  YYSYMBOL_NAME_P = 272,                   /* NAME_P  */
  YYSYMBOL_NAMES = 273,                    /* NAMES  */
  YYSYMBOL_NATIONAL = 274,                 /* NATIONAL  */
  YYSYMBOL_NATURAL = 275,                  /* NATURAL  */
  YYSYMBOL_NCHAR = 276,                    /* NCHAR  */
  YYSYMBOL_NEW = 277,                      /* NEW  */
  YYSYMBOL_NEXT = 278,                     /* NEXT  */
  YYSYMBOL_NO = 279,                       /* NO  */
  YYSYMBOL_NODES = 280,                    /* NODES  */
  YYSYMBOL_NONE = 281,                     /* NONE  */
  YYSYMBOL_NOT = 282,                      /* NOT  */
  YYSYMBOL_NOTHING = 283,                  /* NOTHING  */
  YYSYMBOL_NOTIFY = 284,                   /* NOTIFY  */
  YYSYMBOL_NOTNULL = 285,                  /* NOTNULL  */
  YYSYMBOL_NOWAIT = 286,                   /* NOWAIT  */
  YYSYMBOL_NULL_P = 287,                   /* NULL_P  */
  YYSYMBOL_NULLIF = 288,                   /* NULLIF  */
  YYSYMBOL_NULLS_P = 289,                  /* NULLS_P  */
  YYSYMBOL_NUMERIC = 290,                  /* NUMERIC  */
  YYSYMBOL_OBJECT_P = 291,                 /* OBJECT_P  */
  YYSYMBOL_OF = 292,                       /* OF  */
  YYSYMBOL_OFF = 293,                      /* OFF  */
  YYSYMBOL_OFFSET = 294,                   /* OFFSET  */
  YYSYMBOL_OIDS = 295,                     /* OIDS  */
  YYSYMBOL_OLD = 296,                      /* OLD  */
  YYSYMBOL_ON = 297,                       /* ON  */
  YYSYMBOL_ONLY = 298,                     /* ONLY  */
  YYSYMBOL_OPERATOR = 299,                 /* OPERATOR  */
  YYSYMBOL_OPTION = 300,                   /* OPTION  */
  YYSYMBOL_OPTIONS = 301,                  /* OPTIONS  */
  YYSYMBOL_OR = 302,                       /* OR  */
  YYSYMBOL_ORDER = 303,                    /* ORDER  */
  YYSYMBOL_ORDINALITY = 304,               /* ORDINALITY  */
  YYSYMBOL_OTHERS = 305,                   /* OTHERS  */
  YYSYMBOL_OUT_P = 306,                    /* OUT_P  */
  YYSYMBOL_OUTER_P = 307,                  /* OUTER_P  */
  YYSYMBOL_OUTPUT = 308,                   /* OUTPUT  */
  YYSYMBOL_OVER = 309,                     /* OVER  */
  YYSYMBOL_OVERLAPS = 310,                 /* OVERLAPS  */
  YYSYMBOL_OVERLAY = 311,                  /* OVERLAY  */
  YYSYMBOL_OVERRIDING = 312,               /* OVERRIDING  */
  YYSYMBOL_OWNED = 313,                    /* OWNED  */
  YYSYMBOL_OWNER = 314,                    /* OWNER  */
  YYSYMBOL_PARALLEL = 315,                 /* PARALLEL  */
  YYSYMBOL_PARSER = 316,                   /* PARSER  */
  YYSYMBOL_PARTIAL = 317,                  /* PARTIAL  */
  YYSYMBOL_PARTITION = 318,                /* PARTITION  */
  YYSYMBOL_PASSING = 319,                  /* PASSING  */
  YYSYMBOL_PASSWORD = 320,                 /* PASSWORD  */
  YYSYMBOL_PATH = 321,                     /* PATH  */
  YYSYMBOL_PERCENT = 322,                  /* PERCENT  */
  YYSYMBOL_PERSISTENT = 323,               /* PERSISTENT  */
  YYSYMBOL_PIVOT = 324,                    /* PIVOT  */
  YYSYMBOL_PIVOT_LONGER = 325,             /* PIVOT_LONGER  */
  YYSYMBOL_PIVOT_WIDER = 326,              /* PIVOT_WIDER  */
  YYSYMBOL_PLACING = 327,                  /* PLACING  */
  YYSYMBOL_PLANS = 328,                    /* PLANS  */
  YYSYMBOL_POLICY = 329,                   /* POLICY  */
  YYSYMBOL_POSITION = 330,                 /* POSITION  */
  YYSYMBOL_POSITIONAL = 331,               /* POSITIONAL  */
  YYSYMBOL_PRAGMA_P = 332,                 /* PRAGMA_P  */
  YYSYMBOL_PRECEDING = 333,                /* PRECEDING  */
  YYSYMBOL_PRECISION = 334,                /* PRECISION  */
  YYSYMBOL_PREDICT = 335,                  /* PREDICT  */
  YYSYMBOL_PREPARE = 336,                  /* PREPARE  */
  YYSYMBOL_PREPARED = 337,                 /* PREPARED  */
  YYSYMBOL_PRESERVE = 338,                 /* PRESERVE  */
  YYSYMBOL_PRIMARY = 339,                  /* PRIMARY  */
  YYSYMBOL_PRIOR = 340,                    /* PRIOR  */
  YYSYMBOL_PRIVILEGES = 341,               /* PRIVILEGES  */
  YYSYMBOL_PROCEDURAL = 342,               /* PROCEDURAL  */
  YYSYMBOL_PROCEDURE = 343,                /* PROCEDURE  */
  YYSYMBOL_PROGRAM = 344,                  /* PROGRAM  */
  YYSYMBOL_PUBLICATION = 345,              /* PUBLICATION  */
  YYSYMBOL_QUALIFY = 346,                  /* QUALIFY  */
  YYSYMBOL_QUARTER_P = 347,                /* QUARTER_P  */
  YYSYMBOL_QUARTERS_P = 348,               /* QUARTERS_P  */
  YYSYMBOL_QUOTE = 349,                    /* QUOTE  */
  YYSYMBOL_RANGE = 350,                    /* RANGE  */
  YYSYMBOL_READ_P = 351,                   /* READ_P  */
  YYSYMBOL_REAL = 352,                     /* REAL  */
  YYSYMBOL_REASSIGN = 353,                 /* REASSIGN  */
  YYSYMBOL_RECHECK = 354,                  /* RECHECK  */
  YYSYMBOL_RECURSIVE = 355,                /* RECURSIVE  */
  YYSYMBOL_REF = 356,                      /* REF  */
  YYSYMBOL_REFERENCES = 357,               /* REFERENCES  */
  YYSYMBOL_REFERENCING = 358,              /* REFERENCING  */
  YYSYMBOL_REFRESH = 359,                  /* REFRESH  */
  YYSYMBOL_REINDEX = 360,                  /* REINDEX  */
  YYSYMBOL_RELATIVE_P = 361,               /* RELATIVE_P  */
  YYSYMBOL_RELEASE = 362,                  /* RELEASE  */
  YYSYMBOL_RENAME = 363,                   /* RENAME  */
  YYSYMBOL_REPEATABLE = 364,               /* REPEATABLE  */
  YYSYMBOL_REPLACE = 365,                  /* REPLACE  */
  YYSYMBOL_REPLICA = 366,                  /* REPLICA  */
  YYSYMBOL_RESET = 367,                    /* RESET  */
  YYSYMBOL_RESPECT_P = 368,                /* RESPECT_P  */
  YYSYMBOL_RESTART = 369,                  /* RESTART  */
  YYSYMBOL_RESTRICT = 370,                 /* RESTRICT  */
  YYSYMBOL_RETURNING = 371,                /* RETURNING  */
  YYSYMBOL_RETURNS = 372,                  /* RETURNS  */
  YYSYMBOL_REVOKE = 373,                   /* REVOKE  */
  YYSYMBOL_RIGHT = 374,                    /* RIGHT  */
  YYSYMBOL_ROLE = 375,                     /* ROLE  */
  YYSYMBOL_ROLLBACK = 376,                 /* ROLLBACK  */
  YYSYMBOL_ROLLUP = 377,                   /* ROLLUP  */
  YYSYMBOL_ROW = 378,                      /* ROW  */
  YYSYMBOL_ROWS = 379,                     /* ROWS  */
  YYSYMBOL_RULE = 380,                     /* RULE  */
  YYSYMBOL_SAMPLE = 381,                   /* SAMPLE  */
  YYSYMBOL_SAVEPOINT = 382,                /* SAVEPOINT  */
  YYSYMBOL_SCHEMA = 383,                   /* SCHEMA  */
  YYSYMBOL_SCHEMAS = 384,                  /* SCHEMAS  */
  YYSYMBOL_SCOPE = 385,                    /* SCOPE  */
  YYSYMBOL_SCROLL = 386,                   /* SCROLL  */
  YYSYMBOL_SEARCH = 387,                   /* SEARCH  */
  YYSYMBOL_SECOND_P = 388,                 /* SECOND_P  */
  YYSYMBOL_SECONDS_P = 389,                /* SECONDS_P  */
  YYSYMBOL_SECRET = 390,                   /* SECRET  */
  YYSYMBOL_SECURITY = 391,                 /* SECURITY  */
  YYSYMBOL_SELECT = 392,                   /* SELECT  */
  YYSYMBOL_SEMI = 393,                     /* SEMI  */
  YYSYMBOL_SEQUENCE = 394,                 /* SEQUENCE  */
  YYSYMBOL_SEQUENCES = 395,                /* SEQUENCES  */
  YYSYMBOL_SERIALIZABLE = 396,             /* SERIALIZABLE  */
  YYSYMBOL_SERVER = 397,                   /* SERVER  */
  YYSYMBOL_SESSION = 398,                  /* SESSION  */
  YYSYMBOL_SET = 399,                      /* SET  */
  YYSYMBOL_SETOF = 400,                    /* SETOF  */
  YYSYMBOL_SETS = 401,                     /* SETS  */
  YYSYMBOL_SHARE = 402,                    /* SHARE  */
  YYSYMBOL_SHOW = 403,                     /* SHOW  */
  YYSYMBOL_SIMILAR = 404,                  /* SIMILAR  */
  YYSYMBOL_SIMPLE = 405,                   /* SIMPLE  */
  YYSYMBOL_SKIP = 406,                     /* SKIP  */
  YYSYMBOL_SMALLINT = 407,                 /* SMALLINT  */
  YYSYMBOL_SNAPSHOT = 408,                 /* SNAPSHOT  */
  YYSYMBOL_SOME = 409,                     /* SOME  */
  YYSYMBOL_SQL_P = 410,                    /* SQL_P  */
  YYSYMBOL_STABLE = 411,                   /* STABLE  */
  YYSYMBOL_STANDALONE_P = 412,             /* STANDALONE_P  */
  YYSYMBOL_START = 413,                    /* START  */
  YYSYMBOL_STATEMENT = 414,                /* STATEMENT  */
  YYSYMBOL_STATISTICS = 415,               /* STATISTICS  */
  YYSYMBOL_STDIN = 416,                    /* STDIN  */
  YYSYMBOL_STDOUT = 417,                   /* STDOUT  */
  YYSYMBOL_STORAGE = 418,                  /* STORAGE  */
  YYSYMBOL_STORED = 419,                   /* STORED  */
  YYSYMBOL_STRICT_P = 420,                 /* STRICT_P  */
  YYSYMBOL_STRIP_P = 421,                  /* STRIP_P  */
  YYSYMBOL_STRUCT = 422,                   /* STRUCT  */
  YYSYMBOL_SUBSCRIPTION = 423,             /* SUBSCRIPTION  */
  YYSYMBOL_SUBSTRING = 424,                /* SUBSTRING  */
  YYSYMBOL_SUMMARIZE = 425,                /* SUMMARIZE  */
  YYSYMBOL_SYMMETRIC = 426,                /* SYMMETRIC  */
  YYSYMBOL_SYSID = 427,                    /* SYSID  */
  YYSYMBOL_SYSTEM_P = 428,                 /* SYSTEM_P  */
  YYSYMBOL_TABLE = 429,                    /* TABLE  */
  YYSYMBOL_TABLES = 430,                   /* TABLES  */
  YYSYMBOL_TABLESAMPLE = 431,              /* TABLESAMPLE  */
  YYSYMBOL_TABLESPACE = 432,               /* TABLESPACE  */
  YYSYMBOL_TABULAR = 433,                  /* TABULAR  */
  YYSYMBOL_TAKES = 434,                    /* TAKES  */
  YYSYMBOL_TEMP = 435,                     /* TEMP  */
  YYSYMBOL_TEMPLATE = 436,                 /* TEMPLATE  */
  YYSYMBOL_TEMPORARY = 437,                /* TEMPORARY  */
  YYSYMBOL_TEXT_P = 438,                   /* TEXT_P  */
  YYSYMBOL_THEN = 439,                     /* THEN  */
  YYSYMBOL_TIES = 440,                     /* TIES  */
  YYSYMBOL_TIME = 441,                     /* TIME  */
  YYSYMBOL_TIMESTAMP = 442,                /* TIMESTAMP  */
  YYSYMBOL_TO = 443,                       /* TO  */
  YYSYMBOL_TRAILING = 444,                 /* TRAILING  */
  YYSYMBOL_TRANSACTION = 445,              /* TRANSACTION  */
  YYSYMBOL_TRANSFORM = 446,                /* TRANSFORM  */
  YYSYMBOL_TREAT = 447,                    /* TREAT  */
  YYSYMBOL_TRIGGER = 448,                  /* TRIGGER  */
  YYSYMBOL_TRIM = 449,                     /* TRIM  */
  YYSYMBOL_TRUE_P = 450,                   /* TRUE_P  */
  YYSYMBOL_TRUNCATE = 451,                 /* TRUNCATE  */
  YYSYMBOL_TRUSTED = 452,                  /* TRUSTED  */
  YYSYMBOL_TRY_CAST = 453,                 /* TRY_CAST  */
  YYSYMBOL_TYPE_P = 454,                   /* TYPE_P  */
  YYSYMBOL_TYPES_P = 455,                  /* TYPES_P  */
  YYSYMBOL_UNBOUNDED = 456,                /* UNBOUNDED  */
  YYSYMBOL_UNCOMMITTED = 457,              /* UNCOMMITTED  */
  YYSYMBOL_UNENCRYPTED = 458,              /* UNENCRYPTED  */
  YYSYMBOL_UNION = 459,                    /* UNION  */
  YYSYMBOL_UNIQUE = 460,                   /* UNIQUE  */
  YYSYMBOL_UNKNOWN = 461,                  /* UNKNOWN  */
  YYSYMBOL_UNLISTEN = 462,                 /* UNLISTEN  */
  YYSYMBOL_UNLOGGED = 463,                 /* UNLOGGED  */
  YYSYMBOL_UNPIVOT = 464,                  /* UNPIVOT  */
  YYSYMBOL_UNTIL = 465,                    /* UNTIL  */
  YYSYMBOL_UPDATE = 466,                   /* UPDATE  */
  YYSYMBOL_USE_P = 467,                    /* USE_P  */
  YYSYMBOL_USER = 468,                     /* USER  */
  YYSYMBOL_USING = 469,                    /* USING  */
  YYSYMBOL_VACUUM = 470,                   /* VACUUM  */
  YYSYMBOL_VALID = 471,                    /* VALID  */
  YYSYMBOL_VALIDATE = 472,                 /* VALIDATE  */
  YYSYMBOL_VALIDATOR = 473,                /* VALIDATOR  */
  YYSYMBOL_VALUE_P = 474,                  /* VALUE_P  */
  YYSYMBOL_VALUES = 475,                   /* VALUES  */
  YYSYMBOL_VARCHAR = 476,                  /* VARCHAR  */
  YYSYMBOL_VARIABLE_P = 477,               /* VARIABLE_P  */
  YYSYMBOL_VARIADIC = 478,                 /* VARIADIC  */
  YYSYMBOL_VARYING = 479,                  /* VARYING  */
  YYSYMBOL_VERBOSE = 480,                  /* VERBOSE  */
  YYSYMBOL_VERSION_P = 481,                /* VERSION_P  */
  YYSYMBOL_VIEW = 482,                     /* VIEW  */
  YYSYMBOL_VIEWS = 483,                    /* VIEWS  */
  YYSYMBOL_VIRTUAL = 484,                  /* VIRTUAL  */
  YYSYMBOL_VOLATILE = 485,                 /* VOLATILE  */
  YYSYMBOL_WEEK_P = 486,                   /* WEEK_P  */
  YYSYMBOL_WEEKS_P = 487,                  /* WEEKS_P  */
  YYSYMBOL_WHEN = 488,                     /* WHEN  */
  YYSYMBOL_WHERE = 489,                    /* WHERE  */
  YYSYMBOL_WHITESPACE_P = 490,             /* WHITESPACE_P  */
  YYSYMBOL_WINDOW = 491,                   /* WINDOW  */
  YYSYMBOL_WITH = 492,                     /* WITH  */
  YYSYMBOL_WITHIN = 493,                   /* WITHIN  */
  YYSYMBOL_WITHOUT = 494,                  /* WITHOUT  */
  YYSYMBOL_WORK = 495,                     /* WORK  */
  YYSYMBOL_WRAPPER = 496,                  /* WRAPPER  */
  YYSYMBOL_WRITE_P = 497,                  /* WRITE_P  */
  YYSYMBOL_XML_P = 498,                    /* XML_P  */
  YYSYMBOL_XMLATTRIBUTES = 499,            /* XMLATTRIBUTES  */
  YYSYMBOL_XMLCONCAT = 500,                /* XMLCONCAT  */
  YYSYMBOL_XMLELEMENT = 501,               /* XMLELEMENT  */
  YYSYMBOL_XMLEXISTS = 502,                /* XMLEXISTS  */
  YYSYMBOL_XMLFOREST = 503,                /* XMLFOREST  */
  YYSYMBOL_XMLNAMESPACES = 504,            /* XMLNAMESPACES  */
  YYSYMBOL_XMLPARSE = 505,                 /* XMLPARSE  */
  YYSYMBOL_XMLPI = 506,                    /* XMLPI  */
  YYSYMBOL_XMLROOT = 507,                  /* XMLROOT  */
  YYSYMBOL_XMLSERIALIZE = 508,             /* XMLSERIALIZE  */
  YYSYMBOL_XMLTABLE = 509,                 /* XMLTABLE  */
  YYSYMBOL_YEAR_P = 510,                   /* YEAR_P  */
  YYSYMBOL_YEARS_P = 511,                  /* YEARS_P  */
  YYSYMBOL_YES_P = 512,                    /* YES_P  */
  YYSYMBOL_ZONE = 513,                     /* ZONE  */
  YYSYMBOL_NOT_LA = 514,                   /* NOT_LA  */
  YYSYMBOL_NULLS_LA = 515,                 /* NULLS_LA  */
  YYSYMBOL_WITH_LA = 516,                  /* WITH_LA  */
  YYSYMBOL_517_ = 517,                     /* '<'  */
  YYSYMBOL_518_ = 518,                     /* '>'  */
  YYSYMBOL_519_ = 519,                     /* '='  */
  YYSYMBOL_POSTFIXOP = 520,                /* POSTFIXOP  */
  YYSYMBOL_521_ = 521,                     /* '+'  */
  YYSYMBOL_522_ = 522,                     /* '-'  */
  YYSYMBOL_523_ = 523,                     /* '*'  */
  YYSYMBOL_524_ = 524,                     /* '/'  */
  YYSYMBOL_525_ = 525,                     /* '%'  */
  YYSYMBOL_526_ = 526,                     /* '^'  */
  YYSYMBOL_UMINUS = 527,                   /* UMINUS  */
  YYSYMBOL_528_ = 528,                     /* '['  */
  YYSYMBOL_529_ = 529,                     /* ']'  */
  YYSYMBOL_530_ = 530,                     /* '('  */
  YYSYMBOL_531_ = 531,                     /* ')'  */
  YYSYMBOL_532_ = 532,                     /* '.'  */
  YYSYMBOL_533_ = 533,                     /* ';'  */
  YYSYMBOL_534_ = 534,                     /* '{'  */
  YYSYMBOL_535_ = 535,                     /* '}'  */
  YYSYMBOL_536_ = 536,                     /* ','  */
  YYSYMBOL_537_ = 537,                     /* '?'  */
  YYSYMBOL_538_ = 538,                     /* '#'  */
  YYSYMBOL_539_ = 539,                     /* '$'  */
  YYSYMBOL_540_ = 540,                     /* ':'  */
  YYSYMBOL_YYACCEPT = 541,                 /* $accept  */
  YYSYMBOL_stmtblock = 542,                /* stmtblock  */
  YYSYMBOL_stmtmulti = 543,                /* stmtmulti  */
  YYSYMBOL_stmt = 544,                     /* stmt  */
  YYSYMBOL_AlterObjectSchemaStmt = 545,    /* AlterObjectSchemaStmt  */
  YYSYMBOL_AlterSeqStmt = 546,             /* AlterSeqStmt  */
  YYSYMBOL_SeqOptList = 547,               /* SeqOptList  */
  YYSYMBOL_opt_with = 548,                 /* opt_with  */
  YYSYMBOL_NumericOnly = 549,              /* NumericOnly  */
  YYSYMBOL_SeqOptElem = 550,               /* SeqOptElem  */
  YYSYMBOL_opt_by = 551,                   /* opt_by  */
  YYSYMBOL_SignedIconst = 552,             /* SignedIconst  */
  YYSYMBOL_AlterTableStmt = 553,           /* AlterTableStmt  */
  YYSYMBOL_alter_identity_column_option_list = 554, /* alter_identity_column_option_list  */
  YYSYMBOL_alter_column_default = 555,     /* alter_column_default  */
  YYSYMBOL_alter_identity_column_option = 556, /* alter_identity_column_option  */
  YYSYMBOL_alter_generic_option_list = 557, /* alter_generic_option_list  */
  YYSYMBOL_alter_table_cmd = 558,          /* alter_table_cmd  */
  YYSYMBOL_alter_using = 559,              /* alter_using  */
  YYSYMBOL_alter_generic_option_elem = 560, /* alter_generic_option_elem  */
  YYSYMBOL_alter_table_cmds = 561,         /* alter_table_cmds  */
  YYSYMBOL_alter_generic_options = 562,    /* alter_generic_options  */
  YYSYMBOL_opt_set_data = 563,             /* opt_set_data  */
  YYSYMBOL_AnalyzeStmt = 564,              /* AnalyzeStmt  */
  YYSYMBOL_AttachStmt = 565,               /* AttachStmt  */
  YYSYMBOL_DetachStmt = 566,               /* DetachStmt  */
  YYSYMBOL_opt_database = 567,             /* opt_database  */
  YYSYMBOL_opt_database_alias = 568,       /* opt_database_alias  */
  YYSYMBOL_CallStmt = 569,                 /* CallStmt  */
  YYSYMBOL_CheckPointStmt = 570,           /* CheckPointStmt  */
  YYSYMBOL_opt_col_id = 571,               /* opt_col_id  */
  YYSYMBOL_CommentOnStmt = 572,            /* CommentOnStmt  */
  YYSYMBOL_comment_value = 573,            /* comment_value  */
  YYSYMBOL_comment_on_type_any_name = 574, /* comment_on_type_any_name  */
  YYSYMBOL_qualified_name = 575,           /* qualified_name  */
  YYSYMBOL_ColId = 576,                    /* ColId  */
  YYSYMBOL_ColIdOrString = 577,            /* ColIdOrString  */
  YYSYMBOL_Sconst = 578,                   /* Sconst  */
  YYSYMBOL_indirection = 579,              /* indirection  */
  YYSYMBOL_indirection_el = 580,           /* indirection_el  */
  YYSYMBOL_attr_name = 581,                /* attr_name  */
  YYSYMBOL_ColLabel = 582,                 /* ColLabel  */
  YYSYMBOL_CopyStmt = 583,                 /* CopyStmt  */
  YYSYMBOL_copy_database_flag = 584,       /* copy_database_flag  */
  YYSYMBOL_copy_from = 585,                /* copy_from  */
  YYSYMBOL_copy_delimiter = 586,           /* copy_delimiter  */
  YYSYMBOL_copy_generic_opt_arg_list = 587, /* copy_generic_opt_arg_list  */
  YYSYMBOL_opt_using = 588,                /* opt_using  */
  YYSYMBOL_opt_as = 589,                   /* opt_as  */
  YYSYMBOL_opt_program = 590,              /* opt_program  */
  YYSYMBOL_copy_options = 591,             /* copy_options  */
  YYSYMBOL_copy_generic_opt_arg = 592,     /* copy_generic_opt_arg  */
  YYSYMBOL_copy_generic_opt_elem = 593,    /* copy_generic_opt_elem  */
  YYSYMBOL_opt_oids = 594,                 /* opt_oids  */
  YYSYMBOL_copy_opt_list = 595,            /* copy_opt_list  */
  YYSYMBOL_opt_binary = 596,               /* opt_binary  */
  YYSYMBOL_copy_opt_item = 597,            /* copy_opt_item  */
  YYSYMBOL_copy_generic_opt_arg_list_item = 598, /* copy_generic_opt_arg_list_item  */
  YYSYMBOL_copy_file_name = 599,           /* copy_file_name  */
  YYSYMBOL_copy_generic_opt_list = 600,    /* copy_generic_opt_list  */
  YYSYMBOL_CreateStmt = 601,               /* CreateStmt  */
  YYSYMBOL_ConstraintAttributeSpec = 602,  /* ConstraintAttributeSpec  */
  YYSYMBOL_def_arg = 603,                  /* def_arg  */
  YYSYMBOL_OptParenthesizedSeqOptList = 604, /* OptParenthesizedSeqOptList  */
  YYSYMBOL_generic_option_arg = 605,       /* generic_option_arg  */
  YYSYMBOL_key_action = 606,               /* key_action  */
  YYSYMBOL_ColConstraint = 607,            /* ColConstraint  */
  YYSYMBOL_ColConstraintElem = 608,        /* ColConstraintElem  */
  YYSYMBOL_GeneratedColumnType = 609,      /* GeneratedColumnType  */
  YYSYMBOL_opt_GeneratedColumnType = 610,  /* opt_GeneratedColumnType  */
  YYSYMBOL_GeneratedConstraintElem = 611,  /* GeneratedConstraintElem  */
  YYSYMBOL_generic_option_elem = 612,      /* generic_option_elem  */
  YYSYMBOL_key_update = 613,               /* key_update  */
  YYSYMBOL_key_actions = 614,              /* key_actions  */
  YYSYMBOL_OnCommitOption = 615,           /* OnCommitOption  */
  YYSYMBOL_reloptions = 616,               /* reloptions  */
  YYSYMBOL_opt_no_inherit = 617,           /* opt_no_inherit  */
  YYSYMBOL_TableConstraint = 618,          /* TableConstraint  */
  YYSYMBOL_TableLikeOption = 619,          /* TableLikeOption  */
  YYSYMBOL_reloption_list = 620,           /* reloption_list  */
  YYSYMBOL_ExistingIndex = 621,            /* ExistingIndex  */
  YYSYMBOL_ConstraintAttr = 622,           /* ConstraintAttr  */
  YYSYMBOL_OptWith = 623,                  /* OptWith  */
  YYSYMBOL_definition = 624,               /* definition  */
  YYSYMBOL_TableLikeOptionList = 625,      /* TableLikeOptionList  */
  YYSYMBOL_generic_option_name = 626,      /* generic_option_name  */
  YYSYMBOL_ConstraintAttributeElem = 627,  /* ConstraintAttributeElem  */
  YYSYMBOL_columnDef = 628,                /* columnDef  */
  YYSYMBOL_def_list = 629,                 /* def_list  */
  YYSYMBOL_index_name = 630,               /* index_name  */
  YYSYMBOL_TableElement = 631,             /* TableElement  */
  YYSYMBOL_def_elem = 632,                 /* def_elem  */
  YYSYMBOL_opt_definition = 633,           /* opt_definition  */
  YYSYMBOL_OptTableElementList = 634,      /* OptTableElementList  */
  YYSYMBOL_columnElem = 635,               /* columnElem  */
  YYSYMBOL_opt_column_list = 636,          /* opt_column_list  */
  YYSYMBOL_ColQualList = 637,              /* ColQualList  */
  YYSYMBOL_key_delete = 638,               /* key_delete  */
  YYSYMBOL_reloption_elem = 639,           /* reloption_elem  */
  YYSYMBOL_columnList = 640,               /* columnList  */
  YYSYMBOL_columnList_opt_comma = 641,     /* columnList_opt_comma  */
  YYSYMBOL_func_type = 642,                /* func_type  */
  YYSYMBOL_ConstraintElem = 643,           /* ConstraintElem  */
  YYSYMBOL_TableElementList = 644,         /* TableElementList  */
  YYSYMBOL_key_match = 645,                /* key_match  */
  YYSYMBOL_TableLikeClause = 646,          /* TableLikeClause  */
  YYSYMBOL_OptTemp = 647,                  /* OptTemp  */
  YYSYMBOL_generated_when = 648,           /* generated_when  */
  YYSYMBOL_CreateAsStmt = 649,             /* CreateAsStmt  */
  YYSYMBOL_opt_with_data = 650,            /* opt_with_data  */
  YYSYMBOL_create_as_target = 651,         /* create_as_target  */
  YYSYMBOL_CreateFunctionStmt = 652,       /* CreateFunctionStmt  */
  YYSYMBOL_table_macro_definition = 653,   /* table_macro_definition  */
  YYSYMBOL_table_macro_definition_parens = 654, /* table_macro_definition_parens  */
  YYSYMBOL_table_macro_list_internal = 655, /* table_macro_list_internal  */
  YYSYMBOL_table_macro_list = 656,         /* table_macro_list  */
  YYSYMBOL_macro_definition = 657,         /* macro_definition  */
  YYSYMBOL_macro_definition_list = 658,    /* macro_definition_list  */
  YYSYMBOL_macro_alias = 659,              /* macro_alias  */
  YYSYMBOL_param_list = 660,               /* param_list  */
  YYSYMBOL_CreateModelStmt = 661,          /* CreateModelStmt  */
  YYSYMBOL_model_type_value = 662,         /* model_type_value  */
  YYSYMBOL_model_on = 663,                 /* model_on  */
  YYSYMBOL_opt_feat_col_list = 664,        /* opt_feat_col_list  */
  YYSYMBOL_feat_col_list = 665,            /* feat_col_list  */
  YYSYMBOL_with_result_col_list = 666,     /* with_result_col_list  */
  YYSYMBOL_result_col_list = 667,          /* result_col_list  */
  YYSYMBOL_opt_option = 668,               /* opt_option  */
  YYSYMBOL_CreateSchemaStmt = 669,         /* CreateSchemaStmt  */
  YYSYMBOL_OptSchemaEltList = 670,         /* OptSchemaEltList  */
  YYSYMBOL_schema_stmt = 671,              /* schema_stmt  */
  YYSYMBOL_CreateSecretStmt = 672,         /* CreateSecretStmt  */
  YYSYMBOL_opt_secret_name = 673,          /* opt_secret_name  */
  YYSYMBOL_opt_persist = 674,              /* opt_persist  */
  YYSYMBOL_opt_storage_specifier = 675,    /* opt_storage_specifier  */
  YYSYMBOL_CreateSeqStmt = 676,            /* CreateSeqStmt  */
  YYSYMBOL_OptSeqOptList = 677,            /* OptSeqOptList  */
  YYSYMBOL_CreateTypeStmt = 678,           /* CreateTypeStmt  */
  YYSYMBOL_opt_enum_val_list = 679,        /* opt_enum_val_list  */
  YYSYMBOL_enum_val_list = 680,            /* enum_val_list  */
  YYSYMBOL_DeallocateStmt = 681,           /* DeallocateStmt  */
  YYSYMBOL_DeleteStmt = 682,               /* DeleteStmt  */
  YYSYMBOL_relation_expr_opt_alias = 683,  /* relation_expr_opt_alias  */
  YYSYMBOL_where_or_current_clause = 684,  /* where_or_current_clause  */
  YYSYMBOL_using_clause = 685,             /* using_clause  */
  YYSYMBOL_unreserved_keyword = 686,       /* unreserved_keyword  */
  YYSYMBOL_col_name_keyword = 687,         /* col_name_keyword  */
  YYSYMBOL_func_name_keyword = 688,        /* func_name_keyword  */
  YYSYMBOL_type_name_keyword = 689,        /* type_name_keyword  */
  YYSYMBOL_other_keyword = 690,            /* other_keyword  */
  YYSYMBOL_type_func_name_keyword = 691,   /* type_func_name_keyword  */
  YYSYMBOL_reserved_keyword = 692,         /* reserved_keyword  */
  YYSYMBOL_DropStmt = 693,                 /* DropStmt  */
  YYSYMBOL_drop_type_any_name = 694,       /* drop_type_any_name  */
  YYSYMBOL_drop_type_name = 695,           /* drop_type_name  */
  YYSYMBOL_any_name_list = 696,            /* any_name_list  */
  YYSYMBOL_opt_drop_behavior = 697,        /* opt_drop_behavior  */
  YYSYMBOL_drop_type_name_on_any_name = 698, /* drop_type_name_on_any_name  */
  YYSYMBOL_DropSecretStmt = 699,           /* DropSecretStmt  */
  YYSYMBOL_opt_storage_drop_specifier = 700, /* opt_storage_drop_specifier  */
  YYSYMBOL_ExecuteStmt = 701,              /* ExecuteStmt  */
  YYSYMBOL_execute_param_expr = 702,       /* execute_param_expr  */
  YYSYMBOL_execute_param_list = 703,       /* execute_param_list  */
  YYSYMBOL_execute_param_clause = 704,     /* execute_param_clause  */
  YYSYMBOL_ExplainStmt = 705,              /* ExplainStmt  */
  YYSYMBOL_opt_verbose = 706,              /* opt_verbose  */
  YYSYMBOL_explain_option_arg = 707,       /* explain_option_arg  */
  YYSYMBOL_ExplainableStmt = 708,          /* ExplainableStmt  */
  YYSYMBOL_NonReservedWord = 709,          /* NonReservedWord  */
  YYSYMBOL_NonReservedWord_or_Sconst = 710, /* NonReservedWord_or_Sconst  */
  YYSYMBOL_explain_option_list = 711,      /* explain_option_list  */
  YYSYMBOL_analyze_keyword = 712,          /* analyze_keyword  */
  YYSYMBOL_opt_boolean_or_string = 713,    /* opt_boolean_or_string  */
  YYSYMBOL_explain_option_elem = 714,      /* explain_option_elem  */
  YYSYMBOL_explain_option_name = 715,      /* explain_option_name  */
  YYSYMBOL_ExportStmt = 716,               /* ExportStmt  */
  YYSYMBOL_ImportStmt = 717,               /* ImportStmt  */
  YYSYMBOL_IndexStmt = 718,                /* IndexStmt  */
  YYSYMBOL_access_method = 719,            /* access_method  */
  YYSYMBOL_access_method_clause = 720,     /* access_method_clause  */
  YYSYMBOL_opt_concurrently = 721,         /* opt_concurrently  */
  YYSYMBOL_opt_index_name = 722,           /* opt_index_name  */
  YYSYMBOL_opt_reloptions = 723,           /* opt_reloptions  */
  YYSYMBOL_opt_unique = 724,               /* opt_unique  */
  YYSYMBOL_InsertStmt = 725,               /* InsertStmt  */
  YYSYMBOL_insert_rest = 726,              /* insert_rest  */
  YYSYMBOL_insert_target = 727,            /* insert_target  */
  YYSYMBOL_opt_by_name_or_position = 728,  /* opt_by_name_or_position  */
  YYSYMBOL_opt_conf_expr = 729,            /* opt_conf_expr  */
  YYSYMBOL_opt_with_clause = 730,          /* opt_with_clause  */
  YYSYMBOL_insert_column_item = 731,       /* insert_column_item  */
  YYSYMBOL_set_clause = 732,               /* set_clause  */
  YYSYMBOL_opt_or_action = 733,            /* opt_or_action  */
  YYSYMBOL_opt_on_conflict = 734,          /* opt_on_conflict  */
  YYSYMBOL_index_elem = 735,               /* index_elem  */
  YYSYMBOL_returning_clause = 736,         /* returning_clause  */
  YYSYMBOL_override_kind = 737,            /* override_kind  */
  YYSYMBOL_set_target_list = 738,          /* set_target_list  */
  YYSYMBOL_opt_collate = 739,              /* opt_collate  */
  YYSYMBOL_opt_class = 740,                /* opt_class  */
  YYSYMBOL_insert_column_list = 741,       /* insert_column_list  */
  YYSYMBOL_set_clause_list = 742,          /* set_clause_list  */
  YYSYMBOL_set_clause_list_opt_comma = 743, /* set_clause_list_opt_comma  */
  YYSYMBOL_index_params = 744,             /* index_params  */
  YYSYMBOL_set_target = 745,               /* set_target  */
  YYSYMBOL_LoadStmt = 746,                 /* LoadStmt  */
  YYSYMBOL_opt_force = 747,                /* opt_force  */
  YYSYMBOL_file_name = 748,                /* file_name  */
  YYSYMBOL_opt_ext_version = 749,          /* opt_ext_version  */
  YYSYMBOL_PragmaStmt = 750,               /* PragmaStmt  */
  YYSYMBOL_PrepareStmt = 751,              /* PrepareStmt  */
  YYSYMBOL_prep_type_clause = 752,         /* prep_type_clause  */
  YYSYMBOL_PreparableStmt = 753,           /* PreparableStmt  */
  YYSYMBOL_RenameStmt = 754,               /* RenameStmt  */
  YYSYMBOL_opt_column = 755,               /* opt_column  */
  YYSYMBOL_SelectStmt = 756,               /* SelectStmt  */
  YYSYMBOL_select_with_parens = 757,       /* select_with_parens  */
  YYSYMBOL_select_no_parens = 758,         /* select_no_parens  */
  YYSYMBOL_select_clause = 759,            /* select_clause  */
  YYSYMBOL_opt_select = 760,               /* opt_select  */
  YYSYMBOL_simple_select = 761,            /* simple_select  */
  YYSYMBOL_value_or_values = 762,          /* value_or_values  */
  YYSYMBOL_pivot_keyword = 763,            /* pivot_keyword  */
  YYSYMBOL_unpivot_keyword = 764,          /* unpivot_keyword  */
  YYSYMBOL_pivot_column_entry = 765,       /* pivot_column_entry  */
  YYSYMBOL_pivot_column_list_internal = 766, /* pivot_column_list_internal  */
  YYSYMBOL_pivot_column_list = 767,        /* pivot_column_list  */
  YYSYMBOL_with_clause = 768,              /* with_clause  */
  YYSYMBOL_cte_list = 769,                 /* cte_list  */
  YYSYMBOL_common_table_expr = 770,        /* common_table_expr  */
  YYSYMBOL_opt_materialized = 771,         /* opt_materialized  */
  YYSYMBOL_into_clause = 772,              /* into_clause  */
  YYSYMBOL_OptTempTableName = 773,         /* OptTempTableName  */
  YYSYMBOL_opt_table = 774,                /* opt_table  */
  YYSYMBOL_all_or_distinct = 775,          /* all_or_distinct  */
  YYSYMBOL_by_name = 776,                  /* by_name  */
  YYSYMBOL_distinct_clause = 777,          /* distinct_clause  */
  YYSYMBOL_opt_all_clause = 778,           /* opt_all_clause  */
  YYSYMBOL_opt_ignore_nulls = 779,         /* opt_ignore_nulls  */
  YYSYMBOL_opt_sort_clause = 780,          /* opt_sort_clause  */
  YYSYMBOL_sort_clause = 781,              /* sort_clause  */
  YYSYMBOL_sortby_list = 782,              /* sortby_list  */
  YYSYMBOL_sortby = 783,                   /* sortby  */
  YYSYMBOL_opt_asc_desc = 784,             /* opt_asc_desc  */
  YYSYMBOL_opt_nulls_order = 785,          /* opt_nulls_order  */
  YYSYMBOL_select_limit = 786,             /* select_limit  */
  YYSYMBOL_opt_select_limit = 787,         /* opt_select_limit  */
  YYSYMBOL_limit_clause = 788,             /* limit_clause  */
  YYSYMBOL_offset_clause = 789,            /* offset_clause  */
  YYSYMBOL_sample_count = 790,             /* sample_count  */
  YYSYMBOL_sample_clause = 791,            /* sample_clause  */
  YYSYMBOL_opt_sample_func = 792,          /* opt_sample_func  */
  YYSYMBOL_tablesample_entry = 793,        /* tablesample_entry  */
  YYSYMBOL_tablesample_clause = 794,       /* tablesample_clause  */
  YYSYMBOL_opt_tablesample_clause = 795,   /* opt_tablesample_clause  */
  YYSYMBOL_opt_repeatable_clause = 796,    /* opt_repeatable_clause  */
  YYSYMBOL_select_limit_value = 797,       /* select_limit_value  */
  YYSYMBOL_select_offset_value = 798,      /* select_offset_value  */
  YYSYMBOL_select_fetch_first_value = 799, /* select_fetch_first_value  */
  YYSYMBOL_I_or_F_const = 800,             /* I_or_F_const  */
  YYSYMBOL_row_or_rows = 801,              /* row_or_rows  */
  YYSYMBOL_first_or_next = 802,            /* first_or_next  */
  YYSYMBOL_group_clause = 803,             /* group_clause  */
  YYSYMBOL_group_by_list = 804,            /* group_by_list  */
  YYSYMBOL_group_by_list_opt_comma = 805,  /* group_by_list_opt_comma  */
  YYSYMBOL_group_by_item = 806,            /* group_by_item  */
  YYSYMBOL_empty_grouping_set = 807,       /* empty_grouping_set  */
  YYSYMBOL_rollup_clause = 808,            /* rollup_clause  */
  YYSYMBOL_cube_clause = 809,              /* cube_clause  */
  YYSYMBOL_grouping_sets_clause = 810,     /* grouping_sets_clause  */
  YYSYMBOL_grouping_or_grouping_id = 811,  /* grouping_or_grouping_id  */
  YYSYMBOL_having_clause = 812,            /* having_clause  */
  YYSYMBOL_qualify_clause = 813,           /* qualify_clause  */
  YYSYMBOL_for_locking_clause = 814,       /* for_locking_clause  */
  YYSYMBOL_opt_for_locking_clause = 815,   /* opt_for_locking_clause  */
  YYSYMBOL_for_locking_items = 816,        /* for_locking_items  */
  YYSYMBOL_for_locking_item = 817,         /* for_locking_item  */
  YYSYMBOL_for_locking_strength = 818,     /* for_locking_strength  */
  YYSYMBOL_locked_rels_list = 819,         /* locked_rels_list  */
  YYSYMBOL_opt_nowait_or_skip = 820,       /* opt_nowait_or_skip  */
  YYSYMBOL_values_clause = 821,            /* values_clause  */
  YYSYMBOL_values_clause_opt_comma = 822,  /* values_clause_opt_comma  */
  YYSYMBOL_from_clause = 823,              /* from_clause  */
  YYSYMBOL_from_list = 824,                /* from_list  */
  YYSYMBOL_from_list_opt_comma = 825,      /* from_list_opt_comma  */
  YYSYMBOL_table_ref = 826,                /* table_ref  */
  YYSYMBOL_opt_pivot_group_by = 827,       /* opt_pivot_group_by  */
  YYSYMBOL_opt_include_nulls = 828,        /* opt_include_nulls  */
  YYSYMBOL_single_pivot_value = 829,       /* single_pivot_value  */
  YYSYMBOL_pivot_header = 830,             /* pivot_header  */
  YYSYMBOL_pivot_value = 831,              /* pivot_value  */
  YYSYMBOL_pivot_value_list = 832,         /* pivot_value_list  */
  YYSYMBOL_unpivot_header = 833,           /* unpivot_header  */
  YYSYMBOL_unpivot_value = 834,            /* unpivot_value  */
  YYSYMBOL_unpivot_value_list = 835,       /* unpivot_value_list  */
  YYSYMBOL_joined_table = 836,             /* joined_table  */
  YYSYMBOL_alias_clause = 837,             /* alias_clause  */
  YYSYMBOL_opt_alias_clause = 838,         /* opt_alias_clause  */
  YYSYMBOL_func_alias_clause = 839,        /* func_alias_clause  */
  YYSYMBOL_join_type = 840,                /* join_type  */
  YYSYMBOL_join_outer = 841,               /* join_outer  */
  YYSYMBOL_join_qual = 842,                /* join_qual  */
  YYSYMBOL_relation_expr = 843,            /* relation_expr  */
  YYSYMBOL_func_table = 844,               /* func_table  */
  YYSYMBOL_rowsfrom_item = 845,            /* rowsfrom_item  */
  YYSYMBOL_rowsfrom_list = 846,            /* rowsfrom_list  */
  YYSYMBOL_opt_col_def_list = 847,         /* opt_col_def_list  */
  YYSYMBOL_opt_ordinality = 848,           /* opt_ordinality  */
  YYSYMBOL_where_clause = 849,             /* where_clause  */
  YYSYMBOL_TableFuncElementList = 850,     /* TableFuncElementList  */
  YYSYMBOL_TableFuncElement = 851,         /* TableFuncElement  */
  YYSYMBOL_opt_collate_clause = 852,       /* opt_collate_clause  */
  YYSYMBOL_colid_type_list = 853,          /* colid_type_list  */
  YYSYMBOL_RowOrStruct = 854,              /* RowOrStruct  */
  YYSYMBOL_opt_Typename = 855,             /* opt_Typename  */
  YYSYMBOL_Typename = 856,                 /* Typename  */
  YYSYMBOL_qualified_typename = 857,       /* qualified_typename  */
  YYSYMBOL_opt_array_bounds = 858,         /* opt_array_bounds  */
  YYSYMBOL_SimpleTypename = 859,           /* SimpleTypename  */
  YYSYMBOL_ConstTypename = 860,            /* ConstTypename  */
  YYSYMBOL_GenericType = 861,              /* GenericType  */
  YYSYMBOL_opt_type_modifiers = 862,       /* opt_type_modifiers  */
  YYSYMBOL_Numeric = 863,                  /* Numeric  */
  YYSYMBOL_opt_float = 864,                /* opt_float  */
  YYSYMBOL_Bit = 865,                      /* Bit  */
  YYSYMBOL_ConstBit = 866,                 /* ConstBit  */
  YYSYMBOL_BitWithLength = 867,            /* BitWithLength  */
  YYSYMBOL_BitWithoutLength = 868,         /* BitWithoutLength  */
  YYSYMBOL_Character = 869,                /* Character  */
  YYSYMBOL_ConstCharacter = 870,           /* ConstCharacter  */
  YYSYMBOL_CharacterWithLength = 871,      /* CharacterWithLength  */
  YYSYMBOL_CharacterWithoutLength = 872,   /* CharacterWithoutLength  */
  YYSYMBOL_character = 873,                /* character  */
  YYSYMBOL_opt_varying = 874,              /* opt_varying  */
  YYSYMBOL_ConstDatetime = 875,            /* ConstDatetime  */
  YYSYMBOL_ConstInterval = 876,            /* ConstInterval  */
  YYSYMBOL_opt_timezone = 877,             /* opt_timezone  */
  YYSYMBOL_year_keyword = 878,             /* year_keyword  */
  YYSYMBOL_month_keyword = 879,            /* month_keyword  */
  YYSYMBOL_day_keyword = 880,              /* day_keyword  */
  YYSYMBOL_hour_keyword = 881,             /* hour_keyword  */
  YYSYMBOL_minute_keyword = 882,           /* minute_keyword  */
  YYSYMBOL_second_keyword = 883,           /* second_keyword  */
  YYSYMBOL_millisecond_keyword = 884,      /* millisecond_keyword  */
  YYSYMBOL_microsecond_keyword = 885,      /* microsecond_keyword  */
  YYSYMBOL_week_keyword = 886,             /* week_keyword  */
  YYSYMBOL_quarter_keyword = 887,          /* quarter_keyword  */
  YYSYMBOL_decade_keyword = 888,           /* decade_keyword  */
  YYSYMBOL_century_keyword = 889,          /* century_keyword  */
  YYSYMBOL_millennium_keyword = 890,       /* millennium_keyword  */
  YYSYMBOL_opt_interval = 891,             /* opt_interval  */
  YYSYMBOL_a_expr = 892,                   /* a_expr  */
  YYSYMBOL_b_expr = 893,                   /* b_expr  */
  YYSYMBOL_c_expr = 894,                   /* c_expr  */
  YYSYMBOL_d_expr = 895,                   /* d_expr  */
  YYSYMBOL_indirection_expr_or_a_expr = 896, /* indirection_expr_or_a_expr  */
  YYSYMBOL_indirection_expr = 897,         /* indirection_expr  */
  YYSYMBOL_list_expr = 898,                /* list_expr  */
  YYSYMBOL_struct_expr = 899,              /* struct_expr  */
  YYSYMBOL_map_expr = 900,                 /* map_expr  */
  YYSYMBOL_func_application = 901,         /* func_application  */
  YYSYMBOL_func_expr = 902,                /* func_expr  */
  YYSYMBOL_func_expr_windowless = 903,     /* func_expr_windowless  */
  YYSYMBOL_func_expr_common_subexpr = 904, /* func_expr_common_subexpr  */
  YYSYMBOL_list_comprehension_lhs = 905,   /* list_comprehension_lhs  */
  YYSYMBOL_list_comprehension = 906,       /* list_comprehension  */
  YYSYMBOL_within_group_clause = 907,      /* within_group_clause  */
  YYSYMBOL_filter_clause = 908,            /* filter_clause  */
  YYSYMBOL_export_clause = 909,            /* export_clause  */
  YYSYMBOL_window_clause = 910,            /* window_clause  */
  YYSYMBOL_window_definition_list = 911,   /* window_definition_list  */
  YYSYMBOL_window_definition = 912,        /* window_definition  */
  YYSYMBOL_over_clause = 913,              /* over_clause  */
  YYSYMBOL_window_specification = 914,     /* window_specification  */
  YYSYMBOL_opt_existing_window_name = 915, /* opt_existing_window_name  */
  YYSYMBOL_opt_partition_clause = 916,     /* opt_partition_clause  */
  YYSYMBOL_opt_frame_clause = 917,         /* opt_frame_clause  */
  YYSYMBOL_frame_extent = 918,             /* frame_extent  */
  YYSYMBOL_frame_bound = 919,              /* frame_bound  */
  YYSYMBOL_opt_window_exclusion_clause = 920, /* opt_window_exclusion_clause  */
  YYSYMBOL_qualified_row = 921,            /* qualified_row  */
  YYSYMBOL_row = 922,                      /* row  */
  YYSYMBOL_dict_arg = 923,                 /* dict_arg  */
  YYSYMBOL_dict_arguments = 924,           /* dict_arguments  */
  YYSYMBOL_dict_arguments_opt_comma = 925, /* dict_arguments_opt_comma  */
  YYSYMBOL_map_arg = 926,                  /* map_arg  */
  YYSYMBOL_map_arguments = 927,            /* map_arguments  */
  YYSYMBOL_map_arguments_opt_comma = 928,  /* map_arguments_opt_comma  */
  YYSYMBOL_opt_map_arguments_opt_comma = 929, /* opt_map_arguments_opt_comma  */
  YYSYMBOL_sub_type = 930,                 /* sub_type  */
  YYSYMBOL_all_Op = 931,                   /* all_Op  */
  YYSYMBOL_MathOp = 932,                   /* MathOp  */
  YYSYMBOL_qual_Op = 933,                  /* qual_Op  */
  YYSYMBOL_qual_all_Op = 934,              /* qual_all_Op  */
  YYSYMBOL_subquery_Op = 935,              /* subquery_Op  */
  YYSYMBOL_any_operator = 936,             /* any_operator  */
  YYSYMBOL_c_expr_list = 937,              /* c_expr_list  */
  YYSYMBOL_c_expr_list_opt_comma = 938,    /* c_expr_list_opt_comma  */
  YYSYMBOL_expr_list = 939,                /* expr_list  */
  YYSYMBOL_expr_list_opt_comma = 940,      /* expr_list_opt_comma  */
  YYSYMBOL_opt_expr_list_opt_comma = 941,  /* opt_expr_list_opt_comma  */
  YYSYMBOL_func_arg_list = 942,            /* func_arg_list  */
  YYSYMBOL_func_arg_expr = 943,            /* func_arg_expr  */
  YYSYMBOL_type_list = 944,                /* type_list  */
  YYSYMBOL_extract_list = 945,             /* extract_list  */
  YYSYMBOL_extract_arg = 946,              /* extract_arg  */
  YYSYMBOL_overlay_list = 947,             /* overlay_list  */
  YYSYMBOL_overlay_placing = 948,          /* overlay_placing  */
  YYSYMBOL_position_list = 949,            /* position_list  */
  YYSYMBOL_substr_list = 950,              /* substr_list  */
  YYSYMBOL_substr_from = 951,              /* substr_from  */
  YYSYMBOL_substr_for = 952,               /* substr_for  */
  YYSYMBOL_trim_list = 953,                /* trim_list  */
  YYSYMBOL_in_expr = 954,                  /* in_expr  */
  YYSYMBOL_case_expr = 955,                /* case_expr  */
  YYSYMBOL_when_clause_list = 956,         /* when_clause_list  */
  YYSYMBOL_when_clause = 957,              /* when_clause  */
  YYSYMBOL_case_default = 958,             /* case_default  */
  YYSYMBOL_case_arg = 959,                 /* case_arg  */
  YYSYMBOL_columnrefList = 960,            /* columnrefList  */
  YYSYMBOL_columnref = 961,                /* columnref  */
  YYSYMBOL_columnref_opt_indirection = 962, /* columnref_opt_indirection  */
  YYSYMBOL_opt_slice_bound = 963,          /* opt_slice_bound  */
  YYSYMBOL_opt_indirection = 964,          /* opt_indirection  */
  YYSYMBOL_opt_func_arguments = 965,       /* opt_func_arguments  */
  YYSYMBOL_extended_indirection_el = 966,  /* extended_indirection_el  */
  YYSYMBOL_opt_extended_indirection = 967, /* opt_extended_indirection  */
  YYSYMBOL_opt_asymmetric = 968,           /* opt_asymmetric  */
  YYSYMBOL_opt_target_list_opt_comma = 969, /* opt_target_list_opt_comma  */
  YYSYMBOL_target_list = 970,              /* target_list  */
  YYSYMBOL_target_list_opt_comma = 971,    /* target_list_opt_comma  */
  YYSYMBOL_target_el = 972,                /* target_el  */
  YYSYMBOL_except_list = 973,              /* except_list  */
  YYSYMBOL_opt_except_list = 974,          /* opt_except_list  */
  YYSYMBOL_replace_list_el = 975,          /* replace_list_el  */
  YYSYMBOL_replace_list = 976,             /* replace_list  */
  YYSYMBOL_replace_list_opt_comma = 977,   /* replace_list_opt_comma  */
  YYSYMBOL_opt_replace_list = 978,         /* opt_replace_list  */
  YYSYMBOL_qualified_name_list = 979,      /* qualified_name_list  */
  YYSYMBOL_name_list = 980,                /* name_list  */
  YYSYMBOL_name_list_opt_comma = 981,      /* name_list_opt_comma  */
  YYSYMBOL_name_list_opt_comma_opt_bracket = 982, /* name_list_opt_comma_opt_bracket  */
  YYSYMBOL_name = 983,                     /* name  */
  YYSYMBOL_func_name = 984,                /* func_name  */
  YYSYMBOL_AexprConst = 985,               /* AexprConst  */
  YYSYMBOL_Iconst = 986,                   /* Iconst  */
  YYSYMBOL_type_function_name = 987,       /* type_function_name  */
  YYSYMBOL_function_name_token = 988,      /* function_name_token  */
  YYSYMBOL_type_name_token = 989,          /* type_name_token  */
  YYSYMBOL_any_name = 990,                 /* any_name  */
  YYSYMBOL_attrs = 991,                    /* attrs  */
  YYSYMBOL_opt_name_list = 992,            /* opt_name_list  */
  YYSYMBOL_param_name = 993,               /* param_name  */
  YYSYMBOL_ColLabelOrString = 994,         /* ColLabelOrString  */
  YYSYMBOL_TransactionStmt = 995,          /* TransactionStmt  */
  YYSYMBOL_opt_transaction = 996,          /* opt_transaction  */
  YYSYMBOL_opt_transaction_type = 997,     /* opt_transaction_type  */
  YYSYMBOL_UpdateStmt = 998,               /* UpdateStmt  */
  YYSYMBOL_UpdateExtensionsStmt = 999,     /* UpdateExtensionsStmt  */
  YYSYMBOL_UseStmt = 1000,                 /* UseStmt  */
  YYSYMBOL_VacuumStmt = 1001,              /* VacuumStmt  */
  YYSYMBOL_vacuum_option_elem = 1002,      /* vacuum_option_elem  */
  YYSYMBOL_opt_full = 1003,                /* opt_full  */
  YYSYMBOL_vacuum_option_list = 1004,      /* vacuum_option_list  */
  YYSYMBOL_opt_freeze = 1005,              /* opt_freeze  */
  YYSYMBOL_VariableResetStmt = 1006,       /* VariableResetStmt  */
  YYSYMBOL_generic_reset = 1007,           /* generic_reset  */
  YYSYMBOL_reset_rest = 1008,              /* reset_rest  */
  YYSYMBOL_VariableSetStmt = 1009,         /* VariableSetStmt  */
  YYSYMBOL_set_rest = 1010,                /* set_rest  */
  YYSYMBOL_generic_set = 1011,             /* generic_set  */
  YYSYMBOL_var_value = 1012,               /* var_value  */
  YYSYMBOL_zone_value = 1013,              /* zone_value  */
  YYSYMBOL_var_list = 1014,                /* var_list  */
  YYSYMBOL_VariableShowStmt = 1015,        /* VariableShowStmt  */
  YYSYMBOL_describe_or_desc = 1016,        /* describe_or_desc  */
  YYSYMBOL_show_or_describe = 1017,        /* show_or_describe  */
  YYSYMBOL_opt_tables = 1018,              /* opt_tables  */
  YYSYMBOL_var_name = 1019,                /* var_name  */
  YYSYMBOL_table_id = 1020,                /* table_id  */
  YYSYMBOL_ViewStmt = 1021,                /* ViewStmt  */
  YYSYMBOL_opt_check_option = 1022         /* opt_check_option  */
};
typedef enum yysymbol_kind_t yysymbol_kind_t;




#ifdef short
# undef short
#endif

/* On compilers that do not define __PTRDIFF_MAX__ etc., make sure
   <limits.h> and (if available) <stdint.h> are included
   so that the code can choose integer types of a good width.  */

#ifndef __PTRDIFF_MAX__
# include <limits.h> /* INFRINGES ON USER NAME SPACE */
# if defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
#  include <stdint.h> /* INFRINGES ON USER NAME SPACE */
#  define YY_STDINT_H
# endif
#endif

/* Narrow types that promote to a signed type and that can represent a
   signed or unsigned integer of at least N bits.  In tables they can
   save space and decrease cache pressure.  Promoting to a signed type
   helps avoid bugs in integer arithmetic.  */

#ifdef __INT_LEAST8_MAX__
typedef __INT_LEAST8_TYPE__ yytype_int8;
#elif defined YY_STDINT_H
typedef int_least8_t yytype_int8;
#else
typedef signed char yytype_int8;
#endif

#ifdef __INT_LEAST16_MAX__
typedef __INT_LEAST16_TYPE__ yytype_int16;
#elif defined YY_STDINT_H
typedef int_least16_t yytype_int16;
#else
typedef short yytype_int16;
#endif

/* Work around bug in HP-UX 11.23, which defines these macros
   incorrectly for preprocessor constants.  This workaround can likely
   be removed in 2023, as HPE has promised support for HP-UX 11.23
   (aka HP-UX 11i v2) only through the end of 2022; see Table 2 of
   <https://h20195.www2.hpe.com/V2/getpdf.aspx/4AA4-7673ENW.pdf>.  */
#ifdef __hpux
# undef UINT_LEAST8_MAX
# undef UINT_LEAST16_MAX
# define UINT_LEAST8_MAX 255
# define UINT_LEAST16_MAX 65535
#endif

#if defined __UINT_LEAST8_MAX__ && __UINT_LEAST8_MAX__ <= __INT_MAX__
typedef __UINT_LEAST8_TYPE__ yytype_uint8;
#elif (!defined __UINT_LEAST8_MAX__ && defined YY_STDINT_H \
       && UINT_LEAST8_MAX <= INT_MAX)
typedef uint_least8_t yytype_uint8;
#elif !defined __UINT_LEAST8_MAX__ && UCHAR_MAX <= INT_MAX
typedef unsigned char yytype_uint8;
#else
typedef short yytype_uint8;
#endif

#if defined __UINT_LEAST16_MAX__ && __UINT_LEAST16_MAX__ <= __INT_MAX__
typedef __UINT_LEAST16_TYPE__ yytype_uint16;
#elif (!defined __UINT_LEAST16_MAX__ && defined YY_STDINT_H \
       && UINT_LEAST16_MAX <= INT_MAX)
typedef uint_least16_t yytype_uint16;
#elif !defined __UINT_LEAST16_MAX__ && USHRT_MAX <= INT_MAX
typedef unsigned short yytype_uint16;
#else
typedef int yytype_uint16;
#endif

#ifndef YYPTRDIFF_T
# if defined __PTRDIFF_TYPE__ && defined __PTRDIFF_MAX__
#  define YYPTRDIFF_T __PTRDIFF_TYPE__
#  define YYPTRDIFF_MAXIMUM __PTRDIFF_MAX__
# elif defined PTRDIFF_MAX
#  ifndef ptrdiff_t
#   include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  endif
#  define YYPTRDIFF_T ptrdiff_t
#  define YYPTRDIFF_MAXIMUM PTRDIFF_MAX
# else
#  define YYPTRDIFF_T long
#  define YYPTRDIFF_MAXIMUM LONG_MAX
# endif
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned
# endif
#endif

#define YYSIZE_MAXIMUM                                  \
  YY_CAST (YYPTRDIFF_T,                                 \
           (YYPTRDIFF_MAXIMUM < YY_CAST (YYSIZE_T, -1)  \
            ? YYPTRDIFF_MAXIMUM                         \
            : YY_CAST (YYSIZE_T, -1)))

#define YYSIZEOF(X) YY_CAST (YYPTRDIFF_T, sizeof (X))


/* Stored state numbers (used for stacks). */
typedef yytype_int16 yy_state_t;

/* State numbers in computations.  */
typedef int yy_state_fast_t;

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(Msgid) Msgid
# endif
#endif


#ifndef YY_ATTRIBUTE_PURE
# if defined __GNUC__ && 2 < __GNUC__ + (96 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_PURE __attribute__ ((__pure__))
# else
#  define YY_ATTRIBUTE_PURE
# endif
#endif

#ifndef YY_ATTRIBUTE_UNUSED
# if defined __GNUC__ && 2 < __GNUC__ + (7 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_UNUSED __attribute__ ((__unused__))
# else
#  define YY_ATTRIBUTE_UNUSED
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YY_USE(E) ((void) (E))
#else
# define YY_USE(E) /* empty */
#endif

/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
#if defined __GNUC__ && ! defined __ICC && 406 <= __GNUC__ * 100 + __GNUC_MINOR__
# if __GNUC__ * 100 + __GNUC_MINOR__ < 407
#  define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN                           \
    _Pragma ("GCC diagnostic push")                                     \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")
# else
#  define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN                           \
    _Pragma ("GCC diagnostic push")                                     \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")              \
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# endif
# define YY_IGNORE_MAYBE_UNINITIALIZED_END      \
    _Pragma ("GCC diagnostic pop")
#else
# define YY_INITIAL_VALUE(Value) Value
#endif
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif

#if defined __cplusplus && defined __GNUC__ && ! defined __ICC && 6 <= __GNUC__
# define YY_IGNORE_USELESS_CAST_BEGIN                          \
    _Pragma ("GCC diagnostic push")                            \
    _Pragma ("GCC diagnostic ignored \"-Wuseless-cast\"")
# define YY_IGNORE_USELESS_CAST_END            \
    _Pragma ("GCC diagnostic pop")
#endif
#ifndef YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_END
#endif


#define YY_ASSERT(E) ((void) (0 && (E)))

#if !defined yyoverflow

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
#     ifndef EXIT_SUCCESS
#      define EXIT_SUCCESS 0
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's 'empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
       && ! ((defined YYMALLOC || defined malloc) \
             && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef EXIT_SUCCESS
#    define EXIT_SUCCESS 0
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined EXIT_SUCCESS
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined EXIT_SUCCESS
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* !defined yyoverflow */

#if (! defined yyoverflow \
     && (! defined __cplusplus \
         || (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL \
             && defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yy_state_t yyss_alloc;
  YYSTYPE yyvs_alloc;
  YYLTYPE yyls_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (YYSIZEOF (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (YYSIZEOF (yy_state_t) + YYSIZEOF (YYSTYPE) \
             + YYSIZEOF (YYLTYPE)) \
      + 2 * YYSTACK_GAP_MAXIMUM)

# define YYCOPY_NEEDED 1

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)                           \
    do                                                                  \
      {                                                                 \
        YYPTRDIFF_T yynewbytes;                                         \
        YYCOPY (&yyptr->Stack_alloc, Stack, yysize);                    \
        Stack = &yyptr->Stack_alloc;                                    \
        yynewbytes = yystacksize * YYSIZEOF (*Stack) + YYSTACK_GAP_MAXIMUM; \
        yyptr += yynewbytes / YYSIZEOF (*yyptr);                        \
      }                                                                 \
    while (0)

#endif

#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
/* Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(Dst, Src, Count) \
      __builtin_memcpy (Dst, Src, YY_CAST (YYSIZE_T, (Count)) * sizeof (*(Src)))
#  else
#   define YYCOPY(Dst, Src, Count)              \
      do                                        \
        {                                       \
          YYPTRDIFF_T yyi;                      \
          for (yyi = 0; yyi < (Count); yyi++)   \
            (Dst)[yyi] = (Src)[yyi];            \
        }                                       \
      while (0)
#  endif
# endif
#endif /* !YYCOPY_NEEDED */

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  889
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   74915

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  541
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  482
/* YYNRULES -- Number of rules.  */
#define YYNRULES  2196
/* YYNSTATES -- Number of states.  */
#define YYNSTATES  3665

/* YYMAXUTOK -- Last valid token kind.  */
#define YYMAXUTOK   773


/* YYTRANSLATE(TOKEN-NUM) -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex, with out-of-bounds checking.  */
#define YYTRANSLATE(YYX)                                \
  (0 <= (YYX) && (YYX) <= YYMAXUTOK                     \
   ? YY_CAST (yysymbol_kind_t, yytranslate[YYX])        \
   : YYSYMBOL_YYUNDEF)

/* YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex.  */
static const yytype_int16 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,   538,   539,   525,     2,     2,
     530,   531,   523,   521,   536,   522,   532,   524,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   540,   533,
     517,   519,   518,   537,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   528,     2,   529,   526,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   534,     2,   535,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   520,   527
};

#if YYDEBUG
/* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
static const yytype_int16 yyrline[] =
{
       0,   515,   515,   531,   543,   552,   553,   554,   555,   556,
     557,   558,   559,   560,   561,   562,   563,   564,   565,   566,
     567,   568,   569,   570,   571,   572,   573,   574,   575,   576,
     577,   578,   579,   580,   581,   582,   583,   584,   585,   586,
     587,   588,   589,   590,   591,   592,   593,   595,     7,    26,
      50,    73,    80,    85,    86,    87,    88,    89,     8,    21,
      34,    47,    65,    87,    88,    89,    90,     7,    14,    22,
       2,    10,    17,    24,    32,    40,    51,    52,    53,    57,
      58,    59,     7,    18,    19,    23,    24,    25,    26,    27,
      28,     7,     7,    14,    31,    51,    55,    65,    69,    75,
      76,     3,    10,    17,    24,    31,    38,    45,    52,    61,
      61,    63,    63,    65,    65,    67,    68,    72,    73,     8,
      33,    62,    66,    67,    72,    73,    78,    79,    83,    84,
      89,    90,     1,    30,    49,    61,    62,    63,    67,    68,
      73,    77,    82,    86,    94,    95,    99,   100,   105,   106,
     110,   111,   116,   117,   118,   119,   120,   121,   122,   123,
     128,   136,   140,   145,   146,   151,   155,   160,   164,   168,
     172,   176,   180,   184,   188,   192,   196,   200,   204,   208,
     212,   216,   220,   228,   233,   234,   235,   236,   237,   243,
     247,     8,    22,    36,    48,    56,    70,    71,    72,    73,
      74,    87,    88,    93,    94,    98,    99,     7,    17,    27,
      40,    41,    45,    46,    47,    51,    52,     9,    17,    29,
      30,    34,    35,    36,    41,    42,    43,    48,    52,    56,
      60,    64,    68,    72,    76,    80,    84,    88,    92,    97,
     101,   105,   112,   113,   117,   118,   119,     2,     8,    22,
      36,    53,    54,    55,    56,    60,    67,    73,    85,    86,
      90,    96,   105,   106,   107,   111,   115,   122,   126,     7,
      15,    26,    27,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,     5,    12,    22,    23,     7,    16,
      28,    35,    42,    51,    52,    56,    57,     7,    16,    25,
      34,    43,    52,     8,    18,    29,    39,    49,    59,    71,
      81,    91,    95,   102,   106,   110,   119,   123,   130,   131,
     135,   139,    10,    16,    22,    28,    34,    44,    45,    53,
      64,    76,    84,    95,   101,   105,   109,   124,   131,   132,
     133,   137,   138,     9,    19,    29,    42,    43,     9,    19,
       7,     9,    18,    27,    36,    45,    54,    63,    72,    85,
      87,    93,    94,    99,   103,   107,   118,   126,   130,   139,
     148,   157,   166,   175,   184,   192,   200,   209,   218,   227,
     236,   253,   262,   271,   280,   290,   303,   318,   327,   335,
     350,   358,   368,   378,   385,   392,   400,   407,   418,   419,
     424,   428,   433,   438,   446,   447,   452,   456,   457,   458,
       6,    15,    25,    35,    45,    55,    65,    75,    85,    95,
     106,   117,   127,   140,   141,     6,     9,    13,    44,    45,
      46,    50,    51,    55,    59,    60,    64,    70,    75,    76,
      77,    78,    11,    24,    37,    54,    55,    56,    61,     7,
      13,    19,    25,     7,    21,    36,    56,    57,    84,    85,
      86,    87,    88,    89,    93,    94,    99,   104,   105,   106,
     107,   108,   113,   120,   121,   122,   139,   146,   153,   163,
     173,   185,   193,   202,   220,   221,   225,   226,   230,   239,
     262,   276,   283,   288,   290,   292,   294,   297,   300,   301,
     302,   303,   308,   312,   313,   318,   325,   330,   331,   332,
     333,   334,   335,   336,   337,   343,   344,   348,   353,   360,
     367,   374,   386,   387,   388,   389,   393,   398,   399,   400,
     405,   410,   411,   412,   413,   414,   415,   420,   440,   469,
     470,   474,   478,   479,   480,   484,   488,   496,   497,   502,
     503,   504,   508,   516,   517,   522,   523,   527,   532,   536,
     540,   545,   553,   554,   558,   559,   563,   564,   570,   581,
     594,   608,   622,   636,   650,   673,   677,   684,   688,   696,
     701,   708,   718,   719,   720,   721,   722,   729,   736,   737,
     742,   743,     7,    17,    26,    35,    46,    47,    49,    50,
      53,    54,    55,    47,    48,    52,    53,    54,    72,    73,
      80,    88,    96,   104,   112,   120,   131,   132,   159,   164,
     172,   188,   205,   222,   239,   240,   259,   263,   267,   271,
     275,   285,   296,   306,   315,   326,   337,   349,   364,   382,
     382,   386,   386,   390,   390,   394,   400,   407,   411,   412,
     416,   417,   431,   438,   445,   455,   456,   459,   472,   473,
     474,   478,   489,   497,   502,   507,   512,   517,   525,   533,
     538,   543,   550,   551,   555,   556,   557,   561,   568,   569,
     573,   574,   578,   579,   580,   584,   585,   589,   590,   606,
     607,   610,   619,   630,   631,   632,   635,   636,   637,   641,
     642,   643,   644,   648,   649,   653,   655,   671,   673,   678,
     681,   689,   693,   697,   701,   705,   709,   716,   721,   728,
     729,   733,   738,   742,   746,   754,   761,   762,   767,   768,
     772,   773,   778,   780,   782,   787,   807,   808,   810,   815,
     816,   820,   821,   824,   825,   850,   851,   856,   860,   861,
     865,   866,   870,   871,   872,   873,   874,   878,   891,   898,
     905,   912,   913,   917,   918,   922,   923,   927,   928,   932,
     933,   937,   938,   942,   953,   954,   955,   956,   960,   961,
     966,   967,   968,   977,   983,   992,   993,  1006,  1007,  1011,
    1012,  1016,  1017,  1023,  1029,  1037,  1046,  1054,  1063,  1072,
    1076,  1081,  1092,  1103,  1111,  1124,  1125,  1128,  1129,  1130,
    1133,  1141,  1150,  1151,  1152,  1153,  1156,  1164,  1173,  1177,
    1184,  1185,  1189,  1198,  1202,  1227,  1231,  1244,  1258,  1273,
    1285,  1298,  1312,  1326,  1339,  1354,  1373,  1379,  1384,  1390,
    1397,  1398,  1406,  1410,  1414,  1420,  1427,  1432,  1433,  1434,
    1435,  1436,  1437,  1441,  1442,  1454,  1455,  1460,  1467,  1474,
    1481,  1513,  1524,  1537,  1542,  1543,  1546,  1547,  1550,  1551,
    1556,  1557,  1562,  1566,  1572,  1593,  1601,  1614,  1617,  1621,
    1621,  1624,  1625,  1627,  1632,  1639,  1644,  1650,  1655,  1661,
    1665,  1672,  1679,  1689,  1690,  1694,  1696,  1699,  1703,  1704,
    1705,  1706,  1707,  1708,  1713,  1733,  1734,  1735,  1736,  1747,
    1761,  1762,  1768,  1773,  1778,  1783,  1788,  1793,  1798,  1803,
    1809,  1815,  1821,  1828,  1850,  1859,  1863,  1871,  1875,  1883,
    1895,  1916,  1920,  1926,  1930,  1943,  1951,  1961,  1963,  1965,
    1967,  1969,  1971,  1976,  1977,  1984,  1993,  2001,  2010,  2021,
    2029,  2030,  2031,  2035,  2035,  2038,  2038,  2041,  2041,  2044,
    2044,  2047,  2047,  2050,  2050,  2053,  2053,  2056,  2056,  2059,
    2059,  2062,  2062,  2065,  2065,  2068,  2068,  2071,  2071,  2074,
    2076,  2078,  2080,  2082,  2084,  2086,  2088,  2090,  2092,  2094,
    2096,  2098,  2100,  2105,  2110,  2116,  2123,  2128,  2134,  2140,
    2171,  2173,  2175,  2183,  2198,  2200,  2202,  2204,  2206,  2208,
    2210,  2212,  2214,  2216,  2218,  2220,  2222,  2224,  2226,  2228,
    2231,  2233,  2235,  2238,  2240,  2242,  2244,  2246,  2251,  2256,
    2263,  2268,  2275,  2280,  2287,  2292,  2300,  2308,  2316,  2324,
    2342,  2350,  2358,  2366,  2374,  2382,  2390,  2394,  2410,  2418,
    2426,  2434,  2442,  2450,  2458,  2462,  2466,  2470,  2474,  2482,
    2490,  2498,  2506,  2526,  2548,  2559,  2566,  2580,  2589,  2597,
    2605,  2625,  2627,  2629,  2631,  2633,  2635,  2637,  2639,  2641,
    2643,  2645,  2647,  2649,  2651,  2653,  2655,  2657,  2659,  2661,
    2663,  2665,  2667,  2671,  2675,  2679,  2693,  2694,  2708,  2709,
    2710,  2721,  2745,  2756,  2766,  2770,  2774,  2781,  2785,  2792,
    2796,  2800,  2804,  2806,  2809,  2812,  2823,  2828,  2835,  2841,
    2847,  2854,  2874,  2878,  2885,  2893,  2901,  2912,  2932,  2968,
    2979,  2980,  2987,  2993,  2995,  2997,  3001,  3010,  3015,  3022,
    3037,  3044,  3048,  3052,  3056,  3060,  3070,  3078,  3087,  3109,
    3110,  3114,  3115,  3116,  3120,  3121,  3128,  3129,  3133,  3134,
    3139,  3147,  3149,  3163,  3166,  3193,  3194,  3197,  3198,  3206,
    3214,  3222,  3231,  3241,  3259,  3305,  3314,  3323,  3332,  3341,
    3353,  3354,  3355,  3356,  3357,  3371,  3372,  3375,  3376,  3380,
    3390,  3391,  3395,  3396,  3400,  3407,  3408,  3413,  3414,  3419,
    3420,  3423,  3424,  3425,  3428,  3429,  3432,  3433,  3434,  3435,
    3436,  3437,  3438,  3439,  3440,  3441,  3442,  3443,  3444,  3445,
    3448,  3450,  3455,  3457,  3462,  3464,  3466,  3468,  3470,  3472,
    3474,  3476,  3490,  3492,  3497,  3501,  3508,  3513,  3519,  3523,
    3530,  3535,  3542,  3547,  3555,  3559,  3565,  3569,  3578,  3589,
    3590,  3594,  3598,  3605,  3606,  3607,  3608,  3609,  3610,  3611,
    3612,  3613,  3614,  3615,  3616,  3617,  3618,  3619,  3629,  3633,
    3640,  3647,  3648,  3664,  3668,  3673,  3677,  3692,  3697,  3701,
    3704,  3707,  3708,  3709,  3712,  3719,  3720,  3721,  3731,  3745,
    3746,  3750,  3761,  3762,  3765,  3766,  3770,  3771,  3774,  3780,
    3784,  3791,  3799,  3807,  3815,  3825,  3826,  3831,  3832,  3836,
    3837,  3838,  3842,  3851,  3859,  3867,  3876,  3891,  3892,  3897,
    3898,  3908,  3909,  3913,  3914,  3918,  3919,  3922,  3938,  3946,
    3956,  3957,  3960,  3961,  3964,  3968,  3969,  3973,  3974,  3977,
    3978,  3979,  3989,  3990,  3994,  3996,  4002,  4003,  4007,  4008,
    4011,  4022,  4025,  4036,  4040,  4044,  4056,  4060,  4069,  4076,
    4114,  4118,  4122,  4126,  4130,  4134,  4138,  4144,  4161,  4162,
    4163,  4166,  4167,  4168,  4171,  4172,  4173,  4176,  4177,  4180,
    4182,  4187,  4188,  4191,  4195,  4196,     7,    19,    33,     9,
      19,    29,    39,    49,    59,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    96,    97,    98,    99,   100,   101,
     106,   107,   112,   113,   114,   119,   120,   121,     7,    16,
      25,    46,    47,    50,    54,     2,     7,    12,    17,    22,
      31,    38,    48,    49,    56,     9,    23,    29,    36,    42,
      49,    59,    63,    71,    72,    73,    77,    86,    95,   102,
     103,   108,   120,   125,   150,   155,   160,   166,   176,   186,
     192,   203,   214,   229,   230,   236,   237,   242,   243,   249,
     250,   254,   255,   260,   262,   268,   269,   273,   274,   277,
     278,   283,     7,    16,    28,    29,     9,    16,    26,    33,
      44,    45,    50,    51,    52,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    92,    93,    94,
      99,   100,   105,   109,   117,   118,   123,   124,   125,   131,
     136,   144,   145,     7,    18,    31,    35,    42,    53,    54,
      60,    61,    65,    65,    65,    65,    65,    65,    65,    65,
      65,    65,    65,    65,    65,    65,    65,    65,    65,    65,
      65,    65,    65,    65,    65,    65,    65,    65,    65,    65,
      65,    65,    65,    65,    65,    65,    65,    65,    65,    65,
      65,    65,    65,    65,    65,    65,    65,    65,    65,    65,
      65,    65,    65,    65,    65,    65,    65,    65,    65,    65,
      65,    65,    65,    65,    65,    65,    65,    65,    65,    65,
      65,    65,    65,    65,    65,    65,    65,    65,    65,    65,
      65,    65,    65,    65,    65,    65,    65,    65,    65,    65,
      65,    65,    65,    65,    65,    65,    65,    65,    65,    65,
      65,    65,    65,    65,    65,    65,    65,    65,    65,    65,
      65,    65,    65,    65,    65,    65,    65,    65,    65,    65,
      65,    65,    65,    65,    65,    65,    65,    65,    65,    65,
      65,    65,    65,    65,    65,    65,    65,    65,    65,    65,
      65,    65,    65,    65,    65,    65,    65,    65,    65,    65,
      65,    65,    65,    65,    65,    65,    65,    65,    65,    65,
      65,    65,    65,    65,    65,    65,    65,    65,    65,    65,
      65,    65,    65,    65,    65,    65,    65,    65,    65,    65,
      65,    65,    65,    65,    65,    65,    65,    65,    65,    65,
      65,    65,    65,    65,    65,    65,    65,    65,    65,    65,
      65,    65,    65,    65,    65,    65,    65,    65,    65,    65,
      65,    65,    65,    65,    65,    65,    65,    65,    65,    65,
      65,    65,    65,    65,    65,    65,    65,    65,    65,    65,
      65,    65,    65,    65,    65,    65,    65,    65,    65,    65,
      65,    65,    65,    65,    65,    65,    65,    65,    65,    65,
      65,    65,    65,    65,    65,    65,    65,    65,    65,    65,
      65,    65,    65,    65,    65,    65,    65,    65,    65,    65,
      65,    65,    65,    65,    65,    65,    65,    65,    65,    65,
      65,    65,    65,    65,    65,    65,    65,    65,    65,    65,
      65,    65,    65,    65,    65,    65,    65,    65,    65,    65,
      65,    65,    65,    65,    65,    65,    65,    65,    65,    65,
      65,    65,    65,    65,    65,    65,    65,    65,    65,    65,
      65,    65,    65,    65,    65,    65,    65,    65,    65,    65,
      65,    65,    66,    66,    66,    66,    66,    66,    66,    66,
      66,    66,    66,    66,    66,    66,    66,    66,    66,    66,
      66,    66,    66,    66,    66,    66,    66,    66,    66,    66,
      66,    66,    66,    66,    66,    66,    66,    66,    66,    66,
      66,    66,    66,    66,    66,    66,    66,    66,    66,    66,
      66,    66,    66,    66,    66,    66,    67,    67,    67,    67,
      67,    67,    67,    67,    67,    67,    67,    67,    67,    67,
      67,    67,    67,    67,    67,    67,    67,    67,    67,    67,
      67,    67,    67,    67,    68,    68,    68,    68,    68,    68,
      68,    68,    68,    68,    68,    68,    68,    68,    68,    68,
      68,    68,    68,    68,    68,    68,    68,    68,    68,    68,
      68,    68,    68,    69,    69,    69,    69,    69,    69,    69,
      69,    69,    69,    69,    69,    69,    69,    69,    69,    69,
      69,    69,    69,    69,    69,    69,    69,    69,    69,    69,
      69,    69,    69,    69,    69,    69,    69,    69,    69,    69,
      69,    69,    69,    69,    69,    69,    69,    69,    69,    69,
      69,    69,    69,    69,    69,    69,    69,    69,    69,    69,
      69,    69,    69,    69,    69,    69,    69,    69,    69,    69,
      69,    69,    69,    69,    69,    69,    69,    69,    69,    69,
      69,    69,    69,    69,    70,    70,    70,    70,    70,    70,
      70,    70,    70,    70,    70,    70,    70,    70,    70,    70,
      70,    70,    70,    70,    70,    70,    70,    70,    70,    70,
      70,    70,    70,    70,    70,    70,    71,    71,    71,    71,
      71,    71,    71,    71,    71,    71,    71,    71,    71,    71,
      71,    71,    71,    71,    71,    71,    71,    71,    71,    71,
      71,    71,    71,    71,    71,    71,    71,    71,    71,    71,
      71,    71,    71,    71,    71,    71,    71,    71,    71,    71,
      71,    71,    71,    71,    71,    71,    71,    71,    71,    71,
      71,    71,    71,    71,    71,    71,    71,    71,    71,    71,
      71,    71,    71,    71,    71,    71,    71,    71,    71,    71,
      71,    71,    71,    71,    71,    71,    71
};
#endif

/** Accessing symbol of state STATE.  */
#define YY_ACCESSING_SYMBOL(State) YY_CAST (yysymbol_kind_t, yystos[State])

#if YYDEBUG || 0
/* The user-facing name of the symbol whose (internal) number is
   YYSYMBOL.  No bounds checking.  */
static const char *yysymbol_name (yysymbol_kind_t yysymbol) YY_ATTRIBUTE_UNUSED;

/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "\"end of file\"", "error", "\"invalid token\"", "IDENT", "FCONST",
  "SCONST", "BCONST", "XCONST", "Op", "ICONST", "PARAM", "TYPECAST",
  "DOT_DOT", "COLON_EQUALS", "EQUALS_GREATER", "INTEGER_DIVISION",
  "POWER_OF", "LAMBDA_ARROW", "DOUBLE_ARROW", "LESS_EQUALS",
  "GREATER_EQUALS", "NOT_EQUALS", "ABORT_P", "ABSOLUTE_P", "ACCESS",
  "ACTION", "ADD_P", "ADMIN", "AFTER", "AGGREGATE", "ALL", "ALSO", "ALTER",
  "ALWAYS", "ANALYSE", "ANALYZE", "AND", "ANTI", "ANY", "ARRAY", "AS",
  "ASC_P", "ASOF", "ASSERTION", "ASSIGNMENT", "ASYMMETRIC", "AT", "ATTACH",
  "ATTRIBUTE", "AUTHORIZATION", "BACKWARD", "BEFORE", "BEGIN_P", "BETWEEN",
  "BIGINT", "BINARY", "BIT", "BOOLEAN_P", "BOTH", "BY", "CACHE", "CALL_P",
  "CALLED", "CASCADE", "CASCADED", "CASE", "CAST", "CATALOG_P",
  "CENTURIES_P", "CENTURY_P", "CHAIN", "CHAR_P", "CHARACTER",
  "CHARACTERISTICS", "CHECK_P", "CHECKPOINT", "CLASS", "CLOSE", "CLUSTER",
  "COALESCE", "COLLATE", "COLLATION", "COLUMN", "COLUMNS", "COMMENT",
  "COMMENTS", "COMMIT", "COMMITTED", "COMPRESSION", "CONCURRENTLY",
  "CONFIGURATION", "CONFLICT", "CONNECTION", "CONSTRAINT", "CONSTRAINTS",
  "CONTENT_P", "CONTINUE_P", "CONVERSION_P", "COPY", "COST", "CREATE_P",
  "CROSS", "CSV", "CUBE", "CURRENT_P", "CURSOR", "CYCLE", "DATA_P",
  "DATABASE", "DAY_P", "DAYS_P", "DEALLOCATE", "DEC", "DECADE_P",
  "DECADES_P", "DECIMAL_P", "DECLARE", "DEFAULT", "DEFAULTS", "DEFERRABLE",
  "DEFERRED", "DEFINER", "DELETE_P", "DELIMITER", "DELIMITERS", "DEPENDS",
  "DESC_P", "DESCRIBE", "DETACH", "DICTIONARY", "DISABLE_P", "DISCARD",
  "DISTINCT", "DO", "DOCUMENT_P", "DOMAIN_P", "DOUBLE_P", "DROP", "EACH",
  "EDGES", "ELSE", "ENABLE_P", "ENCODING", "ENCRYPTED", "END_P", "ENUM_P",
  "ESCAPE", "EVENT", "EXCEPT", "EXCLUDE", "EXCLUDING", "EXCLUSIVE",
  "EXECUTE", "EXISTS", "EXPLAIN", "EXPORT_P", "EXPORT_STATE", "EXTENSION",
  "EXTENSIONS", "EXTERNAL", "EXTRACT", "FALSE_P", "FAMILY", "FEATURES",
  "FETCH", "FILTER", "FIRST_P", "FLOAT_P", "FOLLOWING", "FOR", "FORCE",
  "FOREIGN", "FORWARD", "FREEZE", "FROM", "FULL", "FUNCTION", "FUNCTIONS",
  "GENERATED", "GLOB", "GLOBAL", "GNN", "GRANT", "GRANTED", "GROUP_P",
  "GROUPING", "GROUPING_ID", "GROUPS", "HANDLER", "HAVING", "HEADER_P",
  "HOLD", "HOUR_P", "HOURS_P", "IDENTITY_P", "IF_P", "IGNORE_P", "ILIKE",
  "IMMEDIATE", "IMMUTABLE", "IMPLICIT_P", "IMPORT_P", "IN_P", "INCLUDE_P",
  "INCLUDING", "INCREMENT", "INDEX", "INDEXES", "INHERIT", "INHERITS",
  "INITIALLY", "INLINE_P", "INNER_P", "INOUT", "INPUT_P", "INSENSITIVE",
  "INSERT", "INSTALL", "INSTEAD", "INT_P", "INTEGER", "INTERSECT",
  "INTERVAL", "INTO", "INVOKER", "IS", "ISNULL", "ISOLATION", "JOIN",
  "JSON", "KEY", "LABEL", "LANGUAGE", "LARGE_P", "LAST_P", "LATERAL_P",
  "LEADING", "LEAKPROOF", "LEFT", "LEVEL", "LIKE", "LIMIT", "LISTEN",
  "LLM", "LLM_API", "LOAD", "LOCAL", "LOCATION", "LOCK_P", "LOCKED",
  "LOGGED", "MACRO", "MAP", "MAPPING", "MATCH", "MATERIALIZED", "MAXVALUE",
  "METHOD", "MICROSECOND_P", "MICROSECONDS_P", "MILLENNIA_P",
  "MILLENNIUM_P", "MILLISECOND_P", "MILLISECONDS_P", "MINUTE_P",
  "MINUTES_P", "MINVALUE", "MODE", "MODEL", "MONTH_P", "MONTHS_P", "MOVE",
  "NAME_P", "NAMES", "NATIONAL", "NATURAL", "NCHAR", "NEW", "NEXT", "NO",
  "NODES", "NONE", "NOT", "NOTHING", "NOTIFY", "NOTNULL", "NOWAIT",
  "NULL_P", "NULLIF", "NULLS_P", "NUMERIC", "OBJECT_P", "OF", "OFF",
  "OFFSET", "OIDS", "OLD", "ON", "ONLY", "OPERATOR", "OPTION", "OPTIONS",
  "OR", "ORDER", "ORDINALITY", "OTHERS", "OUT_P", "OUTER_P", "OUTPUT",
  "OVER", "OVERLAPS", "OVERLAY", "OVERRIDING", "OWNED", "OWNER",
  "PARALLEL", "PARSER", "PARTIAL", "PARTITION", "PASSING", "PASSWORD",
  "PATH", "PERCENT", "PERSISTENT", "PIVOT", "PIVOT_LONGER", "PIVOT_WIDER",
  "PLACING", "PLANS", "POLICY", "POSITION", "POSITIONAL", "PRAGMA_P",
  "PRECEDING", "PRECISION", "PREDICT", "PREPARE", "PREPARED", "PRESERVE",
  "PRIMARY", "PRIOR", "PRIVILEGES", "PROCEDURAL", "PROCEDURE", "PROGRAM",
  "PUBLICATION", "QUALIFY", "QUARTER_P", "QUARTERS_P", "QUOTE", "RANGE",
  "READ_P", "REAL", "REASSIGN", "RECHECK", "RECURSIVE", "REF",
  "REFERENCES", "REFERENCING", "REFRESH", "REINDEX", "RELATIVE_P",
  "RELEASE", "RENAME", "REPEATABLE", "REPLACE", "REPLICA", "RESET",
  "RESPECT_P", "RESTART", "RESTRICT", "RETURNING", "RETURNS", "REVOKE",
  "RIGHT", "ROLE", "ROLLBACK", "ROLLUP", "ROW", "ROWS", "RULE", "SAMPLE",
  "SAVEPOINT", "SCHEMA", "SCHEMAS", "SCOPE", "SCROLL", "SEARCH",
  "SECOND_P", "SECONDS_P", "SECRET", "SECURITY", "SELECT", "SEMI",
  "SEQUENCE", "SEQUENCES", "SERIALIZABLE", "SERVER", "SESSION", "SET",
  "SETOF", "SETS", "SHARE", "SHOW", "SIMILAR", "SIMPLE", "SKIP",
  "SMALLINT", "SNAPSHOT", "SOME", "SQL_P", "STABLE", "STANDALONE_P",
  "START", "STATEMENT", "STATISTICS", "STDIN", "STDOUT", "STORAGE",
  "STORED", "STRICT_P", "STRIP_P", "STRUCT", "SUBSCRIPTION", "SUBSTRING",
  "SUMMARIZE", "SYMMETRIC", "SYSID", "SYSTEM_P", "TABLE", "TABLES",
  "TABLESAMPLE", "TABLESPACE", "TABULAR", "TAKES", "TEMP", "TEMPLATE",
  "TEMPORARY", "TEXT_P", "THEN", "TIES", "TIME", "TIMESTAMP", "TO",
  "TRAILING", "TRANSACTION", "TRANSFORM", "TREAT", "TRIGGER", "TRIM",
  "TRUE_P", "TRUNCATE", "TRUSTED", "TRY_CAST", "TYPE_P", "TYPES_P",
  "UNBOUNDED", "UNCOMMITTED", "UNENCRYPTED", "UNION", "UNIQUE", "UNKNOWN",
  "UNLISTEN", "UNLOGGED", "UNPIVOT", "UNTIL", "UPDATE", "USE_P", "USER",
  "USING", "VACUUM", "VALID", "VALIDATE", "VALIDATOR", "VALUE_P", "VALUES",
  "VARCHAR", "VARIABLE_P", "VARIADIC", "VARYING", "VERBOSE", "VERSION_P",
  "VIEW", "VIEWS", "VIRTUAL", "VOLATILE", "WEEK_P", "WEEKS_P", "WHEN",
  "WHERE", "WHITESPACE_P", "WINDOW", "WITH", "WITHIN", "WITHOUT", "WORK",
  "WRAPPER", "WRITE_P", "XML_P", "XMLATTRIBUTES", "XMLCONCAT",
  "XMLELEMENT", "XMLEXISTS", "XMLFOREST", "XMLNAMESPACES", "XMLPARSE",
  "XMLPI", "XMLROOT", "XMLSERIALIZE", "XMLTABLE", "YEAR_P", "YEARS_P",
  "YES_P", "ZONE", "NOT_LA", "NULLS_LA", "WITH_LA", "'<'", "'>'", "'='",
  "POSTFIXOP", "'+'", "'-'", "'*'", "'/'", "'%'", "'^'", "UMINUS", "'['",
  "']'", "'('", "')'", "'.'", "';'", "'{'", "'}'", "','", "'?'", "'#'",
  "'$'", "':'", "$accept", "stmtblock", "stmtmulti", "stmt",
  "AlterObjectSchemaStmt", "AlterSeqStmt", "SeqOptList", "opt_with",
  "NumericOnly", "SeqOptElem", "opt_by", "SignedIconst", "AlterTableStmt",
  "alter_identity_column_option_list", "alter_column_default",
  "alter_identity_column_option", "alter_generic_option_list",
  "alter_table_cmd", "alter_using", "alter_generic_option_elem",
  "alter_table_cmds", "alter_generic_options", "opt_set_data",
  "AnalyzeStmt", "AttachStmt", "DetachStmt", "opt_database",
  "opt_database_alias", "CallStmt", "CheckPointStmt", "opt_col_id",
  "CommentOnStmt", "comment_value", "comment_on_type_any_name",
  "qualified_name", "ColId", "ColIdOrString", "Sconst", "indirection",
  "indirection_el", "attr_name", "ColLabel", "CopyStmt",
  "copy_database_flag", "copy_from", "copy_delimiter",
  "copy_generic_opt_arg_list", "opt_using", "opt_as", "opt_program",
  "copy_options", "copy_generic_opt_arg", "copy_generic_opt_elem",
  "opt_oids", "copy_opt_list", "opt_binary", "copy_opt_item",
  "copy_generic_opt_arg_list_item", "copy_file_name",
  "copy_generic_opt_list", "CreateStmt", "ConstraintAttributeSpec",
  "def_arg", "OptParenthesizedSeqOptList", "generic_option_arg",
  "key_action", "ColConstraint", "ColConstraintElem",
  "GeneratedColumnType", "opt_GeneratedColumnType",
  "GeneratedConstraintElem", "generic_option_elem", "key_update",
  "key_actions", "OnCommitOption", "reloptions", "opt_no_inherit",
  "TableConstraint", "TableLikeOption", "reloption_list", "ExistingIndex",
  "ConstraintAttr", "OptWith", "definition", "TableLikeOptionList",
  "generic_option_name", "ConstraintAttributeElem", "columnDef",
  "def_list", "index_name", "TableElement", "def_elem", "opt_definition",
  "OptTableElementList", "columnElem", "opt_column_list", "ColQualList",
  "key_delete", "reloption_elem", "columnList", "columnList_opt_comma",
  "func_type", "ConstraintElem", "TableElementList", "key_match",
  "TableLikeClause", "OptTemp", "generated_when", "CreateAsStmt",
  "opt_with_data", "create_as_target", "CreateFunctionStmt",
  "table_macro_definition", "table_macro_definition_parens",
  "table_macro_list_internal", "table_macro_list", "macro_definition",
  "macro_definition_list", "macro_alias", "param_list", "CreateModelStmt",
  "model_type_value", "model_on", "opt_feat_col_list", "feat_col_list",
  "with_result_col_list", "result_col_list", "opt_option",
  "CreateSchemaStmt", "OptSchemaEltList", "schema_stmt",
  "CreateSecretStmt", "opt_secret_name", "opt_persist",
  "opt_storage_specifier", "CreateSeqStmt", "OptSeqOptList",
  "CreateTypeStmt", "opt_enum_val_list", "enum_val_list", "DeallocateStmt",
  "DeleteStmt", "relation_expr_opt_alias", "where_or_current_clause",
  "using_clause", "unreserved_keyword", "col_name_keyword",
  "func_name_keyword", "type_name_keyword", "other_keyword",
  "type_func_name_keyword", "reserved_keyword", "DropStmt",
  "drop_type_any_name", "drop_type_name", "any_name_list",
  "opt_drop_behavior", "drop_type_name_on_any_name", "DropSecretStmt",
  "opt_storage_drop_specifier", "ExecuteStmt", "execute_param_expr",
  "execute_param_list", "execute_param_clause", "ExplainStmt",
  "opt_verbose", "explain_option_arg", "ExplainableStmt",
  "NonReservedWord", "NonReservedWord_or_Sconst", "explain_option_list",
  "analyze_keyword", "opt_boolean_or_string", "explain_option_elem",
  "explain_option_name", "ExportStmt", "ImportStmt", "IndexStmt",
  "access_method", "access_method_clause", "opt_concurrently",
  "opt_index_name", "opt_reloptions", "opt_unique", "InsertStmt",
  "insert_rest", "insert_target", "opt_by_name_or_position",
  "opt_conf_expr", "opt_with_clause", "insert_column_item", "set_clause",
  "opt_or_action", "opt_on_conflict", "index_elem", "returning_clause",
  "override_kind", "set_target_list", "opt_collate", "opt_class",
  "insert_column_list", "set_clause_list", "set_clause_list_opt_comma",
  "index_params", "set_target", "LoadStmt", "opt_force", "file_name",
  "opt_ext_version", "PragmaStmt", "PrepareStmt", "prep_type_clause",
  "PreparableStmt", "RenameStmt", "opt_column", "SelectStmt",
  "select_with_parens", "select_no_parens", "select_clause", "opt_select",
  "simple_select", "value_or_values", "pivot_keyword", "unpivot_keyword",
  "pivot_column_entry", "pivot_column_list_internal", "pivot_column_list",
  "with_clause", "cte_list", "common_table_expr", "opt_materialized",
  "into_clause", "OptTempTableName", "opt_table", "all_or_distinct",
  "by_name", "distinct_clause", "opt_all_clause", "opt_ignore_nulls",
  "opt_sort_clause", "sort_clause", "sortby_list", "sortby",
  "opt_asc_desc", "opt_nulls_order", "select_limit", "opt_select_limit",
  "limit_clause", "offset_clause", "sample_count", "sample_clause",
  "opt_sample_func", "tablesample_entry", "tablesample_clause",
  "opt_tablesample_clause", "opt_repeatable_clause", "select_limit_value",
  "select_offset_value", "select_fetch_first_value", "I_or_F_const",
  "row_or_rows", "first_or_next", "group_clause", "group_by_list",
  "group_by_list_opt_comma", "group_by_item", "empty_grouping_set",
  "rollup_clause", "cube_clause", "grouping_sets_clause",
  "grouping_or_grouping_id", "having_clause", "qualify_clause",
  "for_locking_clause", "opt_for_locking_clause", "for_locking_items",
  "for_locking_item", "for_locking_strength", "locked_rels_list",
  "opt_nowait_or_skip", "values_clause", "values_clause_opt_comma",
  "from_clause", "from_list", "from_list_opt_comma", "table_ref",
  "opt_pivot_group_by", "opt_include_nulls", "single_pivot_value",
  "pivot_header", "pivot_value", "pivot_value_list", "unpivot_header",
  "unpivot_value", "unpivot_value_list", "joined_table", "alias_clause",
  "opt_alias_clause", "func_alias_clause", "join_type", "join_outer",
  "join_qual", "relation_expr", "func_table", "rowsfrom_item",
  "rowsfrom_list", "opt_col_def_list", "opt_ordinality", "where_clause",
  "TableFuncElementList", "TableFuncElement", "opt_collate_clause",
  "colid_type_list", "RowOrStruct", "opt_Typename", "Typename",
  "qualified_typename", "opt_array_bounds", "SimpleTypename",
  "ConstTypename", "GenericType", "opt_type_modifiers", "Numeric",
  "opt_float", "Bit", "ConstBit", "BitWithLength", "BitWithoutLength",
  "Character", "ConstCharacter", "CharacterWithLength",
  "CharacterWithoutLength", "character", "opt_varying", "ConstDatetime",
  "ConstInterval", "opt_timezone", "year_keyword", "month_keyword",
  "day_keyword", "hour_keyword", "minute_keyword", "second_keyword",
  "millisecond_keyword", "microsecond_keyword", "week_keyword",
  "quarter_keyword", "decade_keyword", "century_keyword",
  "millennium_keyword", "opt_interval", "a_expr", "b_expr", "c_expr",
  "d_expr", "indirection_expr_or_a_expr", "indirection_expr", "list_expr",
  "struct_expr", "map_expr", "func_application", "func_expr",
  "func_expr_windowless", "func_expr_common_subexpr",
  "list_comprehension_lhs", "list_comprehension", "within_group_clause",
  "filter_clause", "export_clause", "window_clause",
  "window_definition_list", "window_definition", "over_clause",
  "window_specification", "opt_existing_window_name",
  "opt_partition_clause", "opt_frame_clause", "frame_extent",
  "frame_bound", "opt_window_exclusion_clause", "qualified_row", "row",
  "dict_arg", "dict_arguments", "dict_arguments_opt_comma", "map_arg",
  "map_arguments", "map_arguments_opt_comma",
  "opt_map_arguments_opt_comma", "sub_type", "all_Op", "MathOp", "qual_Op",
  "qual_all_Op", "subquery_Op", "any_operator", "c_expr_list",
  "c_expr_list_opt_comma", "expr_list", "expr_list_opt_comma",
  "opt_expr_list_opt_comma", "func_arg_list", "func_arg_expr", "type_list",
  "extract_list", "extract_arg", "overlay_list", "overlay_placing",
  "position_list", "substr_list", "substr_from", "substr_for", "trim_list",
  "in_expr", "case_expr", "when_clause_list", "when_clause",
  "case_default", "case_arg", "columnrefList", "columnref",
  "columnref_opt_indirection", "opt_slice_bound", "opt_indirection",
  "opt_func_arguments", "extended_indirection_el",
  "opt_extended_indirection", "opt_asymmetric",
  "opt_target_list_opt_comma", "target_list", "target_list_opt_comma",
  "target_el", "except_list", "opt_except_list", "replace_list_el",
  "replace_list", "replace_list_opt_comma", "opt_replace_list",
  "qualified_name_list", "name_list", "name_list_opt_comma",
  "name_list_opt_comma_opt_bracket", "name", "func_name", "AexprConst",
  "Iconst", "type_function_name", "function_name_token", "type_name_token",
  "any_name", "attrs", "opt_name_list", "param_name", "ColLabelOrString",
  "TransactionStmt", "opt_transaction", "opt_transaction_type",
  "UpdateStmt", "UpdateExtensionsStmt", "UseStmt", "VacuumStmt",
  "vacuum_option_elem", "opt_full", "vacuum_option_list", "opt_freeze",
  "VariableResetStmt", "generic_reset", "reset_rest", "VariableSetStmt",
  "set_rest", "generic_set", "var_value", "zone_value", "var_list",
  "VariableShowStmt", "describe_or_desc", "show_or_describe", "opt_tables",
  "var_name", "table_id", "ViewStmt", "opt_check_option", YY_NULLPTR
};

static const char *
yysymbol_name (yysymbol_kind_t yysymbol)
{
  return yytname[yysymbol];
}
#endif

#define YYPACT_NINF (-3107)

#define yypact_value_is_default(Yyn) \
  ((Yyn) == YYPACT_NINF)

#define YYTABLE_NINF (-2116)

#define yytable_value_is_error(Yyn) \
  ((Yyn) == YYTABLE_NINF)

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
static const int yypact[] =
{
    7528,   -20,   884, -3107, -3107,   315,   -20, 50321, 66658,   191,
     -20,   144,  1435, 52365, -3107, -3107, 46744, 74249,   -20, 55942,
   74234,   393,   486, 31769,   521, 56453, -3107, -3107, -3107, 66658,
   55942, 56964,   -20,   364, 67169, -3107,   -20, 34324, 52876,   231,
   -3107, 55942,    56,   202, 57475, 55942,  3777,   634,   371, -3107,
   -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107,
   -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107,
   -3107, -3107, -3107, -3107,   296, -3107, -3107, -3107, -3107,   149,
   -3107,   631, -3107, -3107, -3107, -3107,   155, -3107,   329,   173,
   31769, 31769,  1083,   255, -3107, -3107, -3107, -3107, -3107, -3107,
   -3107, -3107, -3107, -3107, 33813, -3107, -3107, -3107, -3107, 57986,
   55942, 58497, 53387, 59008, -3107,   596,   918,   592,   186, -3107,
   -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107,
   -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107,
   -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107,
   -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107,
   -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107,
   -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107,
   -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107,
   -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107,
   -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107,
   -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107,
   -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107,
   -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107,
   -3107, -3107,   196, -3107, -3107, -3107, -3107, -3107, -3107, -3107,
   -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107,
   -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107,
   -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107,
   -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107,
   -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107,
   -3107, -3107, -3107,   444, -3107, -3107, -3107, -3107, -3107, -3107,
   -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107,
   -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107,
   -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107,
   -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107,
   -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107,
   -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107,
   -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107,
   -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107,
   -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107,
   -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107,
   -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107,
   -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107,
   -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107,
   -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107,
   -3107, -3107, -3107,   198, -3107, -3107, -3107, -3107, -3107, -3107,
   -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107,
   -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107,
   -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107,
   -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107,
   -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107,
   -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107,
   -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107,   334,   211,
   -3107, -3107, -3107,   468, -3107, -3107, -3107, -3107, -3107, -3107,
   -3107, -3107,  1959, -3107, -3107,   904,  1948, 55942,   733,   761,
     695, -3107, 59519, -3107,   682, 55942, -3107, -3107,  2666,   689,
     941, -3107, -3107, 53898, -3107, -3107, -3107, -3107, -3107, -3107,
   -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107,
   -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107,
   -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107,
   47255, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107,
   -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107,
   -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107,
   -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107,
   -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107,
   -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107,
   -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107,
   -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107,
   -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107,
   -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107,
   -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107,
   -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107,
   -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107,
   -3107, -3107, -3107, -3107, -3107,   836, -3107, -3107,   705, -3107,
     154, -3107, -3107,   731,   715, -3107, -3107, -3107, -3107, -3107,
   -3107, -3107, -3107, -3107, -3107,   796, -3107, -3107, -3107,   817,
   67680, 60030, 60541, -3107,   692,  3099, 74433, 74316, 31257, -3107,
   -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107,
   -3107, -3107, -3107, -3107, -3107, -3107, -3107,   296, -3107, -3107,
   -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107,
   -3107, -3107, -3107, 56453, 66658,   726,   743,  1120,   779, 32280,
     809, 34836,   846,   860,   863,  1188,   886,   916,   938,   964,
     202, 30746,   991,   334, -3107, 61052, 61052,   -37,  2654, -3107,
   61052, 61563, -3107,  1002, -3107,   918, -3107, -3107, -3107, -3107,
     410,   992, -3107, 62074, 62074, 62074,  1024,  1313, 62074, -3107,
   -3107, -3107,  1019, -3107, -3107,  1258, 19580, 19580, 68191, 68191,
     918, 68191,  1046, 68191, -3107, -3107,    63,   592, -3107, -3107,
    1083,  1042,   334, -3107, -3107, 52876, -3107, -3107,   307,  1403,
   19580, 55942,  1050, -3107,  1066,  1050,  1078,  1092,  1108, -3107,
    7528, -3107, 55942,  1468,  1362, 54409, 56453,   372,   372,  1621,
     372,   690,  1129,  3932,  2209, -3107,  1017, -3107,  1148,  1255,
    1174,  1477, -3107,  1042,  1542,   927,  1343,  1557,  3558,  1564,
    1497,  1570,  1677,  1572,  1692,    45, -3107, 19580, 47766,   334,
   -3107, 11525, 19580, -3107, -3107, -3107,  1299, -3107, -3107, -3107,
   -3107, -3107, -3107, 55942, 66658,  1210,  1214, -3107, -3107, -3107,
   -3107,   789,  1471, -3107,  1717, -3107, -3107, -3107, -3107, -3107,
    1277, 62585, 63096, -3107, 63607, 64118,  1507, 68702,  1676, -3107,
   -3107,  1624, -3107, -3107, -3107,  1295, -3107, -3107, -3107,   272,
   69213,  1640,  1264,   108, -3107,  1654,   109, -3107,  1656,  1514,
   15284, -3107,  1448, -3107, -3107, -3107,   202, -3107, -3107, -3107,
     345, -3107, -3107, 43862, 74316,  1372,  1286, -3107, 19580, 19580,
    1287,  7985, 61052, 61563, 19580, 55942, -3107, 19580, 24413, 55942,
    1290, 19580, 19580, 12599, 19580, 29724, 61052,  2654,  1293, -3107,
     939, 55942,  1296, -3107,  1396,  1396,   364, 31769,  1606, -3107,
     228,  1600,  1526, -3107, 31769,  1526,  1402,  1305,  1609,  1526,
   -3107,   822,  1614,  1396, 35347,  1311, -3107,  1396,  1539, -3107,
   -3107, 19580, 15284, 71768,  1805, -3107, -3107, -3107, -3107,  1608,
   -3107, 66658,  1316, -3107, -3107, -3107, -3107, -3107, -3107,   701,
    1844,   193,  1845, 19580,   193,   193,  1321,   213,   213, -3107,
    1518,  1323, -3107,   217,  1324,  1325,  1851,  1852,   201,   163,
     970,   193, 19580, -3107,   213,  1328,  1854,  1338,  1861,   160,
     175, -3107,   220, 19580, 19580, 19580,   365, 19580, 10451, 55942,
   -3107,  1864, 47766,   577, -3107,   334,  1344,   918, -3107, -3107,
   -3107, -3107, -3107, -3107, -3107,  1346, -3107,   203,  6358, -3107,
   -3107, -3107, -3107, -3107, -3107, -3107,  1384, -3107, -3107, -3107,
   -3107,  1571, 19580, -3107, -3107,  1348,  1606, -3107,   223, -3107,
   -3107,  1606, -3107, -3107, -3107, -3107, -3107,   247, -3107,  1778,
   19580, 19580, -3107, 66658,   334, -3107, 69724, -3107, -3107, -3107,
   -3107, -3107, -3107,   625, -3107,   296, 45321,  1349,  1355,  1050,
   55942, 55942,  1847, -3107, -3107, -3107, -3107,  1066, 52876,   184,
    1669,   159,  1495,   120, -3107, -3107,  1083,  1083, 15821,  1006,
     258,    79, 16358, 20117,  1731,  1610,   256,   221,  1734, -3107,
    1616,  1846, 24413, 19580, 19580,   690,  1129, 19580, -3107, -3107,
   -3107,  1667, 55942, 50832,   873,  1035,  1381,  1469,  1385,   317,
    1820, -3107,  1380, -3107,  1474, 55942, 73767,   200, -3107,  1863,
     200,   200,   519,  1868,  1487,   273,  1660,   669,   402,  3071,
   -3107,  1380, 52876,   147,   808,  1380, 55942,  1490,   870,  1380,
    1828, 66658,  1286, -3107, -3107, 41418,  1404, -3107, -3107, -3107,
     169, 15284, -3107,  1205,  1249,  1310,   765,   207,  1399,  1559,
   15284,  1580,  1605,   171,  1607,  1613,  1615,  1619,  1623,  1641,
    1646,  1649,   153,  1653,  1678,  1680,  1686,  1688,  1699, -3107,
    1722,   181,  1725,   230, 15284,  1729, -3107,   183, -3107, 45321,
     -31, -3107, -3107,  1736, 45634, -3107,  1718,  1499,  1502, 66658,
    1461, 55942,  2853,  1575,  1801,  1866, 72264, 55942,  1697,  3071,
    1698,  1438,  1930,  1703,  1214,  1706,  1444, 64629,  1707, -3107,
    1774, -3107, 70235, 47766, -3107, -3107, -3107, -3107, -3107,  1830,
    1817, 66658, 47766,  1460, -3107, -3107, 66658, -3107, 55942, 55942,
   -3107, 55942, 66658, -3107,   626, 45321,  1980,   881, 74316, 49299,
   -3107, -3107, -3107, -3107,  1200,  1221, -3107, -3107, -3107, -3107,
   -3107, -3107, -3107, -3107, -3107,   918, 47766, -3107,  2891, 44500,
    1463, 19580, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107,
   -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107,
   -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107,
   -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107,
   -3107, -3107, -3107,  1465,  1824, -3107, -3107,  6163,  1470, 44539,
    1479, 24413, 24413,   334,  2482, -3107, -3107, 24413,  1481,  1464,
   49810, 44409,  1478,  1484, 44900, 16895, 19580, 16895, 16895, 44940,
   -3107,  1485, 44991, 61052,  1488, 55942, 54920, -3107, -3107, -3107,
   19580, 19580,  2654, 55431,  1510, -3107, 31769, -3107,  1789, 31769,
   -3107, -3107,  4411, -3107, 31769,  1791, 19580, 31769, -3107,  1733,
    1742,  1493, 31769, -3107, 55942,  1504, 55942, -3107, -3107, 45321,
   -3107,  1496,   734,  1503, -3107, -3107, -3107, -3107, -3107,  1563,
   -3107,  1563,  1563, -3107, -3107, -3107, -3107,  1506,  1506,  1508,
   -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107,
   -3107, -3107, -3107,  1513,   970, -3107,  1563, -3107,  1506, -3107,
   -3107, -3107, -3107, -3107, -3107, -3107, 73767, -3107, -3107, -3107,
   -3107,   586,   607, -3107,  1516, -3107, -3107, -3107, -3107,  1517,
   -3107,  1520,  2009, -3107, -3107, -3107, -3107, -3107, -3107, -3107,
   -3107, -3107,  7166,   756,  1506,  2919, -3107, -3107, 19580, 19580,
   -3107, -3107,  1519, 45321,  1562, -3107, -3107, 19580, 19580, -3107,
   -3107, -3107, -3107,  2047, -3107, 19580,  1563,  1563, -3107,  6740,
   -3107, 39948, 17432,  1618,  1630,  2047, -3107,  2047, -3107,  6740,
    2061,  2061,  1544, 37902, -3107,  1710, 45031, -3107,  1549,  2084,
    6807,  1545,  1543, -3107,  1546,  1550, -3107, -3107, 42329,   170,
     334,   334, 19580, -3107,  2047, 19580,  5381,  5381, -3107,   232,
   71768, 19580, 19580, 19580, 19580, 19580, 19580, 19580, 19580, 46233,
    1643,   187, 66658, 19580, 19580, 28693,   902, -3107, 19580,  1799,
   -3107,  1560, 19580,  1644,   748, 19580, 19580, 19580, 19580, 19580,
   19580, 19580, 19580, 19580, -3107, -3107, 28172,   257,   747,  1910,
    1931,   260,   524, 19580,  1923, 11525, -3107,  1923, -3107, -3107,
   -3107, -3107, -3107,   225, -3107, -3107,  1496,  1496, -3107, 66658,
   -3107, 55942,   307, 51854, 19580, -3107, -3107,  1565,  1567,   162,
   -3107,  1633, -3107, -3107, 55942, -3107, 38413, 56453, 56453, -3107,
    1878, -3107,   357,  1569, -3107, 44370,  1835,  1878,  1083, -3107,
   -3107, 25487,  1708,  1879,  1810, -3107, -3107,  1792,  1793, -3107,
    1581, 45673, 20654, 20654, -3107,  1336, 45321,  1373, -3107, -3107,
   -3107, -3107, -3107, -3107,    61, -3107, 55942,   520, 35858, -3107,
    1582,    69, -3107,  4002,  1932,  1896,  1731,   221,  1590, -3107,
    1694,  1593, 70746, 55942,  1894,  1848,  1898,   190, 71768, -3107,
   -3107, -3107, -3107, 55942, 66658, 65140, 71257, 48277, 55942, 47766,
   -3107, -3107, -3107, -3107, 55942,   185, 55942,  6947, -3107, -3107,
   -3107, -3107,   200, -3107, -3107, -3107, -3107, -3107, 66658, 55942,
   -3107, -3107,   200, 66658, 55942,   200, -3107,  1701, 55942, 55942,
   55942, 55942,  1728, 55942, 55942,   918, -3107, -3107, -3107, 21191,
     -15,   -15,  1837, 13136,   165, -3107, 19580, 19580,   968,   269,
   66658,  1787, -3107, -3107,   760,  1843,   112, -3107,  1661, 55942,
   55942, 55942, 55942,  1877, 66658, 55942,  1115, -3107, -3107, -3107,
   -3107, -3107, -3107,  1617, -3107,  1620,  1993,  3071, -3107,  1995,
   51343,   859,  2334,  1998,  1662,  1999, 13673, -3107, -3107,  1622,
   -3107, -3107,  1627,  2113,  1873,  1838,  2003,  2161,  1637,  1886,
   -3107, -3107,  1872, -3107, 66658,  2168, -3107,   108, -3107, 47766,
   -3107,   109, -3107,  1880,   267, -3107, 15284, 19580, -3107, -3107,
   -3107, -3107, -3107, -3107,  1286, 29211, -3107,   791, -3107, -3107,
    2134,   918,  2134,   167, -3107, -3107,  2134, -3107,  2116,  2134,
   -3107, 71768, -3107,  7803, -3107, 19580, 19580, -3107, 19580,  2002,
   -3107,  2169,  2169, 71768, 24413, 24413, 24413, 24413, 24413, 24413,
     650,  1328, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413,
   24413, 26024,   563, -3107, 31769, -3107,   806,  2142, 19580, 19580,
    2015,  2002, 19580, -3107, 71768,  1655, -3107,  1663,  1664, 19580,
   -3107, 71768, -3107, 55942,  1670,    94,   -16, -3107,  1657,  1668,
   -3107,  1606, -3107,   967,   989, 55942,   226,  4860,  5355, -3107,
   -3107, 19580,  2007,  4411, 31769, -3107, 19580,  1673, -3107, -3107,
   31769,  2023, -3107, -3107, -3107, 36369,  4411, 71768,   812, -3107,
   55942, 71768,   837, 19580, -3107, 15284,  2190, 71768,  2165, 66658,
   66658,  2210,  1689,  1690,  2047,  1771, -3107,  1773,  1777,  1780,
   -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107,
   71768, -3107, -3107, -3107, -3107,   156, -3107, -3107, -3107, -3107,
    1700,  1704, 19580, 19580,    75, -3107,  7825,  1714,  1716,  6051,
   -3107,  1685, -3107,  1693, -3107, -3107, -3107, -3107, -3107, -3107,
   -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107,
   -3107,  1705, -3107,  1719, -3107,  1721,  1744,  1746,  1724,  1730,
   19580, 55942, -3107, 21728, -3107, 66658, -3107, -3107, 19580, 19580,
   55942, -3107,  2080, -3107,  1732,  1737,  8215, -3107, -3107, -3107,
     289,   887, 45692,   524, 41626, 41626, 41626,  6740, -3107, -3107,
   -3107,  1752, -3107, 24413, 24413, -3107,  6974,  3514, 10451, -3107,
   -3107, -3107, -3107,  2056, -3107,   921, -3107,  1711, -3107, -3107,
    4405, -3107, 39948, 45728, 19580,   188, -3107, 19580, 28693, 19580,
    1795, 41626, 41626, 41626,   286,   286,   289,   289,   289,   887,
     524, -3107, -3107, -3107,  1740, 19580, 47766, -3107,  1745,  1749,
    2093,  1338, 19580, -3107, -3107, 31769,  1510,   -31,  1510,  2047,
    5381, -3107,  1066, -3107, -3107,  1066, 45321, 55942, -3107, -3107,
    2025,  1751, 31769,  1794,  2242,  2225, 66658, -3107, -3107,  1753,
    1923,  1769,  1809,  1809, -3107, -3107, -3107, -3107,  1776, 19580,
    3181,  1776, -3107,  1878,    16,  1994,  1370,  1370,  1336,  1996,
   -3107, -3107,  1831, -3107, -3107, -3107, 19580, 14210,  1377, -3107,
    1383, -3107, -3107, -3107, -3107, -3107,  1760, -3107,  2050, -3107,
   55942, -3107, -3107, 24413,  2247, 19580, 36880,  2248,  2039, -3107,
   -3107, -3107,  1884,  1380, 19580,  2033, -3107,   168,  1798,  2170,
     297,  2115, 66658, -3107,   335,   341, -3107,   498,  2176,   267,
    2178,   267, 47766, 47766, 47766,   844, -3107, -3107, -3107,   918,
   -3107,   -93,   847, -3107, -3107, -3107, -3107,  1889,   901,  3071,
    1380, -3107, -3107, -3107, -3107, -3107, -3107, -3107,   199,   925,
    1380,  1890, -3107,  1891, -3107,  1892,   942,  1380, -3107, -3107,
    1692,  8838, 45321,   595,   165,   165,   165, 15284, -3107,  2048,
    2049,  1814, 45321, 45321,   148, -3107, -3107, -3107, -3107,  1806,
   -3107,   233, -3107, 66658, -3107, -3107, -3107,  1787,  1866, 55942,
    3071,  1811,  2282,  1214,  1444, 55942,  1774, -3107,  1974,  1991,
    1405, -3107, 66658, 55942, 55942, 55942, 65651, -3107, -3107, -3107,
    1816,  1813, -3107,    -2,  2055,  2057, 55942,  1860, 55942,  1385,
    2316, 55942, -3107,   856,  1444,  1444, 17969,  2204,  2355, 66658,
   -3107, 47766,  2212, 55942,  1817, -3107, -3107, -3107, -3107, 66658,
   -3107, -3107, 45321, -3107,  1832, -3107, 19580, 48788, -3107, -3107,
   -3107, -3107, -3107, -3107, -3107, 47766, -3107,   918, -3107,   918,
    2087, 66658, 42840,   918, 43351,   918,  1849, -3107, 45321, 40467,
   45321,  2015, -3107,   238,  2169,  2293,  2293,  2293,  2382,  2201,
     344,  1853,  2293,  2293,  2293,   318,   318,   238,   238,   238,
    2169,   563,  1153,  1002, 49810,  1856, -3107, 45321, 45321, -3107,
   -3107,  1865, -3107, -3107, -3107, -3107,  1869,  1874, -3107, -3107,
   -3107, -3107, -3107, -3107, 66658,  1392,  1510,   231,   231,   231,
     231, -3107, 55942, 55942, 55942, 45321,  2317,  2193, -3107,  4411,
   45321, 55942, -3107, 27098, 55942, -3107,  2222, -3107,  2299, -3107,
   55942,   894, -3107, -3107, -3107,   911,  1867,  1690, 71768,   912,
     926, -3107,  2047,   178,  1875,  1494,   946,   574,  1378, -3107,
   52876, -3107, -3107,  1876, 45281, 19580, -3107,  2255, -3107, -3107,
   -3107, 19580, 19580, -3107, 39948, -3107, -3107, -3107, -3107,   452,
     452, 40489,  1883, 10451, 45362, -3107, -3107,  2202,  1893, -3107,
   40537, 45321, -3107,  1710, -3107, -3107,  5381, 19580,   300,  1261,
   19580,  1888, 19580,  2218, -3107, -3107,  1881, -3107, -3107, 71768,
   19580,  1895,  6918, 24413, 24413,  8114, -3107, 40619, 19580, 10451,
   -3107, 41646,  1882,  1885,  1837, 18506, -3107,  2119,  1899, -3107,
    2007,   165,  2007,  1900, -3107, -3107, -3107, -3107,  2919, -3107,
   19580,  2059, 66658,   141,  1952,   947, -3107,   334, 38413,  1794,
   19580, -3107, -3107,   239, -3107, -3107,  1902, -3107,  1776, -3107,
   -3107, -3107,  2138, -3107, -3107, -3107, 55942, -3107,  1907, -3107,
   35858,  2258, 10988, -3107, 35858, 55942, 55942, 40559,  2286, -3107,
   66658, 66658, 66658, -3107, 66658,  1909,  1912,   552,  1916,   405,
   -3107,  3535,   552,  2272,   259,  1385,   273,  5872,    73, -3107,
   -3107, -3107,  1997, 55942, -3107, 66658, -3107, -3107, -3107, -3107,
   -3107, 48277, -3107, -3107, 39436, 47766, -3107, 47766, 55942, 55942,
   55942, 55942, 55942, 55942, 55942, 55942, 55942, 55942,  1286, 19580,
   -3107, 19580,  1921,  1922,  1924,  1837, -3107, -3107, -3107,   224,
   -3107,  1927, -3107, -3107, -3107,   402, -3107,   233,  1933, -3107,
   51343,  1948,  1662, -3107,  1627,  2139,  1935,  1866,   636, 66147,
   -3107,  1936,  1925,   949,  3071,  1939,  2422, -3107,   859, 51343,
   -3107, -3107, -3107,  2380, -3107,   692,   275, -3107,  1214, -3107,
    1948,  1444, -3107, -3107,  2434, -3107,  2435,  1948, 45321, 55942,
    2179,  1774,   961, 66658,  2008, -3107,   267,   971, -3107, -3107,
   -3107, -3107, -3107, 66658,  1944, -3107,  1944, -3107, -3107,  1944,
   -3107, -3107, -3107, -3107, 24413,  2311,  1957, 71768, 61052, 31769,
   -3107, -3107, 55942, -3107, -3107, -3107,   975,  1958,  2007, 55942,
   55942, 55942, 55942, -3107, -3107, -3107, 19043, 19580,  2000, -3107,
    1963, 12062,  2302, -3107, 26561, -3107, -3107,  1976, 36369, 66658,
   -3107, -3107, -3107, -3107,  2047, -3107, -3107, 66658, -3107,  1981,
   -3107,  1983, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107,
   -3107, 19580, 45321, -3107, 45321, -3107, -3107, -3107, -3107, -3107,
   -3107,  6612, -3107,  1978,  1984, 66658, 19580, 66658, -3107, -3107,
   -3107,   450, 19580, 19580,  6974, -3107,  8060, 19580, 71768,   977,
    6974,   316, 19580,  4137,  4325, 19580, 19580, 44625, 40641, -3107,
   22265, 14747, -3107,  1985, 19580, 40869, 38924, -3107, 31769,  2193,
    1990,  2193,   918,  2001, 45321, 19580, -3107, -3107, -3107, -3107,
    2013,   368, 33302,  2208, -3107,  2005, 66658, -3107,  2059, 45321,
   -3107, -3107, 39948, -3107, -3107, -3107, -3107, -3107,  2466,  1839,
    2006,  2010, -3107,  1294, -3107, -3107, 66658,  2011, -3107,  2016,
     552, -3107, 66658,  2038, -3107,   663,  2323,   140, -3107, 19580,
   -3107,  2419,  2499,  3535,  2014, 66658, 55942, 24413, -3107,   677,
     331, -3107,  2318, 55942,  2038,  2462, -3107, -3107, -3107,   405,
   -3107,  2356,  2265, -3107,   200, -3107, 19580,   405,  2266,   251,
   66658, -3107, -3107,  2819, -3107, 71768,   267,   267, -3107,  1503,
    2022,  2024,  2026,  2027,  2029,  2030,  2032,  2034,  2035,  2036,
   -3107,  2037,  2042,  2053,  2054,  2058,  2063,  2065,  2068,  1513,
    2069, -3107,  2074,  1902,  2076,  2077,  2079,  2082,  2085, 72760,
    2090,  2091,  2096,  2100,  1516,  2105,  1200,  1221, -3107, -3107,
   -3107, -3107,  2111, -3107, -3107, -3107,  1264,  2051, -3107, -3107,
   -3107,  2112, -3107,  2128, -3107, -3107, -3107, -3107, -3107, -3107,
    2060,  2064, -3107, -3107, -3107,   165,  2120,  2122, 66658,  1286,
      99, 66658,  2123,  1860,  2539,  2575, 47766,  2813,  2305,  2114,
   -3107,   918,  1662, -3107, 51343,  2798,   832,  2057, -3107,   215,
    1860, -3107,  2540,  1662,  2154, -3107,  1627,  2221, 19580,   146,
   -3107,  2336,   204,  2353,  2133, -3107,  2367, 66658,  2136, -3107,
   -3107, 48788,  1944,  4541, 24413, 71768,   979, -3107,  1969,   990,
   -3107,  2656,  2303,  2193, -3107, -3107, -3107, -3107, -3107,  2140,
     -13,  2141,  9914,  2132, -3107, -3107, -3107, -3107, -3107, -3107,
   45321, 45321, 66658,  2326, -3107, -3107,  2143,  2144, 37391,  2610,
    2151, -3107, -3107,  2481, -3107, 30235, -3107,  1690,  2156,  1690,
   71768,  1690, -3107, -3107, 45321, 19580, -3107, -3107, 41755,  2492,
   -3107,  6974,  6974,  8060,   999, -3107,  6974, 19580, 19580,  6974,
    6974, 19580, -3107,  9376,   604, -3107,  1003, -3107, 40891, -3107,
   73256, -3107, -3107,  2000,   918,  2000, -3107, -3107,  2152, -3107,
   -3107, -3107,  2215, -3107, -3107,  1007,  2599,  2059, 19580, -3107,
   -3107,  2162, 35858, -3107, -3107, -3107, -3107, 35858,   552, -3107,
    2338,  2038,  2167, -3107, -3107, -3107, -3107, -3107, -3107, 41021,
   -3107,    30, 19580, -3107,   843,  2382, -3107, -3107, -3107, -3107,
    2038,  1214, -3107, 55942,  2658,  2546, -3107, -3107, 45321, -3107,
   -3107,  2047,  2047, -3107, -3107,  2299, -3107, -3107,  2171, -3107,
   -3107,  1264,   -89, 39436, 55942, 55942, -3107, -3107,  2173, -3107,
   -3107, -3107, -3107, -3107,   402,  2576,  1026,   859, -3107,  1948,
    2179,  1049, 55942,  2555, 51343, -3107,  2670,  2181, 55942,  1860,
     205,   205, -3107,  2335, -3107,  2339, -3107, -3107,  2676,   243,
   -3107,  1323,  2712,   547, 55942, 55942, -3107,  2189, 47766, 55942,
   -3107, -3107, 32791, -3107,  4541,  1052, -3107, 61052, -3107,  2194,
    2197, -3107,  2000, 19580,  2199, 19580, -3107, 22802,  2691,  2198,
   -3107, 19580,  2267, 27635, -3107, 19580, -3107, 55942, 61052,  2214,
   61052, -3107, -3107, -3107, -3107, -3107, 19580, -3107,  6974,  6974,
    6974, 19580, -3107, 19580, -3107, -3107, -3107,  2420,  2326, -3107,
    2326, 19580,  1948,   334,  2146, 66658,    -8, -3107, 45321, -3107,
   -3107, -3107, 55942, -3107, 47766, -3107,   552,   401,  2217, 19580,
   41222,  2458, -3107, -3107,  2494, -3107,  2556, -3107,  2280,   623,
    2297, -3107, -3107, -3107, -3107,  1286,   918,  1662,  2057,  2154,
    2446, -3107,  2226, 55942,  1948,   859,   692, -3107, -3107, -3107,
   -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107, -3107,
    1948,  2683,  2459,  2686, -3107,  2179,  2080, 55942,  2598,  2598,
   66658,  1053,  2008, 19580,    98, -3107,  1056,  2682, -3107, -3107,
   -3107,  2755,  2326,  2234, 22802,  2235, -3107,  2239, 66658, 45321,
    2389, -3107, -3107,  2240, -3107, -3107, 19580, -3107, 41821,  2243,
    2244,  2715,  1837,  2267,  2267, -3107,   368, -3107, -3107,  2685,
   32791,  2643,  1214,   552,  2260,  1064, -3107, -3107, -3107, -3107,
   -3107,  3071, -3107, 41271,  2514,   129,  2497,  2217, 19580, -3107,
    2341, -3107, -3107, -3107,  2757, -3107, -3107,  2271, 51343,  2273,
    2154,  2057,  1860,  2154,  2502, -3107,  2506,  2500, -3107,  2290,
    2674, -3107, -3107, -3107,  2291,  2287, -3107,  2294, 41293, 66658,
   66658,  1662, 32791, 66658,  2296,  2267, -3107,  2300, -3107, -3107,
   -3107, 54920, -3107,  2301, -3107, -3107, -3107, 19580,   158, -3107,
   -3107,  2351, 55942,  1076,    66,  2494, 39436, -3107, 47766,   179,
     401,  2620, -3107, -3107, -3107, -3107,   125,  2533, -3107,  2536,
   -3107, 45321, -3107,  1948, 66658, 51343, -3107, -3107, -3107, -3107,
   -3107, -3107,  2306, -3107, 55942,  2534, 66658, 32791,  2682, -3107,
     357, -3107,  1510, -3107,   357, -3107, -3107, -3107, -3107, -3107,
    1478, 23339, 23339, 23339,  2307,  1948, -3107,  1510, -3107,  2438,
    2497, -3107, -3107, -3107, -3107, -3107,   195,   195,  2717, -3107,
    2374, -3107,  2154,  2310, 66658,  2598,  2309, -3107, -3107,  1080,
   66658,  1776, -3107,  1776, 24950,  2467,   236, 44448,  2695, -3107,
    2695,  2695, -3107, -3107, -3107, 38413, -3107, -3107,  2821, -3107,
     294, -3107, -3107, -3107,  2534,  2320, -3107, 55942,  1662,   357,
   -3107, -3107,  2816, -3107, -3107, -3107, -3107, -3107,   172, -3107,
   -3107, -3107,  1510,   552, -3107, -3107, -3107, -3107,  2534,  2319,
    1510,  1776, 23876,  2475, -3107,  2552, -3107, -3107, -3107, -3107,
   -3107, -3107, -3107, -3107, -3107
};

/* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
   Performed when YYTABLE does not specify something else to do.  Zero
   means the default is an error.  */
static const yytype_int16 yydefact[] =
{
    1460,    78,     0,  1545,  1544,   294,    78,     0,   287,     0,
      78,   166,   589,     0,   110,   109,     0,   212,    78,     0,
    1460,     0,   597,     0,     0,     0,   641,   644,   642,     0,
       0,     0,    78,   681,     0,   111,    78,     0,     0,   673,
     643,     0,   202,     0,     0,     0,     0,     0,     2,     4,
       5,     6,     7,     8,     9,    24,    10,    11,    12,    13,
      20,    14,    15,    16,    17,    18,    19,    21,    22,    23,
      26,    25,    27,    28,  1501,    29,    30,    31,    32,     0,
      33,     0,    34,    35,    36,    37,   617,   603,   686,   616,
       0,     0,  1459,   785,   624,    38,    40,    39,    41,    42,
      43,    44,    45,   112,   108,    46,    77,    76,    70,     0,
       0,     0,     0,     0,   293,     0,     0,    81,   428,  1562,
    1563,  1564,  1565,  1566,  1567,  1568,  1569,  1570,  1571,  1572,
    1946,  1573,  1574,  1575,  1576,  1577,  1947,  1578,  1579,  1580,
    1892,  1893,  1948,  1894,  1895,  1581,  1582,  1583,  1584,  1585,
    1586,  1587,  1588,  1589,  1590,  1896,  1897,  1591,  1592,  1593,
    1594,  1595,  1898,  1949,  1899,  1596,  1597,  1598,  1599,  1600,
    1950,  1601,  1602,  1603,  1604,  1605,  1606,  1607,  1608,  1609,
    1951,  1610,  1611,  1612,  1613,  1614,  1615,  1616,  1617,  1618,
    1619,  1900,  1620,  1621,  1901,  1622,  1623,  1624,  1625,  1626,
    1627,  1628,  1629,  1630,  1631,  1632,  1633,  1634,  1635,  1636,
    1637,  1638,  1639,  1640,  1641,  1642,  1643,  1644,  1645,  1646,
    1647,  1648,  1649,  1902,  1650,  1651,  1652,  1653,  1654,  1655,
    1903,  1656,  1657,  1658,  1904,  1659,  1660,  1661,  1952,  1953,
    1662,  1663,  1905,  1955,  1664,  1665,  1906,  1907,  1666,  1667,
    1668,  1669,  1670,  1671,  1672,  1673,  1674,  1956,  1675,  1676,
    1677,  1678,  1679,  1680,  1681,  1682,  1683,  1684,  1685,  1686,
    1957,  1908,  1687,  1688,  1689,  1690,  1691,  1909,  1910,  1911,
    1692,  1958,  1959,  1693,  1960,  1694,  1695,  1696,  1697,  1698,
    1699,  1700,  1961,  1701,  1962,  1702,  1703,  1704,  1705,  1706,
    1707,  1708,  1709,  1912,  1710,  1711,  1712,  1713,  1714,  1715,
    1716,  1717,  1718,  1719,  1720,  1721,  1722,  1723,  1724,  1725,
    1726,  1727,  1728,  1729,  1730,  1913,  1964,  1914,  1731,  1732,
    1733,  1734,  1915,  1735,  1736,  1965,  1737,  1916,  1738,  1917,
    1739,  1740,  1741,  1742,  1743,  1744,  1745,  1746,  1747,  1748,
    1918,  1966,  1749,  1750,  1967,  1919,  1751,  1752,  1753,  1754,
    1755,  1756,  1757,  1758,  1759,  1760,  1761,  1762,  1763,  1764,
    1920,  1968,  1765,  1766,  1921,  1767,  1768,  1769,  1770,  1771,
    1772,  1773,  1774,  1775,  1776,  1777,  1778,  1779,  1780,  1922,
    1781,  1782,  1783,  1784,  1785,  1786,  1787,  1788,  1789,  1790,
    1791,  1792,  1793,  1794,  1795,  1796,  1797,  1798,  1799,  1969,
    1800,  1801,  1802,  1923,  1803,  1804,  1805,  1806,  1807,  1808,
    1809,  1810,  1811,  1812,  1813,  1814,  1815,  1816,  1817,  1818,
    1819,  1820,  1821,  1924,  1822,  1823,  1970,  1824,  1825,  1925,
    1826,  1827,  1828,  1829,  1830,  1831,  1832,  1833,  1834,  1835,
    1836,  1837,  1838,  1926,  1839,  1927,  1840,  1841,  1842,  1972,
    1843,  1844,  1845,  1846,  1847,  1848,  1849,  1928,  1929,  1850,
    1851,  1930,  1852,  1931,  1853,  1854,  1932,  1855,  1856,  1857,
    1858,  1859,  1860,  1861,  1862,  1863,  1864,  1865,  1866,  1867,
    1868,  1869,  1870,  1871,  1933,  1934,  1872,  1873,  1973,  1874,
    1875,  1876,  1877,  1878,  1879,  1880,  1881,  1882,  1883,  1884,
    1885,  1886,  1887,  1935,  1936,  1937,  1938,  1939,  1940,  1941,
    1942,  1943,  1944,  1945,  1888,  1889,  1890,  1891,     0,   429,
     430,  1373,   425,     0,  1351,   428,  1905,  1912,  1926,   285,
     286,   429,     0,    73,   165,     0,     0,     0,     0,     0,
       0,   214,     0,   583,   582,     0,   130,   588,     0,     0,
       0,   432,   451,  1767,   431,  1350,   449,   438,  2116,  2117,
    2118,  2119,  2003,  2120,  2121,  2122,  2123,  2004,  2124,  2005,
    2006,  2007,  2008,  2009,  2010,  2125,  2126,  2127,  2012,  2011,
    2128,  2013,  2129,  2014,  2130,  2015,  2016,  2131,  2132,  2017,
    1616,  2018,  2019,  2133,  2134,  2135,  2136,  2137,  2138,  2139,
    2140,  2141,  2020,  2021,  2142,  2143,  2144,  2022,  2145,  2146,
    2023,  2147,  2024,  2025,  2026,  2148,  2149,  2150,  2027,  2028,
    2151,  2029,  2152,  2153,  2030,  2031,  2034,  2032,  2154,  2033,
    2155,  2035,  2036,  2037,  2156,  2157,  2038,  2039,  2158,  2159,
    2160,  2040,  2041,  2042,  2043,  2044,  2161,  2045,  2162,  2046,
    2047,  2163,  2164,  2165,  2166,  2167,  2049,  2048,  2050,  2051,
    2168,  2169,  2170,  2171,  2052,  2053,  2054,  2172,  2173,  2174,
    2055,  2175,  2176,  2056,  2057,  2177,  2058,  2059,  2178,  2060,
    2061,  2179,  2062,  2063,  2180,  2181,  2182,  2064,  2183,  2184,
    2065,  2066,  2185,  2186,  2067,  2068,  2187,  2069,  2188,  2189,
    2190,  2191,  2070,  2071,  2192,  2072,  2193,  2194,  2195,  2196,
    2073,  2074,  2075,  2076,  2077,  2078,  2079,  2080,  2081,  2082,
    2083,   290,   440,   439,   441,     0,  1405,  1406,     0,  1416,
       0,  1398,  1403,  1399,     0,  1397,  1425,  1418,  1426,  1407,
    1396,  1419,  1408,  1395,   213,     0,  1427,  1413,  1401,     0,
       0,     0,     0,    74,   100,   589,     0,  1460,     0,  1505,
    1506,  1507,  1508,  1509,  1510,  1516,  1511,  1512,  1515,  1513,
    1514,  1517,  1518,  1519,  1520,  1521,  1496,  1501,  1522,  1523,
    1524,  1525,  1526,  1527,  1528,  1529,  1530,  1531,  1532,  1533,
    1534,  1535,  1536,     0,   287,     0,  1898,  1949,  1903,     0,
    1916,     0,  1919,  1920,     0,  1803,  1927,  1930,  1931,  1932,
    1933,     0,   857,   431,   426,   841,     0,   619,   789,   799,
     841,   846,  1130,   869,  1131,     0,   433,   599,   598,   592,
      67,    84,  1441,  1664,  1704,  1820,  1928,  1850,  1872,   115,
    1442,  1435,  1440,    75,   680,   678,     0,  1322,  1664,  1704,
    1807,  1820,  1928,  1872,   322,   327,     0,    81,   117,   102,
       0,   103,   431,   625,   672,     0,   247,   201,     0,   206,
       0,  1783,   652,   655,  1382,   653,   617,     0,     0,     1,
    1460,  1500,   348,     0,  1466,     0,     0,   676,   676,     0,
     676,     0,   609,     0,     0,   617,   612,   616,   786,   114,
    1928,  1850,   101,   104,  1673,     0,     0,  1673,     0,  1673,
       0,  1673,     0,     0,   296,     0,    71,  1306,     0,  1352,
     434,     0,     0,   280,   276,   281,   277,   275,   282,   274,
     273,   283,   279,     0,     0,     0,   554,   587,   586,   585,
     584,   589,  1673,    52,     0,   318,   253,   252,   254,   319,
       0,     0,     0,   251,     0,     0,     0,   210,   125,   452,
     450,  1673,   291,  1414,  1415,     0,  1404,  1400,  1402,     0,
       0,  1673,  1377,  1424,  1420,  1673,  1424,  1344,  1673,     0,
       0,    92,     0,   582,  1498,  1537,  2070,  1538,  1539,  1551,
       0,  1552,  1542,  1504,  1460,     0,   164,   284,     0,     0,
       0,  1252,   841,   846,     0,     0,   859,     0,  1272,     0,
       0,  1278,     0,     0,     0,   841,   624,     0,   799,   858,
     427,     0,   839,   840,   727,   727,   681,     0,   662,   851,
       0,     0,   854,   852,     0,   854,     0,     0,     0,   854,
     850,   809,     0,   727,     0,   839,   842,   727,     0,   861,
    1388,     0,     0,     0,     0,  1438,  1436,  1437,  1443,     0,
    1439,     0,     0,  1354,  1356,  1357,  1220,  1367,  1108,     0,
    1893,  1894,  1895,  1295,  1896,  1897,  1899,  1900,  1901,  1066,
    1636,  1902,  1365,  1904,  1906,  1907,  1909,  1910,  1911,  1912,
    1913,  1914,     0,  1366,  1917,  1744,  1922,  1923,  1925,  1928,
    1929,  1364,  1934,     0,     0,     0,  1333,  1243,     0,     0,
    1107,     0,     0,  1299,  1307,  1100,     0,     0,   905,   906,
     927,   928,   907,   933,   934,   936,   908,     0,  1329,  1000,
    1096,  1317,  1105,  1113,  1109,  1110,  1150,  1111,  1129,  1114,
    1187,  1106,     0,  1112,  1098,  1325,   662,  1323,     0,  1099,
    1353,   662,  1321,   325,   323,   330,   324,     0,   326,     0,
       0,     0,    72,     0,   427,  1554,  1555,   200,   198,   199,
     197,   196,   203,     0,   205,  1501,  1238,  1240,     0,   654,
       0,     0,     0,   606,   605,   607,     3,  1382,     0,     0,
       0,  1654,     0,   600,   674,   675,     0,     0,     0,     0,
       0,     0,     0,     0,   770,   701,   702,   704,   767,   771,
     779,     0,     0,     0,     0,     0,   613,     0,   113,   107,
     105,     0,     0,     0,   424,   424,     0,     0,     0,     0,
       0,   404,   353,   397,     0,     0,     0,     0,   230,   243,
       0,     0,     0,     0,     0,   240,     0,     0,   223,   217,
     219,   355,     0,   424,     0,   351,     0,     0,     0,   357,
     294,     0,   164,    79,    80,  1305,     0,   436,   437,   435,
     428,     0,  2084,  1946,  1947,  1948,  1949,  1899,  1950,  1951,
       0,  1952,  1953,  1905,  1955,  1956,  1957,  1958,  1959,  1960,
    1961,  1962,  1912,  1964,  1965,  1966,  1967,  1968,  1969,  2110,
    1970,  1926,  1972,  1932,     0,  1973,  1122,   429,  1370,  1246,
     686,  1244,  1383,     0,     0,   278,     0,     0,     0,     0,
     162,     0,     0,     0,     0,    48,     0,     0,  1673,   347,
    1673,   554,     0,  1673,   554,  1673,     0,     0,  1673,   211,
     215,   124,   127,     0,  1417,  1412,  1410,  1409,  1411,  1673,
    1494,     0,     0,  1378,  1422,  1423,     0,  1390,     0,     0,
    1392,     0,     0,    97,     0,    95,     0,   589,  1460,     0,
     224,  1547,  1548,  1546,     0,     0,  1503,   227,  1541,  1550,
    1540,  1549,  1502,   244,  1497,     0,     0,  1386,   150,     0,
       0,     0,  1253,   976,   975,   957,   958,   973,   974,   959,
     960,   967,   968,   978,   977,   965,   966,   961,   962,   955,
     956,   971,   972,   963,   964,   969,   970,   953,   954,  1267,
    1254,  1255,  1256,  1257,  1258,  1259,  1260,  1261,  1262,  1263,
    1264,  1265,  1266,     0,     0,   798,   796,     0,     0,     0,
       0,     0,     0,  1299,     0,  1071,  1106,     0,     0,     0,
       0,  1238,  1277,     0,     0,     0,     0,     0,     0,  1238,
    1283,     0,     0,   825,   837,     0,   720,   726,   797,   795,
       0,  1322,   790,     0,   871,   851,     0,   850,     0,     0,
     853,   847,     0,   848,     0,     0,     0,     0,   849,     0,
       0,     0,     0,   793,     0,   837,     0,   794,   868,   333,
     341,    68,     0,  1374,  1974,  1975,  1976,   915,  1977,   944,
     922,   944,   944,  1978,  1979,  1980,  1981,   911,   911,   924,
    1982,  1983,  1984,  1985,  1986,   912,   913,   949,  1987,  1988,
    1989,  1990,  1991,     0,     0,  1992,   944,  1993,   911,  1994,
    1995,  1996,   916,  1997,   879,  1998,     0,  1999,   914,   880,
    2000,   952,   952,  2001,     0,   939,  2002,  1375,  1376,     0,
    1249,   889,   897,   898,   899,   900,   925,   926,   901,   931,
     932,   902,   999,     0,   911,  1460,  1444,   116,     0,  1243,
    1115,   943,   930,  1294,     0,   938,   937,     0,  1243,   920,
     919,   918,  1102,     0,   917,  1200,   944,   944,   942,  1025,
     921,     0,     0,     0,     0,     0,   948,     0,   946,  1026,
    1004,  1005,     0,     0,  1332,  1341,  1238,  1242,     0,  1100,
    1238,     0,     0,  1190,  1192,     0,  1117,  1118,     0,  1300,
    1355,  1101,     0,  1360,     0,     0,   999,   999,  1328,  1220,
       0,  1210,  1213,     0,     0,  1217,  1218,  1219,     0,     0,
       0,  1320,     0,  1228,  1230,     0,     0,  1041,  1226,     0,
    1044,     0,     0,     0,     0,  1214,  1215,  1216,  1206,  1207,
    1208,  1209,  1211,  1212,  1224,  1205,  1022,     0,  1097,     0,
    1153,     0,  1021,  1326,   788,     0,  1358,   788,   335,   339,
     340,   338,   334,     0,   329,   328,   331,   332,   118,     0,
    1556,   194,     0,   191,  1241,   783,   656,  1346,     0,   660,
     349,  1561,  1465,  1464,     0,    91,     0,     0,     0,   593,
     629,   628,   695,   687,   689,   695,     0,   627,     0,   743,
     744,     0,     0,     0,     0,   776,   774,  1354,  1367,   731,
     705,   730,     0,     0,   709,     0,   735,  1000,   769,   611,
     699,   700,   703,   610,     0,   772,     0,   782,     0,   648,
     650,   633,   647,   645,   630,   638,   770,   704,     0,   106,
       0,     0,     0,     0,     0,  1673,     0,     0,   882,   388,
     369,   506,   423,     0,     0,     0,     0,     0,     0,     0,
     396,   393,   394,   395,     0,     0,     0,     0,  1374,   228,
     229,   242,     0,   233,   234,   231,   235,   236,     0,     0,
     221,   222,     0,     0,     0,     0,   220,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   295,   288,  1301,  1306,
     686,   686,   686,     0,   684,   685,     0,     0,     0,     0,
       0,   149,   552,   562,     0,     0,     0,    52,     0,     0,
       0,     0,     0,     0,   210,     0,   589,    53,    56,    51,
      55,    54,    57,  1643,  1430,     0,     0,   346,   343,     0,
     551,   525,     0,     0,   129,     0,     0,   313,   311,   314,
     303,   316,   306,     0,  1673,     0,     0,     0,     0,  1673,
     541,   126,     0,   292,     0,     0,  1492,  1424,  1379,     0,
    1421,  1424,  1345,     0,  1424,    99,     0,     0,  1499,  1543,
     225,   245,   226,   246,   164,   159,   189,     0,   167,   172,
     147,     0,   147,     0,   169,   173,   147,   168,     0,   147,
     163,     0,  1145,     0,  1135,     0,     0,   860,     0,     0,
    1136,  1073,  1074,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1091,  1090,  1137,     0,   864,     0,   867,     0,     0,
    1275,  1276,     0,  1138,     0,     0,  1282,     0,     0,     0,
    1143,     0,   800,     0,     0,     0,   715,   719,   722,     0,
     725,   662,   618,  1664,  1704,     0,   673,   673,   673,   671,
     661,     0,   747,     0,     0,   826,     0,     0,   828,   830,
       0,     0,   833,   808,   807,     0,     0,     0,     0,   872,
       0,  1350,     0,     0,    69,     0,     0,     0,   897,     0,
       0,     0,   887,   883,     0,   979,   980,   981,   982,   983,
     984,   985,   986,   987,   988,   989,   990,   991,   903,    83,
       0,   909,    88,    89,    86,     0,    82,    85,    87,    90,
       0,     0,     0,     0,  1293,  1289,     0,     0,     0,     0,
    1195,  1197,  1199,     0,   941,   940,  1204,  1210,  1213,  1217,
    1218,  1219,  1214,  1215,  1216,  1206,  1207,  1208,  1209,  1211,
    1212,     0,  1232,     0,  1186,     0,     0,     0,     0,     0,
       0,     0,  1331,     0,  1069,     0,  1119,  1104,     0,     0,
    1193,  1120,  1333,  1308,     0,     0,     0,  1363,  1362,  1001,
    1010,  1013,  1045,  1046,  1017,  1018,  1019,  1023,  1385,  1384,
    1327,     0,  1319,     0,     0,  1002,  1027,  1032,     0,  1284,
    1287,  1062,  1286,     0,  1050,     0,  1040,     0,  1048,  1052,
    1028,  1043,     0,  1024,     0,  1320,  1229,  1231,     0,  1227,
       0,  1014,  1015,  1016,  1006,  1007,  1008,  1009,  1011,  1012,
    1020,  1203,  1201,  1202,     0,  1306,     0,  1318,     0,     0,
    1155,     0,     0,  1047,  1324,     0,   871,   686,   871,     0,
     999,  1557,  1382,   204,   193,  1382,  1239,  1347,  1381,   658,
       0,     0,     0,  1559,  1451,  1455,     0,  1307,  1485,  1487,
     788,     0,   600,   600,   602,   601,   693,   694,   698,     0,
       0,   698,   677,   626,  1923,  1803,     0,     0,     0,     0,
     736,   777,     0,   768,   733,   734,     0,   732,  1354,   737,
    1353,   738,   741,   742,   710,  1342,   778,   780,     0,   773,
       0,  1348,   632,   651,     0,     0,     0,     0,     0,   615,
     614,   784,     0,   354,     0,  1673,   371,     0,     0,     0,
       0,     0,     0,   456,     0,   556,   456,   409,  1673,  1424,
    1673,  1424,  1566,  1637,  1821,     0,   367,   530,   400,     0,
     417,   559,     0,   515,   390,   405,   410,     0,     0,   218,
     356,   232,   237,   413,   241,   238,   299,   239,   424,     0,
     352,     0,   411,     0,   297,     0,     0,   358,   415,   301,
     296,     0,  1305,     0,   684,   684,   684,     0,  1245,     0,
       0,     0,  1247,  1248,  1040,   270,   271,   272,   269,   135,
     148,     0,   553,     0,   161,   138,   139,   149,    50,     0,
     347,   554,     0,   554,     0,     0,   215,    52,     0,     0,
    1432,  1428,     0,     0,     0,     0,   552,   544,   542,   575,
       0,   549,   543,     0,     0,   501,     0,   447,     0,     0,
       0,     0,   320,     0,     0,     0,     0,     0,     0,   210,
     216,     0,     0,     0,  1494,  1495,  1389,  1380,  1391,     0,
    1393,    98,    96,  1387,  2040,   155,  1243,     0,   153,   160,
     152,   154,   157,   158,   151,     0,   146,     0,   182,     0,
       0,     0,     0,     0,     0,     0,     0,  1132,  1251,     0,
    1270,  1269,  1072,  1079,  1082,  1086,  1087,  1088,  1271,     0,
       0,     0,  1083,  1084,  1085,  1075,  1076,  1077,  1078,  1080,
    1081,  1089,     0,   869,     0,     0,   863,  1280,  1279,  1273,
    1274,     0,  1140,  1141,  1142,  1281,     0,     0,   838,   713,
     711,   714,   716,   712,     0,     0,   871,   673,   673,   673,
     673,   670,     0,     0,     0,   870,     0,   764,   832,     0,
     856,     0,   829,   812,     0,   820,     0,   827,   876,   843,
       0,     0,   845,   342,   893,     0,   888,   884,     0,     0,
       0,   894,     0,     0,     0,     0,     0,     0,     0,  1250,
       0,   679,  1116,     0,     0,     0,  1290,     0,  1068,   910,
     923,     0,  1198,  1121,     0,  1221,  1185,   951,   950,   952,
     952,     0,     0,     0,     0,  1340,  1298,     0,  1146,  1296,
    1239,  1189,  1191,  1341,  1103,   935,   999,     0,     0,     0,
       0,     0,     0,     0,  1051,  1042,     0,  1049,  1053,     0,
       0,     0,  1036,     0,     0,  1034,  1063,  1030,     0,     0,
    1064,  1305,     0,  1309,     0,     0,  1154,  1163,   791,   787,
     747,   684,   747,     0,   336,   195,   192,   659,  1460,  1560,
       0,  1474,     0,     0,     0,     0,  1477,  1491,  1488,  1559,
       0,   594,   595,     0,   688,   690,     0,  1222,   698,   692,
     740,   739,     0,   708,   775,   706,     0,   781,     0,   649,
       0,   635,     0,   811,     0,     0,     0,     0,     0,   505,
       0,     0,     0,   456,     0,   564,     0,   571,     0,     0,
     556,   537,   389,     0,     0,     0,   363,   408,   381,   373,
     359,   387,     0,     0,   392,     0,   385,   402,   403,   401,
     406,     0,   466,   491,     0,     0,   502,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   164,  1306,
    1302,  1306,     0,     0,     0,   686,   682,   683,  1123,     0,
     134,   188,   185,   186,   184,   223,   563,     0,     0,   345,
     551,     0,   129,   305,   308,     0,     0,    49,   589,     0,
    1433,     0,  1431,     0,   347,   554,     0,   529,   525,   550,
     523,   522,   524,     0,   448,   100,     0,   442,   554,   128,
       0,     0,   321,   312,     0,   317,     0,     0,   315,     0,
       0,   215,     0,     0,   123,  1493,  1424,     0,   142,   183,
     190,   170,   175,     0,   181,   177,   176,   171,   179,   178,
     174,  1133,  1144,  1268,     0,     0,     0,     0,   841,     0,
     862,   865,     0,  1139,  1134,   836,     0,     0,   747,     0,
       0,     0,     0,   664,   663,   669,     0,     0,  1157,   831,
       0,     0,     0,   818,   806,   813,   814,     0,     0,     0,
     874,   873,   844,   897,     0,   877,   897,     0,   897,     0,
     895,     0,   904,   992,   993,   994,   995,   996,   997,   998,
     929,     0,  1292,  1288,  1194,  1196,  1233,   947,   945,  1067,
    1330,  1238,  1335,  1337,     0,     0,     0,     0,  1188,  1070,
    1361,  1003,     0,     0,  1033,  1285,  1054,     0,     0,     0,
    1029,  1221,     0,     0,     0,     0,     0,  1038,     0,  1313,
    1306,     0,  1312,     0,     0,     0,     0,  1128,   792,   764,
       0,   764,     0,     0,  1558,     0,  1553,  1452,  1453,  1454,
       0,     0,     0,  1469,  1446,     0,     0,  1486,  1474,  1462,
     696,   697,     0,   691,   707,  1343,  1349,   634,     0,  1100,
       0,     0,   631,     0,   418,   456,     0,     0,   370,     0,
     573,   517,   565,   548,   532,     0,     0,     0,   457,     0,
     590,     0,     0,   538,     0,     0,     0,     0,   518,     0,
       0,   477,     0,     0,   548,     0,   555,   473,   474,     0,
     362,   382,     0,   378,     0,   407,     0,     0,     0,     0,
       0,   365,   377,     0,   360,     0,  1424,  1424,   368,  1374,
    1974,  1975,  1976,  1977,  1978,  1979,  1980,  1981,  1982,  1983,
    2094,  1984,  1985,  1986,  1987,  1988,  1989,  1990,  1991,  2103,
    1992,   463,  1993,  1744,  1994,  1995,  1996,  1997,  1998,     0,
    1999,   880,  2000,  2001,  2188,  2002,  1206,  1207,   461,   462,
     558,   458,  1375,   459,   566,   460,     0,   561,   516,   414,
     300,     0,   412,     0,   298,   421,   419,   416,   302,   289,
       0,     0,  1126,  1127,  1124,   684,     0,     0,     0,   164,
     141,     0,     0,   447,     0,     0,     0,     0,  1673,     0,
    1429,     0,   129,   344,   551,     0,   581,   501,   576,     0,
     447,   445,     0,   129,    66,   304,   307,     0,     0,   617,
     309,     0,     0,     0,     0,   207,     0,     0,     0,  1394,
     156,     0,   180,  1092,     0,     0,     0,   803,     0,     0,
     723,     0,   729,   764,   668,   667,   666,   665,   746,  1611,
    1906,  1802,     0,   750,   745,   748,   753,   755,   754,   756,
     752,   763,     0,   766,   855,  1234,  1236,     0,     0,     0,
       0,   819,   821,     0,   823,     0,   875,   891,     0,   892,
       0,   890,   885,   896,  1291,  1338,  1339,  1334,     0,  1000,
    1297,  1060,  1058,  1055,     0,  1056,  1037,     0,     0,  1035,
    1031,     0,  1065,     0,     0,  1310,     0,  1149,     0,  1152,
    1166,  1162,  1161,  1157,  1123,  1157,   337,   657,  1473,  1450,
    1476,  1475,     0,  1307,  1483,     0,     0,  1474,     0,  1478,
     350,     0,     0,   646,   810,   639,   640,     0,   569,   372,
       0,   548,     0,   456,   534,   533,   536,   531,   535,     0,
     591,     0,     0,   475,     0,   482,   520,   521,   519,   476,
     548,   554,   478,     0,     0,     0,   374,   364,   361,   366,
     375,     0,     0,   376,   379,   876,   391,   384,  1374,  2103,
    2112,     0,     0,     0,     0,     0,  1304,  1303,     0,   137,
     136,   187,   133,   144,   223,     0,     0,   525,   444,     0,
       0,     0,     0,     0,   551,  1434,     0,     0,     0,   447,
       0,     0,   453,     0,   498,     0,    93,   446,     0,     0,
      58,     0,     0,     0,     0,     0,   256,     0,     0,     0,
     121,   122,     0,   143,  1093,     0,  1094,   841,   866,     0,
       0,   721,  1157,     0,     0,     0,   757,   751,     0,  1156,
    1158,     0,   718,  1237,   815,     0,   817,     0,   841,     0,
     841,   824,   886,   878,  1336,  1147,     0,  1057,  1061,  1059,
    1039,  1306,  1314,  1306,  1311,  1151,  1165,  1168,   766,  1359,
     766,     0,     0,  1461,     0,     0,  1458,  1445,  1463,  1223,
     636,   637,     0,   456,     0,   547,   570,   487,   465,     0,
       0,     0,   472,   479,   580,   481,     0,   383,   399,     0,
       0,   560,   422,   420,  1125,   164,     0,   129,   501,    66,
       0,   209,     0,     0,     0,   525,   100,   443,   514,   507,
     508,   509,   510,   511,   512,   513,   528,   527,   499,   500,
       0,     0,     0,     0,   310,     0,  1333,     0,   259,   259,
     264,     0,   123,     0,  1480,  1489,     0,  1480,  1095,   804,
     724,     0,   766,     0,     0,     0,   749,     0,     0,   765,
       0,   622,  1235,     0,   805,   801,     0,   802,     0,     0,
       0,     0,   686,   718,   718,  1447,     0,  1448,  1484,     0,
       0,     0,   554,   572,   546,     0,   539,   485,   484,   486,
     490,     0,   488,     0,   504,     0,   497,   465,     0,   386,
       0,   567,   132,   140,     0,   455,    60,     0,   551,     0,
      66,   501,   447,    66,     0,    63,     0,     0,   261,     0,
       0,   258,   255,   265,     0,   262,   208,     0,     0,     0,
    1482,   129,     0,  1482,     0,   718,   759,     0,   758,  1160,
    1159,   720,   816,     0,  1148,  1316,  1315,     0,  1172,   621,
     620,     0,     0,     0,     0,   580,     0,   526,     0,     0,
     487,     0,   480,   577,   578,   579,     0,   493,   483,   494,
     380,   398,   568,     0,   264,   551,    61,   454,    94,    59,
      64,    65,     0,   260,     0,   268,   263,     0,  1480,  1479,
     695,  1481,   871,  1490,   695,   728,   623,   760,   717,   822,
    1167,     0,     0,     0,     0,     0,  1457,   871,  1468,     0,
     497,   545,   540,   464,   489,   503,     0,     0,     0,   495,
       0,   496,    66,     0,   264,   259,     0,   248,   266,     0,
    1482,   698,   119,   698,  1892,  1612,  1857,     0,  1184,  1173,
    1184,  1184,  1164,  1449,  1456,     0,   456,   469,     0,   468,
       0,   557,   492,    62,   268,     0,   257,     0,   129,   695,
    1470,  1471,     0,  1177,  1176,  1175,  1179,  1178,     0,  1171,
    1169,  1170,   871,   574,   467,   471,   470,   250,   268,     0,
     871,   698,     0,     0,  1181,     0,  1182,  1467,   249,   267,
     120,  1472,  1174,  1180,  1183
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
   -3107, -3107, -3107,  1972,    80,    88,  -904, -1217,  -967, -1226,
   -3107,  -106,    91, -3107, -3107,   208, -3107,  1062, -3107,   194,
    -828,   585, -3107,  1165, -3107, -3107,  1626,   550,    96,   100,
    2081, -3107,  1034, -3107,  1247,  2611,    95,  2067,  -525,  -895,
   -1256,    24,    12, -3107, -3107, -3107, -3107, -3107,  -818,   527,
   -1246, -3107,   461, -3107, -3107, -3107, -3107,  -201,   174, -2308,
       1, -2231, -2979,  -574, -3107,  -693, -3107,  -317, -3107,  -632,
   -3107,  -908,  -628,  -668, -2875, -1162, -3107,  1681,  -356, -3107,
     638, -3107, -2614, -3107, -3107,   627, -3107, -1186, -3107, -2268,
     177,  -607, -2545, -2607, -2220,  -926,   262,  -614,   237, -2165,
   -1218, -3107,   649, -3107,  -597, -3107,  -909, -1825,   103, -2726,
   -1671,   104, -3107,   536, -3107, -2171,   538, -2162,  1599,  -623,
       5, -1287, -2846, -3084,  -148, -2672, -3107, -2843,   105, -1694,
   -3107, -3107, -1719,    58, -2185,     6, -2147,   107, -3107, -3107,
     115,    18,  -634,   319, -3107,    -7, -3107, -3107, -3107,  -740,
   -3107, -2582,   118, -3107, -3107,  1574,  -922, -3107, -3107,   532,
     123,  1021, -3107, -2619, -3107,  -608, -3107,  -636,  -627, -3107,
   -3107,    36,  -925,  1566, -3107, -3107, -3107,    10, -3107,  -473,
   -3107, -3107, -2641, -3107,    21, -3107, -3107, -3107, -3107, -1516,
    -403,   325, -3107, -3107,  -558, -2584,  -498, -3107, -3060, -3106,
   -3107, -3107,  -666, -3067, -2106,   128, -3107,  2070,  -449,   130,
     132, -3107,   346,   134, -1168,    25,  3387,   -44,   -40, -3107,
     -33, -3107, -3107, -3107,   694, -3107, -3107,    17,    54,  1762,
   -3107, -1045, -3107, -1600,   556, -3107,  1919,  1929, -2182,  -893,
     -77, -3107,   732, -1689, -2163,  -674,  1190,  1754,  1758,   484,
   -2346, -3107,  -537, -3107,   101, -3107, -3107,   730,  1238, -1591,
   -1586, -3107, -2223, -3107,  -444,  -326, -3107, -3107, -3107, -3107,
   -3107, -2541, -2281,  -667,  1207, -3107,  1766, -3107, -3107, -3107,
   -3107,     7, -1550,  2967,   783,   -83, -3107, -3107, -3107, -3107,
     182, -3107,   973,  -126, -3107,  2191,  -675,  -798,  2012,  -609,
     261, -1836,   -11,  2206,   546, -3107, -3107,   553, -2126, -1445,
     508,  -216,   980, -3107, -3107, -1257, -3107, -1949, -1203, -3107,
   -3107,  -715,  2135, -3107, -3107, -3107,  2337,  2680, -3107, -3107,
    2693,  2804, -3107,  -714,  2951,  1808, -1050,  2019,  -954,  2020,
    -960,  -958,  -963,  2021,  2028,  2031,  2040,  2041,  2044,  2052,
   -1560,  4828,  1301,  -722, -2257, -3107, -1602,  1097,  1098,  1101,
      59, -3107, -1425,   222, -3107, -3107, -3107, -3107, -3107, -2198,
   -3107,  -401, -3107,  -392, -3107, -3107, -3107, -1784, -2753, -1806,
   -3107,  3656,   920, -3107,  -591,   496, -3107, -3107, -3107, -3107,
   -1553, -3107,  5331,   813, -3107, -2042, -3107, -3107,  -999,  -849,
    -560, -1033, -1243, -1952, -3107, -3107, -3107, -3107, -3107, -3107,
   -1521, -1810,   157,   876, -3107, -3107,   974, -3107, -3107, -3107,
     209, -1501, -1789, -2143, -3107, -3107, -3107,   885,  1577,   164,
    -832, -1644, -3107, -2057, -2426, -3107, -3107,   490, -3107,  -617,
   -1147, -2483,  1158,    31, -3107,  2066, -2575, -3107, -3107,  -756,
   -2723, -1124,  -913, -3107,   136,   423,  2195,    23,   137, -3107,
     138,  1353, -3107, -3107, -3107,   142, -3107,   457,   143,   456,
   -3107,  1039, -3107,   630,    19, -3107, -3107, -3107,    78,  2963,
      15, -2414
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
       0,    47,    48,    49,   769,   770,  1877,  1822,  3018,  1260,
    1812,  1387,   771,  2668,  2669,  2670,  2295,  1241,  3469,  2296,
    1242,  1243,  2672,    53,    54,    55,   116,  1272,   772,   773,
     539,    58,  2345,   943,   822,  1123,   824,  1124,  1641,   930,
    1277,  1278,   774,  2710,  2357,  3254,  2767,  3255,  2427,  2351,
    1397,  2419,  1926,  1856,  1398,   547,  1940,  2768,  2715,  1927,
     775,  2657,  3020,  3462,  2683,  3621,  2956,  2957,  3459,  3460,
    2660,  2298,  3537,  3538,  2744,  1803,  3532,  2377,  3396,  2302,
    2283,  2958,  2385,  3355,  3066,  2299,  2938,  2378,  3455,  1901,
    2379,  3456,  3203,  2380,  1853,  1881,  2661,  3539,  2303,  1854,
    2656,  3021,  1791,  2381,  3466,  2382,   558,  2942,   776,  2747,
    1342,   777,  1887,  1888,  1889,  1890,  1891,  1892,   965,  1893,
     778,   966,  3083,  3490,  3491,  3494,  3495,  3597,   779,  1335,
    1869,    65,  1350,   559,  1898,   780,  1878,   781,  2731,  2732,
     782,   783,  1202,  2611,  2213,   541,   530,   531,  1568,   733,
    1318,   734,   784,   760,   761,   983,  1367,   762,    71,  1906,
     785,  1373,  1374,   991,    73,   892,  1389,   786,  1390,  1391,
    1000,    74,  2769,  1002,  1003,    75,    76,   788,  3291,  3088,
    1352,  1902,  2390,   560,   789,  2903,  2215,  2614,  3451,    79,
    3184,  2218,  1200,  3187,  3415,  2896,  3182,  2615,  3500,  3560,
    3185,  2219,  2220,  3416,  2221,   790,    81,   839,  1729,   791,
     792,  1064,  2066,   793,  1794,   794,  1125,    87,    88,  1038,
      89,  3197,    90,    91,  1769,  1770,  1771,   870,   882,   883,
    2211,  1484,  2010,   875,  1206,  1738,   856,   857,  2341,   901,
    1845,  1733,  1734,  2228,  2624,  1762,  1763,  1215,  1216,  1998,
    3431,  1999,  2000,  1477,  1478,  3301,  1750,  1754,  1755,  2249,
    2239,  1741,  2497,  3113,  3114,  3115,  3116,  3117,  3118,  3119,
    1126,  2808,  3312,  1758,  1759,  1218,  1219,  1220,  1767,  2259,
      93,    94,  2196,  2598,  2599,   828,  3130,  1501,  1772,  2812,
    2813,  2814,  3133,  3134,  3135,   829,  1033,  1034,  1057,  1052,
    1491,  2018,   830,   831,  1975,  1976,  2466,  1059,  2012,  2028,
    2029,  2820,  2519,  1569,  2284,  1570,  1571,  2043,  1572,  1127,
    1573,  1599,  1128,  1604,  1575,  1129,  1130,  1131,  1578,  1132,
    1133,  1134,  1135,  1592,  1136,  1137,  1616,  2045,  2046,  2047,
    2048,  2049,  2050,  2051,  2052,  2053,  2054,  2055,  2056,  2057,
    2058,  1186,  1773,  1139,  1140,  1141,  1142,  1143,  1144,  1145,
    1146,  1147,   833,  1148,  2557,  1149,  1690,  2190,  2597,  3123,
    3309,  3310,  2887,  3172,  3337,  3442,  3574,  3608,  3609,  3639,
    1150,  1151,  1633,  1634,  1635,  2080,  2081,  2082,  2083,  2184,
    1684,  1685,  1152,  3025,  1687,  2103,  3126,  3127,  1187,  1470,
    1628,  1320,  1321,  1583,  1443,  1444,  1450,  1949,  1458,  1463,
    1980,  1981,  1471,  2151,  1153,  2074,  2075,  2537,  1594,  2558,
    2559,  1154,  1276,  1640,  2882,  2187,  1688,  2144,  1161,  1155,
    1162,  1157,  1624,  1625,  2555,  2853,  2854,  2114,  2256,  1717,
    2261,  2262,   987,  1158,  1159,  1160,  1322,   534,  1584,  3561,
    1363,  1192,  1323,  2140,   795,   108,   926,   796,   797,    98,
     798,  1182,   879,  1183,  1185,   799,   850,   851,   800,   864,
     865,  1510,  1704,  1511,   888,   103,   104,  1229,   852,   871,
     802,  3280
};

/* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule whose
   number is the opposite.  If YYTABLE_NINF, syntax error.  */
static const yytype_int16 yytable[] =
{
     529,    60,   887,   929,   984,    63,    66,   903,   904,   732,
      77,   902,    59,  1225,  1259,   105,   529,    92,    69,   102,
    1330,    78,  1462,    96,  1156,    85,  1837,   873,   998,  1512,
     826,  1188,  1053,  1826,  1279,  1977,  1386,    92,   533,   801,
     731,  1825,  1332,  1809,  1718,  1863,  2231,  1790,  1435,  2194,
    2333,  1433,   906,  1434,   533,  2662,   787,  1431,  2102,   907,
    1618,  2032,   869,  2150,  1370,  2563,   532,  1796,  2629,  2065,
    2600,  1842,  2602,  1720,  2617,   759,  1800,  1376,  1392,  1874,
      50,  3054,   832,   529,   529,  2515,  2127,  2128,    51,  2517,
    1261,    52,  1265,  2762,  1269,  1830,    56,   826,   826,   885,
      57,   920,  3023,    61,    62,    64,  1908,    67,   565,  3026,
    2616,  1694,   866,  3052,   565,    68,  1697,  2655,    70,  1631,
    2581,   533,   533,    72,  3067,   565,  3070,  2852,    80,   912,
      82,   994,    83,  2716,    84,  1279,    95,    97,    99,   565,
     565,   999,   100,   101,   986,  2366,  -310,  2198,  -272,   832,
     832,  1035,  2702,  2703,  2704,  -604,  1056,  2917, -1963,  -554,
    1400,  2922,  2251,  2358,  2152,  -952, -2103, -2103, -1963,  2254,
    2469,  1364,  1364,  -608, -1371, -1352, -1954,  2498,  3499,  1004,
    -952,  2726, -1368, -1368, -2094, -2094, -1971,  1077, -1372,  2362,
    2507, -1371,  3272,  2723, -2112, -2112, -1369, -1369,  -944,   544,
    1701, -1954,  2724, -1971,  1380,   565,  -949,  2733,   836,  1077,
    -949,  1233,  1077,  2719,  1445,  2535, -1372,  1234,  -911,  1246,
   -2089, -2089,  -924,  -145,  3358,  -939, -1845,  1214,   836,  1792,
     836,   877,  2142,  2142,  1217,  3388,  2711,  1169,   836,  1247,
    1828,  1175,  1781, -2114, -2114,   834,  2815,  3586,  1840,  1953,
    1698,  1380,   836,  2264,  1955,  -604,  1077,  1841,  3617,  3207,
    1077,   975, -1204,   998,  3371,  1485,  2774,  2776,  1627,  2779,
   -1204,   893,   899,  -608,   836,  1725,  3653,  -223,   893,  1279,
    1810,  1792,  -223,  1813,  1814,  1248,  2355,  2181,   899,  3449,
    3389,  1742,  2690,  2740,  1727,  2182,  1455,  1650,  1030,  3390,
    1650,  1651,  1652,  3242,  3533,  1652,  2481,  3401,  1076,  1742,
    1177,  1953,   834,   834,  -741,  1954,  1955,  3402,   545,  1956,
    1957,  1958,  1235,  3391,  3190,  3492, -1845,  3258,  1994,  1953,
    1364,  3046,  1660,  1954,  1955,  1660,  2862,  3273,  1056,  1784,
    1743,     3,     4,  1273,  3276,  3571, -1225,  1174,  3173,  3578,
    3175,  1035,  3274,  2038, -1225,  1036,  3654,  3503,  1743,  1994,
    2798,  2339,  1355,  2482,  1699,   894,  1662,  3283,  1394,  1662,
    1595,  1596,   894,  1600, -1845,  2658,  2960,  2889,  1778,  2891,
    1722,  -881,  3071,  3523,  1249,  1210,  2931,  1608,  3304,  1610,
   -1845,  1774,  1775,  2129,   854, -1845,  2592,  3564,  2226,  3392,
   -1845,  1356,  1204,  1042,  3634,  2910,  2492,  2493,  2494,  3222,
   -1845,  3645,  3393,  2898,  3380, -1845,  2479,  2209,  1884,  2890,
    1210,  3266,  2930,   114,  1739,   106,  2684,  1844,  2441,   117,
    1744,  1488,  3278,   543,  3241,  1250,  3370,  1495,  2940,  2685,
    1043,   763,  2666,  1909,  2210,  1251,  3534, -1845,  1622,  2430,
    3218,  3655,  -604,  2961,  2431,   853,  1486,  3267,  1252,   867,
    2470,  1650,  1212,  1745,  2941,  2913,  1045, -1845,  1332,  1537,
    -608,  2899,  2973,  2911,  3618,   107,  2785,   897,  1365,  1365,
    1178,  1745,  1179,  2227,  3284,  2655,  1236,  2655,   542,  3403,
    3599,  1757,  1253,  1700,  3629,  3086,   855,  1212,  3600,  1037,
    1455,   803,  2846,  3475,  1205,  1843,  1170,  1786,  3572,  2483,
     115,  3626,  1618,  2659,  1623,  1213,  2432,  -761,  3369,  -881,
   -1845,  2035,  3450, -1845,  2663,  1960,  -604,  1746,  1799, -1845,
    1662,  2285,  3579,  2340,  3535,  1650,  1740,  3573,  2265,  1651,
    1652,  2962,  1274,  3387,  -608,  1746,  1612,  3581,  1255,  1723,
     898,  1776,  1238,  3275,  3072,  2356,  2347,  2815,  1777,  3487,
    3359,   804,  3302,  2073,  1721,  3619,  2150,  1801,  3253,  3635,
    1660,   945, -1845,  1256,  1953,  3103,  3084,  1713,  1954,  1955,
    3075,  3646,  1171,   976,  1239,  2511,   878,  3063,  1357,  3076,
    1829,  3587,  1258,   732,  3620,  1071,  2276, -1845,  1639,  1961,
    2338,  1728,  1049,  3347,  1662,   984,  3547,  3047,  3092,  2102,
    1910,  3208,  3656,  2143,  2583,   895,  1914,  1986,  3219,  2480,
    3394,  1487,  2530,  3395,   972,  1815,   927,  2869,  1787,   835,
     928,  2783,   899,  3285,   889,  2664,  2786,  1365,  2191,   998,
    2604, -1204,  2691,  3378,  1366,  1369,  2251,  -604,  2001,  2712,
    2713,  1826,  2632,  2407,  1613,   874,  3353,  1240,   565,  2281,
     874,  3023,  2197,  2809,  2021,  -608,  2183,  2152,  3026,  1613,
    2619,  2934,  1591,  2727,   546,  3363,  1614,  2627,  2413,  -310,
    2761,  -272,  -310, -1963,  2436, -1845,  -604,  1605,  -604,  1329,
    1615,  1614,  -554, -1963,  3198, -1845,  2442,  1605,   927, -1371,
   -1352, -1954,   928,  2736,  -608,  1617,  -608,  2830,  1358,  3350,
    3583, -1971,  2716, -1372,  3351, -1845, -1371, -1845, -1845,  3324,
    2282,  1384,  1385,  -944,   887, -1225, -1954,  2471, -1971,  1455,
    1455,  -949,   880,  1645,  2476,  1455,  3474,  1597,  1027,  2070,
    1627, -1372,  1918,  1598,  1279,  2123,  1279,  1603,  3261,  1627,
    -939,  1911,   999,  1695, -1845,  2199,  3548, -1845, -1845, -1845,
    1024,   997,  2935,  2105,  1970,  1820,  2281,  3482,  1384,  1385,
    2508,  3481,  3231,  3232,  2508,  1816,   891,   887, -2088, -2088,
    1802,  3647,  2449,  3204,    92,  1817,   801,  1180,   900,  1821,
    2192,   908,  2338,  2124,  -223,  -223,  3180,  3216,  1992,  1236,
    3189,  2165,   529,  2529,  1001,  3658,  2257,  1595,  1596,  1680,
    1681,  1682,  1683,  1600,   529,  1683,   548,  1962,  1963,  1964,
    3457,  1965,  1966,  1967,  1968,  1969,  1970,  2652,  1026,  1226,
     906,  2936,  1608,  1610,  2937,  3096,  3181,   907,  1417,  1418,
     533,  1967,  1968,  1969,  1970,  2311,  2477,  1799,   896,   529,
     529,  3632,   533,  2393,  1210,  2314,   565,   565,  2317,  1211,
    3562,  3205,   927,  3248,  1176,  2665,   928,  2666,   832,  2061,
    3191,  3052,  3593,   529,  3137,  3217,  1378,  3139,   923,  3141,
     832,  1379,   549,  2477,  1176,  3458,  3256,  2799,  2800,  2801,
    2802,    60,  2084,  2085,  1820,    63,    66,  2667,  1650,  3662,
      77,  2816,    59,  2309,   890,   105,  2145,    92,    69,   102,
    3040,    78,  3041,    96,  1181,    85,  3154,  2944,  1821,  1801,
     529,   732,  3625,   836,  1317,   529,  2258,  2166,  1639,  1061,
    2593,  1212,  2450,  1660,  1010,  1189,   866,   866,  3267,   866,
    1062,   866,  2451,   925,  3023,  2167,  1613,  2334,  2335,  2336,
    2168,  3026,  2273,  1233,  1482,  1792,  2486,  2369,  2418,  1234,
    2947,  1492,  1423,  1424,  2552,  3476,  1793,  1662,  1614,   548,
      50,  1499,  3356,   836, -1963,  3338,   565,  3340,    51,  2310,
    3411,    52,  3270,  1317,  1213,  2406,    56,  3650,  2169,  2408,
      57,  2102,  2410,    61,    62,    64,   997,    67,   931,  2320,
    2420,   529,   529,  1376,  2327,    68,  2860,   529,    70,  1333,
     529,   529,   944,    72,   529,   529,   529,   529,    80,  2240,
      82,    92,    83,   801,    84,  1500,    95,    97,    99,  2071,
     529,   834,   100,   101,  2153,   549,  3271,   529,  2077,  1977,
    3343,  1606,  1607,   834,   826,  1678,  1679,  1680,  1681,  1682,
    1683,   826,  1824,  2573,   529,  1317,  1567,  3443,  1801,  3444,
     951,   548,  2312,  2154,  1235,  1736,  3546,  2315,   533,  3549,
    3406,   553,  -213,   993,   887,   533,   529,  3407,  2605,   967,
    1613,  2606,  2574,  1826,  1965,  1966,  1967,  1968,  1969,  1970,
     109,  3164,  2065,   973,  2705,   529,   832,  3519,  3520,   557,
    2153,  1613,  1614,   832,  3422,   927,   529,   529,   529,  1638,
     529,   529,   551,  2638,  2429,   732,  1615,  1792,  2433,  2285,
    1801,  2435,  3453,  1614,  2700,  3361,  1474,   549,  1795,  2154,
    2951,  2627,  1802,  3332,  3224,  2701,  1479,  1617,  1409,  1410,
    2475,  3505,  3229,  3295,  3333,   529,  1637,   968,  3470,  1505,
    2692,  1801,  2170,   974,  1503,  1909,  1711,  1915,  1507,  3566,
     977,  1712,  1916,   529,   529,   897,  1730,  1731,   947,  1737,
     948,   566,  1331,   907,   907,  1801,   907,   764,  3623,  -212,
      23,  -686,  2952,   979,  2155,   998,  -686,  1176,   841,  2156,
    1039,  1831,  1801,  1631,  2157,  1040,   949,   978,   950,  1799,
    2953,   529,   884,   884,  1920,   529,   529,   980,  2575,  1077,
    1417,  1418,  2816,  2576,  1632,   529,   529,   529, -2085, -2085,
     529,  2741,   990,  2533,   553,  1922,   554,  2749,  1236,  1589,
    1077,    46,  1455,  1455,  1455,  1455,  1455,  1455,   898,  1567,
    1455,  1455,  1455,  1455,  1455,  1455,  1455,  1455,  1455,  1455,
    2155,  1827,   557,  1834,  1041,  2344,  1008,    23,  -686,   834,
    2157,  2825, -2086, -2086,  1331,  2034,   834,   110,   916,  1076,
    2035,  1802,  1953,  1009,  1317,  2185,  1954,  1955,   111,  2186,
    1956,  1957,  1958,  1317,  2689,   565,   565,  2059,   876,  1010,
    1237,  2352,  2060,  -685,  1238,   548,  2353,  2863,  -685,  2571,
    1065,  1066,  1067,  2954,  2601,  1070,  1493,  1317,  2693,  1011,
    1498,  -686,  2955,   112,  1163,  1164,   553,  1166,   993,  1168,
     899,  -131,  2424, -2087, -2087,  2697,  1239,  2425,  1042,  1567,
      26,    27,    28,  1802,  1423,  1424,  1867,  2463,  1799,  1014,
    1868,  1870,  2464,  2509,   557,  1871,   732,  3099,  2510,  3488,
    1872,  2383,  2158,  2384,  2810,   732,   915,  2817,   918,  2102,
     922,   549,  1020,  2159,  1802,  1043,   113,  2674,  2512,  2676,
    -685,  2577,   997,  2510,  2630,  2680,  1017,  1903,  2686,  1077,
    2681,  1044,  2578,  2687,  2677,  3643,  2679,  2752,  1802,   732,
    1018,  1045,  2035,  1019,   529,    92,  1995,   801,    33,  1240,
    1799,  1996,  2487,  2013,  2488,  1802,  2015,    26,    27,    28,
     836,  2019, -2090, -2090,  2022,  1001,  1021,  2368,  2158,  2026,
    1925,  1455,  1455,  -685,  2489,  2822,  2490,  3024,  1046,  2159,
    2510,  1799,  2927,  2641,  2929,    38,  3602,  2722,  3630,  1485,
    3631,  2971,  2823,  2826,   529,   529,  1022,  2060,  2827,  2964,
     529,  3614,  3039,   529,  1207,  1799,  1209,  2828,   529,   529,
     529,   529,  2827,   565,   565,  2928,   565,   927,  1023, -1352,
      40,   928,  1799,   529,   529,    33,   900,  1047,  2905,   529,
    3062,    43,   529,  2906,  1048,  2353,  1960,   529,  3661,   529,
     529,   533,  3085,   826,  1024,   529,   826,  2425,  3049,  2847,
    2848,   826,  3090,  2963,   826,  2972,  3100,  3091,  3155,   826,
    3296,  3101,    38,  2060,  1029,  2060,  3657,   533,  1058,   832,
     533,  3298,  1063,  1233,  3660,   533,  2510,  1049,   533,  1234,
    3327,    14,    15,   533,  3334,  2060,    46,  1068,  3344,  2035,
    1069,  1455,  3439,  3345,  3440,   832,  1050,    40,   832,  1567,
     553,  1071,   993,   832,  1631,  1072,   832,  3377,    43,  1167,
    1961,   832,  2353,  2836,  2838,  2839,  2834,  1627,  2835,  2837,
     565,  2833, -2091, -2091,  1173,   556,  1184,  1042,   557,    23,
    3381,   529,   529,  3418,  3496,  2425,  1190,  3501,  2060,  2425,
     529,   529,  3502, -2092, -2092,  3527,  1191,  2062,   529,  2027,
    3528,  2031,    92,  2063,  2069,   529,  2064,  3577,  2068,  1193,
    2067,  3628,  3502,    46,  1043,   548,  3502,  1051, -2093, -2093,
   -2095, -2095,  1985,  1194,  1987,  1988, -2096, -2096, -2097, -2097,
    1494,   732, -2098, -2098,  1235,   529, -2099, -2099,   529,  1195,
    1045,  -131,  1198,  1567,   529,   529,   529,   529,   529,   529,
     529,   529,   732,  2766, -2100, -2100,   529,   529,   529, -2101,
   -2101,   529, -2102, -2102,  1199,   529, -2104, -2104,   529,   529,
     529,   529,   529,   529,   529,   529,   529,   998,  1227,   529,
    1208,   549,   834,  2139,  2788,  1228,   529,  1230,  1317,  2789,
    2627, -2105, -2105, -2106, -2106,  1232,   533,  2194,  2233, -2107,
   -2107, -2108, -2108,  1233,  1231,   907,  1244,   529,   834,  1234,
    1245,   834, -2109, -2109,  2252,  2253,   834,  1262,  3235,   834,
    1233,   970,  2123,  1266,   834,  1270,  1234,  1233,  1325,    26,
      27,    28,  1271,  1234,   529, -2111, -2111,   550, -2113, -2113,
    3199,  1328, -2115, -2115,  1329,   529,   529,  2971,  1181,  1846,
    1847,  -736,  -736,  1334,  1233,  -740,  -740,  1336,   551,  1337,
    1234,  -739,  -739,  1419,  1420,  1351,  1423,  1424,  3195,  3196,
    1863,  2754,  2756,  2621,  2622,  1347,  1049,  1353,  1962,  1963,
    1964,  1567,  1965,  1966,  1967,  1968,  1969,  1970,  3610,  3611,
     732,  1354,   732,  1361,   946,  1487,  1362,    33,  1236,   953,
    1706,  1707,   954,  3252,  3640,  3641,  2038,  1368,    35,  1371,
    2921,  1372,  3045,  1377,  1235,  1395,  1396,  1401,   552,  3057,
    1460,  2297,  3073,  2301,  1473,  -212,  1475,  1476,  1489,  1483,
      37,  1235,   529,  1490,    38,  1496,  1317,  1497,  1235,   529,
     529,  1506,  1502,  1508,  3089,  1585,  1588,  1586,  3166,  -915,
    -922,  1597,  1601,    46,  -761,  -762,  -912,  -913,  1611,  -916,
    1263,  1455,  1455,   565,  1238,  1235,  -914,  3417,  1612,    40,
     553,  3601,   554,  1636,  1642,  3603,  1644,  1689,   565,  1317,
      43,  1691,  1705,  3323,  1693,  1714,  1715,  1719,   565,   555,
     565,  2462,  1724,   565,  1726,   556,  1264,    44,   557,   565,
    1211,   565,   732,  1764,  1213,  1768,  1779,  2387,  1766,  1317,
     529,  1797,  1798,  1804,   565,  1799,  1805,  1806,   997,   565,
     989,    45,  1811,   565,   565,   565,   565,  1818,   565,   565,
    1819,  2499,  1823,  1833,  1567,    46,   114,  2502,   529,   529,
    3651,   529,  1850,  1849,  1839,  1851,  1567,   529,   529,   529,
     529,   529,   529,  1855,  1865,   529,   529,   529,   529,   529,
     529,   529,   529,   529,   529,  1864,  1866,   529,  1880,  1240,
    1882,   529,   529,  2627,  1886,   529,  1897,  1567,  1236,  1876,
    1879,   826,   529,  1904,  1567,  1883,  3024,  -617,  1885,  1896,
    3097,  1905,  1909,  1917,  1942,  1236,  1944,  3227,  1945,  2011,
    1974,  1947,  1236,  -617,   529,   533,  1039,   529,  -617,   529,
    1950,  1040,  1973,   529,  1982,  1983,  1990,  2014,  1993,  2020,
    1567,   826,  2023,  2025,  1567,  3417,   529,   826,  1317,  1236,
    1567,  2024,  2033,   832,  2030,  2036,  1598,  3375,  1603,   884,
    1267,   932,  1591,  2037,  1238,   533,  2039,  2040,  2042,  2072,
    2073,   533,  2041,  1567,  3236,  3237,  1077,  2272,  1016,  2106,
    -617,  1238,  1455,  3136,  2318,   529,   529,   933,  1238,  2900,
    1041,  2107,  1650,   832,  2110,  2113,  1268,  3417,  2116,   832,
    -617,  2118,  2120,  2119,  2141,  2121,  2161,  2164,   565,  3125,
    2162,  2325,   838,  1239,  2188,  1238,  2189,  2195,  2208,   898,
    2319,  2207,  2212,   529,   887,  2229,   529,  2232,  2243,  2242,
    2241,   529,   529,  1631,  2244,  2245,  2267,  2246,  2263,  2268,
    2505,  2271,    23,  2274,  2278,  2031,    23,  2326,  2280,  3472,
    2279,  2350,  3417,  -617,  3149,   934,   529,   529,  2354,  1197,
     899,   529,  -617,  2359,  1042,  2365,  2373,  2370,  2374,  1240,
    2372,  2388,  2391,  2396,  2389,  2397,  2399,   529,  2394,  2398,
     529,   529,   529,  2395,  2400,   935,  1240,  2401,  2402,  2403,
    3434,  2405,   956,  1240,  2426,  2434,  1979,  2409,   529,   732,
    1953,  1043,  2465,   924,  1978,   529,  2472,  2484,   529,  3213,
    1326,  2496,  2503,  2514,  2473,  2474,   834,  1044,  2485,   533,
    1240,  2478,   826,  2501,  2516,   529,   565,  1045,  1339,  1341,
     936,  1344,  1346,  2521,  2525,  1632,  2526,  2522,  2523,   826,
    2527,  2542,   529,  2528,  3493,  1455,   533,   937,  2543,  1623,
    2572,  2531,  -617,  2532,   957,   958,   834,  2544,  2588,   529,
     529,  2579,   834,   533,  1046,  2539,  1039,  2540,  -617,  2596,
    2545,  1040,  2546,  -617,   832,  2549,   529,  2547,   529,  2548,
    3489,  2550,  1448,  2564,  2901,  2567,  1459,   529,  2565,  3024,
    2589,   832,    26,    27,    28,  2594,    26,    27,    28,  2595,
    2607,  2608,  2612,  2610,  2613,   732,   732,   732,  2620,  2618,
    1728,  2623,  -742,  1047,  2633,  3364,  2636,  2634,  -617,  2637,
    1048,  1076,   565,  1826,  1953,  -617,  2640,  2644,  1954,  1955,
    1041,  2645, -2116, -2116, -2116,  2648,  2297,  2297,  2297,  1454,
      23,  2654,  2721,  2651,   529,  -617,   887,  2646,  2650,  2673,
    1317,  2675,  2688,  2694,  2695,  2696,  2709,  2706,  2707,  2728,
      33,  2720,   938,  1049,    33,  2708,   960,  2738,   884,  2739,
    2742,   998,  2746,   939,  2743,   565,  2750,  2759,  3493,  1867,
    2760,  2643,  1050,  1868,  1870,  2763,  1605,   927,  1871,  1567,
    3598,   928,  1455,  1872,  2773,  2784,  2806,    38,  -617,  2819,
    2781,    38,  2807,  2787,  1042,   961,  2792,  -617,   940,   529,
    1076,  2818,  2867,  1953,   732,  2824,  2793,  1954,  1955,  2843,
    2794,  1956,  1957,  1958,  2856,  2795,  2832,  2840,  3493,   529,
     997,  2868,    40,   941,  2850,  2881,    40,   834,   732,  2865,
    2729,  1043,  2880,    43,   963,  1925,  2871,    43,  2886,  2857,
    2895,  2892,  2912,  1051,   834,  2888,  2914,  1044,  2916,  2926,
      44,   942,  2918,  2933,    44,  2932,  2939,  1045,  2123,  1925,
    2959,  2975,  3042,  3043,  3423,  3044,  3425,   529,  3446,  3048,
    3055,  3061,  3065,  3051,    45,  3056,  3069,  3060,    45,  3064,
      26,    27,    28,   964,  3077,  3078,  3082,  3087,    46,  1780,
    2353,   565,  2902,  3433,  1046,  3094,  2386,  3095,  3179,  3102,
    1076,  3122,  1807,  1953,  3124,   533,   529,  1954,  1955,  3419,
    3297,  1956,  1957,  1958,  3128,  3186,  1224,  3132,    23,   887,
    3142,  1567,  3143,  1832,  3145,  3146,  3167,  2883,  3570,  1176,
    3435,  3174,  3437,   832,  3188,  3192,  3525,  1912,   529,  1913,
    3202,  3206,  3177,  1047,   529,   529,  3210,  3193,    33,  3211,
    1048,  3194,  3200,  -617,  3212,   887,   529,  3201,  3220,  3518,
    3223,  3225,  3226,  3230, -2084,  3244, -2085,  3529, -2086, -2087,
     529, -2088, -2089,   529, -2090,   529, -2091, -2092, -2093, -2095,
    3243,  3245,  1567,   529, -2096,    38,   529,   529,  1857,  3259,
    3260,   529,   529,  1049,  1875, -2097, -2098,  3263,   529,  3246,
   -2099,  3432,  1961,  3247,  1895, -2100,   565, -2101,  2920,   565,
   -2102, -2104,  1050,   529,  3513,  2027, -2105,  1960, -2106, -2107,
      40, -2108,   927,   529, -2109,  1193,   928, -2110,   528,   540,
    2062,    43, -2111, -2112,   564,    92,  2063,  2069, -2113,  2064,
     564,  2068, -2114,  2067,   823,   529,   837, -2115,    44,  2904,
     840,   564,   849, -1369,  3264,   849,  3279,  3277,   868,   872,
    3281,  3249,   872,  3250,  3257,   564,   564,  3282,    26,    27,
      28,  3287,    45,  3288,  3289,  3299,  3292,  3300,  3307,  3317,
    3303,  3305,  3311,  1051,   732,  3314,    46,  3022,   732,  3313,
     732,  1961,  3318,  3319,  1959,  3322,   834,  3326,  3341,  3342,
    3346,  1039,   529,  3349,   529,  3352,  1040,  3354,  3366,  3367,
    3376,   823,   823, -1368,  3374,  2297,  3098,  1960,  3383,  3027,
    3384,  2301,  3385,  3080,  3398,   868,  3400,  3405,  3399,  3410,
     872,   564,   872,   872,   872,  3420,    33,  3421,  1867,  3424,
    2009,  3427,  1868,  1870,  3428,   565,  3430,  1871,  3441,   565,
     565,   565,  1872,  3559,  3436,  3219,  3053,  3461,  3465,  3468,
    3467,  3471,  1951,  1952,  3477,  1041,  3478,  3484,  1972,  3485,
    3486,  3283,  3499,    38,  3504,  3506,  3508,   887,   565,  3170,
    3511,  3512,  3515,  3516,  3517,  3074,  3524,   529,  3522,  3526,
    1567,  1961,   529,   565,   565,   565,   565,   565,   565,   565,
     565,   565,   565,  3531,  3536,  3542,   826,  3543,    40,   529,
     529,  3544,  3550,  3545,   529,  1482,  3551,   529,  3552,    43,
   -2116, -2116, -2116,  3554,  1965,  1966,  1967,  1968,  1969,  1970,
     533,  3553,  3555,  3556,  3557,  3575,    44,  3565,  3585,  1042,
    3588,  3567,  3569,  3590,   529,  3596,  3594,  3615,  3612,  3586,
    3587,  3624,   955,  3627,  3638,  3633,  3644,   956,   832,   529,
      45,  3648,  3652,  3663,  3659,   529,   529,  3664,   887,  1246,
     529,  1567,  1196,  3233,    46,   529,  1043,  2305,   529,   529,
    1006,  1582,  2671,   529,  1317,  2978,  2974,   529,  2204,  1247,
    2698,   529,  1044,  2348,  2717,  1007,  2770,  2027,   529,   929,
    3293,  3050,  1045,  3540,  3622,   826,  1835,  3362,  3584,  1962,
    1963,  1964,  1060,  1965,  1966,  1967,  1968,  1969,  1970,   957,
     958,  3591,  3616,  2505,  1789,  3397,  3068,   959,  2653,   533,
    2678,  3582,  2943,  3589,  3028,  1248,  2649,  1165,  3580,  1046,
    2753,  1862,   529,  2755,  3286,  1907,  2765,  2411,  2908,  3497,
     529,  2277,  3448,  2907,  3563,  1919,  1928,   832,  3521,  3642,
    3268,  2286,  1716,  2289,  2893,  1480,  2300,  2639,  2202,   529,
    2205,  2625,  2304,   838,  2306,  1481,  1203,  2270,  1567,  2797,
    1761,  2214,    23,  1760,  3568,  1703,  2635,  2313,  1047,  2238,
    3507,  3426,  2316,  2269,  1765,  1048,  2321,  2322,  2323,  2324,
     827,  2328,  2329,  1929,   956,  2609,  3131,  2967,  2506,  1962,
    1963,  1964,  3022,  1965,  1966,  1967,  1968,  1969,  1970,  3321,
    2791,   834,  1028,  2255,  1930,  1013,  2790,    11,  2821,  3368,
    2520,   960,  2421,  2422,  1249,  1446,  2423,  3510,  1049,   955,
    1430,  1432,  1436,  1931,   956,  3509,  3649,  1932,  2845,  1437,
    2562,   565,  1438,  2628,  2586,    14,    15,  1050,  2536,   732,
    2584,  1439,  1440,  2859,  1582,  1441,   957,   958,  2002,  3178,
     961,  1933,  1172,  1442,  1934,  2203,  3150,   913,   887,  1393,
    1388,   529,  2513,     0,     0,  1250,     0,     0,  1429,     0,
    1925,  1935,     0,     0,   997,  1251,     0,   529,  1567,     0,
    3269,     0,     0,    23,     0,   962,   957,   958,  1252,   963,
       0,     0,     0,     0,   959,   529,  2360,  2361,  2363,  2364,
     834,  1246,  2367,     0,     0,     0,     0,     0,  1051,     0,
       0,     0,    26,    27,    28,     0,     0,     0,     0,     0,
       0,  1247,  1253,  1567,     0,     0,     0,     0,   529,     0,
       0,     0,     0,     0,  1582,     0,     0,     0,   964,     0,
     529,   529,     0,     0,   529,     0,   529,     0,   872,     0,
       0,     0,     0,   872,     0,     0,   872,     0,  1858,     0,
       0,     0,     0,     0,   564,     0,     0,  1248,  1936,     0,
       0,   529,     0,     0,     0,     0,  1937,     0,  1255,  2086,
      33,     0,     0,     0,  1643,     0,  2087,  2088,  1574,     0,
    2089,  2090,  2091,  1647,  1646,   529,     0,  1859,  1858,  1938,
       0,     0,     0,  1256,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3316,     0,  1696,     0,    38,     0,     0,
    2505,     0,  1258,  1393,  1702,     0,  3022,     0,     0,     0,
    1939,     0,  3262,    26,    27,    28,   963,  1859,     0,     0,
       0,     0,  2491,     0,     0,  2443,  2444,  2445,  2446,  2447,
    2448,     0,    40,  2452,  2453,  2454,  2455,  2456,  2457,  2458,
    2459,  2460,  2461,    43,     0,     0,  1249,     0,     0,   548,
       0,   732,  1860,     0,  3379,   529,   963,   565,     0,     0,
      44,     0,   565,     0,     0,  1861,   529,     0,   529,     0,
     529,     0,     0,     0,   529,  -131,   529,     0,   529,     0,
       0,    33,  1925,  1393,    45,     0,  1393,  1393,   565,   529,
       0,     0,    35,   533,   529,     0,   529,  1250,    46,     0,
       0,     0,     0,     0,   529,  1861,     0,  1251,     0,   565,
     565,     0,     0,     0,    37,   549,     0,   732,    38,     0,
    1252,   832,   529,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   565,  1582,  1912,     0,  3445,     0,  3447,
      39,   982,   564,   564,     0,     0,     0,     0,  3454,     0,
       0,  1574,     0,    40,  1253,     0,     0,    86,     0,     0,
       0,     0,     0,     0,    43,     0,     0,     0,     0,     0,
    1576,   992,     0,     0,     0,     0,   529,    86,     0,  3480,
     825,    44,   565,     0,  1005,   540,     0,   529,     0,     0,
     528,     0,   872,     0,    86,  3483,     0,     0,     0,   529,
       0,     0,   823,   886,     0,    45,  1032,  1032,     0,     0,
    1255,  1032,  1055,   529,  2568,  2569,     0,     0,     0,    46,
    1921,  1923,     0,     0,   849,   849,   849,     0,  1582,   849,
       0,   529,  1924,     0,     0,  1256,     0,     0,     0,   849,
     849,  1574,   849,     0,   849,     0,     0,   825,   825,   905,
    2626,   533,   552,     0,  1258,     0,   872,     0,     0,     0,
       0,    86,   564,     0,     0,   529,     0,     0,     0,     0,
       0,     0,   565,   872,     0,     0,   872,   837,     0,   832,
     529,     0,     0,     0,   834,     0,     0,     0,     0,  3022,
       0,   732,  1649,     0,     0,  1650,     0,     0,     0,  1651,
    1652,     0,     0,   533,   553,     0,   993,     0,     0,     0,
       0,     0,     0,     0,  2745,     0,     0,     0,     0,     0,
     529,     0,  3454,   555,   872,  1327,     0,     0,     0,   556,
    1660,   832,   557,     0,   529,   529,   529, -2116,  3592,     0,
       0,     0,   872,   872,     0,   872,   872,     0,  1349,     0,
       0,     0,     0,  1576,  1233,     0,     0,     0,   533,     0,
    1234,  1360,     0,     0,  1662,     0,  1582,   529,  1246,     0,
    3613,     0,     0,     0,     0,     0,  2718,     0,     0,  2944,
       0,     0,  2725,     0,     0,  2945,   832,   565,  1247,     0,
    2734,  2735,  2737,  1032,  1055,     0,   872,     0,  2946,  1453,
     872,     0,     0,     0,     0,  2748,  1032,  1032,  2751,     0,
       0,     0,   564,     0,     0,   529,     0,     0,   823,     0,
    2764,     0,  2947,     0,  2948,   823,     0,     0,     0,     0,
    2570,     0,     0,     0,  1248,   564,     0,     0,     0,  2078,
       0,     0,   834,  1576,     0,     0,     0,     0,     0,     0,
       0,  2108,  1587,  2109,     0,     0,     0,     0,     0,     0,
       0,  1574,     0, -2116,     0,  1235,     0,     0,  2092,  2093,
    2094,     0,  2095,  2096,  2097,  2098,  2099,  2100,     0,     0,
    2125, -2116,     0,     0,     0,     0, -2116,     0,     0,     0,
       0,     0,  1632,     0,   834,     0,     0,     0,     0,     0,
     564,     0,     0,     0,     0,     0,     0,     0,     0,  2803,
    2804,  2805,     0,  1577,     0,  2949,     0,     0,     0,  1582,
       0,     0,     0,     0, -2116,     0,  1579,     0,     0,     0,
       0,  1582,     0,  1249,     0,     0,     0,     0,     0,     0,
    2200,     0,     0,     0,     0,     0,     0,     0,     0,   834,
       0,     0,     0,     0,  1708,  1574,     0,  1710,     0,     0,
       0,     0,  1582,     0,  2223,  2225,     0,     0,     0,  1582,
       0,   564,   564,  2923,  2924,     0,     0,     0,     0,   872,
       0,     0,     0,  1671,  1250,     0,     0,  2950,  2250,  2250,
       0,     0,  2951,     0,  1251,     0,     0,     0,     0,     0,
       0,  2976,     0,  1453,     0,  1582,     0,  1252,     0,  1582,
       0,     0,     0,   872,  1788,  1582,  3029,  3030,  3031,  3032,
    3033,  3034,  3035,  3036,  3037,  3038,   872,     0,     0,  1236,
       0,     0,     0,     0,     0,     0,     0,  1580,  1582,     0,
       0,  1253,     0,   872,  2952,     0,     0,   872,  1393,     0,
       0,     0,  1836,  2915,  2873,  2874,     0,     0,  1393,     0,
       0,  1393,  2953,  1576,     0,     0,     0,     0,     0,     0,
       0,     0,  2330,    14,    15,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2346,  2346,     0, -2116,     0,
       0,  1254,     0,  1574,     0,  1238,  1577,  1255,     0,     0,
       0,     0,     0,    86,     0,     0,     0,     0,     0,  1579,
    1852,     0,   872,     0,     0,     0,     0,     0,   872,     0,
       0,    23,  1256,     0,     0,     0,     0,  1257,   872,     0,
       0,     0,     0,  1900,     0,     0,     0,     0,     0,  1039,
       0,  1258,   982,     0,  1040,     0,  3059,   982,     0,   564,
     564,     0,   564,   982,     0,     0,     0,  1576,     0,     0,
       0,  1393,  1388,     0,     0,  2954,     0,     0,  2428,     0,
       0,     0,     0,     0,  2955,     0,  3081,     0,     0,     0,
    1076,     0,     0,  1953,  1581,     0,  1577,  1954,  1955,     0,
       0,  1956,  1957,  1958,     0,     0,     0,     0, -2116,  1579,
    1240,     0,     0,  1041,     0,  1678,  1679,  1680,  1681,  1682,
    1683,     0,     0,     0,     0,     0,  3104,  3105,  3106,  3107,
    1580,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1453,  1453,     0,     0,     0,     0,  1453,     0,
       0,   528,     0,     0,     0,     0,  1574,     0,     0,     0,
       0,     0,     0,     0,  1032,  3093,   564,  1997,  1574,     0,
       0,     0,     0,     0,   872,     0,     0,   823,     0,     0,
     823,    26,    27,    28,  3214,   823,     0,  1042,   823,     0,
    2524,     0,     0,   823,     0,   564,  1221,   564,     0,  1574,
       0,     0,     0,     0,     0,  1576,  1574,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1580,     0,     0,     0,  1043,  1076,     0,     0,  1953,     0,
       0,     0,  1954,  1955,    86,   886,  1956,  1957,  1958,     0,
    1044,     0,  1574,     0,     0,     0,  1574,     0,     0,    33,
    1045,     0,  1574,  3157,     0,     0,     0,     0,     0,     0,
      35,     0,     0,     0,  1582,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1574,  1012,  1581,     0,     0,
    3221,     0,    37,     0,  2266,     0,    38,  1046,  1025,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2101,     0,     0,     0,     0,  1960,     0,  1222,
       0,     0,     0,     0,  2112,     0,  1577,     0,     0,     0,
       0,    40,     0,     0,     0,     0,     0,     0,  3215,  1579,
       0,     0,    43,     0,     0,     0,  1047,   905,     0,     0,
       0,     0,     0,  1048,     0,  2603,     0,     0,     0,    44,
       0,     0,     0,   982,     0,     0,  1453,    86,  1576,     0,
       0,     0,     0,     0,     0,     0,     0,  1581,     0,     0,
    1576,     0,     0,    45,     0,     0,     0,     0,     0,     0,
       0,  1961,  2631,  2631,     0,     0,  1049,    46,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2201,  1576,   872,     0,   872,  1050,  1582,     0,  1576,     0,
    1577,     0,     0,  1076,     0,   872,  1953,  2217,  2222,  2224,
    1954,  1955,     0,  1579,  1956,  1957,  1958,     0,     0,     0,
       0,     0,  1453,     0,     0,     0,     0,     0,     0,     0,
    1580,  3158,  1960,     0,  1576,     0,  2682,     0,  1576,     0,
       0,     0,     0,     0,  1576,     0,     0,   872,     0,   564,
       0,  3365,     0,     0,     0,     0,     0,  1582,     0,     0,
       0,    86,     0,  1788,   564,  3294,  1051,  1576,     0,     0,
       0,  1223,  3372,  3373,   564,  2287,   564,  2291,     0,   564,
       0,     0,     0,  1649,     0,   564,  1650,   564,  2714,     0,
    1651,  1652,     0,     0,   825,     0,  3386,     0,     0,   982,
     564,   825,     0,     0,   982,   564,  1961,  2730,     0,   564,
     564,   564,   564,     0,   564,   564,     0,     0,  1039,     0,
       0,  1660,     0,  1040,  1580,     0,     0,     0, -2116,     0,
       0,  2349,     0,     0,     0,     0,  1590,     0,  1577,     0,
     872,   872,   872,   872,     0,  1349,   872,     0,  1602,     0,
       0,  1579,     0,     0,  1388,  1662,     0,     0,     0,     0,
       0,  2376,  1582,     0,  2771,     0,  2772,     0,     0,     0,
    2777,     0,  2780,     0,     0,  1629,     0,  1581,     0,  3382,
       0,  1574,  1041,     0,     0,  2404,     0,     0,     0,  1962,
    1963,  1964,     0,  1965,  1966,  1967,  1968,  1969,  1970,     0,
       0,  3408,  3409,     0,     0,     0,  3412,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1076,
    1960,  2580,  1953,     0,     0,     0,  1954,  1955,     0,     0,
    1956,  1957,  1958,     0,     0,  1453,  1453,  1453,  1453,  1453,
    1453,     0,     0,  1453,  1453,  1453,  1453,  1453,  1453,  1453,
    1453,  1453,  1453,     0, -2116,   823,  1042,     0,  2829,  2831,
       0,     0,  1580,   905,   905,  1582,   905,     0,     0,  3452,
       0,  1581, -2116,     0,   564,     0,     0, -2116,     0,     0,
       0,     0,     0,     0,     0,     0,   872,     0,     0,     0,
       0,  1577,     0,  1043,  1961,   823,     0,     0,     0,     0,
    3479,   823,     0,  1577,  1579,     0,   564,     0,     0,  1044,
       0,   564,     0,     0,     0, -2116,  1579,     0,     0,  1045,
    2518,  2518,     0,  1574,  1962,  1963,  1964,     0,  1965,  1966,
    1967,  1968,  1969,  1970,  1577,     0,     0,     0,     0,     0,
       0,  1577,     0,     0,  1456,     0,  1582,  1579,     0,     0,
    3576,     0,     0,     0,  1579,     0,  1046,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1671,     0,     0,  1577,  2016,     0,
       0,  1577,     0,  1576,  1574,     0,     0,  1577,     0,     0,
    1579,     0,   564,     0,  1579,     0,  2556,     0,     0,     0,
    1579,   564,     0,     0,     0,  1047,     0,     0,     0,  1581,
    1577,     0,  1048,     0,     0,  1580,     0,     0,     0,     0,
    1393,  3019,     0,  1579,  1453,  1453,     0,  1580,     0,     0,
       0,     0,     0,     0,     0,    86, -2116,     0,     0,     0,
       0,     0,     0,  2101,     0,     0,     0,     0,     0,  1453,
       0,     0,     0,  1582,  2714,  1049,     0,     0,  1580,     0,
       0,     0,     0,     0,     0,  1580,     0,     0,     0,     0,
       0,  3595,     0,     0,  1050,     0,   823,     0,     0, -2116,
       0,     0,     0,     0,     0,     0,     0,  1582,   564,  1574,
       0,     0,     0,   823,     0,     0,     0,  2217,     0,     0,
       0,  1580,     0,     0,     0,  1580,     0,     0,     0,     0,
    1961,  1580,  1962,  1963,  1964,     0,  1965,  1966,  1967,  1968,
    1969,  1970,     0,     0,     0,  1576,     0,     0,     0,     0,
   -1847,     0,     0,     0,  1580,     0,     0,     0,     0,     0,
       0,   564,     0,   825,  1453,  1051,   825,   564,  1456,     0,
    2017,   825,     0,     0,   825,     0,     0,     0,     0,   825,
    3138,     0,  1581,  1852,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1582,  1581,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1576,     0,     0, -2116,
       0,     0,  1574,     0,     0,     0,  1678,  1679,  1680,  1681,
    1682,  1683,     0,     0,     0,  1581,     0,     0,     0,     0,
       0,     0,  1581,     0,     0,     0,     0,     0,  1582,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3176,
   -1847,     0,     0,     0,  1852,     0,     0,     0,     0,     0,
     872,     0,    86,     0,     0,     0,   872,     0,  1581,     0,
       0,     0,  1581,  1852,   872,   872,   872,     0,  1581,     0,
       0,     0,     0,     0,     0,     0,     0,   564,     0,   872,
       0,     0,   872,  1574,     0,     0,     0,     0, -1847,     0,
    1349,  1581,     0,     0,   872,     0,     0,     0,     0,     0,
     982,  1576,     0,     0, -1847,     0,     0,     0,     0, -1847,
    1393,     0,     0,     0, -1847,  1393,     0,     0,     0,     0,
       0,     0,  1852,  1852, -1847,  1852,     0,     0,     0, -1847,
       0,  1582,  2149,     0,     0,     0,  1577,     0,  1962,  1963,
    1964,     0,  1965,  1966,  1967,  1968,  1969,  1970,     0,  1579,
       0,     0,     0,     0,     0,   528,     0,     0,     0,     0,
       0, -1847,  1921,  1923,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2796,     0,     0,     0,     0,
       0, -1847,     0,   872,   872,   872,     0,  1456,  1456,     0,
    1574,     0,   564,  1456,  1453,   564,     0,     0,     0,     0,
       0,   564,     0,     0,  1576,   905,     0,     0,  3265,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   872,     0,     0,  1574,     0,     0,     0,     0,     0,
       0,     0,     0,     0, -1847,  2101,     0, -1847,  1388,     0,
       0,     0,     0, -1847,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1580,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1453,  1453,     0,     0,  1577,     0,
       0,     0,     0,     0,     0,  1576, -1847,     0,     0,     0,
       0,  1579,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  2897,     0,     0,     0,     0,     0,  2217,
    1574, -1847,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3339,     0,     0,     0,     0,     0,   872,     0,     0,
       0,   564,     0,     0,     0,   564,   564,   564,     0,  1577,
    2371,  1852,  1788,  1852,     0,  1900,     0,     0,     0,    86,
       0,     0,  1579,     0,     0,  1574,     0,     0,     0,     0,
       0,     0,     0,     0,   564,     0,  2977,     0,     0,   874,
       0,     0,     0,     0,     0,     0,     0,  1921,  1923,   564,
     564,   564,   564,   564,   564,   564,   564,   564,   564,  1393,
    3019,     0,  1576,     0,     0,     0,     0,     0,     0, -1847,
       0,     0,  1580,     0,     0,     0,     0,  1581,     0, -1847,
       0,  2376,     0,     0,  1582,     0,     0,     0,     0,     0,
     872,     0,     0,     0,     0,     0,  1576,  2193,     0, -1847,
    1788, -1847, -1847,     0,     0, -1862,     0,     0,     0,     0,
       0,   825,     0,     0,  1577,     0,     0,     0,     0,     0,
     872,     0,     0,     0,  1900,     0,     0,  1579,  1574,     0,
       0,     0,     0,  1580,  1852,     0,     0,     0, -1847,     0,
       0, -1847, -1847, -1847,     0,  1453,     0,  1456,     0,  1032,
     823,   825,     0,   564,     0,     0,     0,   825,     0,     0,
     872,   872,   872,   872,     0,     0,     0,     0,     0,     0,
       0,     0,  1453,     0,     0,  1453,     0,     0,     0,   564,
     982,     0,  1576,     0,     0,     0,     0,     0,  3140,     0,
       0,     0,     0,  3473,     0,     0,     0,     0,     0,  1403,
    1404,     0,     0,     0,     0, -1862,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3147,  1577,  2556,  1581,
       0,     0,     0,     0,     0,     0,     0,  1576,     0,     0,
    1579,     0,     0,     0,     0,     0,     0,     0,  1580,     0,
    1405,  1406,     0,     0,  1407,  1408,     0,  3171,     0,   823,
       0,     0,     0, -1862,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3183,     0,     0,     0,  2217,     0, -1862,
       0,     0,     0,  2101, -1862,     0,     0,     0,     0, -1862,
    1581,     0,     0,     0,     0,  1629,     0,  1788,     0, -1862,
       0,     0,     0,  1852, -1862,     0,     0,     0,  1577,     0,
       0,     0,     0,     0,     0,  2149,   982,   564,  1453,     0,
       0,  1579,     0,     0,   872,     0,     0,     0,     0,     0,
       0,  2590,     0,  1409,  1410,     0, -1862,     0,     0,     0,
    1576,  3234,   825,     0,     0,     0,     0,     0,     0,     0,
       0,  1580,  1393,  3019,     0,     0, -1862,     0,     0,   825,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1456,  1456,  1456,  1456,  1456,  1456,     0,     0,  1456,  1456,
    1456,  1456,  1456,  1456,  1456,  1456,  1456,  1456,     0,     0,
       0,     0,     0,     0,     0,  1581,     0,     0,     0,  1411,
    1412,  1413,  1414,  1415,  1416,  1417,  1418,     0,     0, -1862,
    1419,  1420, -1862,     0,     0,  1577,     0,     0, -1862,  3251,
       0,  1574,  1852,     0,     0,     0,     0,     0,  1579,     0,
       0,     0,  1580,     0,     0,  2376,     0,     0,     0,     0,
       0,     0,     0,     0,  1138,  1138,     0,     0,     0,  1577,
       0,     0,     0,     0,     0,     0,     0,     0,  3290,     0,
       0, -1862,  1579,     0,     0,  1453,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0, -1862,     0,  1421,  1422,
       0,     0,     0,  3308,     0,     0,     0,     0,  1581,   564,
       0,     0,     0,     0,     0,     0,   564,     0,     0,     0,
       0,     0,     0,     0,     0,  1275,     0,   886,     0,  1319,
    1324,     0,     0,     0,     0,     0,     0,     0,     0,  1423,
    1424,     0,     0,     0,     0,  1577,     0,     0,     0,  1580,
       0,  3336,     0,     0,   874,     0,     0,     0,  1579,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1456,
    1456,     0,     0,   564,     0,     0,     0,     0,   564,     0,
       0,     0,     0,  1580, -1862,     0,     0,     0,  1375,  1581,
    1577,     0,     0,     0, -1862,     0,     0,     0,     0,     0,
       0,     0,     0,  1579,   564,     0,  1399,     0,     0,     0,
       0,     0,  1447,     0, -1862,  1449, -1862, -1862,     0,  1461,
    1464,  1469,  1472,     0,     0,   564,   564,     0,     0,     0,
       0,     0,     0,  1576,     0,     0,     0,  1425,  1426,     0,
       0,     0,     0,   872,     0,  1788,     0,     0,     0,   564,
       0,     0,     0, -1862,     0,     0, -1862, -1862, -1862,  1509,
    1319,  1427,  1428,     0,     0,   872,   872,     0,     0,  1580,
     872,     0,     0,  3414,     0,     0,     0,     0,  1032,     0,
       0,  1593,  1246,     0,     0,     0,     0,     0,     0,  1456,
       0,     0,     0,  1577,  1453,     0,  1581,     0,   564,  1032,
    1609,  1032,  1247,     0,     0,     0,  1579,     0,     0,     0,
    1629,  1619,  1620,  1621,  1580,  1626,  1630,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3183,     0,     0,     0,
    1581,     0,     0,   872,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1629,     0,  1248,  2965,
    1692,     0,     0,     0,     0,     0,     0,     0,     0,  2966,
       0,     0,     0,     0,   872,    86,     0,     0,  1509,  1509,
       0,    86,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   564,     0,
       0,  1788,     0,     0,     0,     0,     0,     0,     0,  2919,
       0,     0,     0,     0,     0,     0,  1735,     0,     0,  3308,
    1751,  1756,     0,     0,     0,     0,  1581,  1580,     0,     0,
    2967,  1138,  1138,     0,     0,     0,     0,     0,     0,  1649,
       0,  3414,  1650,     0,     0,     0,  1651,  1652,  1653,  1654,
    1655,  1656,  1657,     0,     0,     0,     0,  1249,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1658,     0,  1788,
       0,  1581,     0,     0,     0,     0,     0,  1660,     0,     0,
       0,     0,     0,     0,  1661,     0,     0,     0,    86,  1319,
     982,   982,     0,  3414,   982,     0,     0,     0,  1319,     0,
       0,     0,  1997,     0,     0,     0,     0,     0,  1250,     0,
       0,  1662,     0,   564,     0,     0,     0,    86,  1251,     0,
       0,     0,  1319,     0,  3079,     0,     0,     0,     0,     0,
       0,  1252,     0,     0,  2968,  1788,  1788,     0,     0,     0,
       0,     0,     0,     0,     0,   872,     0,  1788,  3414,     0,
       0,  1649,     0,     0,  1650,     0,   825,     0,  1651,  1652,
    1653,  1654,  1655,  1656,  1657,  1253,     0,     0,     0,     0,
       0,     0,     0,     0,  1581,     0,     0,     0,  1629,  1658,
       0,     0,     0,     0,     0,  1788,  1577,     0,     0,  1660,
       0,   982,     0,     0,     0,     0,  1661,     0,     0,  1579,
       0,     0,     0,     0,     0,     0,  2217,     0,     0,  1943,
    1663,     0,     0,     0,     0,     0,     0,     0,   564,  1456,
    1456,  1255,     0,  1662,     0,     0,     0,     0,  1664,     0,
       0,     0,     0,  1665,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1256,     0,     0,     0,
       0,     0,     0,     0,     0,   825,  1666,  1667,     0,     0,
       0,     0,     0,     0,     0,  1258,     0,  2969,     0,   886,
    2970,  1668,     0,  1469,     0,  1469,  1469,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1138,  1138,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1138,     0,     0,     0,     0,     0,
    1580,     0,     0,  1669,     0,     0,  1670,     0,     0,     0,
       0,     0,  1663,     0,     0,     0,     0,     0,     0,  1457,
    1671,     0,     0,  1672,     0,     0,     0,     0,     0,     0,
    1664,  1648,     0,     0,     0,  1665,  1649,     0,     0,  1650,
       0,     0,     0,  1651,  1652,  1653,  1654,  1655,  1656,  1657,
       0,     0,     0,     0,     0,     0,     0,     0,  1666,  1667,
       0,     0,     0,     0,  1658,     0,     0,     0,  1659,     0,
       0,     0,  1799,  1668,  1660,     0,     0,     0,     0,     0,
       0,  1661,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2076,     0,     0,     0,     0,
       0,     0,     0,  2079,     0,     0,     0,     0,  1662,     0,
    1456,     0,     0,     0,     0,  1669,     0,     0,  1670,     0,
       0,     0,    86,     0,     0,  1673,     0,     0,     0,     0,
       0,     0,  1671,     0,     0,  1672,     0,  1456,     0,  1686,
       0,     0,     0,  2126,     0,     0,     0,  1581,     0,  2130,
    2131,  2132,  2133,  2134,  2135,  2136,  2137,     0,     0,     0,
       0,  2146,  2147,     0,     0,     0,  2160,     0,     0,  1629,
    2163,     0,     0,  2171,  2172,  2173,  2174,  2175,  2176,  2177,
    2178,  2179,     0,     0,  2180,     0,     0,  1686,     0,     0,
       0,  1138,     0,  1319,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1663,     0,     0,
       0,     0,  2206,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1457,     0,  1664,     0,     0,     0,     0,
    1665,     0,     0,     0,     0,  1674,     0,  1673,  1675,  1676,
    1677,     0,  1678,  1679,  1680,  1681,  1682,  1683,     0,     0,
    1620,  1621,     0,  1666,  1667,     0,     0,     0,     0,     0,
       0,  2541,     0,     0,     0,     0,     0,     0,  1668,     0,
       0,     0,     0,  1456,     0,     0,  1686,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1649,     0,     0,  1650,     0,     0,     0,  1651,  1652,  1653,
    1654,  1655,  1656,  1657,     0,     0,     0,     0,     0,     0,
    1669,     0,     0,  1670,     0,     0,    86,     0,  1658,     0,
    1686,     0,  2855,     0,     0,  1686,     0,  1671,  1660,     0,
    1672,     0,     0,     0,     0,  1661,     0,  2332,  3404,     0,
       0,  1319,     0,     0,  2342,  2343,     0,  1674,     0,     0,
    1675,  1676,  1677,     0,  1678,  1679,  1680,  1681,  1682,  1683,
       0,     0,  1662,     0,     0,     0,     0,     0,     0,  1946,
       0,     0,     0,     0,     0,     0,  1686,     0,     0,     0,
       0,     0,     0,     0,  1319,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    86,
    1686,    86,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1375,  2412,     0,     0,  1649,     0,
    1456,  1650,     0,     0,     0,  1651,  1652,     0,     0,  1655,
    1656,  1657,  1673,     0,     0,     0,     0,     0,     0,     0,
       0,    86,     0,  2438,  2439,     0,  2440,     0,  1686,     0,
    1686,     0,  1457,  1457,     0,  1971,  1660,    86,  1457,     0,
       0,  1663,  1686,  1661,     0,  1686,     0,     0,     0,     0,
    1686,     0,     0,  1686,     0,     0,  2467,  2468,     0,  1664,
    2206,     0,     0,     0,  1665,  1649,     0,     0,  1650,     0,
    1662,     0,  1651,  1652,  1653,  1654,  1655,  1656,  1657,     0,
       0,     0,     0,     0,     0,     0,     0,  1666,  1667,  2495,
    1686,     0,     0,  1658,  2500,     0,     0,     0,     0,     0,
       0,     0,  1668,  1660,     0,     0,     0,     0,     0,     0,
    1661,  1509,     0,  1319,     0,     0,     0,     0,     0,     0,
       0,     0,  1674,     0,     0,  1675,  1676,  1677,     0,  1678,
    1679,  1680,  1681,  1682,  1683,     0,     0,  1662,     0,     0,
       0,     0,     0,     0,  1669,     0,     0,  1670,     0,     0,
       0,  2534,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1671,     0,     0,  1672,     0,     0,     0,     0,  1663,
       0,     0,     0,     0,  1686,     0,  1649,     0,     0,  1650,
      86,     0,     0,  1651,  1652,     0,     0,  1664,  2551,     0,
    1686,  2554,  1665,     0,     0,     0,  2560,  2561,     0,     0,
    1686,  1686,  1686,     0,     0,     0,     0,  1686,     0,     0,
       0,  1686,    86,     0,  1660,  1666,  1667,     0,     0,  1456,
       0, -2116,     0,  1233,     0,     0,     0,     0,     0,  1234,
    1668,     0,  1649,     0,     0,  1650,  1663,  1246,     0,  1651,
    1652,     0,  2582,     0,     0,  2585,     0,  2587,  1662,     0,
       0,     0,     0,     0,  1664,     0,     0,  1247,     0,  1665,
       0,     0,     0,  2591,     0,     0,  1673,     0,     0,     0,
    1660,     0,  1669,  1686,     0,  1670,     0, -2116,     0,     0,
       0,     0,  1666,  1667,     0,     0,     0,     0,     0,  1671,
       0,     0,     0,     0,     0,     0,     0,  1668,     0,     0,
       0,     0,     0,  1248,  1662,     0,     0,  1735,     0,     0,
       0,     0,     0,     0,  2872,     0,  1686,     0,     0,     0,
       0,     0,     0,     0,  1756,  2178,     0,     0,     0,     0,
       0,     0,  1686,     0,  1235,     0,     0,  1686,     0,  1669,
       0,     0,  1670,  1138,     0,     0,     0, -2116,     0,     0,
       0,     0,  2647,     0,  1971,     0,  1671,     0,     0,  1672,
       0,     0,     0,     0,     0, -2116,     0,     0,     0,     0,
   -2116,     0,     0,     0,     0,     0,  1674,     0,     0,  1675,
    1676,  1677,     0,  1678,  1679,  1680,  1681,  1682,  1683,     0,
       0,     0,     0,  2117,  1673,     0,     0,     0,     0,     0,
       0,     0,  1249, -2116,     0,     0,     0,     0, -2116,  1621,
       0,     0,     0,     0,     0,  1319,     0,     0,     0,     0,
       0, -2116,     0,     0,     0,     0, -2116,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1250,     0,     0,     0,     0,     0,     0,
       0,  1673,     0,  1251, -2116,     0,     0,  1671,     0,     0,
       0,     0,     0,     0,  2758,     0,  1252,     0,     0,     0,
       0,     0,     0,     0,  1403,  1404,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1236,     0,
       0,     0,     0,     0,  1674,     0,     0,  1675,  1676,  1677,
    1253,  1678,  1679,  1680,  1681,  1682,  1683,     0,     0,     0,
       0,     0,     0,  1671,  1686,  1405,  1406,     0,     0,  1407,
    1408,     0,  1971,  1971,     0,  1457,  1457,  1457,  1457,  1457,
    1457,     0,     0,  1457,  1457,  1457,  1457,  1457,  1457,  1457,
    1457,  1457,  1457,  1971,     0,     0,     0,     0,     0,     0,
    2307,     0,     0,     0,  1238,     0,  1255,     0,     0,     0,
       0,  1674, -2116,     0,  1675,  1676,  1677,     0,  1678,  1679,
    1680,  1681,  1682,  1683,     0,     0,     0,     0,  2117,     0,
       0,  1256,     0,     0,     0,     0,  2308,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1409,  1410,
    1258,     0,     0,  2842,     0,     0,     0,     0,     0,  2844,
    2079,     0,     0,     0,     0,     0,     0,     0, -2116,     0,
       0,  2851,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2861,     0,     0,  2864,     0,
    2866,     0,     0,     0,     0,     0,     0,  1686,  2870,     0,
    1686,     0,     0,     0,     0,     0,  2877,  2878,     0,  1240,
       0,     0,     0,  2885,  1411,  1412,  1413,  1414,  1415,  1416,
    1417,  1418, -2116,     0,     0,  1419,  1420,     0,  2894,  1678,
    1679,  1680,  1681,  1682,  1683,     0,     0,     0,  2909,     0,
       0,     0,     0,     0,     0,     0,     0,  1686,     0,     0,
       0,  1686,  1686,  1686,  1686,  1686,  1686,  1686,  1686,     0,
    1138,     0,     0,     0,  1457,  1457,     0,  1686,  1686,     0,
       0,     0,     0,     0,     0,     0,     0,     0, -2116,     0,
       0,  1686,     0,     0,  1686,  1678,  1679,  1680,  1681,  1682,
    1683,     0,  1686,  1686,  1686,  1686,  1686,  1686,  1686,  1686,
    1686,  1686,     0,  1421,  1422,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2332,   -47,  2332,
       0,     0,     0,     0,     0,     0,     0,  1686,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       1,     0,     0,     0,  1423,  1424,     0,     0,     0,     0,
       2,     0,     3,     4,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     5,     0,     0,     0,     0,
       6,     0,     0,     0,     0,     0,     0,     0,     0,     7,
       0,     0,     0,     0,  1457,     0,     0,     0,     0,     0,
       0,     0,     0,     8,     0,     0,     0,     0,     0,     0,
       0,     0,     9,     0,    10,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    11,     0,    12,     0,
       0,     0,     0,     0,  3120,  3121,     0,     0,     0,    13,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1425,  1426,    14,    15,    16,     0,     0,     0,
       0,     0,     0,  1686,     0,    17,     0,     0,     0,  3144,
       0,     0,    18,  1686,  1686,     0,  1427,  1428,     0,     0,
      19,     0,    20,    21,  3148,     0,     0,     0,     0,     0,
    3151,  3152,     0,     0,     0,  3153,  2044,     0,    22,     0,
    3156,     0,    23,  3159,  3160,     0,     0,     0,  2332,  1319,
       0,     0,  3168,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1138,     0,     0,     0,     0,     0,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1686,     0,  -596,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3209,     0,  1686,
    1686,  1686,     0,    25,  1971,  1971,  1971,  1971,  1971,  1971,
       0,     0,     0,  1971,  1971,  1971,  1971,  1971,  1971,  1971,
    1971,  1971,  1971,     0,  3228,     0,     0,     0,  1686,  1686,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1649,     0,     0,  1650,     0,     0,     0,  1651,  1652,
    1653,  1654,  1655,  1656,  1657,     0,  1686,     0,     0,     0,
       0,  1686,     0,  1649,     0,     0,  1650,     0,     0,  1658,
    1651,  1652,  1653,  1654,  1655,  1656,  1657,     0,     0,  1660,
       0,     0,    26,    27,    28,     0,  1661,     0,     0,     0,
      29,  1658,     0,     0,    30,  1686,     0,     0,     0,     0,
       0,  1660,     0,     0,     0,     0,     0,     0,  1661,     0,
       0,     0,  1686,  1662,     0,  1686,     0,     0,     0,     0,
       0,  1686,  1686,     0,     0,    31,     0,     0,     0,  1971,
    1971,     0,     0,     0,    32,  1662,  2758,     0,     0,     0,
       0,     0,     0,  1686,  1457,  1457,  1686,     0,  1686,     0,
      33,     0,  1686,     0,     0,     0,     0,    34,     0,     0,
       0,    35,     0,     0,     0,     0,     0,     0,     0,     0,
    1630,    36,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    37,     0,     0,     0,    38,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  2554,     0,     0,     0,     0,  1686,    39,
       0,     0,  1663,     0,     0,  3328,  3329,     0,  1402,  3330,
     836,  1621,    40,     0,     0,    41,     0,     0,    42,     0,
    1664,     0,     0,    43,  1663,  1665,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3348,     0,     0,     0,
      44,     0,  1664,     0,     0,     0,     0,  1665,  1666,  1667,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3360,     0,     0,  1668,    45,     0,     0,     0,     0,     0,
    1666,  1667,     0,  1403,  1404,     0,     0,     0,    46,     0,
       0,   -47,     0,     0,     0,  1668,     0,     0,  1649,     0,
       0,  1650,     0,     0,     0,  1651,  1652,     0,     0,  1655,
    1656,  1657,     0,     0,     0,  1669,     0,     0,  1670,  1686,
       0,     0,     0,     0,  1405,  1406,     0,     0,  1407,  1408,
       0,     0,  1671,     0,     0,  1672,  1660,  1669,     0,     0,
    1670,     0,     0,  1661,     0,  1457,     0,     0,     0,     0,
       0,     0,  1649,     0,  1671,  1650,     0,  1672,     0,  1651,
    1652,     0,     0,     0,     0,  3120,     0,     0,     0,  3429,
    1662,     0,     0,  1138,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3438,     0,     0,     0,     0,  2332,
    1660,  2332,     0,     0,     0,     0,     0, -2116,     0,  1138,
       0,     0,     0,  1686,     0,  1686,     0,  1409,  1410,     0,
       0,     0,  1686,     0,     0,     0,     0,  3463,     0,     0,
       0,     0,  1686,     0,  1662,  1686,     0,  1686,     0,     0,
       0,  1686,     0,     0,  1971,  1971,     0,  1673,  1686,  1686,
       0,     0,     0,     0,     0,     0,  1686,     0,     0,     0,
       0,     0,     0,  1649,     0,  1686,  1650,     0,     0,  1673,
    1651,  1652,  1653,  1654,  1655,  1656,  1657,     0,     0,  1663,
    1686,  3498,     0,  1411,  1412,  1413,  1414,  1415,  1416,  1417,
    1418,  1658,  3120,     0,  1419,  1420,     0,  1664,     0,     0,
    2875,  1660,  1665,     0,  1138,     0,     0,     0,  1661,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1457,     0,
       0,     0,     0,     0,     0, -2116, -2116,     0,     0,     0,
       0,     0,     0, -2116,     0,  1662,  3541,     0,     0,     0,
    1668,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0, -2116,     0,     0,     0,     0, -2116,  1674,     0,     0,
    1675,  1676,  1677,     0,  1678,  1679,  1680,  1681,  1682,  1683,
       0,     0,  1421,  1422,  2437,     0,     0,     0,     0,  1674,
       0,     0,  1675,  1676,  1677, -2116,  1678,  1679,  1680,  1681,
    1682,  1683,     0,     0, -2116,     0,  2538,     0,     0,  1671,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1423,  1424,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1663,     0,     0,     0,     0,  3607,
    3607,  3607,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1664,  1671,     0,     0,     0,  1665,     0,     0,
       0,     0,     0,     0,  1971,  1457,     0,     0,     0,     0,
       0,     0,  3607,     0,     0,     0,     0,     0,     0,     0,
    1666,  1667,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1686,  1686,     0,     0,  1668,     0,     0,     0,     0,
       0,     0,     0,     0,  1673,     0,     0,     0,     0,     0,
       0,  1425,  1426,     0,     0,  1686,     0,     0,     0,  1686,
    3607,     0,  1686,  1686,  1686,     0,     0,  1686,     0,     0,
    1686,  1686,     0,     0,     0,  1427,  1428,  1669,     0,  1686,
    1670,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1671,     0,     0,  1672, -2116,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1686,     0,     0,     0,     0,     0,  1971,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1686,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1674,     0,     0,  1675,  1676,  1677,
       0,  1678,  1679,  1680,  1681,  1682,  1683,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1673,
       0,     0,     0,     0,     0,  1971,     0,     0, -2116,     0,
       0,     0,     0,     0,     0,  1678,  1679,  1680,  1681,  1682,
    1683,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1686,
    1686,  1686,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1686,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1686,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1674,
       0,     0,  1675,  1676,  1677,     0,  1678,  1679,  1680,  1681,
    1682,  1683,     0,     0,     0,     0,  2566,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1686,     0,     0,     0,     0,     0,     0,     0,     0,  1686,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1686,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1686,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   118,  1073,   836,  1074,  1075,  1076,  1077,  1078,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     119,   120,   121,   122,   123,   124,   125,   126,     0,   127,
     128,   129,  1686,     0,     0,     0,     0,  1079,     0,     0,
     130,   131,   132,     0,   133,   134,   135,   136,   137,   138,
     139,   140,  1080,   142,  1081,  1082,     0,   145,   146,   147,
     148,   149,   150,  1083,   805,   151,   152,   153,   154,  1084,
    1085,   157,     0,   158,   159,   160,   161,   806,     0,   807,
       0,  1086,   165,   166,   167,   168,   169,   170,   171,   172,
     173,     0,   174,   175,   176,   177,   178,   179,  1686,   180,
     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
    1087,   192,   193,  1088,   195,  1089,   196,     0,   197,   198,
     199,   200,   201,   202,     0,     0,   203,   204,   205,   206,
       0,     0,   207,   208,  1090,   210,   211,   212,     0,   213,
     214,   215,     0,   216,   217,   218,     0,   219,   220,   221,
     222,  1091,   224,   225,   226,   227,   228,   229,   808,  1092,
     231,     0,     0,   232,   233,  1093,   235,     0,   236,     0,
     237,   238,     0,   239,   240,   241,   242,   243,   244,     0,
       0,   245,     0,  1094,  1095,   248,   249,     0,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
       0,   262,   263,   264,   265,   266,   267,   268,     0,   269,
     270,   271,   272,   273,   274,   275,   276,  1096,  1097,     0,
    1098,     0,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,     0,     0,   291,   292,   293,   294,     0,
     295,     0,     0,   296,   297,   298,   299,   300,   301,   302,
    1099,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,  1100,   326,  1101,   328,   329,   330,   331,   332,
    1102,   333,   334,   335,   336,  1103,   810,   338,  1104,   340,
     341,   342,     0,   343,   344,     0,     0,  1105,   346,   347,
       0,     0,   348,   349,   350,   351,   352,   353,   354,   812,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,     0,     0,     0,     0,   368,   369,   813,   371,
     372,   373,   374,     0,   375,   376,   377,     0,   378,   379,
     380,   381,   382,   383,     0,   384,   385,   386,   387,   388,
    1106,   390,   391,   392,   393,     0,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,     0,
     407,   408,   409,   410,   411,   412,  1107,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
       0,     0,   427,   428,   429,   430,   431,   432,   433,   434,
     435,     0,   436,   437,   438,  1108,   440,     0,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
     453,   454,   816,     0,     0,   456,   457,     0,   458,   459,
     460,     0,   461,   462,   463,   464,   465,     0,   466,  1109,
    1110,     0,     0,   469,   470,   817,   472,   818,  1111,   474,
     475,   819,   477,   478,   479,   480,   481,     0,     0,   482,
     483,   484,     0,   485,   486,   487,   488,     0,   489,   490,
     491,   492,   493,   494,  1112,   496,     0,   497,   498,   499,
     500,   501,   502,   503,   504,   505,     0,     0,   506,     0,
       0,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   518,   519,   520,   521,   522,   523,   524,   525,
     526,   527,  1113,     0,     0,     0,     0,     0,     0,  1114,
    1115,  1116,     0,     0,     0,     0,  1117,     0,  1118,     0,
       0,     0,  1119,     0,     0,  1120,  1121,  1122,  2699,   118,
    1073,   836,  1074,  1075,  1076,  1077,  1078,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   119,   120,
     121,   122,   123,   124,   125,   126,     0,   127,   128,   129,
       0,     0,     0,     0,     0,  1079,     0,     0,   130,   131,
     132,     0,   133,   134,   135,   136,   137,   138,   139,   140,
    1080,   142,  1081,  1082,     0,   145,   146,   147,   148,   149,
     150,  1083,   805,   151,   152,   153,   154,  1084,  1085,   157,
       0,   158,   159,   160,   161,   806,     0,   807,     0,  1086,
     165,   166,   167,   168,   169,   170,   171,   172,   173,     0,
     174,   175,   176,   177,   178,   179,     0,   180,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,  1087,   192,
     193,  1088,   195,  1089,   196,     0,   197,   198,   199,   200,
     201,   202,     0,     0,   203,   204,   205,   206,     0,     0,
     207,   208,  1090,   210,   211,   212,     0,   213,   214,   215,
       0,   216,   217,   218,     0,   219,   220,   221,   222,  1091,
     224,   225,   226,   227,   228,   229,   808,  1092,   231,     0,
       0,   232,   233,  1093,   235,     0,   236,     0,   237,   238,
       0,   239,   240,   241,   242,   243,   244,     0,     0,   245,
       0,  1094,  1095,   248,   249,     0,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,     0,   262,
     263,   264,   265,   266,   267,   268,     0,   269,   270,   271,
     272,   273,   274,   275,   276,  1096,  1097,     0,  1098,     0,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,     0,     0,   291,   292,   293,   294,     0,   295,     0,
       0,   296,   297,   298,   299,   300,   301,   302,  1099,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
    1100,   326,  1101,   328,   329,   330,   331,   332,  1102,   333,
     334,   335,   336,  1103,   810,   338,  1104,   340,   341,   342,
       0,   343,   344,     0,     0,  1105,   346,   347,     0,     0,
     348,   349,   350,   351,   352,   353,   354,   812,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
       0,     0,     0,     0,   368,   369,   813,   371,   372,   373,
     374,     0,   375,   376,   377,     0,   378,   379,   380,   381,
     382,   383,     0,   384,   385,   386,   387,   388,  1106,   390,
     391,   392,   393,     0,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,     0,   407,   408,
     409,   410,   411,   412,  1107,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,     0,     0,
     427,   428,   429,   430,   431,   432,   433,   434,   435,     0,
     436,   437,   438,  1108,   440,     0,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     816,     0,     0,   456,   457,     0,   458,   459,   460,     0,
     461,   462,   463,   464,   465,     0,   466,  1109,  1110,     0,
       0,   469,   470,   817,   472,   818,  1111,   474,   475,   819,
     477,   478,   479,   480,   481,     0,     0,   482,   483,   484,
       0,   485,   486,   487,   488,     0,   489,   490,   491,   492,
     493,   494,  1112,   496,     0,   497,   498,   499,   500,   501,
     502,   503,   504,   505,     0,     0,   506,     0,     0,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,   519,   520,   521,   522,   523,   524,   525,   526,   527,
    1113,     0,     0,     0,     0,     0,     0,  1114,  1115,  1116,
       0,     0,     0,     0,  1117,     0,  1118,     0,     0,     0,
    1119,     0,     0,  1120,  1121,  1122,  3331,   118,  1073,   836,
    1074,  1075,  1076,  1077,  1078,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   119,   120,   121,   122,
     123,   124,   125,   126,     0,   127,   128,   129,     0,     0,
       0,     0,     0,  1079,     0,     0,   130,   131,   132,     0,
     133,   134,   135,   136,   137,   138,   139,   140,  1080,   142,
    1081,  1082,     0,   145,   146,   147,   148,   149,   150,  1083,
     805,   151,   152,   153,   154,  1084,  1085,   157,     0,   158,
     159,   160,   161,   806,     0,   807,     0,  1086,   165,   166,
     167,   168,   169,   170,   171,   172,   173,     0,   174,   175,
     176,   177,   178,   179,     0,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,  1087,   192,   193,  1088,
     195,  1089,   196,     0,   197,   198,   199,   200,   201,   202,
      14,    15,   203,   204,   205,   206,     0,     0,   207,   208,
    1090,   210,   211,   212,     0,   213,   214,   215,     0,   216,
     217,   218,     0,   219,   220,   221,   222,  1091,   224,   225,
     226,   227,   228,   229,   808,  1092,   231,     0,     0,   232,
     233,  1093,   235,     0,   236,     0,   237,   238,    23,   239,
     240,   241,   242,   243,   244,     0,     0,   245,     0,  1094,
    1095,   248,   249,     0,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,     0,   262,   263,   264,
     265,   266,   267,   268,     0,   269,   270,   271,   272,   273,
     274,   275,   276,  1096,  1097,     0,  1098,     0,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,     0,
       0,   291,   292,   293,   294,     0,   295,     0,     0,   296,
     297,   298,   299,   300,   301,   302,  1099,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,  1100,   326,
    1101,   328,   329,   330,   331,   332,  1102,   333,   334,   335,
     336,  1103,   810,   338,  1104,   340,   341,   342,     0,   343,
     344,     0,     0,  1105,   346,   347,     0,     0,   348,   349,
     350,   351,   352,   353,   354,   812,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,    26,    27,
      28,     0,   368,   369,   813,   371,   372,   373,   374,     0,
     375,   376,   377,     0,   378,   379,   380,   381,   382,   383,
       0,   384,   385,   386,   387,   388,  1106,   390,   391,   392,
     393,     0,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,     0,   407,   408,   409,   410,
     411,   412,  1107,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,    33,     0,   427,   428,
     429,   430,   431,   432,   433,   434,   435,    35,   436,   437,
     438,  1108,   440,     0,   441,   442,   443,   444,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   816,    37,
       0,   456,   457,    38,   458,   459,   460,     0,   461,   462,
     463,   464,   465,     0,   466,  1109,  1110,     0,     0,   469,
     470,   817,   472,   818,  1111,   474,   475,   819,   477,   478,
     479,   480,   481,     0,     0,   482,   483,   484,    40,   485,
     486,   487,   488,     0,   489,   490,   491,   492,   493,   820,
    1112,   496,     0,   497,   498,   499,   500,   501,   502,   503,
     504,   505,     0,     0,   506,     0,    44,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   518,   519,
     520,   521,   522,   523,   524,   525,   526,   527,  1113,     0,
      45,     0,     0,     0,     0,  1114,  1115,  1116,     0,     0,
       0,     0,  1117,     0,  1118,  3306,     0,     0,  1119,     0,
       0,  1120,  1121,  1122,   118,  1073,   836,  1074,  1075,  1076,
    1077,  1078,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   119,   120,   121,   122,   123,   124,   125,
     126,     0,   127,   128,   129,     0,     0,     0,     0,     0,
    1079,     0,     0,   130,   131,   132,     0,   133,   134,   135,
     136,   137,   138,   139,   140,  1080,   142,  1081,  1082,     0,
     145,   146,   147,   148,   149,   150,  1083,   805,   151,   152,
     153,   154,  1084,  1085,   157,     0,   158,   159,   160,   161,
     806,     0,   807,     0,  1086,   165,   166,   167,   168,   169,
     170,   171,   172,   173,     0,   174,   175,   176,   177,   178,
     179,     0,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,  1087,   192,   193,  1088,   195,  1089,   196,
       0,   197,   198,   199,   200,   201,   202,    14,    15,   203,
     204,   205,   206,     0,     0,   207,   208,  1090,   210,   211,
     212,     0,   213,   214,   215,     0,   216,   217,   218,     0,
     219,   220,   221,   222,  1091,   224,   225,   226,   227,   228,
     229,   808,  1092,   231,     0,     0,   232,   233,  1093,   235,
       0,   236,     0,   237,   238,    23,   239,   240,   241,   242,
     243,   244,     0,     0,   245,     0,  1094,  1095,   248,   249,
       0,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,     0,   262,   263,   264,   265,   266,   267,
     268,     0,   269,   270,   271,   272,   273,   274,   275,   276,
    1096,  1097,     0,  1098,     0,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,     0,     0,   291,   292,
     293,   294,     0,   295,     0,     0,   296,   297,   298,   299,
     300,   301,   302,  1099,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,  1100,   326,  1101,   328,   329,
     330,   331,   332,  1102,   333,   334,   335,   336,  1103,   810,
     338,  1104,   340,   341,   342,     0,   343,   344,     0,     0,
    1105,   346,   347,     0,     0,   348,   349,   350,   351,   352,
     353,   354,   812,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,    26,    27,    28,     0,   368,
     369,   813,   371,   372,   373,   374,     0,   375,   376,   377,
       0,   378,   379,   380,   381,   382,   383,     0,   384,   385,
     386,   387,   388,  1106,   390,   391,   392,   393,     0,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,     0,   407,   408,   409,   410,   411,   412,  1107,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,    33,     0,   427,   428,   429,   430,   431,
     432,   433,   434,   435,    35,   436,   437,   438,  1108,   440,
       0,   441,   442,   443,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   453,   454,   816,    37,     0,   456,   457,
      38,   458,   459,   460,     0,   461,   462,   463,   464,   465,
       0,   466,  1109,  1110,     0,     0,   469,   470,   817,   472,
     818,  1111,   474,   475,   819,   477,   478,   479,   480,   481,
       0,     0,   482,   483,   484,    40,   485,   486,   487,   488,
       0,   489,   490,   491,   492,   493,   820,  1112,   496,     0,
     497,   498,   499,   500,   501,   502,   503,   504,   505,     0,
       0,   506,     0,    44,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,   518,   519,   520,   521,   522,
     523,   524,   525,   526,   527,  1113,     0,    45,     0,     0,
       0,     0,  1114,  1115,  1116,     0,     0,     0,     0,  1117,
       0,  1118,     0,     0,     0,  1119,     0,     0,  1120,  1121,
    1122,   118,  1073,   836,  1074,  1075,  1076,  1077,  1078,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     119,   120,   121,   122,   123,   124,   125,   126,     0,   127,
     128,   129,     0,     0,     0,     0,     0,  1079,     0,     0,
     130,   131,   132,     0,   133,   134,   135,   136,   137,   138,
     139,   140,  1080,   142,  1081,  1082,     0,   145,   146,   147,
     148,   149,   150,  1083,   805,   151,   152,   153,   154,  1084,
    1085,   157,     0,   158,   159,   160,   161,   806,     0,   807,
       0,  1086,   165,   166,   167,   168,   169,   170,   171,   172,
     173,     0,   174,   175,   176,   177,   178,   179,     0,   180,
     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
    1087,   192,   193,  1088,   195,  1089,   196,     0,   197,   198,
     199,   200,   201,   202,     0,     0,   203,   204,   205,   206,
       0,     0,   207,   208,  1090,   210,   211,   212,     0,   213,
     214,   215,     0,   216,   217,   218,     0,   219,   220,   221,
     222,  1091,   224,   225,   226,   227,   228,   229,   808,  1092,
     231,     0,     0,   232,   233,  1093,   235,     0,   236,     0,
     237,   238,    23,   239,   240,   241,   242,   243,   244,     0,
       0,   245,     0,  1094,  1095,   248,   249,     0,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
       0,   262,   263,   264,   265,   266,   267,   268,     0,   269,
     270,   271,   272,   273,   274,   275,   276,  1096,  1097,     0,
    1098,     0,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,     0,     0,   291,   292,   293,   294,     0,
     295,     0,     0,   296,   297,   298,   299,   300,   301,   302,
    1099,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,  1100,   326,  1101,   328,   329,   330,   331,   332,
    1102,   333,   334,   335,   336,  1103,   810,   338,  1104,   340,
     341,   342,     0,   343,   344,     0,     0,  1105,   346,   347,
       0,     0,   348,   349,   350,   351,   352,   353,   354,   812,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,    26,    27,    28,     0,   368,   369,   813,   371,
     372,   373,   374,     0,   375,   376,   377,     0,   378,   379,
     380,   381,   382,   383,     0,   384,   385,   386,   387,   388,
    1106,   390,   391,   392,   393,     0,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,     0,
     407,   408,   409,   410,   411,   412,  1107,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
      33,     0,   427,   428,   429,   430,   431,   432,   433,   434,
     435,     0,   436,   437,   438,  1108,   440,     0,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
     453,   454,   816,     0,     0,   456,   457,    38,   458,   459,
     460,     0,   461,   462,   463,   464,   465,     0,   466,  1109,
    1110,     0,     0,   469,   470,   817,   472,   818,  1111,   474,
     475,   819,   477,   478,   479,   480,   481,     0,     0,   482,
     483,   484,    40,   485,   486,   487,   488,     0,   489,   490,
     491,   492,   493,   820,  1112,   496,     0,   497,   498,   499,
     500,   501,   502,   503,   504,   505,     0,     0,   506,     0,
      44,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   518,   519,   520,   521,   522,   523,   524,   525,
     526,   527,  1113,     0,    45,     0,     0,     0,     0,  1114,
    1115,  1116,     0,     0,     0,     0,  1117,     0,  1118,     0,
       0,     0,  1119,     0,     0,  1120,  1121,  1122,  1280,  1073,
     836,  1074,  1075,  1076,  1077,  1078,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   119,   120,   121,
     122,   123,   124,   125,   126,  1281,   127,   128,   129,     0,
       0,     0,  1282,     0,  1079,     0,     0,  1283,   131,   132,
       0,   133,   134,   135,  1284,   137,   138,   139,   140,  1080,
    1285,  1081,  1082,     0,   145,   146,   147,   148,   149,   150,
    1083,   805,   151,   152,   153,   154,  1084,  1085,   157,     0,
     158,   159,   160,   161,   806,     0,  1286,     0,  1287,   165,
     166,   167,   168,   169,  1288,   171,   172,   173,     0,   174,
     175,   176,   177,   178,   179,     0,  1289,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,  1087,   192,   193,
    1088,   195,  1089,   196,     0,   197,   198,   199,   200,   201,
     202,     0,     0,   203,   204,   205,   206,  1290,     0,   207,
     208,  1090,   210,   211,   212,     0,   213,   214,   215,     0,
     216,   217,   218,     0,   219,   220,   221,   222,  1091,   224,
     225,   226,   227,   228,   229,   808,  1092,   231,     0,     0,
     232,   233,  1093,   235,     0,   236,     0,   237,  1291,     0,
    1292,   240,   241,  1293,  1294,   244,     0,     0,   245,     0,
    1094,  1095,   248,   249,     0,   250,   251,   252,   253,   254,
     255,   256,  1295,   258,   259,   260,   261,     0,   262,   263,
     264,   265,   266,   267,   268,     0,   269,  1296,   271,   272,
     273,   274,   275,   276,  1096,  1097,     0,  1098,     0,   280,
    1297,  1298,   283,  1299,   285,   286,   287,   288,   289,   290,
       0,     0,   291,  1300,   293,  1301,     0,   295,     0,     0,
     296,   297,   298,   299,   300,   301,   302,  1302,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,  1100,
    1303,  1101,   328,   329,   330,   331,   332,  1102,   333,   334,
    1304,   336,  1103,   810,   338,  1104,   340,   341,   342,     0,
     343,   344,     0,     0,  1105,   346,   347,     0,     0,   348,
     349,   350,  1305,   352,   353,  1306,   812,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,     0,
       0,     0,     0,   368,   369,   813,  1307,   372,   373,   374,
       0,   375,   376,   377,     0,   378,   379,   380,   381,   382,
     383,     0,   384,   385,   386,   387,   388,  1106,   390,   391,
     392,   393,     0,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,     0,   407,   408,  1308,
     410,   411,   412,  1107,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,     0,  1309,   427,
     428,   429,   430,   431,   432,   433,   434,   435,     0,  1310,
     437,   438,  1108,   440,     0,   441,   442,   443,   444,   445,
     446,   447,   448,   449,   450,   451,   452,  1311,   454,   816,
       0,     0,   456,   457,     0,   458,  1312,   460,     0,   461,
     462,   463,   464,   465,     0,   466,  1109,  1110,     0,     0,
     469,   470,   817,   472,   818,  1111,   474,   475,  1313,   477,
     478,   479,   480,   481,     0,     0,   482,   483,   484,     0,
     485,   486,   487,   488,     0,   489,   490,   491,   492,   493,
     494,  1112,   496,  1314,   497,  1315,   499,   500,   501,   502,
     503,   504,   505,     0,     0,   506,     0,     0,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,   518,
     519,   520,   521,   522,   523,   524,   525,   526,   527,  1113,
       0,     0,     0,     0,     0,     0,  1114,  1115,  1116,     0,
       0,     0,     0,  1117,     0,  1118,  1316,     0,     0,  1119,
       0,     0,  1120,  1121,  1122,   118,  1073,   836,  1074,  1075,
       0,  1077,  1078,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   119,   120,   121,   122,   123,   124,
     125,   126,     0,   127,   128,   129,     0,     0,     0,     0,
       0,  1079,     0,     0,   130,   131,   132,     0,   133,   134,
     135,   136,   137,   138,   139,   140,  1080,   142,  1081,  1082,
       0,   145,   146,   147,   148,   149,   150,  1083,   805,   151,
     152,   153,   154,  1084,  1085,   157,     0,   158,   159,   160,
     161,   806,     0,   807,     0,   164,   165,   166,   167,   168,
     169,   170,   171,   172,   173,     0,   174,   175,   176,   177,
     178,   179,     0,   180,   181,   182,   183,   184,   185,   186,
     187,   188,   189,   190,  1087,   192,   193,  1088,   195,     0,
     196,     0,   197,   198,   199,   200,   201,   202,    14,    15,
     203,   204,   205,   206,     0,     0,   207,   208,  1090,   210,
     211,   212,     0,   213,   214,   215,     0,   216,   217,   218,
       0,   219,   220,   221,   222,  1091,   224,   225,   226,   227,
     228,   229,   808,  1092,   231,     0,     0,   232,   233,  1093,
     235,     0,   236,     0,   237,   238,    23,   239,   240,   241,
     242,   243,   244,     0,     0,   245,     0,  1094,  1095,   248,
     249,     0,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,     0,   262,   263,   264,   265,   266,
     267,   268,     0,   269,   270,   271,   272,   273,   274,   275,
     276,  1096,  1097,     0,  1098,     0,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,     0,     0,   291,
     292,   293,   294,     0,   295,     0,     0,   296,   297,   298,
     299,   300,   301,   302,  1099,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,  1100,   326,  1101,   328,
     329,   330,   331,   332,     0,   333,   334,   335,   336,  1103,
     810,   338,  1104,   340,   341,   342,     0,   343,   344,     0,
       0,   345,   346,   347,     0,     0,   348,   349,   350,   351,
     352,   353,   354,   812,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,    26,    27,    28,     0,
     368,   369,   813,   371,   372,   373,   374,     0,   375,   376,
     377,     0,   378,   379,   380,   381,   382,   383,     0,   384,
     385,   386,   387,   388,  1106,   390,   391,   392,   393,     0,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,     0,   407,   408,   409,   410,   411,   412,
    1107,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,    33,     0,   427,   428,   429,   430,
     431,   432,   433,   434,   435,    35,   436,   437,   438,  1108,
     440,     0,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,   816,    37,     0,   456,
     457,    38,   458,   459,   460,     0,   461,   462,   463,   464,
     465,     0,   466,  1109,  1110,     0,     0,   469,   470,   817,
     472,   818,  1111,   474,   475,   819,   477,   478,   479,   480,
     481,     0,     0,   482,   483,   484,    40,   485,   486,   487,
     488,     0,   489,   490,   491,   492,   493,   820,  1112,   496,
       0,   497,   498,   499,   500,   501,   502,   503,   504,   505,
       0,     0,   506,     0,    44,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520,   521,
     522,   523,   524,   525,   526,   527,     0,     0,    45,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1117,     0,  1118,     0,     0,     0,  1119,     0,     0,  1120,
    1121,  1122,   118,  1073,   836,  1074,  1075,  1076,  1077,  1078,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   119,   120,   121,   122,   123,   124,   125,   126,     0,
     127,   128,   129,     0,     0,     0,     0,     0,  1079,     0,
       0,   130,   131,   132,     0,   133,   134,   135,   136,   137,
     138,   139,   140,  1080,   142,  1081,  1082,  1465,   145,   146,
     147,   148,   149,   150,  1083,   805,   151,   152,   153,   154,
    1084,  1085,   157,     0,   158,   159,   160,   161,   806,     0,
     807,     0,  1086,   165,   166,   167,   168,   169,   170,   171,
     172,   173,     0,   174,   175,   176,   177,   178,   179,     0,
     180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
     190,  1087,   192,   193,  1088,   195,  1089,   196,     0,   197,
     198,   199,   200,   201,   202,     0,     0,   203,   204,   205,
     206,     0,     0,   207,   208,  1090,   210,   211,   212,     0,
     213,   214,   215,     0,   216,   217,   218,     0,   219,   220,
     221,   222,  1091,   224,   225,   226,   227,   228,   229,   808,
    1092,   231,     0,     0,   232,   233,  1093,   235,     0,   236,
       0,   237,   238,  1466,   239,   240,   241,   242,   243,   244,
       0,     0,   245,     0,  1094,  1095,   248,   249,     0,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,     0,   262,   263,   264,   265,   266,   267,   268,     0,
     269,   270,   271,   272,   273,   274,   275,   276,  1096,  1097,
       0,  1098,     0,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,     0,  1467,   291,   292,   293,   294,
       0,   295,     0,     0,   296,   297,   298,   299,   300,   301,
     302,  1099,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,  1100,   326,  1101,   328,   329,   330,   331,
     332,  1102,   333,   334,   335,   336,  1103,   810,   338,  1104,
     340,   341,   342,     0,   343,   344,     0,     0,  1105,   346,
     347,     0,     0,   348,   349,   350,   351,   352,   353,   354,
     812,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,     0,     0,     0,     0,   368,   369,   813,
     371,   372,   373,   374,     0,   375,   376,   377,     0,   378,
     379,   380,   381,   382,   383,     0,   384,   385,   386,   387,
     388,  1106,   390,   391,   392,   393,     0,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
       0,   407,   408,   409,   410,   411,   412,  1107,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,     0,     0,   427,   428,   429,   430,   431,   432,   433,
     434,   435,     0,   436,   437,   438,  1108,   440,     0,   441,
     442,   443,   444,   445,   446,   447,   448,   449,   450,   451,
     452,   453,   454,   816,     0,     0,   456,   457,     0,   458,
     459,   460,     0,   461,   462,   463,   464,   465,     0,   466,
    1109,  1110,     0,  1468,   469,   470,   817,   472,   818,  1111,
     474,   475,   819,   477,   478,   479,   480,   481,     0,     0,
     482,   483,   484,     0,   485,   486,   487,   488,     0,   489,
     490,   491,   492,   493,   494,  1112,   496,     0,   497,   498,
     499,   500,   501,   502,   503,   504,   505,     0,     0,   506,
       0,     0,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,  1113,     0,     0,     0,     0,     0,     0,
    1114,  1115,  1116,     0,     0,     0,     0,  1117,     0,  1118,
       0,     0,     0,  1119,     0,     0,  1120,  1121,  1122,  1280,
    1073,   836,  1074,  1075,  1076,  1077,  1078,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   119,   120,
     121,   122,   123,   124,   125,   126,     0,   127,   128,   129,
       0,     0,     0,  1282,     0,  1079,     0,     0,  1283,   131,
     132,     0,   133,   134,   135,  1284,   137,   138,   139,   140,
    1080,  1285,  1081,  1082,     0,   145,   146,   147,   148,   149,
     150,  1083,   805,   151,   152,   153,   154,  1084,  1085,   157,
       0,   158,   159,   160,   161,   806,     0,  1286,     0,  1287,
     165,   166,   167,   168,   169,  1288,   171,   172,   173,     0,
     174,   175,   176,   177,   178,   179,     0,  1289,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,  1087,   192,
     193,  1088,   195,  1089,   196,     0,   197,   198,   199,   200,
     201,   202,     0,     0,   203,   204,   205,   206,     0,     0,
     207,   208,  1090,   210,   211,   212,     0,   213,   214,   215,
       0,   216,   217,   218,     0,   219,   220,   221,   222,  1091,
     224,   225,   226,   227,   228,   229,   808,  1092,   231,     0,
       0,   232,   233,  1093,   235,     0,   236,     0,   237,  1291,
       0,  1292,   240,   241,  1293,  1294,   244,     0,     0,   245,
       0,  1094,  1095,   248,   249,     0,   250,   251,   252,   253,
     254,   255,   256,  1295,   258,   259,   260,   261,     0,   262,
     263,   264,   265,   266,   267,   268,     0,   269,  1296,   271,
     272,   273,   274,   275,   276,  1096,  1097,     0,  1098,     0,
     280,  1297,  1298,   283,  1299,   285,   286,   287,   288,   289,
     290,     0,     0,   291,  1300,   293,  1301,     0,   295,     0,
       0,   296,   297,   298,   299,   300,   301,   302,  1302,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
    1100,  1303,  1101,   328,   329,   330,   331,   332,  1102,   333,
     334,  1304,   336,  1103,   810,   338,  1104,   340,   341,   342,
       0,   343,   344,     0,     0,  1105,   346,   347,     0,     0,
     348,   349,   350,  1305,   352,   353,  1306,   812,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
       0,     0,     0,     0,   368,   369,   813,  1307,   372,   373,
     374,     0,   375,   376,   377,     0,   378,   379,   380,   381,
     382,   383,     0,   384,   385,   386,   387,   388,  1106,   390,
     391,   392,   393,     0,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,     0,   407,   408,
    1308,   410,   411,   412,  1107,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,     0,  1309,
     427,   428,   429,   430,   431,   432,   433,   434,   435,     0,
    1310,   437,   438,  1108,   440,     0,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,  1311,   454,
     816,     0,     0,   456,   457,     0,   458,  1312,   460,     0,
     461,   462,   463,   464,   465,     0,   466,  1109,  1110,     0,
       0,   469,   470,   817,   472,   818,  1111,   474,   475,  1313,
     477,   478,   479,   480,   481,     0,     0,   482,   483,   484,
       0,   485,   486,   487,   488,     0,   489,   490,   491,   492,
     493,   494,  1112,   496,  2337,   497,  1315,   499,   500,   501,
     502,   503,   504,   505,     0,     0,   506,     0,     0,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,   519,   520,   521,   522,   523,   524,   525,   526,   527,
    1113,     0,     0,     0,     0,     0,     0,  1114,  1115,  1116,
       0,     0,     0,     0,  1117,     0,  1118,     0,     0,     0,
    1119,     0,     0,  1120,  1121,  1122,  1280,  1073,   836,  1074,
    1075,  1076,  1077,  1078,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   119,   120,   121,   122,   123,
     124,   125,   126,     0,   127,   128,   129,     0,     0,     0,
    1282,     0,  1079,     0,     0,  1283,   131,   132,     0,   133,
     134,   135,  1284,   137,   138,   139,   140,  1080,  1285,  1081,
    1082,     0,   145,   146,   147,   148,   149,   150,  1083,   805,
     151,   152,   153,   154,  1084,  1085,   157,     0,   158,   159,
     160,   161,   806,     0,  1286,     0,  1287,   165,   166,   167,
     168,   169,  1288,   171,   172,   173,     0,   174,   175,   176,
     177,   178,   179,     0,  1289,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,  1087,   192,   193,  1088,   195,
    1089,   196,     0,   197,   198,   199,   200,   201,   202,     0,
       0,   203,   204,   205,   206,     0,     0,   207,   208,  1090,
     210,   211,   212,     0,   213,   214,   215,     0,   216,   217,
     218,     0,   219,   220,   221,   222,  1091,   224,   225,   226,
     227,   228,   229,   808,  1092,   231,     0,     0,   232,   233,
    1093,   235,     0,   236,     0,   237,  1291,     0,  1292,   240,
     241,  1293,  1294,   244,     0,     0,   245,     0,  1094,  1095,
     248,   249,     0,   250,   251,   252,   253,   254,   255,   256,
    1295,   258,   259,   260,   261,     0,   262,   263,   264,   265,
     266,   267,   268,     0,   269,  1296,   271,   272,   273,   274,
     275,   276,  1096,  1097,     0,  1098,     0,   280,  1297,  1298,
     283,  1299,   285,   286,   287,   288,   289,   290,     0,     0,
     291,  1300,   293,  1301,     0,   295,     0,     0,   296,   297,
     298,   299,   300,   301,   302,  1302,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,  1100,  1303,  1101,
     328,   329,   330,   331,   332,  1102,   333,   334,  1304,   336,
    1103,   810,   338,  1104,   340,   341,   342,     0,   343,   344,
       0,     0,  1105,   346,   347,     0,     0,   348,   349,   350,
    1305,   352,   353,  1306,   812,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,     0,     0,     0,
       0,   368,   369,   813,  1307,   372,   373,   374,     0,   375,
     376,   377,     0,   378,   379,   380,   381,   382,   383,     0,
     384,   385,   386,   387,   388,  1106,   390,   391,   392,   393,
       0,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,     0,   407,   408,  1308,   410,   411,
     412,  1107,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,     0,  1309,   427,   428,   429,
     430,   431,   432,   433,   434,   435,     0,  1310,   437,   438,
    1108,   440,     0,   441,   442,   443,   444,   445,   446,   447,
     448,   449,   450,   451,   452,  1311,   454,   816,     0,     0,
     456,   457,     0,   458,  1312,   460,     0,   461,   462,   463,
     464,   465,     0,   466,  1109,  1110,     0,     0,   469,   470,
     817,   472,   818,  1111,   474,   475,  1313,   477,   478,   479,
     480,   481,     0,     0,   482,   483,   484,     0,   485,   486,
     487,   488,     0,   489,   490,   491,   492,   493,   494,  1112,
     496,     0,   497,  1315,   499,   500,   501,   502,   503,   504,
     505,     0,     0,   506,     0,     0,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,   517,   518,   519,   520,
     521,   522,   523,   524,   525,   526,   527,  1113,     0,     0,
       0,     0,     0,     0,  1114,  1115,  1116,     0,     0,     0,
       0,  1117,     0,  1118,  2392,     0,     0,  1119,     0,     0,
    1120,  1121,  1122,   118,  1073,   836,  1074,  1075,  1076,  1077,
    1078,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   119,   120,   121,   122,   123,   124,   125,   126,
   -1211,   127,   128,   129,     0,     0,     0,     0, -1211,  1079,
       0,     0,   130,   131,   132,     0,   133,   134,   135,   136,
     137,   138,   139,   140,  1080,   142,  1081,  1082,     0,   145,
     146,   147,   148,   149,   150,  1083,   805,   151,   152,   153,
     154,  1084,  1085,   157,     0,   158,   159,   160,   161,   806,
       0,   807,     0,  1086,   165,   166,   167,   168,   169,   170,
     171,   172,   173,     0,   174,   175,   176,   177,   178,   179,
       0,   180,   181,   182,   183,   184,   185,   186,   187,   188,
     189,   190,  1087,   192,   193,  1088,   195,  1089,   196,     0,
     197,   198,   199,   200,   201,   202,     0,     0,   203,   204,
     205,   206,     0,     0,   207,   208,  1090,   210,   211,   212,
       0,   213,   214,   215,     0,   216,   217,   218,     0,   219,
     220,   221,   222,  1091,   224,   225,   226,   227,   228,   229,
     808,  1092,   231,     0,     0,   232,   233,  1093,   235,     0,
     236,     0,   237,   238,     0,   239,   240,   241,   242,   243,
     244,     0,     0,   245,     0,  1094,  1095,   248,   249,     0,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,     0,   262,   263,   264,   265,   266,   267,   268,
       0,   269,   270,   271,   272,   273,   274,   275,   276,  1096,
    1097,     0,  1098,     0,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,     0,     0,   291,   292,   293,
     294,     0,   295,     0,     0,   296,   297,   298,   299,   300,
     301,   302,  1099,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,  1100,   326,  1101,   328,   329,   330,
     331,   332,  1102,   333,   334,   335,   336,  1103,   810,   338,
    1104,   340,   341,   342,     0,   343,   344,     0,     0,  1105,
     346,   347,     0,     0,   348,   349,   350,   351,   352,   353,
     354,   812,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,     0,     0,     0,     0,   368,   369,
     813,   371,   372,   373,   374,     0,   375,   376,   377,     0,
     378,   379,   380,   381,   382,   383,     0,   384,   385,   386,
     387,   388,  1106,   390,   391,   392,   393,     0,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,     0,   407,   408,   409,   410,   411,   412,  1107,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,     0,     0,   427,   428,   429,   430,   431,   432,
     433,   434,   435,     0,   436,   437,   438,  1108,   440, -1211,
     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
     451,   452,   453,   454,   816,     0,     0,   456,   457,     0,
     458,   459,   460,     0,   461,   462,   463,   464,   465,     0,
     466,  1109,  1110,     0,     0,   469,   470,   817,   472,   818,
    1111,   474,   475,   819,   477,   478,   479,   480,   481,     0,
       0,   482,   483,   484,     0,   485,   486,   487,   488,     0,
     489,   490,   491,   492,   493,   494,  1112,   496,     0,   497,
     498,   499,   500,   501,   502,   503,   504,   505,     0,     0,
     506,     0,     0,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   518,   519,   520,   521,   522,   523,
     524,   525,   526,   527,  1113,     0,     0,     0,     0,     0,
       0,  1114,  1115,  1116,     0,     0,     0,     0,  1117,     0,
    1118,     0,     0,     0,  1119,     0,     0,  1120,  1121,  1122,
    1280,  1073,   836,  1074,  1075,  1076,  1077,  1078,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   119,
     120,   121,   122,   123,   124,   125,   126,     0,   127,   128,
     129,     0,     0,     0,  1282,     0,  1079,     0,     0,  1283,
     131,   132,     0,   133,   134,   135,  1284,   137,   138,   139,
     140,  1080,  1285,  1081,  1082,     0,   145,   146,   147,   148,
     149,   150,  1083,   805,   151,   152,   153,   154,  1084,  1085,
     157,     0,   158,   159,   160,   161,   806,     0,  1286,     0,
    1287,   165,   166,   167,   168,   169,  1288,   171,   172,   173,
       0,   174,   175,   176,   177,   178,   179,     0,  1289,   181,
     182,   183,   184,   185,   186,   187,   188,   189,   190,  1087,
     192,   193,  1088,   195,  1089,   196,     0,   197,   198,   199,
     200,   201,   202,     0,     0,   203,   204,   205,   206,     0,
       0,   207,   208,  1090,   210,   211,   212,     0,   213,   214,
     215,     0,   216,   217,   218,     0,   219,   220,   221,   222,
    1091,   224,   225,   226,   227,   228,   229,   808,  1092,   231,
       0,     0,   232,   233,  1093,   235,     0,   236,     0,   237,
    1291,     0,  1292,   240,   241,  1293,  1294,   244,     0,     0,
     245,     0,  1094,  1095,   248,   249,     0,   250,   251,   252,
     253,   254,   255,   256,  1295,   258,   259,   260,   261,     0,
     262,   263,   264,   265,   266,   267,   268,     0,   269,  1296,
     271,   272,   273,   274,   275,   276,  1096,  1097,     0,  1098,
       0,   280,  1297,  1298,   283,  1299,   285,   286,   287,   288,
     289,   290,     0,     0,   291,  1300,   293,  1301,     0,   295,
       0,     0,   296,   297,   298,   299,   300,   301,   302,  1302,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,  1100,  1303,  1101,   328,   329,   330,   331,   332,  1102,
     333,   334,  1304,   336,  1103,   810,   338,  1104,   340,   341,
     342,     0,   343,   344,     0,     0,  1105,   346,   347,     0,
       0,   348,   349,   350,  1305,   352,   353,  1306,   812,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,     0,     0,     0,     0,   368,   369,   813,  1307,   372,
     373,   374,     0,   375,   376,   377,     0,   378,   379,   380,
     381,   382,   383,     0,   384,   385,   386,   387,   388,  1106,
     390,   391,   392,   393,     0,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,     0,   407,
     408,  1308,   410,   411,   412,  1107,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,     0,
    1309,   427,   428,   429,   430,   431,   432,   433,   434,   435,
       0,  1310,   437,   438,  1108,   440,     0,   441,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,  1311,
     454,   816,     0,     0,   456,   457,     0,   458,  1312,   460,
       0,   461,   462,   463,   464,   465,     0,   466,  1109,  1110,
       0,     0,   469,   470,   817,   472,   818,  1111,   474,   475,
    1313,   477,   478,   479,   480,   481,     0,     0,   482,   483,
     484,     0,   485,   486,   487,   488,     0,   489,   490,   491,
     492,   493,   494,  1112,   496,     0,   497,  1315,   499,   500,
     501,   502,   503,   504,   505,     0,     0,   506,     0,     0,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   518,   519,   520,   521,   522,   523,   524,   525,   526,
     527,  1113,     0,     0,     0,     0,     0,     0,  1114,  1115,
    1116,     0,     0,     0,     0,  1117,     0,  1118,  3165,     0,
       0,  1119,     0,     0,  1120,  1121,  1122,  1280,  1073,   836,
    1074,  1075,  1076,  1077,  1078,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   119,   120,   121,   122,
     123,   124,   125,   126,     0,   127,   128,   129,     0,     0,
       0,  1282,     0,  1079,     0,     0,  1283,   131,   132,     0,
     133,   134,   135,  1284,   137,   138,   139,   140,  1080,  1285,
    1081,  1082,     0,   145,   146,   147,   148,   149,   150,  1083,
     805,   151,   152,   153,   154,  1084,  1085,   157,     0,   158,
     159,   160,   161,   806,     0,  1286,     0,  1287,   165,   166,
     167,   168,   169,  1288,   171,   172,   173,     0,   174,   175,
     176,   177,   178,   179,     0,  1289,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,  1087,   192,   193,  1088,
     195,  1089,   196,     0,   197,   198,   199,   200,   201,   202,
       0,     0,   203,   204,   205,   206,     0,     0,   207,   208,
    1090,   210,   211,   212,     0,   213,   214,   215,     0,   216,
     217,   218,     0,   219,   220,   221,   222,  1091,   224,   225,
     226,   227,   228,   229,   808,  1092,   231,     0,     0,   232,
     233,  1093,   235,     0,   236,     0,   237,  1291,     0,  1292,
     240,   241,  1293,  1294,   244,     0,     0,   245,     0,  1094,
    1095,   248,   249,     0,   250,   251,   252,   253,   254,   255,
     256,  1295,   258,   259,   260,   261,     0,   262,   263,   264,
     265,   266,   267,   268,     0,   269,  1296,   271,   272,   273,
     274,   275,   276,  1096,  1097,     0,  1098,     0,   280,  1297,
    1298,   283,  1299,   285,   286,   287,   288,   289,   290,     0,
       0,   291,  1300,   293,  1301,     0,   295,     0,     0,   296,
     297,   298,   299,   300,   301,   302,  1302,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,  1100,  1303,
    1101,   328,   329,   330,   331,   332,  1102,   333,   334,  1304,
     336,  1103,   810,   338,  1104,   340,   341,   342,     0,   343,
     344,     0,     0,  1105,   346,   347,     0,     0,   348,   349,
     350,  1305,   352,   353,  1306,   812,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,     0,     0,
       0,     0,   368,   369,   813,  1307,   372,   373,   374,     0,
     375,   376,   377,     0,   378,   379,   380,   381,   382,   383,
       0,   384,   385,   386,   387,   388,  1106,   390,   391,   392,
     393,     0,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,     0,   407,   408,  1308,   410,
     411,   412,  1107,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,     0,  1309,   427,   428,
     429,   430,   431,   432,   433,   434,   435,     0,  1310,   437,
     438,  1108,   440,     0,   441,   442,   443,   444,   445,   446,
     447,   448,   449,   450,   451,   452,  1311,   454,   816,     0,
       0,   456,   457,     0,   458,  1312,   460,     0,   461,   462,
     463,   464,   465,     0,   466,  1109,  1110,     0,     0,   469,
     470,   817,   472,   818,  1111,   474,   475,  1313,   477,   478,
     479,   480,   481,     0,     0,   482,   483,   484,     0,   485,
     486,   487,   488,     0,   489,   490,   491,   492,   493,   494,
    1112,   496,     0,   497,  1315,   499,   500,   501,   502,   503,
     504,   505,     0,     0,   506,     0,     0,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   518,   519,
     520,   521,   522,   523,   524,   525,   526,   527,  1113,     0,
       0,     0,     0,     0,     0,  1114,  1115,  1116,     0,     0,
       0,     0,  1117,     0,  1118,     0,     0,     0,  1119,     0,
       0,  1120,  1121,  1122,   118,  1073,   836,  1074,  1075,  1076,
    1077,  1078,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   119,   120,   121,   122,   123,   124,   125,
     126,  1732,   127,   128,   129,     0,     0,     0,     0,     0,
    1079,     0,     0,   130,   131,   132,     0,   133,   134,   135,
     136,   137,   138,   139,   140,  1080,   142,  1081,  1082,     0,
     145,   146,   147,   148,   149,   150,  1083,   805,   151,   152,
     153,   154,  1084,  1085,   157,     0,   158,   159,   160,   161,
     806,     0,   807,     0,  1086,   165,   166,   167,   168,   169,
     170,   171,   172,   173,     0,   174,   175,   176,   177,   178,
     179,     0,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,  1087,   192,   193,  1088,   195,  1089,   196,
       0,   197,   198,   199,   200,   201,   202,     0,     0,   203,
     204,   205,   206,     0,     0,   207,   208,  1090,   210,   211,
     212,     0,   213,   214,   215,     0,   216,   217,   218,     0,
     219,   220,   221,   222,  1091,   224,   225,   226,   227,   228,
     229,   808,  1092,   231,     0,     0,   232,   233,  1093,   235,
       0,   236,     0,   237,   238,     0,   239,   240,   241,   242,
     243,   244,     0,     0,   245,     0,  1094,  1095,   248,   249,
       0,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,     0,   262,   263,   264,   265,   266,   267,
     268,     0,   269,   270,   271,   272,   273,   274,   275,   276,
    1096,  1097,     0,  1098,     0,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,     0,     0,   291,   292,
     293,   294,     0,   295,     0,     0,   296,   297,   298,   299,
     300,   301,   302,  1099,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,  1100,   326,  1101,   328,   329,
     330,   331,   332,  1102,   333,   334,   335,   336,  1103,   810,
     338,  1104,   340,   341,   342,     0,   343,   344,     0,     0,
    1105,   346,   347,     0,     0,   348,   349,   350,   351,   352,
     353,   354,   812,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,     0,     0,     0,     0,   368,
     369,   813,   371,   372,   373,   374,     0,   375,   376,   377,
       0,   378,   379,   380,   381,   382,   383,     0,   384,   385,
     386,   387,   388,  1106,   390,   391,   392,   393,     0,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,     0,   407,   408,   409,   410,   411,   412,  1107,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,     0,     0,   427,   428,   429,   430,   431,
     432,   433,   434,   435,     0,   436,   437,   438,  1108,   440,
       0,   441,   442,   443,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   453,   454,   816,     0,     0,   456,   457,
       0,   458,   459,   460,     0,   461,   462,   463,   464,   465,
       0,   466,  1109,  1110,     0,     0,   469,   470,   817,   472,
     818,  1111,   474,   475,   819,   477,   478,   479,   480,   481,
       0,     0,   482,   483,   484,     0,   485,   486,   487,   488,
       0,   489,   490,   491,   492,   493,   494,  1112,   496,     0,
     497,   498,   499,   500,   501,   502,   503,   504,   505,     0,
       0,   506,     0,     0,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,   518,   519,   520,   521,   522,
     523,   524,   525,   526,   527,  1113,     0,     0,     0,     0,
       0,     0,  1114,  1115,  1116,     0,     0,     0,     0,  1117,
       0,  1118,     0,     0,     0,  1119,     0,     0,  1120,  1121,
    1122,   118,  1747,   836,  1074,  1075,  1076,  1748,  1078,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     119,   120,   121,   122,   123,   124,   125,   126,  1749,   127,
     128,   129,     0,     0,     0,     0,     0,  1079,     0,     0,
     130,   131,   132,     0,   133,   134,   135,   136,   137,   138,
     139,   140,  1080,   142,  1081,  1082,     0,   145,   146,   147,
     148,   149,   150,  1083,   805,   151,   152,   153,   154,  1084,
    1085,   157,     0,   158,   159,   160,   161,   806,     0,   807,
       0,  1086,   165,   166,   167,   168,   169,   170,   171,   172,
     173,     0,   174,   175,   176,   177,   178,   179,     0,   180,
     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
    1087,   192,   193,  1088,   195,  1089,   196,     0,   197,   198,
     199,   200,   201,   202,     0,     0,   203,   204,   205,   206,
       0,     0,   207,   208,  1090,   210,   211,   212,     0,   213,
     214,   215,     0,   216,   217,   218,     0,   219,   220,   221,
     222,  1091,   224,   225,   226,   227,   228,   229,   808,  1092,
     231,     0,     0,   232,   233,  1093,   235,     0,   236,     0,
     237,   238,     0,   239,   240,   241,   242,   243,   244,     0,
       0,   245,     0,  1094,  1095,   248,   249,     0,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
       0,   262,   263,   264,   265,   266,   267,   268,     0,   269,
     270,   271,   272,   273,   274,   275,   276,  1096,  1097,     0,
    1098,     0,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,     0,     0,   291,   292,   293,   294,     0,
     295,     0,     0,   296,   297,   298,   299,   300,   301,   302,
    1099,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,  1100,   326,  1101,   328,   329,   330,   331,   332,
    1102,   333,   334,   335,   336,  1103,   810,   338,  1104,   340,
     341,   342,     0,   343,   344,     0,     0,  1105,   346,   347,
       0,     0,   348,   349,   350,   351,   352,   353,   354,   812,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,     0,     0,     0,     0,   368,   369,   813,   371,
     372,   373,   374,     0,   375,   376,   377,     0,   378,   379,
     380,   381,   382,   383,     0,   384,   385,   386,   387,   388,
    1106,   390,   391,   392,   393,     0,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,     0,
     407,   408,   409,   410,   411,   412,  1107,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
       0,     0,   427,   428,   429,   430,   431,   432,   433,   434,
     435,     0,   436,   437,   438,  1108,   440,     0,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
     453,   454,   816,     0,     0,   456,   457,     0,   458,   459,
     460,     0,   461,   462,   463,   464,   465,     0,   466,  1109,
    1110,     0,     0,   469,   470,   817,   472,   818,  1111,   474,
     475,   819,   477,   478,   479,   480,   481,     0,     0,   482,
     483,   484,     0,   485,   486,   487,   488,     0,   489,   490,
     491,   492,   493,   494,  1112,   496,     0,   497,   498,   499,
     500,   501,   502,   503,   504,   505,     0,     0,   506,     0,
       0,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   518,   519,   520,   521,   522,   523,   524,   525,
     526,   527,  1113,     0,     0,     0,     0,     0,     0,  1114,
    1115,  1116,     0,     0,     0,     0,  1117,     0,  1118,     0,
       0,     0,  1119,     0,     0,  1120,  1121,  1122,   118,  1073,
     836,  1074,  1075,  1076,  1077,  1078,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   119,   120,   121,
     122,   123,   124,   125,   126,     0,   127,   128,   129,     0,
       0,     0,     0,     0,  1079,     0,     0,   130,   131,   132,
       0,   133,   134,   135,   136,   137,   138,   139,   140,  1080,
     142,  1081,  1082,     0,   145,   146,   147,   148,   149,   150,
    1083,   805,   151,   152,   153,   154,  1084,  1085,   157,     0,
     158,   159,   160,   161,   806,     0,   807,     0,  1086,   165,
     166,   167,   168,   169,   170,   171,   172,   173,     0,   174,
     175,   176,   177,   178,   179,     0,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,  1087,   192,   193,
    1088,   195,  1089,   196,     0,   197,   198,   199,   200,   201,
     202,     0,     0,   203,   204,   205,   206,     0,     0,   207,
     208,  1090,   210,   211,   212,     0,   213,   214,   215,     0,
     216,   217,   218,     0,   219,   220,   221,   222,  1091,   224,
     225,   226,   227,   228,   229,   808,  1092,   231,     0,     0,
     232,   233,  1093,   235,     0,   236,     0,   237,   238,  1466,
     239,   240,   241,   242,   243,   244,     0,     0,   245,     0,
    1094,  1095,   248,   249,     0,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,     0,   262,   263,
     264,   265,   266,   267,   268,     0,   269,   270,   271,   272,
     273,   274,   275,   276,  1096,  1097,     0,  1098,     0,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
       0,     0,   291,   292,   293,   294,     0,   295,     0,     0,
     296,   297,   298,   299,   300,   301,   302,  1099,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,  1100,
     326,  1101,   328,   329,   330,   331,   332,  1102,   333,   334,
     335,   336,  1103,   810,   338,  1104,   340,   341,   342,     0,
     343,   344,     0,     0,  1105,   346,   347,     0,     0,   348,
     349,   350,   351,   352,   353,   354,   812,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,     0,
       0,     0,     0,   368,   369,   813,   371,   372,   373,   374,
       0,   375,   376,   377,     0,   378,   379,   380,   381,   382,
     383,     0,   384,   385,   386,   387,   388,  1106,   390,   391,
     392,   393,     0,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,     0,   407,   408,   409,
     410,   411,   412,  1107,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,     0,     0,   427,
     428,   429,   430,   431,   432,   433,   434,   435,     0,   436,
     437,   438,  1108,   440,     0,   441,   442,   443,   444,   445,
     446,   447,   448,   449,   450,   451,   452,   453,   454,   816,
       0,     0,   456,   457,     0,   458,   459,   460,     0,   461,
     462,   463,   464,   465,     0,   466,  1109,  1110,     0,     0,
     469,   470,   817,   472,   818,  1111,   474,   475,   819,   477,
     478,   479,   480,   481,     0,     0,   482,   483,   484,     0,
     485,   486,   487,   488,     0,   489,   490,   491,   492,   493,
     494,  1112,   496,     0,   497,   498,   499,   500,   501,   502,
     503,   504,   505,     0,     0,   506,     0,     0,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,   518,
     519,   520,   521,   522,   523,   524,   525,   526,   527,  1113,
       0,     0,     0,     0,     0,     0,  1114,  1115,  1116,     0,
       0,     0,     0,  1117,     0,  1118,     0,     0,     0,  1119,
       0,     0,  1120,  1121,  1122,   118,  1073,   836,  1074,  1075,
    1076,  1077,  1078,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   119,   120,   121,   122,   123,   124,
     125,   126,     0,   127,   128,   129,     0,     0,     0,     0,
       0,  1079,     0,     0,   130,   131,   132,     0,   133,   134,
     135,   136,   137,   138,   139,   140,  1080,   142,  1081,  1082,
       0,   145,   146,   147,   148,   149,   150,  1083,   805,   151,
     152,   153,   154,  1084,  1085,   157,     0,   158,   159,   160,
     161,   806,     0,   807,     0,  1086,   165,   166,   167,   168,
     169,   170,   171,   172,   173,     0,   174,   175,   176,   177,
     178,   179,     0,   180,   181,   182,   183,   184,   185,   186,
     187,   188,   189,   190,  1087,   192,   193,  1088,   195,  1089,
     196,     0,   197,   198,   199,   200,   201,   202,     0,     0,
     203,   204,   205,   206,     0,     0,   207,   208,  1090,   210,
     211,   212,     0,   213,   214,   215,     0,   216,   217,   218,
       0,   219,   220,   221,   222,  1091,   224,   225,   226,   227,
     228,   229,   808,  1092,   231,     0,     0,   232,   233,  1093,
     235,     0,   236,     0,   237,   238,     0,   239,   240,   241,
     242,   243,   244,     0,     0,   245,     0,  1094,  1095,   248,
     249,     0,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,     0,   262,   263,   264,   265,   266,
     267,   268,     0,   269,   270,   271,   272,   273,   274,   275,
     276,  1096,  1097,     0,  1098,     0,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,     0,     0,   291,
     292,   293,   294,     0,   295,     0,     0,   296,   297,   298,
     299,   300,   301,   302,  1099,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,  1100,   326,  1101,   328,
     329,   330,   331,   332,  1102,   333,   334,   335,   336,  1103,
     810,   338,  1104,   340,   341,   342,     0,   343,   344,     0,
       0,  1105,   346,   347,     0,     0,   348,   349,   350,   351,
     352,   353,   354,   812,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,     0,     0,     0,     0,
     368,   369,   813,   371,   372,   373,   374,     0,   375,   376,
     377,     0,   378,   379,   380,   381,   382,   383,     0,   384,
     385,   386,   387,   388,  1106,   390,   391,   392,   393,     0,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,     0,   407,   408,   409,   410,   411,   412,
    1107,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,     0,     0,   427,   428,   429,   430,
     431,   432,   433,   434,   435,     0,   436,   437,   438,  1108,
     440,     0,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,   816,     0,     0,   456,
     457,     0,   458,   459,   460,     0,   461,   462,   463,   464,
     465,     0,   466,  1109,  1110,     0,     0,   469,   470,   817,
     472,   818,  1111,   474,   475,   819,   477,   478,   479,   480,
     481,     0,     0,   482,   483,   484,     0,   485,   486,   487,
     488,     0,   489,   490,   491,   492,   493,   494,  1112,   496,
       0,   497,   498,   499,   500,   501,   502,   503,   504,   505,
       0,     0,   506,     0,     0,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520,   521,
     522,   523,   524,   525,   526,   527,  1113,     0,     0,     0,
       0,     0,     0,  1114,  1115,  1116,     0,     0,     0,     0,
    1117,     0,  1118,  2104,     0,     0,  1119,     0,     0,  1120,
    1121,  1122,   118,  1073,   836,  1074,  1075,  1076,  1077,  1078,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   119,   120,   121,   122,   123,   124,   125,   126,     0,
     127,   128,   129,     0,     0,     0,     0,     0,  1079,     0,
       0,   130,   131,   132,     0,   133,   134,   135,   136,   137,
     138,   139,   140,  1080,   142,  1081,  1082,     0,   145,   146,
     147,   148,   149,   150,  1083,   805,   151,   152,   153,   154,
    1084,  1085,   157,     0,   158,   159,   160,   161,   806,     0,
     807,     0,  1086,   165,   166,   167,   168,   169,   170,   171,
     172,   173,     0,   174,   175,   176,   177,   178,   179,     0,
     180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
     190,  1087,   192,   193,  1088,   195,  1089,   196,     0,   197,
     198,   199,   200,   201,   202,     0,     0,   203,   204,   205,
     206,     0,     0,   207,   208,  1090,   210,   211,   212,     0,
     213,   214,   215,     0,   216,   217,   218,     0,   219,   220,
     221,   222,  1091,   224,   225,   226,   227,   228,   229,   808,
    1092,   231,     0,     0,   232,   233,  1093,   235,     0,   236,
       0,   237,   238,     0,   239,   240,   241,   242,   243,   244,
       0,     0,   245,     0,  1094,  1095,   248,   249,     0,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,     0,   262,   263,   264,   265,   266,   267,   268,     0,
     269,   270,   271,   272,   273,   274,   275,   276,  1096,  1097,
       0,  1098,     0,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,     0,     0,   291,   292,   293,   294,
       0,   295,     0,     0,   296,   297,   298,   299,   300,   301,
     302,  1099,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,  1100,   326,  1101,   328,   329,   330,   331,
     332,  1102,   333,   334,   335,   336,  1103,   810,   338,  1104,
     340,   341,   342,     0,   343,   344,     0,     0,  1105,   346,
     347,     0,     0,   348,   349,   350,   351,   352,   353,   354,
     812,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,     0,     0,     0,     0,   368,   369,   813,
     371,   372,   373,   374,     0,   375,   376,   377,     0,   378,
     379,   380,   381,   382,   383,     0,   384,   385,   386,   387,
     388,  1106,   390,   391,   392,   393,     0,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
       0,   407,   408,   409,   410,   411,   412,  1107,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,     0,     0,   427,   428,   429,   430,   431,   432,   433,
     434,   435,     0,   436,   437,   438,  1108,   440,     0,   441,
     442,   443,   444,   445,   446,   447,   448,   449,   450,   451,
     452,   453,   454,   816,     0,     0,   456,   457,  2757,   458,
     459,   460,     0,   461,   462,   463,   464,   465,     0,   466,
    1109,  1110,     0,     0,   469,   470,   817,   472,   818,  1111,
     474,   475,   819,   477,   478,   479,   480,   481,     0,     0,
     482,   483,   484,     0,   485,   486,   487,   488,     0,   489,
     490,   491,   492,   493,   494,  1112,   496,     0,   497,   498,
     499,   500,   501,   502,   503,   504,   505,     0,     0,   506,
       0,     0,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,  1113,     0,     0,     0,     0,     0,     0,
    1114,  1115,  1116,     0,     0,     0,     0,  1117,     0,  1118,
       0,     0,     0,  1119,     0,     0,  1120,  1121,  1122,   118,
    1073,   836,  1074,  1075,  1076,  1077,  1078,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   119,   120,
     121,   122,   123,   124,   125,   126,     0,   127,   128,   129,
       0,     0,     0,     0,     0,  1079,     0,     0,   130,   131,
     132,     0,   133,   134,   135,   136,   137,   138,   139,   140,
    1080,   142,  1081,  1082,     0,   145,   146,   147,   148,   149,
     150,  1083,   805,   151,   152,   153,   154,  1084,  1085,   157,
       0,   158,   159,   160,   161,   806,     0,   807,     0,  1086,
     165,   166,   167,   168,   169,   170,   171,   172,   173,     0,
     174,   175,   176,   177,   178,   179,     0,   180,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,  1087,   192,
     193,  1088,   195,  1089,   196,     0,   197,   198,   199,   200,
     201,   202,     0,     0,   203,   204,   205,   206,     0,     0,
     207,   208,  1090,   210,   211,   212,     0,   213,   214,   215,
       0,   216,   217,   218,     0,   219,   220,   221,   222,  1091,
     224,   225,   226,   227,   228,   229,   808,  1092,   231,     0,
       0,   232,   233,  1093,   235,     0,   236,     0,   237,   238,
       0,   239,   240,   241,   242,   243,   244,     0,     0,   245,
       0,  1094,  1095,   248,   249,     0,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,     0,   262,
     263,   264,   265,   266,   267,   268,     0,   269,   270,   271,
     272,   273,   274,   275,   276,  1096,  1097,     0,  1098,     0,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,     0,     0,   291,   292,   293,   294,     0,   295,     0,
       0,   296,   297,   298,   299,   300,   301,   302,  1099,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
    1100,   326,  1101,   328,   329,   330,   331,   332,  1102,   333,
     334,   335,   336,  1103,   810,   338,  1104,   340,   341,   342,
       0,   343,   344,     0,     0,  1105,   346,   347,     0,     0,
     348,   349,   350,   351,   352,   353,   354,   812,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
       0,     0,     0,     0,   368,   369,   813,   371,   372,   373,
     374,     0,   375,   376,   377,     0,   378,   379,   380,   381,
     382,   383,     0,   384,   385,   386,   387,   388,  1106,   390,
     391,   392,   393,     0,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,     0,   407,   408,
     409,   410,   411,   412,  1107,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,     0,     0,
     427,   428,   429,   430,   431,   432,   433,   434,   435,     0,
     436,   437,   438,  1108,   440,     0,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     816,     0,     0,   456,   457,     0,   458,   459,   460,     0,
     461,   462,   463,   464,   465,     0,   466,  1109,  1110,     0,
       0,   469,   470,   817,   472,   818,  1111,   474,   475,   819,
     477,   478,   479,   480,   481,     0,     0,   482,   483,   484,
       0,   485,   486,   487,   488,     0,   489,   490,   491,   492,
     493,   494,  1112,   496,     0,   497,   498,   499,   500,   501,
     502,   503,   504,   505,     0,  2884,   506,     0,     0,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,   519,   520,   521,   522,   523,   524,   525,   526,   527,
    1113,     0,     0,     0,     0,     0,     0,  1114,  1115,  1116,
       0,     0,     0,     0,  1117,     0,  1118,     0,     0,     0,
    1119,     0,     0,  1120,  1121,  1122,   118,  1073,   836,  1074,
    1075,  1076,  1077,  1078,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   119,   120,   121,   122,   123,
     124,   125,   126,  3108,   127,   128,   129,     0,     0,     0,
       0,     0,  1079,     0,     0,   130,   131,   132,     0,   133,
     134,   135,   136,   137,   138,   139,   140,  1080,   142,  1081,
    1082,     0,   145,   146,   147,   148,   149,   150,  1083,   805,
     151,   152,   153,   154,  1084,  1085,   157,     0,   158,   159,
     160,   161,   806,     0,   807,     0,  1086,   165,   166,   167,
     168,   169,   170,   171,   172,   173,     0,   174,   175,   176,
     177,   178,   179,     0,   180,   181,  3109,   183,   184,   185,
     186,   187,   188,   189,   190,  1087,   192,   193,  1088,   195,
    1089,   196,     0,   197,   198,   199,   200,   201,   202,     0,
       0,   203,   204,   205,   206,     0,     0,   207,   208,  1090,
     210,   211,   212,     0,   213,   214,   215,     0,   216,   217,
     218,     0,   219,   220,   221,   222,  1091,   224,   225,   226,
     227,   228,   229,   808,  1092,   231,     0,     0,   232,   233,
    1093,   235,     0,   236,     0,   237,   238,     0,   239,   240,
     241,   242,   243,   244,     0,     0,   245,     0,  3110,  1095,
     248,   249,     0,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,     0,   262,   263,   264,   265,
     266,   267,   268,     0,   269,   270,   271,   272,   273,   274,
     275,   276,  1096,  1097,     0,  1098,     0,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,     0,     0,
     291,   292,   293,   294,     0,   295,     0,     0,   296,   297,
     298,   299,   300,   301,   302,  1099,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,  1100,   326,  1101,
     328,   329,   330,   331,   332,  1102,   333,   334,   335,   336,
    1103,   810,   338,  1104,   340,   341,   342,     0,   343,   344,
       0,     0,  1105,   346,   347,     0,     0,   348,   349,   350,
     351,   352,   353,   354,   812,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,     0,     0,     0,
       0,   368,   369,   813,   371,   372,   373,   374,     0,   375,
     376,   377,     0,   378,   379,   380,   381,   382,   383,     0,
     384,   385,   386,   387,   388,  1106,   390,   391,   392,   393,
       0,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,     0,   407,   408,   409,   410,   411,
    3111,  1107,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,     0,     0,   427,   428,   429,
     430,   431,   432,   433,   434,   435,     0,   436,   437,   438,
    1108,   440,     0,   441,   442,   443,   444,   445,   446,   447,
     448,   449,   450,   451,   452,   453,   454,   816,     0,     0,
     456,   457,     0,   458,   459,   460,     0,   461,   462,   463,
     464,   465,     0,   466,  1109,  1110,     0,     0,   469,   470,
     817,   472,   818,  1111,   474,   475,   819,   477,   478,   479,
     480,   481,     0,     0,   482,   483,   484,     0,   485,   486,
     487,   488,     0,   489,   490,   491,   492,   493,   494,  1112,
     496,     0,   497,   498,   499,   500,   501,   502,   503,   504,
     505,     0,     0,   506,     0,     0,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,   517,   518,   519,   520,
     521,   522,   523,   524,   525,   526,   527,  1113,     0,     0,
       0,     0,     0,     0,  1114,  1115,  1116,     0,     0,     0,
       0,  1117,     0,  3112,     0,     0,     0,  1119,     0,     0,
    1120,  1121,  1122,   118,  1073,   836,  1074,  1075,  1076,  1077,
    1078,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   119,   120,   121,   122,   123,   124,   125,   126,
       0,   127,   128,   129,     0,     0,     0,     0,     0,  1079,
       0,     0,   130,   131,   132,     0,   133,   134,   135,   136,
     137,   138,   139,   140,  1080,   142,  1081,  1082,     0,   145,
     146,   147,   148,   149,   150,  1083,   805,   151,   152,   153,
     154,  1084,  1085,   157,     0,   158,   159,   160,   161,   806,
       0,   807,     0,  1086,   165,   166,   167,   168,   169,   170,
     171,   172,   173,     0,   174,   175,   176,   177,   178,   179,
       0,   180,   181,   182,   183,   184,   185,   186,   187,   188,
     189,   190,  1087,   192,   193,  1088,   195,  1089,   196,     0,
     197,   198,   199,   200,   201,   202,     0,     0,   203,   204,
     205,   206,     0,     0,   207,   208,  1090,   210,   211,   212,
       0,   213,   214,   215,     0,   216,   217,   218,     0,   219,
     220,   221,   222,  1091,   224,   225,   226,   227,   228,   229,
     808,  1092,   231,     0,     0,   232,   233,  1093,   235,     0,
     236,     0,   237,   238,     0,   239,   240,   241,   242,   243,
     244,     0,     0,   245,     0,  1094,  1095,   248,   249,     0,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,     0,   262,   263,   264,   265,   266,   267,   268,
       0,   269,   270,   271,   272,   273,   274,   275,   276,  1096,
    1097,     0,  1098,     0,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,     0,     0,   291,   292,   293,
     294,     0,   295,     0,     0,   296,   297,   298,   299,   300,
     301,   302,  1099,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,  1100,   326,  1101,   328,   329,   330,
     331,   332,  1102,   333,   334,   335,   336,  1103,   810,   338,
    1104,   340,   341,   342,     0,   343,   344,     0,     0,  1105,
     346,   347,     0,     0,   348,   349,   350,   351,   352,   353,
     354,   812,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,     0,     0,     0,     0,   368,   369,
     813,   371,   372,   373,   374,     0,   375,   376,   377,     0,
     378,   379,   380,   381,   382,   383,     0,   384,   385,   386,
     387,   388,  1106,   390,   391,   392,   393,     0,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,     0,   407,   408,   409,   410,   411,   412,  1107,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,     0,     0,   427,   428,   429,   430,   431,   432,
     433,   434,   435,     0,   436,   437,   438,  1108,   440,     0,
     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
     451,   452,   453,   454,   816,     0,     0,   456,   457,     0,
     458,   459,   460,     0,   461,   462,   463,   464,   465,     0,
     466,  1109,  1110,     0,     0,   469,   470,   817,   472,   818,
    1111,   474,   475,   819,   477,   478,   479,   480,   481,     0,
       0,   482,   483,   484,     0,   485,   486,   487,   488,     0,
     489,   490,   491,   492,   493,   494,  1112,   496,     0,   497,
     498,   499,   500,   501,   502,   503,   504,   505,     0,     0,
     506,     0,     0,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   518,   519,   520,   521,   522,   523,
     524,   525,   526,   527,  1113,     0,     0,     0,     0,     0,
       0,  1114,  1115,  1116,     0,     0,     0,     0,  1117,     0,
    1118,     0,     0,     0,  1119,     0,     0,  1120,  1121,  1122,
     118,  1073,   836,  1074,  1075,  1076,  1077,  1078,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   119,
     120,   121,   122,   123,   124,   125,   126,     0,   127,   128,
     129,     0,     0,     0,     0,     0,  1079,     0,     0,   130,
     131,   132,     0,   133,   134,   135,   136,   137,   138,   139,
     140,  1080,   142,  1081,  1082,     0,   145,   146,   147,   148,
     149,   150,  1083,   805,   151,   152,   153,   154,  1084,  1085,
     157,     0,   158,   159,   160,   161,   806,     0,   807,     0,
    1086,   165,   166,   167,   168,   169,   170,   171,   172,   173,
       0,   174,   175,   176,   177,   178,   179,     0,   180,   181,
     182,   183,   184,   185,   186,   187,   188,   189,   190,  1087,
     192,   193,  1088,   195,  1089,   196,     0,   197,   198,   199,
     200,   201,   202,     0,     0,   203,   204,   205,   206,     0,
       0,   207,   208,  1090,   210,   211,   212,     0,   213,   214,
     215,     0,   216,   217,   218,     0,   219,   220,   221,   222,
    1091,   224,   225,   226,   227,   228,   229,   808,  1092,   231,
       0,     0,   232,   233,  1093,   235,     0,   236,     0,   237,
     238,     0,   239,   240,   241,   242,   243,   244,     0,     0,
     245,     0,  1094,  1095,   248,   249,     0,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,     0,
     262,   263,   264,   265,   266,   267,   268,     0,   269,   270,
     271,   272,   273,   274,   275,   276,  1096,  1097,     0,  1098,
       0,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,     0,     0,   291,   292,   293,   294,     0,   295,
       0,     0,   296,   297,   298,   299,   300,   301,   302,  1099,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,  1100,   326,  1101,   328,   329,   330,   331,   332,  1102,
     333,   334,   335,   336,  1103,   810,   338,  1104,   340,   341,
     342,     0,   343,   344,     0,     0,  1105,   346,   347,     0,
       0,   348,   349,   350,   351,   352,   353,   354,   812,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,     0,     0,     0,     0,   368,   369,   813,   371,   372,
     373,   374,     0,   375,   376,   377,     0,   378,   379,   380,
     381,   382,   383,     0,   384,   385,   386,   387,   388,  1106,
     390,   391,   392,   393,     0,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,     0,   407,
     408,   409,   410,   411,   412,  1107,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,     0,
       0,   427,   428,   429,   430,   431,   432,   433,   434,   435,
       0,   436,   437,   438,  1108,   440,     0,   441,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,   816,     0,     0,   456,   457,     0,   458,   459,   460,
       0,   461,   462,   463,   464,   465,     0,   466,  1109,  1110,
       0,     0,   469,   470,   817,   472,   818,  1111,   474,   475,
     819,   477,   478,   479,   480,   481,     0,     0,   482,   483,
     484,     0,   485,   486,   487,   488,     0,   489,   490,   491,
     492,   493,   494,  1112,   496,     0,   497,   498,   499,   500,
     501,   502,   503,   504,   505,     0,     0,   506,     0,     0,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   518,   519,   520,   521,   522,   523,   524,   525,   526,
     527,  1113,     0,     0,     0,     0,     0,     0,  1752,  1753,
    1116,     0,     0,     0,     0,  1117,     0,  1118,     0,     0,
       0,  1119,     0,     0,  1120,  1121,  1122,   118,  2248,   836,
    1074,  1075,  1076,  1077,  1078,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   119,   120,   121,   122,
     123,   124,   125,   126,     0,   127,   128,   129,     0,     0,
       0,     0,     0,  1079,     0,     0,   130,   131,   132,     0,
     133,   134,   135,   136,   137,   138,   139,   140,  1080,   142,
    1081,  1082,     0,   145,   146,   147,   148,   149,   150,  1083,
     805,   151,   152,   153,   154,  1084,  1085,   157,     0,   158,
     159,   160,   161,   806,     0,   807,     0,  1086,   165,   166,
     167,   168,   169,   170,   171,   172,   173,     0,   174,   175,
     176,   177,   178,   179,     0,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,  1087,   192,   193,  1088,
     195,  1089,   196,     0,   197,   198,   199,   200,   201,   202,
       0,     0,   203,   204,   205,   206,     0,     0,   207,   208,
    1090,   210,   211,   212,     0,   213,   214,   215,     0,   216,
     217,   218,     0,   219,   220,   221,   222,  1091,   224,   225,
     226,   227,   228,   229,   808,  1092,   231,     0,     0,   232,
     233,  1093,   235,     0,   236,     0,   237,   238,     0,   239,
     240,   241,   242,   243,   244,     0,     0,   245,     0,  1094,
    1095,   248,   249,     0,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,     0,   262,   263,   264,
     265,   266,   267,   268,     0,   269,   270,   271,   272,   273,
     274,   275,   276,  1096,  1097,     0,  1098,     0,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,     0,
       0,   291,   292,   293,   294,     0,   295,     0,     0,   296,
     297,   298,   299,   300,   301,   302,  1099,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,  1100,   326,
    1101,   328,   329,   330,   331,   332,  1102,   333,   334,   335,
     336,  1103,   810,   338,  1104,   340,   341,   342,     0,   343,
     344,     0,     0,  1105,   346,   347,     0,     0,   348,   349,
     350,   351,   352,   353,   354,   812,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,     0,     0,
       0,     0,   368,   369,   813,   371,   372,   373,   374,     0,
     375,   376,   377,     0,   378,   379,   380,   381,   382,   383,
       0,   384,   385,   386,   387,   388,  1106,   390,   391,   392,
     393,     0,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,     0,   407,   408,   409,   410,
     411,   412,  1107,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,     0,     0,   427,   428,
     429,   430,   431,   432,   433,   434,   435,     0,   436,   437,
     438,  1108,   440,     0,   441,   442,   443,   444,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   816,     0,
       0,   456,   457,     0,   458,   459,   460,     0,   461,   462,
     463,   464,   465,     0,   466,  1109,  1110,     0,     0,   469,
     470,   817,   472,   818,  1111,   474,   475,   819,   477,   478,
     479,   480,   481,     0,     0,   482,   483,   484,     0,   485,
     486,   487,   488,     0,   489,   490,   491,   492,   493,   494,
    1112,   496,     0,   497,   498,   499,   500,   501,   502,   503,
     504,   505,     0,     0,   506,     0,     0,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   518,   519,
     520,   521,   522,   523,   524,   525,   526,   527,  1113,     0,
       0,     0,     0,     0,     0,  1114,  1115,  1116,     0,     0,
       0,     0,  1117,     0,  1118,     0,     0,     0,  1119,     0,
       0,  1120,  1121,  1122,   118,  1073,   836,  1074,  1075,  1076,
    1077,  1078,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   119,   120,   121,   122,   123,   124,   125,
     126,     0,   127,   128,   129,     0,     0,     0,     0,     0,
    1079,     0,     0,   130,   131,   132,     0,   133,   134,   135,
     136,   137,   138,   139,   140,  1080,   142,  1081,  1082,     0,
     145,   146,   147,   148,   149,   150,  1083,   805,   151,   152,
     153,   154,  1084,  1085,   157,     0,   158,   159,   160,   161,
     806,     0,   807,     0,  1086,   165,   166,   167,   168,   169,
     170,   171,   172,   173,     0,   174,   175,   176,   177,   178,
     179,     0,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,  1087,   192,   193,  1088,   195,  1089,   196,
       0,   197,   198,   199,   200,   201,   202,     0,     0,   203,
     204,   205,   206,     0,     0,   207,   208,  1090,   210,   211,
     212,     0,   213,   214,   215,     0,   216,   217,   218,     0,
     219,   220,   221,   222,  1091,   224,   225,   226,   227,   228,
     229,   808,  1092,   231,     0,     0,   232,   233,  1093,   235,
       0,   236,     0,   237,   238,     0,   239,   240,   241,   242,
     243,   244,     0,     0,   245,     0,  1094,  1095,   248,   249,
       0,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,     0,   262,   263,   264,   265,   266,   267,
     268,     0,   269,   270,   271,   272,   273,   274,   275,   276,
    1096,  1097,     0,  1098,     0,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,     0,     0,   291,   292,
     293,   294,     0,   295,     0,     0,   296,   297,   298,   299,
     300,   301,   302,  1099,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,  1100,   326,  1101,   328,   329,
     330,   331,   332,  1102,   333,   334,   335,   336,  1103,   810,
     338,  1104,   340,   341,   342,     0,   343,   344,     0,     0,
    1105,   346,   347,     0,     0,   348,   349,   350,   351,   352,
     353,   354,   812,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,     0,     0,     0,     0,   368,
     369,   813,   371,   372,   373,   374,     0,   375,   376,   377,
       0,   378,   379,   380,   381,   382,   383,     0,   384,   385,
     386,   387,   388,  1106,   390,   391,   392,   393,     0,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,     0,   407,   408,   409,   410,   411,   412,  1107,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,     0,     0,   427,   428,   429,   430,   431,
     432,   433,   434,   435,     0,   436,   437,   438,  1108,   440,
       0,   441,   442,   443,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   453,   454,   816,     0,     0,   456,   457,
       0,   458,   459,   460,     0,   461,   462,   463,   464,   465,
       0,   466,  1109,  1110,     0,     0,   469,   470,   817,   472,
     818,  1111,   474,   475,   819,   477,   478,   479,   480,   481,
       0,     0,   482,   483,   484,     0,   485,   486,   487,   488,
       0,   489,   490,   491,   492,   493,   494,  1112,   496,     0,
     497,   498,   499,   500,   501,   502,   503,   504,   505,     0,
       0,   506,     0,     0,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,   518,   519,   520,   521,   522,
     523,   524,   525,   526,   527,  1113,     0,     0,     0,     0,
       0,     0,  1114,  2331,  1116,     0,     0,     0,     0,  1117,
       0,  1118,     0,     0,     0,  1119,     0,     0,  1120,  1121,
    1122,   118,  1073,   836,  1074,  1075,  1076,  1077,  1078,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     119,   120,   121,   122,   123,   124,   125,   126,     0,   127,
     128,   129,     0,     0,     0,     0,     0,  1079,     0,     0,
     130,   131,   132,     0,   133,   134,   135,   136,   137,   138,
     139,   140,  1080,   142,  1081,  1082,     0,   145,   146,   147,
     148,   149,   150,  1083,   805,   151,   152,   153,   154,  1084,
    1085,   157,     0,   158,   159,   160,   161,   806,     0,   807,
       0,  1086,   165,   166,   167,   168,   169,   170,   171,   172,
     173,     0,   174,   175,   176,   177,   178,   179,     0,   180,
     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
    1087,   192,   193,  1088,   195,  1089,   196,     0,   197,   198,
     199,   200,   201,   202,     0,     0,   203,   204,   205,   206,
       0,     0,   207,   208,  1090,   210,   211,   212,     0,   213,
     214,   215,     0,   216,   217,   218,     0,   219,   220,   221,
     222,  1091,   224,   225,   226,   227,   228,   229,   808,  1092,
     231,     0,     0,   232,   233,  1093,   235,     0,   236,     0,
     237,   238,     0,   239,   240,   241,   242,   243,   244,     0,
       0,   245,     0,  1094,  1095,   248,   249,     0,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
       0,   262,   263,   264,   265,   266,   267,   268,     0,   269,
     270,   271,   272,   273,   274,   275,   276,  1096,  1097,     0,
    1098,     0,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,     0,     0,   291,   292,   293,   294,     0,
     295,     0,     0,   296,   297,   298,   299,   300,   301,   302,
    1099,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,  1100,   326,  1101,   328,   329,   330,   331,   332,
    1102,   333,   334,   335,   336,  1103,   810,   338,  1104,   340,
     341,   342,     0,   343,   344,     0,     0,  1105,   346,   347,
       0,     0,   348,   349,   350,   351,   352,   353,   354,   812,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,     0,     0,     0,     0,   368,   369,   813,   371,
     372,   373,   374,     0,   375,   376,   377,     0,   378,   379,
     380,   381,   382,   383,     0,   384,   385,   386,   387,   388,
    1106,   390,   391,   392,   393,     0,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,     0,
     407,   408,   409,   410,   411,   412,  1107,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
       0,     0,   427,   428,   429,   430,   431,   432,   433,   434,
     435,     0,   436,   437,   438,  1108,   440,     0,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
     453,   454,   816,     0,     0,   456,   457,     0,   458,   459,
     460,     0,   461,   462,   463,   464,   465,     0,   466,  1109,
    1110,     0,     0,   469,   470,   817,   472,   818,  1111,   474,
     475,   819,   477,   478,   479,   480,   481,     0,     0,   482,
     483,   484,     0,   485,   486,   487,   488,     0,   489,   490,
     491,   492,   493,   494,  1112,   496,     0,   497,   498,   499,
     500,   501,   502,   503,   504,   505,     0,     0,   506,     0,
       0,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   518,   519,   520,   521,   522,   523,   524,   525,
     526,   527,  1113,     0,     0,     0,     0,     0,     0,  1114,
    1115,  1116,     0,     0,     0,     0,  1117,     0,  2553,     0,
       0,     0,  1119,     0,     0,  1120,  1121,  1122,   118,  1073,
     836,  1074,  1075,  1076,  1077,  1078,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   119,   120,   121,
     122,   123,   124,   125,   126,     0,   127,   128,   129,     0,
       0,     0,     0,     0,  1079,     0,     0,   130,   131,   132,
       0,   133,   134,   135,   136,   137,   138,   139,   140,  1080,
     142,  1081,  1082,     0,   145,   146,   147,   148,   149,   150,
    1083,   805,   151,   152,   153,   154,  1084,  1085,   157,     0,
     158,   159,   160,   161,   806,     0,   807,     0,  1086,   165,
     166,   167,   168,   169,   170,   171,   172,   173,     0,   174,
     175,   176,   177,   178,   179,     0,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,  1087,   192,   193,
    1088,   195,  1089,   196,     0,   197,   198,   199,   200,   201,
     202,     0,     0,   203,   204,   205,   206,     0,     0,   207,
     208,  1090,   210,   211,   212,     0,   213,   214,   215,     0,
     216,   217,   218,     0,   219,   220,   221,   222,  1091,   224,
     225,   226,   227,   228,   229,   808,  1092,   231,     0,     0,
     232,   233,  1093,   235,     0,   236,     0,   237,   238,     0,
     239,   240,   241,   242,   243,   244,     0,     0,   245,     0,
    1094,  1095,   248,   249,     0,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,     0,   262,   263,
     264,   265,   266,   267,   268,     0,   269,   270,   271,   272,
     273,   274,   275,   276,  1096,  1097,     0,  1098,     0,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
       0,     0,   291,   292,   293,   294,     0,   295,     0,     0,
     296,   297,   298,   299,   300,   301,   302,  1099,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,  1100,
     326,  1101,   328,   329,   330,   331,   332,  1102,   333,   334,
     335,   336,  1103,   810,   338,  1104,   340,   341,   342,     0,
     343,   344,     0,     0,  1105,   346,   347,     0,     0,   348,
     349,   350,   351,   352,   353,   354,   812,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,     0,
       0,     0,     0,   368,   369,   813,   371,   372,   373,   374,
       0,   375,   376,   377,     0,   378,   379,   380,   381,   382,
     383,     0,   384,   385,   386,   387,   388,  1106,   390,   391,
     392,   393,     0,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,     0,   407,   408,   409,
     410,   411,   412,  1107,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,     0,     0,   427,
     428,   429,   430,   431,   432,   433,   434,   435,     0,   436,
     437,   438,  1108,   440,     0,   441,   442,   443,   444,   445,
     446,   447,   448,   449,   450,   451,   452,   453,   454,   816,
       0,     0,   456,   457,     0,   458,   459,   460,     0,   461,
     462,   463,   464,   465,     0,   466,  1109,  1110,     0,     0,
     469,   470,   817,   472,   818,  1111,   474,   475,   819,   477,
     478,   479,   480,   481,     0,     0,   482,   483,   484,     0,
     485,   486,   487,   488,     0,   489,   490,   491,   492,   493,
     494,  1112,   496,     0,   497,   498,   499,   500,   501,   502,
     503,   504,   505,     0,     0,   506,     0,     0,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,   518,
     519,   520,   521,   522,   523,   524,   525,   526,   527,  1113,
       0,     0,     0,     0,     0,     0,  1114,  3163,  1116,     0,
       0,     0,     0,  1117,     0,  1118,     0,     0,     0,  1119,
       0,     0,  1120,  1121,  1122,   118,  1073,   836,  1074,  1075,
    1076,  1077,  1078,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   119,   120,   121,   122,   123,   124,
     125,   126,     0,   127,   128,   129,     0,     0,     0,     0,
       0,  1079,     0,     0,   130,   131,   132,     0,   133,   134,
     135,   136,   137,   138,   139,   140,  1080,   142,  1081,  1082,
       0,   145,   146,   147,   148,   149,   150,  1083,   805,   151,
     152,   153,   154,  1084,  1085,   157,     0,   158,   159,   160,
     161,   806,     0,   807,     0,  1086,   165,   166,   167,   168,
     169,   170,   171,   172,   173,     0,   174,   175,   176,   177,
     178,   179,     0,   180,   181,  3109,   183,   184,   185,   186,
     187,   188,   189,   190,  1087,   192,   193,  1088,   195,  1089,
     196,     0,   197,   198,   199,   200,   201,   202,     0,     0,
     203,   204,   205,   206,     0,     0,   207,   208,  1090,   210,
     211,   212,     0,   213,   214,   215,     0,   216,   217,   218,
       0,   219,   220,   221,   222,  1091,   224,   225,   226,   227,
     228,   229,   808,  1092,   231,     0,     0,   232,   233,  1093,
     235,     0,   236,     0,   237,   238,     0,   239,   240,   241,
     242,   243,   244,     0,     0,   245,     0,  3110,  1095,   248,
     249,     0,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,     0,   262,   263,   264,   265,   266,
     267,   268,     0,   269,   270,   271,   272,   273,   274,   275,
     276,  1096,  1097,     0,  1098,     0,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,     0,     0,   291,
     292,   293,   294,     0,   295,     0,     0,   296,   297,   298,
     299,   300,   301,   302,  1099,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,  1100,   326,  1101,   328,
     329,   330,   331,   332,  1102,   333,   334,   335,   336,  1103,
     810,   338,  1104,   340,   341,   342,     0,   343,   344,     0,
       0,  1105,   346,   347,     0,     0,   348,   349,   350,   351,
     352,   353,   354,   812,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,     0,     0,     0,     0,
     368,   369,   813,   371,   372,   373,   374,     0,   375,   376,
     377,     0,   378,   379,   380,   381,   382,   383,     0,   384,
     385,   386,   387,   388,  1106,   390,   391,   392,   393,     0,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,     0,   407,   408,   409,   410,   411,  3111,
    1107,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,     0,     0,   427,   428,   429,   430,
     431,   432,   433,   434,   435,     0,   436,   437,   438,  1108,
     440,     0,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,   816,     0,     0,   456,
     457,     0,   458,   459,   460,     0,   461,   462,   463,   464,
     465,     0,   466,  1109,  1110,     0,     0,   469,   470,   817,
     472,   818,  1111,   474,   475,   819,   477,   478,   479,   480,
     481,     0,     0,   482,   483,   484,     0,   485,   486,   487,
     488,     0,   489,   490,   491,   492,   493,   494,  1112,   496,
       0,   497,   498,   499,   500,   501,   502,   503,   504,   505,
       0,     0,   506,     0,     0,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520,   521,
     522,   523,   524,   525,   526,   527,  1113,     0,     0,     0,
       0,     0,     0,  1114,  1115,  1116,     0,     0,     0,     0,
    1117,     0,  3112,     0,     0,     0,  1119,     0,     0,  1120,
    1121,  1122,   118,  1073,   836,  1074,  1075,  1076,  1077,  1078,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   119,   120,   121,   122,   123,   124,   125,   126,     0,
     127,   128,   129,     0,     0,     0,     0,     0,  1079,     0,
       0,   130,   131,   132,     0,   133,   134,   135,   136,   137,
     138,   139,  3604,  1080,   142,  1081,  1082,     0,   145,   146,
     147,   148,   149,   150,  1083,   805,   151,   152,   153,   154,
    1084,  1085,   157,     0,   158,   159,   160,   161,   806,     0,
     807,     0,  1086,   165,   166,   167,   168,   169,   170,   171,
     172,   173,     0,   174,   175,   176,   177,   178,   179,     0,
     180,   181,   182,  3605,   184,   185,   186,   187,   188,   189,
     190,  1087,   192,   193,  1088,   195,  1089,   196,     0,   197,
     198,   199,   200,   201,   202,     0,     0,   203,   204,   205,
     206,     0,     0,   207,   208,  1090,   210,   211,   212,     0,
     213,   214,   215,     0,   216,   217,   218,     0,   219,   220,
     221,   222,  1091,   224,   225,   226,   227,   228,   229,   808,
    1092,   231,     0,     0,   232,   233,  1093,   235,     0,   236,
       0,   237,   238,     0,   239,   240,   241,   242,   243,   244,
       0,     0,   245,     0,  1094,  1095,   248,   249,     0,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,     0,   262,   263,   264,   265,   266,   267,   268,     0,
     269,   270,   271,   272,   273,   274,   275,   276,  1096,  1097,
       0,  1098,     0,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,     0,     0,   291,   292,   293,   294,
       0,   295,     0,     0,   296,   297,   298,   299,   300,   301,
     302,  1099,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,  1100,   326,  1101,   328,   329,   330,   331,
     332,  1102,   333,   334,   335,   336,  1103,   810,   338,  1104,
     340,   341,   342,     0,   343,   344,     0,     0,  1105,   346,
     347,     0,     0,   348,   349,   350,   351,   352,   353,   354,
     812,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,     0,     0,     0,     0,   368,   369,   813,
     371,   372,   373,   374,     0,   375,   376,   377,     0,   378,
     379,   380,   381,   382,   383,     0,   384,   385,   386,   387,
     388,  1106,   390,   391,   392,   393,     0,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
       0,   407,   408,   409,   410,   411,   412,  1107,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,     0,     0,   427,   428,   429,   430,   431,   432,   433,
     434,   435,     0,   436,   437,   438,  1108,   440,     0,   441,
     442,   443,   444,   445,   446,   447,   448,   449,   450,   451,
     452,   453,   454,   816,     0,     0,   456,   457,     0,   458,
     459,   460,     0,   461,   462,   463,   464,   465,     0,   466,
    1109,  1110,     0,     0,   469,   470,   817,   472,   818,  1111,
     474,   475,   819,   477,   478,  3606,   480,   481,     0,     0,
     482,   483,   484,     0,   485,   486,   487,   488,     0,   489,
     490,   491,   492,   493,   494,  1112,   496,     0,   497,   498,
     499,   500,   501,   502,   503,   504,   505,     0,     0,   506,
       0,     0,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,  1113,     0,     0,     0,     0,     0,     0,
    1114,  1115,  1116,     0,     0,     0,     0,  1117,     0,  1118,
       0,     0,     0,  1119,     0,     0,  1120,  1121,  1122,   118,
    1073,   836,  1074,  1075,  1076,  1077,  1078,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   119,   120,
     121,   122,   123,   124,   125,   126,     0,   127,   128,   129,
       0,     0,     0,     0,     0,  1079,     0,     0,   130,   131,
     132,     0,   133,   134,   135,   136,   137,   138,   139,   140,
    1080,   142,  1081,  1082,     0,   145,   146,   147,   148,   149,
     150,  1083,   805,   151,   152,   153,   154,  1084,  1085,   157,
       0,   158,   159,   160,   161,   806,     0,   807,     0,  1086,
     165,   166,   167,   168,   169,   170,   171,   172,   173,     0,
     174,   175,   176,   177,   178,   179,     0,   180,   181,   182,
    3605,   184,   185,   186,   187,   188,   189,   190,  1087,   192,
     193,  1088,   195,  1089,   196,     0,   197,   198,   199,   200,
     201,   202,     0,     0,   203,   204,   205,   206,     0,     0,
     207,   208,  1090,   210,   211,   212,     0,   213,   214,   215,
       0,   216,   217,   218,     0,   219,   220,   221,   222,  1091,
     224,   225,   226,   227,   228,   229,   808,  1092,   231,     0,
       0,   232,   233,  1093,   235,     0,   236,     0,   237,   238,
       0,   239,   240,   241,   242,   243,   244,     0,     0,   245,
       0,  1094,  1095,   248,   249,     0,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,     0,   262,
     263,   264,   265,   266,   267,   268,     0,   269,   270,   271,
     272,   273,   274,   275,   276,  1096,  1097,     0,  1098,     0,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,     0,     0,   291,   292,   293,   294,     0,   295,     0,
       0,   296,   297,   298,   299,   300,   301,   302,  1099,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
    1100,   326,  1101,   328,   329,   330,   331,   332,  1102,   333,
     334,   335,   336,  1103,   810,   338,  1104,   340,   341,   342,
       0,   343,   344,     0,     0,  1105,   346,   347,     0,     0,
     348,   349,   350,   351,   352,   353,   354,   812,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
       0,     0,     0,     0,   368,   369,   813,   371,   372,   373,
     374,     0,   375,   376,   377,     0,   378,   379,   380,   381,
     382,   383,     0,   384,   385,   386,   387,   388,  1106,   390,
     391,   392,   393,     0,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,     0,   407,   408,
     409,   410,   411,   412,  1107,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,     0,     0,
     427,   428,   429,   430,   431,   432,   433,   434,   435,     0,
     436,   437,   438,  1108,   440,     0,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     816,     0,     0,   456,   457,     0,   458,   459,   460,     0,
     461,   462,   463,   464,   465,     0,   466,  1109,  1110,     0,
       0,   469,   470,   817,   472,   818,  1111,   474,   475,   819,
     477,   478,  3606,   480,   481,     0,     0,   482,   483,   484,
       0,   485,   486,   487,   488,     0,   489,   490,   491,   492,
     493,   494,  1112,   496,     0,   497,   498,   499,   500,   501,
     502,   503,   504,   505,     0,     0,   506,     0,     0,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,   519,   520,   521,   522,   523,   524,   525,   526,   527,
    1113,     0,     0,     0,     0,     0,     0,  1114,  1115,  1116,
       0,     0,     0,     0,  1117,     0,  1118,     0,     0,     0,
    1119,     0,     0,  1120,  1121,  1122,   118,  1073,   836,  1074,
    1075,  1076,  1077,  1078,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   119,   120,   121,   122,   123,
     124,   125,   126,     0,   127,   128,   129,     0,     0,     0,
       0,     0,  1079,     0,     0,   130,   131,   132,     0,   133,
     134,   135,   136,   137,   138,   139,   140,  1080,   142,  1081,
    1082,     0,   145,   146,   147,   148,   149,   150,  1083,   805,
     151,   152,   153,   154,  1084,  1085,   157,     0,   158,   159,
     160,   161,   806,     0,   807,     0,   164,   165,   166,   167,
     168,   169,   170,   171,   172,   173,     0,   174,   175,   176,
     177,   178,   179,     0,   180,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,  1087,   192,   193,  1088,   195,
       0,   196,     0,   197,   198,   199,   200,   201,   202,     0,
       0,   203,   204,   205,   206,     0,     0,   207,   208,  1090,
     210,   211,   212,     0,   213,   214,   215,     0,   216,   217,
     218,     0,   219,   220,   221,   222,  1091,   224,   225,   226,
     227,   228,   229,   808,  1092,   231,     0,     0,   232,   233,
    1093,   235,     0,   236,     0,   237,   238,     0,   239,   240,
     241,   242,   243,   244,     0,     0,   245,     0,  1094,  1095,
     248,   249,     0,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,     0,   262,   263,   264,   265,
     266,   267,   268,     0,   269,   270,   271,   272,   273,   274,
     275,   276,  1096,  1097,     0,  1098,     0,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,     0,     0,
     291,   292,   293,   294,     0,   295,     0,     0,   296,   297,
     298,   299,   300,   301,   302,  1099,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,  1100,   326,  1101,
     328,   329,   330,   331,   332,     0,   333,   334,   335,   336,
    1103,   810,   338,  1104,   340,   341,   342,     0,   343,   344,
       0,     0,  1105,   346,   347,     0,     0,   348,   349,   350,
     351,   352,   353,   354,   812,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,     0,     0,     0,
       0,   368,   369,   813,   371,   372,   373,   374,     0,   375,
     376,   377,     0,   378,   379,   380,   381,   382,   383,     0,
     384,   385,   386,   387,   388,  1106,   390,   391,   392,   393,
       0,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,     0,   407,   408,   409,   410,   411,
     412,  1107,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,     0,     0,   427,   428,   429,
     430,   431,   432,   433,   434,   435,     0,   436,   437,   438,
    1108,   440,     0,   441,   442,   443,   444,   445,   446,   447,
     448,   449,   450,   451,   452,   453,   454,   816,     0,     0,
     456,   457,     0,   458,   459,   460,     0,   461,   462,   463,
     464,   465,     0,   466,  1109,  1110,     0,     0,   469,   470,
     817,   472,   818,  1111,   474,   475,   819,   477,   478,   479,
     480,   481,     0,     0,   482,   483,   484,     0,   485,   486,
     487,   488,     0,   489,   490,   491,   492,   493,   494,  1112,
     496,     0,   497,   498,   499,   500,   501,   502,   503,   504,
     505,     0,     0,   506,     0,     0,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,   517,   518,   519,   520,
     521,   522,   523,   524,   525,   526,   527,     0,     0,     0,
       0,     0,     0,     0,  1451,  1452,     0,     0,     0,     0,
       0,  1117,     0,  1118,     0,     0,     0,  1119,     0,     0,
    1120,  1121,  1122,   118,  1073,   836,  1074,  1075,  1076,  1077,
    1078,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   119,   120,   121,   122,   123,   124,   125,   126,
       0,   127,   128,   129,     0,     0,     0,     0,     0,  1079,
       0,     0,   130,   131,   132,     0,   133,   134,   135,   136,
     137,   138,   139, -2116,  1080,   142,  1081,  1082,     0,   145,
     146,   147,   148,   149,   150,  1083,   805,   151,   152,   153,
     154,  1084,  1085,   157,     0,   158,   159,   160,   161,   806,
       0,   807,     0,  1086,   165,   166,   167,   168,   169,   170,
     171,   172,   173,     0,   174,   175,   176,   177,   178,   179,
       0,   180,   181,   182,  3605,   184,   185,   186,   187,   188,
     189,   190,  1087,   192,   193,  1088,   195,  1089,   196,     0,
     197,   198,   199,   200,   201,   202,     0,     0,   203,   204,
     205,   206,     0,     0,   207,   208,  1090,   210,   211,   212,
       0,   213,   214,   215,     0,   216,   217,   218,     0,   219,
     220,   221,   222,  1091,   224,   225,   226,   227,   228,   229,
     808,  1092,   231,     0,     0,   232,   233,  1093,   235,     0,
     236,     0,   237,   238,     0,   239,   240,   241,   242, -2116,
     244,     0,     0,   245,     0,  1094,  1095,   248,   249,     0,
     250,   251,   252,   253,   254,   255,   256, -2116,   258,   259,
     260,   261,     0,   262,   263,   264,   265,   266,   267,   268,
       0,   269,   270,   271,   272,   273,   274,   275,   276,  1096,
    1097,     0,  1098,     0,   280,     0,     0,   283,   284,   285,
     286,   287,   288,   289,   290,     0,     0,   291,   292,   293,
   -2116,     0,   295,     0,     0,   296,   297,   298,   299,   300,
     301,   302,  1099,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,  1100,   326,  1101,   328,   329,   330,
     331,   332,     0,   333,   334,     0,   336,  1103,   810,   338,
    1104,   340,   341,   342,     0,   343,   344,     0,     0,  1105,
     346,   347,     0,     0,   348,   349,   350,   351,   352,   353,
     354,   812,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,     0,     0,     0,     0,   368,   369,
     813,   371,   372,   373,   374,     0,   375,   376,   377,     0,
     378,   379,   380,   381,   382,   383,     0,   384,   385,   386,
     387,   388,  1106,   390,   391,   392,   393,     0,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,     0,   407,   408,   409,   410,   411,   412,  1107,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,     0,     0,   427,   428,   429,   430,   431,   432,
     433,   434,   435,     0, -2116,   437,   438,  1108,   440,     0,
     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
     451,   452,   453,   454,   816,     0,     0,   456,   457,     0,
     458,   459,   460,     0,   461,   462,   463,   464,   465,     0,
     466,  1109,  1110,     0,     0,   469,   470,   817,   472,   818,
    1111,   474,   475,   819,   477,   478,  3606,   480,   481,     0,
       0,   482,   483,   484,     0,   485,   486,   487,   488,     0,
     489,   490,   491,   492,   493,   494,  1112,   496,     0,   497,
     498,   499,   500,   501,   502,   503,   504,   505,     0,     0,
     506,     0,     0,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   518,   519,   520,   521,   522,   523,
     524,   525,   526,   527, -2116,     0,     0,     0,     0,     0,
       0,  1114,  1115,  1116,     0,     0,     0,     0,  1117,     0,
    1118,     0,     0,     0,  1119,     0,     0,  1120,  1121,  1122,
     118,  1073,   836,  1074,  1075,     0,  1077,  1078,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   119,
     120,   121,   122,   123,   124,   125,   126,     0,   127,   128,
     129,     0,     0,     0,     0,     0,  1079,     0,     0,   130,
     131,   132,     0,   133,   134,   135,   136,   137,   138,   139,
     140,  1080,   142,  1081,  1082,     0,   145,   146,   147,   148,
     149,   150,  1083,   805,   151,   152,   153,   154,  1084,  1085,
     157,     0,   158,   159,   160,   161,   806,     0,   807,     0,
     164,   165,   166,   167,   168,   169,   170,   171,   172,   173,
       0,   174,   175,   176,   177,   178,   179,     0,   180,   181,
     182,   183,   184,   185,   186,   187,   188,   189,   190,  1087,
     192,   193,  1088,   195,     0,   196,     0,   197,   198,   199,
     200,   201,   202,     0,     0,   203,   204,   205,   206,     0,
       0,   207,   208,  1090,   210,   211,   212,     0,   213,   214,
     215,     0,   216,   217,   218,     0,   219,   220,   221,   222,
    1091,   224,   225,   226,   227,   228,   229,   808,  1092,   231,
       0,     0,   232,   233,  1093,   235,     0,   236,     0,   237,
     238,     0,   239,   240,   241,   242,   243,   244,     0,     0,
     245,     0,  1094,  1095,   248,   249,     0,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,     0,
     262,   263,   264,   265,   266,   267,   268,     0,   269,   270,
     271,   272,   273,   274,   275,   276,  1096,  1097,     0,  1098,
       0,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,     0,     0,   291,   292,   293,   294,     0,   295,
       0,     0,   296,   297,   298,   299,   300,   301,   302,  1099,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,  1100,   326,  1101,   328,   329,   330,   331,   332,     0,
     333,   334,   335,   336,  1103,   810,   338,  1104,   340,   341,
     342,     0,   343,   344,     0,     0,   345,   346,   347,     0,
       0,   348,   349,   350,   351,   352,   353,   354,   812,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,     0,     0,     0,     0,   368,   369,   813,   371,   372,
     373,   374,     0,   375,   376,   377,     0,   378,   379,   380,
     381,   382,   383,     0,   384,   385,   386,   387,   388,  1106,
     390,   391,   392,   393,     0,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,     0,   407,
     408,   409,   410,   411,   412,  2234,  2235,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,     0,
       0,   427,   428,   429,   430,   431,   432,   433,   434,   435,
       0,   436,   437,   438,  1108,   440,     0,   441,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,   816,     0,     0,   456,   457,     0,   458,   459,   460,
       0,   461,   462,   463,   464,   465,     0,   466,  1109,  1110,
       0,     0,   469,   470,   817,   472,   818,  1111,   474,   475,
     819,   477,   478,   479,   480,   481,     0,     0,   482,   483,
     484,     0,   485,   486,   487,   488,     0,   489,   490,   491,
     492,   493,   494,  1112,   496,     0,   497,   498,   499,   500,
     501,   502,   503,   504,   505,     0,     0,   506,     0,     0,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   518,   519,   520,   521,   522,   523,   524,   525,   526,
     527,     0,     0,     0,     0,     0,     0,     0,  2236,  2237,
       0,     0,     0,     0,     0,  1117,     0,  1118,     0,     0,
       0,  1119,     0,     0,  1120,  1121,  1122,   118,  1073,   836,
    1074,  1075,  1076,  1077,  1078,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   119,   120,   121,   122,
     123,   124,   125,   126,     0,   127,   128,   129,     0,     0,
       0,     0,     0,  1079,     0,     0,   130,   131,   132,     0,
     133,   134,   135,   136,   137,   138,   139,   140,  1080,   142,
    1081,  1082,     0,   145,   146,   147,   148,   149,   150,  1083,
     805,   151,   152,   153,   154,  1084,  1085,   157,     0,   158,
     159,   160,   161,   806,     0,   807,     0,   164,   165,   166,
     167,   168,   169,   170,   171,   172,   173,     0,   174,   175,
     176,   177,   178,   179,     0,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,  1087,   192,   193,  1088,
     195,     0,   196,     0,   197,   198,   199,   200,   201,   202,
       0,     0,   203,   204,   205,   206,     0,     0,   207,   208,
    1090,   210,   211,   212,     0,   213,   214,   215,     0,   216,
     217,   218,     0,   219,   220,   221,   222,  1091,   224,   225,
     226,   227,   228,   229,   808,  1092,   231,     0,     0,   232,
     233,  1093,   235,     0,   236,     0,   237,   238,     0,   239,
     240,   241,   242,   243,   244,     0,     0,   245,     0,  1094,
    1095,   248,   249,     0,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,     0,   262,   263,   264,
     265,   266,   267,   268,     0,   269,   270,   271,   272,   273,
     274,   275,   276,  1096,  1097,     0,  1098,     0,   280,     0,
     282,   283,   284,   285,   286,   287,   288,   289,   290,     0,
       0,   291,   292,   293,   294,     0,   295,     0,     0,   296,
     297,   298,   299,   300,   301,   302,  1099,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,  1100,   326,
    1101,   328,   329,   330,   331,   332,     0,   333,   334,   335,
     336,  1103,   810,   338,  1104,   340,   341,   342,     0,   343,
     344,     0,     0,  1105,   346,   347,     0,     0,   348,   349,
     350,   351,   352,   353,   354,   812,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,     0,     0,
       0,     0,   368,   369,   813,   371,   372,   373,   374,     0,
     375,   376,   377,     0,   378,   379,   380,   381,   382,   383,
       0,   384,   385,   386,   387,   388,  1106,   390,   391,   392,
     393,     0,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,     0,   407,   408,   409,   410,
     411,   412,  1107,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,     0,     0,   427,   428,
     429,   430,   431,   432,   433,   434,   435,     0,   436,   437,
     438,  1108,   440,     0,   441,   442,   443,   444,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   816,     0,
       0,   456,   457,     0,   458,   459,   460,     0,   461,   462,
     463,   464,   465,     0,   466,  1109,  1110,     0,     0,   469,
     470,   817,   472,   818,  1111,   474,   475,   819,   477,   478,
     479,   480,   481,     0,     0,   482,   483,   484,     0,   485,
     486,   487,   488,     0,   489,   490,   491,   492,   493,   494,
    1112,   496,     0,   497,   498,   499,   500,   501,   502,   503,
     504,   505,     0,     0,   506,     0,     0,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   518,   519,
     520,   521,   522,   523,   524,   525,   526,   527,     0,     0,
       0,     0,     0,     0,     0,  1451,  1452,     0,     0,     0,
       0,     0,  1117,     0,  1118,     0,     0,     0,  1119,     0,
       0,  1120,  1121,  1122,   118,  1073,   836,  1074,  1075,     0,
    1077,  1078,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   119,   120,   121,   122,   123,   124,   125,
     126,     0,   127,   128,   129,     0,     0,     0,     0,     0,
    1079,     0,     0,   130,   131,   132,     0,   133,   134,   135,
     136,   137,   138,   139,   140,  1080,   142,  1081,  1082,     0,
     145,   146,   147,   148,   149,   150,  1083,   805,   151,   152,
     153,   154,  1084,  1085,   157,     0,   158,   159,   160,   161,
     806,     0,   807,     0,   164,   165,   166,   167,   168,   169,
     170,   171,   172,   173,     0,   174,   175,   176,   177,   178,
     179,     0,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,  1087,   192,   193,  1088,   195,     0,   196,
       0,   197,   198,   199,   200,   201,   202,     0,     0,   203,
     204,   205,   206,     0,     0,   207,   208,  1090,   210,   211,
     212,     0,   213,   214,   215,     0,   216,   217,   218,     0,
     219,   220,   221,   222,  1091,   224,   225,   226,   227,   228,
     229,   808,  1092,   231,     0,     0,   232,   233,  1093,   235,
       0,   236,     0,   237,   238,     0,   239,   240,   241,   242,
     243,   244,     0,     0,   245,  3129,  1094,  1095,   248,   249,
       0,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,  -812,   262,   263,   264,   265,   266,   267,
     268,     0,   269,   270,   271,   272,   273,   274,   275,   276,
    1096,  1097,     0,  1098,     0,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,     0,     0,   291,   292,
     293,   294,     0,   295,     0,     0,   296,   297,   298,   299,
     300,   301,   302,  1099,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,  1100,   326,  1101,   328,   329,
     330,   331,   332,     0,   333,   334,   335,   336,  1103,   810,
     338,  1104,   340,   341,   342,     0,   343,   344,     0,     0,
     345,   346,   347,     0,     0,   348,   349,   350,   351,   352,
     353,   354,   812,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,     0,     0,     0,     0,   368,
     369,   813,   371,   372,   373,   374,     0,   375,   376,   377,
       0,   378,   379,   380,   381,   382,   383,     0,   384,   385,
     386,   387,   388,  1106,   390,   391,   392,   393,     0,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,     0,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,     0,     0,   427,   428,   429,   430,   431,
     432,   433,   434,   435,     0,   436,   437,   438,  1108,   440,
       0,   441,   442,   443,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   453,   454,   816,     0,     0,   456,   457,
       0,   458,   459,   460,     0,   461,   462,   463,   464,   465,
       0,   466,  1109,  1110,     0,     0,   469,   470,   817,   472,
     818,  1111,   474,   475,   819,   477,   478,   479,   480,   481,
       0,     0,   482,   483,   484,     0,   485,   486,   487,   488,
       0,   489,   490,   491,   492,   493,   494,  1112,   496,     0,
     497,   498,   499,   500,   501,   502,   503,   504,   505,     0,
       0,   506,     0,     0,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,   518,   519,   520,   521,   522,
     523,   524,   525,   526,   527,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1117,
       0,  2811,     0,     0,     0,  1119,     0,     0,  1120,  1121,
    1122,   118,  1073,   836,  1074,  1075,     0,  1077,  1078,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     119,   120,   121,   122,   123,   124,   125,   126,     0,   127,
     128,   129,     0,     0,     0,     0,     0,  1079,     0,     0,
     130,   131,   132,     0,   133,   134,   135,   136,   137,   138,
     139,   140,  1080,   142,  1081,  1082,     0,   145,   146,   147,
     148,   149,   150,  1083,   805,   151,   152,   153,   154,  1084,
    1085,   157,     0,   158,   159,   160,   161,   806,     0,   807,
       0,   164,   165,   166,   167,   168,   169,   170,   171,   172,
     173,     0,   174,   175,   176,   177,   178,   179,     0,   180,
     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
    1087,   192,   193,  1088,   195,     0,   196,     0,   197,   198,
     199,   200,   201,   202,     0,     0,   203,   204,   205,   206,
       0,     0,   207,   208,  1090,   210,   211,   212,     0,   213,
     214,   215,     0,   216,   217,   218,     0,   219,   220,   221,
     222,  1091,   224,   225,   226,   227,   228,   229,   808,  1092,
     231,     0,     0,   232,   233,  1093,   235,     0,   236,     0,
     237,   238,     0,   239,   240,   241,   242,   243,   244,     0,
       0,   245,     0,  1094,  1095,   248,   249,     0,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
       0,   262,   263,   264,   265,   266,   267,   268,     0,   269,
     270,   271,   272,   273,   274,   275,   276,  1096,  1097,     0,
    1098,     0,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,     0,     0,   291,   292,   293,   294,     0,
     295,     0,     0,   296,   297,   298,   299,   300,   301,   302,
    1099,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,  1100,   326,  1101,   328,   329,   330,   331,   332,
       0,   333,   334,   335,   336,  1103,   810,   338,  1104,   340,
     341,   342,     0,   343,   344,     0,     0,   345,   346,   347,
       0,     0,   348,   349,   350,   351,   352,   353,   354,   812,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,     0,     0,     0,     0,   368,   369,   813,   371,
     372,   373,   374,     0,   375,   376,   377,     0,   378,   379,
     380,   381,   382,   383,     0,   384,   385,   386,   387,   388,
    1106,   390,   391,   392,   393,     0,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,     0,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
       0,     0,   427,   428,   429,   430,   431,   432,   433,   434,
     435,     0,   436,   437,   438,  1108,   440,     0,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
     453,   454,   816,     0,     0,   456,   457,     0,   458,   459,
     460,     0,   461,   462,   463,   464,   465,     0,   466,  1109,
    1110,     0,     0,   469,   470,   817,   472,   818,  1111,   474,
     475,   819,   477,   478,   479,   480,   481,     0,     0,   482,
     483,   484,     0,   485,   486,   487,   488,     0,   489,   490,
     491,   492,   493,   494,  1112,   496,     0,   497,   498,   499,
     500,   501,   502,   503,   504,   505,     0,     0,   506,     0,
       0,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   518,   519,   520,   521,   522,   523,   524,   525,
     526,   527,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1117,     0,  2811,     0,
       0,     0,  1119,     0,     0,  1120,  1121,  1122,   118,  1073,
     836,  1074,  1075,     0,  1077,  1078,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   119,   120,   121,
     122,   123,   124,   125,   126,     0,   127,   128,   129,     0,
       0,     0,     0,     0,  1079,     0,     0,   130,   131,   132,
       0,   133,   134,   135,   136,   137,   138,   139,   140,  1080,
     142,  1081,  1082,     0,   145,   146,   147,   148,   149,   150,
    1083,   805,   151,   152,   153,   154,  1084,  1085,   157,     0,
     158,   159,   160,   161,   806,     0,   807,     0,   164,   165,
     166,   167,   168,   169,   170,   171,   172,   173,     0,   174,
     175,   176,   177,   178,   179,     0,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,  1087,   192,   193,
    1088,   195,     0,   196,     0,   197,   198,   199,   200,   201,
     202,     0,     0,   203,   204,   205,   206,     0,     0,   207,
     208,  1090,   210,   211,   212,     0,   213,   214,   215,     0,
     216,   217,   218,     0,   219,   220,   221,   222,  1091,   224,
     225,   226,   227,   228,   229,   808,  1092,   231,     0,     0,
     232,   233,  1093,   235,     0,   236,     0,   237,   238,     0,
     239,   240,   241,   242,   243,   244,     0,     0,   245,     0,
    1094,  1095,   248,   249,     0,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,     0,   262,   263,
     264,   265,   266,   267,   268,     0,   269,   270,   271,   272,
     273,   274,   275,   276,  1096,  1097,     0,  1098,     0,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
       0,     0,   291,   292,   293,   294,     0,   295,     0,     0,
     296,   297,   298,   299,   300,   301,   302,  1099,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,  1100,
     326,  1101,   328,   329,   330,   331,   332,     0,   333,   334,
     335,   336,  1103,   810,   338,  1104,   340,   341,   342,     0,
     343,   344,     0,     0,   345,   346,   347,     0,     0,   348,
     349,   350,   351,   352,   353,   354,   812,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,     0,
       0,     0,     0,   368,   369,   813,   371,   372,   373,   374,
       0,   375,   376,   377,     0,   378,   379,   380,   381,   382,
     383,     0,   384,   385,   386,   387,   388,  1106,   390,   391,
     392,   393,     0,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,     0,   407,   408,   409,
     410,   411,   412,  1107,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,     0,     0,   427,
     428,   429,   430,   431,   432,   433,   434,   435,     0,   436,
     437,   438,  1108,   440,     0,   441,   442,   443,   444,   445,
     446,   447,   448,   449,   450,   451,   452,   453,   454,   816,
       0,     0,   456,   457,     0,   458,   459,   460,     0,   461,
     462,   463,   464,   465,     0,   466,  1109,  1110,     0,     0,
     469,   470,   817,   472,   818,  1111,   474,   475,   819,   477,
     478,   479,   480,   481,     0,     0,   482,   483,   484,     0,
     485,   486,   487,   488,     0,   489,   490,   491,   492,   493,
     494,  1112,   496,     0,   497,   498,   499,   500,   501,   502,
     503,   504,   505,     0,     0,   506,     0,     0,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,   518,
     519,   520,   521,   522,   523,   524,   525,   526,   527,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1117,     0,  1118,     0,     0,     0,  1119,
       0,     0,  1120,  1121,  1122,   118,  1073,   836,  1074,  1075,
    1076,  1077,  1078,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   119,   120,   121,   122,   123,   124,
     125,   126,     0,   127,   128,   129,     0,     0,     0,     0,
       0,  1079,     0,     0,   130,   131,   132,     0,   133,   134,
     135,   136,   137,   138,   139,     0,  1080,   142,  1081,  1082,
       0,   145,   146,   147,   148,   149,   150,  1083,   805,   151,
     152,   153,   154,  1084,  1085,   157,     0,   158,   159,   160,
     161,   806,     0,   807,     0,  1086,   165,   166,   167,   168,
     169,   170,   171,   172,   173,     0,   174,   175,   176,   177,
     178,   179,     0,   180,   181,   182,   183,   184,   185,   186,
     187,   188,   189,   190,  1087,   192,   193,  1088,   195,  1089,
     196,     0,   197,   198,   199,   200,   201,   202,     0,     0,
     203,   204,   205,   206,     0,     0,   207,   208,  1090,   210,
     211,   212,     0,   213,   214,   215,     0,   216,     0,   218,
       0,   219,   220,   221,   222,  1091,   224,   225,   226,   227,
     228,   229,   808,  1092,   231,     0,     0,   232,   233,  1093,
     235,     0,   236,     0,   237,   238,     0,   239,   240,   241,
     242,     0,   244,     0,     0,   245,     0,  1094,  1095,   248,
     249,     0,   250,   251,   252,   253,   254,   255,   256,     0,
     258,   259,   260,   261,     0,   262,   263,   264,   265,   266,
     267,   268,     0,   269,   270,   271,   272,   273,   274,   275,
     276,  1096,  1097,     0,  1098,     0,   280,     0,     0,   283,
     284,   285,   286,   287,   288,   289,   290,     0,     0,   291,
     292,   293,     0,     0,   295,     0,     0,   296,   297,   298,
     299,   300,   301,   302,  1099,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,  1100,   326,  1101,   328,
     329,   330,   331,   332,     0,   333,   334,     0,   336,  1103,
     810,   338,  1104,   340,   341,   342,     0,   343,   344,     0,
       0,  1105,   346,   347,     0,     0,   348,   349,   350,   351,
     352,   353,   354,   812,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,     0,     0,     0,     0,
     368,   369,   813,   371,   372,   373,   374,     0,   375,   376,
     377,     0,   378,   379,   380,   381,   382,   383,     0,   384,
     385,   386,   387,   388,  1106,   390,   391,   392,   393,     0,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,     0,   407,   408,   409,   410,   411,   412,
    1107,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,     0,     0,   427,   428,   429,   430,
     431,   432,   433,   434,   435,     0,     0,   437,   438,  1108,
     440,     0,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,   816,     0,     0,   456,
     457,     0,   458,   459,   460,     0,   461,   462,   463,   464,
     465,     0,   466,  1109,  1110,     0,     0,   469,   470,   817,
     472,   818,  1111,   474,   475,   819,   477,   478,   479,   480,
     481,     0,     0,   482,   483,   484,     0,   485,   486,   487,
     488,     0,   489,   490,   491,   492,   493,   494,  1112,   496,
       0,   497,   498,   499,   500,   501,   502,   503,   504,   505,
       0,     0,   506,     0,     0,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520,   521,
     522,   523,   524,   525,   526,   527,     0,     0,     0,     0,
       0,     0,     0,  1114,  1115,  1116,   118,     0,     0,     0,
    1117,     0,  1118,  1078,     0,     0,  1119,     0,     0,  1120,
    1121,  1122,     0,     0,     0,   119,   120,   121,   122,   123,
     124,   125,   126,     0,   127,   128,   129,     0,     0,     0,
       0,     0,  1079,     0,     0,   130,   131,   132,     0,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
     144,     0,   145,   146,   147,   148,   149,   150,  1083,   805,
     151,   152,   153,   154,   155,   156,   157,     0,   158,   159,
     160,   161,   806,     0,   807,     0,   164,   165,   166,   167,
     168,   169,   170,   171,   172,   173,     0,   174,   175,   176,
     177,   178,   179,     0,   180,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
       0,   196,     0,   197,   198,   199,   200,   201,   202,     0,
       0,   203,   204,   205,   206,     0,     0,   207,   208,   209,
     210,   211,   212,     0,   213,   214,   215,     0,   216,   217,
     218,     0,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   808,     0,   231,     0,     0,   232,   233,
     234,   235,     0,   236,     0,   237,   238,     0,   239,   240,
     241,   242,   243,   244,     0,     0,   245,     0,   246,   247,
     248,   249,     0,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,     0,   262,   263,   264,   265,
     266,   267,   268,     0,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,     0,   279,     0,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,     0,     0,
     291,   292,   293,   294,     0,   295,     0,     0,   296,   297,
     298,   299,   300,   301,   302,  1099,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,     0,   333,   334,   335,   336,
       0,   810,   338,   339,   340,   341,   342,     0,   343,   344,
       0,     0,   345,   346,   347,     0,     0,   348,   349,   350,
     351,   352,   353,   354,   812,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,     0,     0,     0,
       0,   368,   369,   813,   371,   372,   373,   374,     0,   375,
     376,   377,     0,   378,   379,   380,   381,   382,   383,     0,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
       0,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,     0,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,     0,     0,   427,   428,   429,
     430,   431,   432,   433,   434,   435,     0,   436,   437,   438,
     439,   440,     0,   441,   442,   443,   444,   445,   446,   447,
     448,   449,   450,   451,   452,   453,   454,   816,     0,     0,
     456,   457,     0,   458,   459,   460,     0,   461,   462,   463,
     464,   465,     0,   466,   467,   468,     0,     0,   469,   470,
     817,   472,   818,     0,   474,   475,   819,   477,   478,   479,
     480,   481,     0,     0,   482,   483,   484,     0,   485,   486,
     487,   488,     0,   489,   490,   491,   492,   493,   494,   495,
     496,     0,   497,   498,   499,   500,   501,   502,   503,   504,
     505,     0,     0,   506,     0,     0,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,   517,   518,   519,   520,
     521,   522,   523,   524,   525,   526,   527,     0,     0,     0,
       0,     0,     0,     0,   995,  1380,   836,     0,     0,     0,
    1077,  1117,     0,  2148,     0,     0,     0,  1119,     0,     0,
    1120,  1121,  1122,   119,   120,   121,   122,   123,   124,   125,
     126,     0,   127,   128,   129,     0,     0,     0,   572,     0,
       0,     0,     0,   577,   131,   132,     0,   133,   134,   135,
     579,   137,   138,   139,   580,   581,   582,   583,   584,     0,
     145,   146,   147,   148,   149,   150,     0,     0,   151,   152,
     153,   154,   588,   589,   157,     0,   158,   159,   160,   161,
     591,     0,   593,     0,   595,   165,   166,   167,   168,   169,
     596,   171,   172,   173,     0,   174,   175,   176,   177,   178,
     179,     0,   599,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   601,   192,   193,   602,   195,     0,   196,
       0,   197,   198,   199,   200,   201,   202,     0,     0,   203,
     204,   205,   206,     0,     0,   207,   208,   209,   210,   211,
     212,     0,   213,   214,   215,     0,   216,   217,   218,     0,
     219,   220,   221,   222,   612,   224,   225,   226,   227,   228,
     229,   613,  1381,   231,     0,     0,   232,   233,   617,   235,
       0,   236,     0,   237,   620,     0,   622,   240,   241,   623,
     624,   244,     0,     0,   245,     0,   628,   629,   248,   249,
       0,   250,   251,   252,   253,   254,   255,   256,   631,   258,
     259,   260,   261,     0,   262,   263,   264,   265,   266,   267,
     268,     0,   269,   634,   635,   272,   273,   274,   275,   276,
     636,   637,     0,   639,     0,   280,   641,   642,   283,   643,
     285,   286,   287,   288,   289,   290,     0,     0,   291,   646,
     293,   647,     0,   295,     0,     0,   296,   297,   298,   299,
     300,   301,   302,  2414,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   652,   653,   654,   328,   329,
     330,   331,   655,     0,   333,   334,   657,   336,     0,   659,
     338,   660,   340,   341,   342,     0,   343,   344,  1382,     0,
     345,   346,   347,     0,     0,   348,   349,   666,   667,   352,
     353,   668,   669,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,     0,     0,     0,     0,   368,
     369,   674,   675,   372,   373,   676,     0,   375,   376,   377,
       0,   378,   379,   380,   381,   382,   383,     0,   384,   385,
     386,   387,   388,   680,   390,   391,   392,   393,     0,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,     0,   407,   408,   683,   410,   411,   412,   684,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,     0,   686,   427,   428,   429,   430,   431,
     432,   687,   434,   435,     0,   689,   437,   438,   690,   440,
       0,   441,   442,   443,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   692,   454,   693,     0,     0,   456,   457,
       0,   458,   697,   460,     0,   461,   462,   463,   464,   465,
       0,   466,   700,   701,     0,     0,   469,   470,   704,   472,
     705,  1383,   474,   475,   707,   477,   478,   479,   480,   481,
       0,     0,   482,   483,   484,     0,   485,   486,   487,   488,
       0,   489,   490,   491,   492,   493,   712,   713,   496,     0,
     497,   715,   499,   500,   501,   502,   503,   504,   505,     0,
       0,   506,     0,     0,   507,   508,   509,   510,   511,   512,
     720,   721,   722,   723,   724,   725,   726,   727,   728,   729,
     730,   524,   525,   526,   527,     0,     0,   535,     0,     0,
       0,     0,  1384,  1385,  2415,     0,     0,     0,     0,  2416,
       0,  2417,     0,     0,     0,  1119,   119,   120,   121,   122,
     123,   124,   125,   126,     0,   127,   128,   129,     0,     0,
       0,     0,     0,     0,  1031,     0,     0,   131,   132,     0,
     133,   134,   135,     0,   137,   138,   139,   140,   141,     0,
     143,   144,     0,   145,   146,   147,   148,   149,   150,     0,
       0,   151,   152,   153,   154,   155,   156,   157,     0,   158,
     159,   160,   161,   162,     0,     0,     0,   164,   165,   166,
     167,   168,   169,     0,   171,   172,   173,     0,   174,   175,
     176,   177,   178,   179,     0,     0,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,     0,   196,     0,   197,   198,   199,   200,   201,   202,
       0,     0,   203,   204,   205,   206,     0,     0,   207,   208,
     209,   210,   211,   212,     0,   213,   214,   215,     0,   216,
     217,   218,  -617,   219,   220,   221,   222,   223,   224,   225,
     226,   227,   228,   229,   230,     0,   231,     0,  -617,   232,
     233,   234,   235,  -617,   236,     0,   237,     0,     0,     0,
     240,   241,   536,     0,   244,     0,     0,   245,     0,   246,
     247,   248,   249,     0,   250,   251,   252,   253,   254,   255,
     256,     0,   258,   259,   260,   261,     0,   262,   263,   264,
     265,   266,   267,   268,     0,   269,     0,   271,   272,   273,
     274,   275,   276,   277,   278,  -617,   279,     0,   280,     0,
       0,   283,     0,   285,   286,   287,   288,   289,   290,     0,
       0,   291,     0,   293,     0,  -617,   295,     0,     0,   296,
     297,   298,   299,   300,   301,   302,   537,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     327,   328,   329,   330,   331,   332,     0,   333,   334,     0,
     336,     0,   337,   338,   339,   340,   341,   342,  -617,   343,
     344,     0,     0,   345,   346,   347,     0,  -617,   348,   349,
     350,     0,   352,   353,     0,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,     0,     0,
       0,     0,   368,   369,   370,     0,   372,   373,   374,     0,
     375,   376,   377,     0,   378,   379,   380,   381,   382,   383,
       0,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,     0,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,     0,   407,   408,     0,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,     0,     0,   427,   428,
     429,   430,   431,   432,   433,   434,   435,     0,     0,   437,
     438,   439,   440,     0,   441,   442,   443,   444,   445,   446,
     447,   448,   449,   450,   451,   452,   538,   454,   455,     0,
       0,   456,   457,     0,   458,     0,   460,     0,   461,   462,
     463,   464,   465,     0,   466,   467,   468,     0,     0,   469,
     470,   471,   472,   473,     0,   474,   475,   476,   477,   478,
     479,   480,   481,  -617,     0,   482,   483,   484,     0,   485,
     486,   487,   488,     0,   489,   490,   491,   492,   493,   494,
     495,   496,     0,   497,     0,   499,   500,   501,   502,   503,
     504,   505,     0,     0,   506,     0,     0,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   518,   519,
     520,   521,   522,   523,   524,   525,   526,   527,   535,     0,
     561,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1193,     0,   119,   120,   121,
     122,   123,   124,   125,   126,     0,   127,   128,   129,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   131,   132,
       0,   133,   134,   135,     0,   137,   138,   139,   140,   141,
       0,   143,   144,     0,   145,   146,   147,   148,   149,   150,
       0,     0,   151,   152,   153,   154,   155,   156,   157,     0,
     158,   159,   160,   161,   162,     0,     0,     0,   164,   165,
     166,   167,   168,   169,     0,   171,   172,   173,     0,   174,
     175,   176,   177,   178,   179,     0,     0,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,     0,   196,     0,   197,   198,   199,   200,   201,
     202,     0,     0,   203,   204,   205,   206,     0,     0,   207,
     208,   209,   210,   211,   212,     0,   213,   214,   215,     0,
     216,   217,   218,     0,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,     0,   231,     0,     0,
     232,   233,   234,   235,     0,   236,     0,   237,     0,     0,
       0,   240,   241,   536,     0,   244,     0,     0,   245,     0,
     246,   247,   248,   249,     0,   250,   251,   252,   253,   254,
     255,   256,     0,   258,   259,   260,   261,     0,   262,   263,
     264,   265,   266,   267,   268,     0,   269,     0,   271,   272,
     273,   274,   275,   276,   277,   278,     0,   279,     0,   280,
       0,     0,   283,     0,   285,   286,   287,   288,   289,   290,
       0,     0,   291,     0,   293,     0,     0,   295,     0,     0,
     296,   297,   298,   299,   300,   301,   302,   537,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
       0,   327,   328,   329,   330,   331,   332,     0,   333,   334,
       0,   336,     0,   337,   338,   339,   340,   341,   342,     0,
     343,   344,     0,     0,   345,   346,   347,     0,     0,   348,
     349,   350,     0,   352,   353,     0,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,     0,
       0,     0,     0,   368,   369,   370,     0,   372,   373,   374,
       0,   375,   376,   377,     0,   378,   379,   380,   381,   382,
     383,     0,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,     0,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,     0,   407,   408,     0,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,     0,     0,   427,
     428,   429,   430,   431,   432,   433,   434,   435,     0,     0,
     437,   438,   439,   440,     0,   441,   442,   443,   444,   445,
     446,   447,   448,   449,   450,   451,   452,   538,   454,   455,
       0,     0,   456,   457,     0,   458,     0,   460,     0,   461,
     462,   463,   464,   465,     0,   466,   467,   468,     0,     0,
     469,   470,   471,   472,   473,     0,   474,   475,   476,   477,
     478,   479,   480,   481,     0,     0,   482,   483,   484,     0,
     485,   486,   487,   488,     0,   489,   490,   491,   492,   493,
     494,   495,   496,     0,   497,     0,   499,   500,   501,   502,
     503,   504,   505,     0,     0,   506,     0,     0,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,   518,
     519,   520,   521,   522,   523,   524,   525,   526,   527,   118,
       0,   561,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2504,  3320,     0,   119,   120,
     121,   122,   123,   124,   125,   126,     0,   127,   128,   129,
       0,     0,     0,     0,     0,     0,     0,     0,   130,   131,
     132,     0,   133,   134,   135,   136,   137,   138,   139,   140,
     141,   142,   143,   144,     0,   145,   146,   147,   148,   149,
     150,     0,   805,   151,   152,   153,   154,   155,   156,   157,
       0,   158,   159,   160,   161,   806,     0,   807,     0,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,     0,
     174,   175,   176,   177,   178,   179,     0,   180,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,     0,   196,     0,   197,   198,   199,   200,
     201,   202,    14,    15,   203,   204,   205,   206,     0,     0,
     207,   208,   209,   210,   211,   212,     0,   213,   214,   215,
       0,   216,   217,   218,     0,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   808,     0,   231,     0,
       0,   232,   233,   234,   235,     0,   236,     0,   237,   238,
      23,   239,   240,   241,   242,   243,   244,     0,     0,   245,
       0,   246,   247,   248,   249,     0,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,     0,   262,
     263,   264,   265,   266,   267,   268,     0,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,     0,   279,     0,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   809,     0,   291,   292,   293,   294,     0,   295,     0,
       0,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,     0,   333,
     334,   335,   336,     0,   810,   338,   339,   340,   341,   342,
       0,   343,   344,     0,   811,   345,   346,   347,     0,     0,
     348,   349,   350,   351,   352,   353,   354,   812,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
      26,    27,    28,     0,   368,   369,   813,   371,   372,   373,
     374,   814,   375,   376,   377,     0,   378,   379,   380,   381,
     382,   383,     0,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,     0,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,     0,   407,   408,
     409,   410,   411,   412,   413,   815,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,    33,     0,
     427,   428,   429,   430,   431,   432,   433,   434,   435,    35,
     436,   437,   438,   439,   440,     0,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     816,    37,     0,   456,   457,    38,   458,   459,   460,     0,
     461,   462,   463,   464,   465,     0,   466,   467,   468,     0,
       0,   469,   470,   817,   472,   818,     0,   474,   475,   819,
     477,   478,   479,   480,   481,     0,     0,   482,   483,   484,
      40,   485,   486,   487,   488,     0,   489,   490,   491,   492,
     493,   820,   495,   496,     0,   497,   498,   499,   500,   501,
     502,   503,   504,   505,     0,     0,   506,     0,    44,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,   519,   520,   521,   522,   523,   524,   525,   526,   527,
     995,     0,    45,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   821,     0,     0,   119,
     120,   121,   122,   123,   124,   125,   126,     0,   127,   128,
     129,     3,     4,     0,   572,     0,     0,     0,     0,   577,
     131,   132,     0,   133,   134,   135,   579,   137,   138,   139,
     580,   581,   582,   583,   584,     0,   145,   146,   147,   148,
     149,   150,     0,     0,   151,   152,   153,   154,   588,   589,
     157,     0,   158,   159,   160,   161,   591,     0,   593,     0,
     595,   165,   166,   167,   168,   169,   596,   171,   172,   173,
       0,   174,   175,   176,   177,   178,   179,     0,   599,   181,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   601,
     192,   193,   602,   195,     0,   196,     0,   197,   198,   199,
     200,   201,   202,    14,    15,   203,   204,   205,   206,     0,
       0,   207,   208,   209,   210,   211,   212,     0,   213,   214,
     215,     0,   216,   217,   218,     0,   219,   220,   221,   222,
     612,   224,   225,   226,   227,   228,   229,   613,     0,   231,
       0,     0,   232,   233,   617,   235,     0,   236,     0,   237,
     620,    23,   622,   240,   241,   623,   624,   244,     0,     0,
     245,     0,   628,   629,   248,   249,     0,   250,   251,   252,
     253,   254,   255,   256,   631,   258,   259,   260,   261,     0,
     262,   263,   264,   265,   266,   267,   268,     0,   269,   634,
     635,   272,   273,   274,   275,   276,   636,   637,     0,   639,
       0,   280,   641,   642,   283,   643,   285,   286,   287,   288,
     289,   290,     0,     0,   291,   646,   293,   647,     0,   295,
       0,     0,   296,   297,   298,   299,   300,   301,   302,   651,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   652,   653,   654,   328,   329,   330,   331,   655,     0,
     333,   334,   657,   336,     0,   659,   338,   660,   340,   341,
     342,     0,   343,   344,     0,     0,   345,   346,   347,     0,
       0,   348,   349,   666,   667,   352,   353,   668,   669,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,    26,    27,    28,     0,   368,   369,   674,   675,   372,
     373,   676,     0,   375,   376,   377,     0,   378,   379,   380,
     381,   382,   383,     0,   384,   385,   386,   387,   388,   680,
     390,   391,   392,   393,     0,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,     0,   407,
     408,   683,   410,   411,   412,   684,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,    33,
     686,   427,   428,   429,   430,   431,   432,   687,   434,   435,
      35,   689,   437,   438,   690,   440,     0,   441,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   692,
     454,   693,    37,     0,   456,   457,    38,   458,   697,   460,
       0,   461,   462,   463,   464,   465,     0,   466,   700,   701,
       0,     0,   469,   470,   704,   472,   705,     0,   474,   475,
     707,   477,   478,   479,   480,   481,     0,     0,   482,   483,
     484,    40,   485,   486,   487,   488,     0,   489,   490,   491,
     492,   493,   996,   713,   496,     0,   497,   715,   499,   500,
     501,   502,   503,   504,   505,     0,     0,   506,     0,    44,
     507,   508,   509,   510,   511,   512,   720,   721,   722,   723,
     724,   725,   726,   727,   728,   729,   730,   524,   525,   526,
     527,     0,   118,    45,   561,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    46,     0,     0,
       0,   119,   120,   121,   122,   123,   124,   125,   126,     0,
     127,   128,   129,     0,     0,     0,     0,     0,     0,     0,
       0,   130,   131,   132,     0,   133,   134,   135,   136,   137,
     138,   139,   140,   141,   142,   143,   144,     0,   145,   146,
     147,   148,   149,   150,     0,   805,   151,   152,   153,   154,
     155,   156,   157,     0,   158,   159,   160,   161,   806,     0,
     807,     0,   164,   165,   166,   167,   168,   169,   170,   171,
     172,   173,     0,   174,   175,   176,   177,   178,   179,     0,
     180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,     0,   196,     0,   197,
     198,   199,   200,   201,   202,     0,     0,   203,   204,   205,
     206,     0,     0,   207,   208,   209,   210,   211,   212,     0,
     213,   214,   215,     0,   216,   217,   218,     0,   219,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   808,
       0,   231,     0,     0,   232,   233,   234,   235,     0,   236,
       0,   237,   238,     0,   239,   240,   241,   242,   243,   244,
       0,     0,   245,     0,   246,   247,   248,   249,     0,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,     0,   262,   263,   264,   265,   266,   267,   268,     0,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
       0,   279,     0,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   809,     0,   291,   292,   293,   294,
       0,   295,     0,     0,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,     0,   333,   334,   335,   336,     0,   810,   338,   339,
     340,   341,   342,     0,   343,   344,     0,   811,   345,   346,
     347,     0,     0,   348,   349,   350,   351,   352,   353,   354,
     812,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,     0,     0,     0,     0,   368,   369,   813,
     371,   372,   373,   374,   814,   375,   376,   377,     0,   378,
     379,   380,   381,   382,   383,     0,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,     0,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
       0,   407,   408,   409,   410,   411,   412,   413,   815,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,     0,     0,   427,   428,   429,   430,   431,   432,   433,
     434,   435,     0,   436,   437,   438,   439,   440,     0,   441,
     442,   443,   444,   445,   446,   447,   448,   449,   450,   451,
     452,   453,   454,   816,     0,     0,   456,   457,     0,   458,
     459,   460,     0,   461,   462,   463,   464,   465,     0,   466,
     467,   468,     0,     0,   469,   470,   817,   472,   818,     0,
     474,   475,   819,   477,   478,   479,   480,   481,     0,     0,
     482,   483,   484,     0,   485,   486,   487,   488,     0,   489,
     490,   491,   492,   493,   820,   495,   496,     0,   497,   498,
     499,   500,   501,   502,   503,   504,   505,     0,     0,   506,
       0,     0,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   118,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   821,
       0,     0,   119,   120,   121,   122,   123,   124,   125,   126,
       0,   127,   128,   129,     0,     0,     0,     0,     0,     0,
       0,     0,   130,   131,   132,     0,   133,   134,   135,   136,
     137,   138,   139,   140,   141,   142,   143,   144,     0,   145,
     146,   147,   148,   149,   150,     0,   805,   151,   152,   153,
     154,   155,   156,   157,     0,   158,   159,   160,   161,   806,
       0,   807,     0,   164,   165,   166,   167,   168,   169,   170,
     171,   172,   173,     0,   174,   175,   176,   177,   178,   179,
       0,   180,   181,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,     0,   196,     0,
     197,   198,   199,   200,   201,   202,     0,     0,   203,   204,
     205,   206,     0,     0,   207,   208,   209,   210,   211,   212,
       0,   213,   214,   215,     0,   216,   217,   218,     0,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     808,     0,   231,     0,     0,   232,   233,   234,   235,     0,
     236,     0,   237,   238,     0,   239,   240,   241,   242,   243,
     244,     0,     0,   245,     0,   246,   247,   248,   249,     0,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,     0,   262,   263,   264,   265,   266,   267,   268,
       0,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,     0,   279,     0,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,     0,     0,   291,   292,   293,
     294,     0,   295,     0,     0,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,   332,     0,   333,   334,   335,   336,     0,   810,   338,
     339,   340,   341,   342,     0,   343,   344,     0,     0,   345,
     346,   347,     0,     0,   348,   349,   350,   351,   352,   353,
     354,   812,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,     0,     0,     0,     0,   368,   369,
     813,   371,   372,   373,   374,     0,   375,   376,   377,     0,
     378,   379,   380,   381,   382,   383,     0,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,     0,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,     0,   407,   408,   409,   410,   411,   412,   413,   815,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,     0,     0,   427,   428,   429,   430,   431,   432,
     433,   434,   435,     0,   436,   437,   438,   439,   440,     0,
     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
     451,   452,   453,   454,   816,     0,     0,   456,   457,     0,
     458,   459,   460,     0,   461,   462,   463,   464,   465,     0,
     466,   467,   468,     0,     0,   469,   470,   817,   472,   818,
       0,   474,   475,   819,   477,   478,   479,   480,   481,     0,
       0,   482,   483,   484,     0,   485,   486,   487,   488,     0,
     489,   490,   491,   492,   493,   494,   495,   496,     0,   497,
     498,   499,   500,   501,   502,   503,   504,   505,     0,     0,
     506,     0,     0,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   518,   519,   520,   521,   522,   523,
     524,   525,   526,   527,   118,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      46,     0,     0,   119,   120,   121,   122,   123,   124,   125,
     126,     0,   127,   128,   129,     0,     0,     0,     0,     0,
       0,     0,     0,   130,   131,   132,     0,   133,   134,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,     0,
     145,   146,   147,   148,   149,   150,     0,   805,   151,   152,
     153,   154,   155,   156,   157,     0,   158,   159,   160,   161,
     806,     0,   807,     0,   164,   165,   166,   167,   168,   169,
     170,   171,   172,   173,     0,   174,   175,   176,   177,   178,
     179,     0,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,     0,   196,
       0,   197,   198,   199,   200,   201,   202,     0,     0,   203,
     204,   205,   206,     0,     0,   207,   208,   209,   210,   211,
     212,     0,   213,   214,   215,     0,   216,   217,   218,     0,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   808,     0,   231,     0,     0,   232,   233,   234,   235,
       0,   236,     0,   237,   238,     0,   239,   240,   241,   242,
     243,   244,     0,     0,   245,     0,   246,   247,   248,   249,
       0,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,     0,   262,   263,   264,   265,   266,   267,
     268,     0,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,     0,   279,     0,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,     0,     0,   291,   292,
     293,   294,     0,   295,     0,     0,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   332,     0,   333,   334,   335,   336,     0,   810,
     338,   339,   340,   341,   342,     0,   343,   344,     0,     0,
     345,   346,   347,     0,     0,   348,   349,   350,   351,   352,
     353,   354,   812,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,     0,     0,     0,     0,   368,
     369,   813,   371,   372,   373,   374,     0,   375,   376,   377,
       0,   378,   379,   380,   381,   382,   383,     0,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,     0,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,     0,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,     0,     0,   427,   428,   429,   430,   431,
     432,   433,   434,   435,     0,   436,   437,   438,   439,   440,
       0,   441,   442,   443,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   453,   454,   816,     0,     0,   456,   457,
       0,   458,   459,   460,     0,   461,   462,   463,   464,   465,
       0,   466,   467,   468,     0,     0,   469,   470,   817,   472,
     818,     0,   474,   475,   819,   477,   478,   479,   480,   481,
       0,     0,   482,   483,   484,     0,   485,   486,   487,   488,
       0,   489,   490,   491,   492,   493,   494,   495,   496,     0,
     497,   498,   499,   500,   501,   502,   503,   504,   505,     0,
       0,   506,     0,     0,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,   518,   519,   520,   521,   522,
     523,   524,   525,   526,   527,   535,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3413,     0,     0,   119,   120,   121,   122,   123,   124,
     125,   126,     0,   127,   128,   129,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   131,   132,     0,   133,   134,
     135,     0,   137,   138,   139,   140,   141,     0,   143,   144,
       0,   145,   146,   147,   148,   149,   150,     0,     0,   151,
     152,   153,   154,   155,   156,   157,     0,   158,   159,   160,
     161,   162,     0,     0,     0,   164,   165,   166,   167,   168,
     169,     0,   171,   172,   173,     0,   174,   175,   176,   177,
     178,   179,     0,     0,   181,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,     0,
     196,     0,   197,   198,   199,   200,   201,   202,    14,    15,
     203,   204,   205,   206,     0,     0,   207,   208,   209,   210,
     211,   212,     0,   213,   214,   215,     0,   216,   217,   218,
       0,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,     0,   231,     0,     0,   232,   233,   234,
     235,     0,   236,     0,   237,     0,    23,     0,   240,   241,
     536,     0,   244,     0,     0,   245,     0,   246,   247,   248,
     249,     0,   250,   251,   252,   253,   254,   255,   256,     0,
     258,   259,   260,   261,     0,   262,   263,   264,   265,   266,
     267,   268,     0,   269,     0,   271,   272,   273,   274,   275,
     276,   277,   278,     0,   279,     0,   280,     0,     0,   283,
       0,   285,   286,   287,   288,   289,   290,     0,     0,   291,
       0,   293,     0,     0,   295,     0,     0,   296,   297,   298,
     299,   300,   301,   302,   537,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,     0,   327,   328,
     329,   330,   331,   332,     0,   333,   334,     0,   336,     0,
     337,   338,   339,   340,   341,   342,     0,   343,   344,     0,
       0,   345,   346,   347,     0,     0,   348,   349,   350,     0,
     352,   353,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,    26,    27,    28,     0,
     368,   369,   370,     0,   372,   373,   374,     0,   375,   376,
     377,     0,   378,   379,   380,   381,   382,   383,     0,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,     0,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,     0,   407,   408,     0,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,    33,     0,   427,   428,   429,   430,
     431,   432,   433,   434,   435,    35,     0,   437,   438,   439,
     440,     0,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   538,   454,   455,    37,     0,   456,
     457,    38,   458,     0,   460,     0,   461,   462,   463,   464,
     465,     0,   466,   467,   468,     0,     0,   469,   470,   471,
     472,   473,     0,   474,   475,   476,   477,   478,   479,   480,
     481,     0,     0,   482,   483,   484,    40,   485,   486,   487,
     488,     0,   489,   490,   491,   492,   493,   820,   495,   496,
       0,   497,     0,   499,   500,   501,   502,   503,   504,   505,
       0,     0,   506,     0,    44,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520,   521,
     522,   523,   524,   525,   526,   527,   535,     0,    45,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    46,     0,     0,   119,   120,   121,   122,   123,
     124,   125,   126,   909,   127,   128,   129,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   131,   132,     0,   133,
     134,   135,     0,   137,   138,   139,   140,   141,     0,   143,
     144,     0,   145,   146,   147,   148,   149,   150,     0,     0,
     151,   152,   153,   154,   155,   156,   157,     0,   158,   159,
     160,   161,   162,     0,     0,     0,   164,   165,   166,   167,
     168,   169,     0,   171,   172,   173,     0,   174,   175,   176,
     177,   178,   179,     0,     0,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
       0,   196,     0,   197,   198,   199,   200,   201,   202,     0,
       0,   203,   204,   205,   206,     0,     0,   207,   208,   209,
     210,   211,   212,     0,   213,   214,   215,     0,   216,   217,
     218,     0,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,     0,   231,     0,     0,   232,   233,
     234,   235,     0,   236,     0,   237,     0,    23,     0,   240,
     241,   536,     0,   244,     0,     0,   245,     0,   246,   247,
     248,   249,     0,   250,   251,   252,   253,   254,   255,   256,
       0,   258,   259,   260,   261,     0,   262,   263,   264,   265,
     266,   267,   268,     0,   269,     0,   271,   272,   273,   274,
     275,   276,   277,   278,     0,   279,     0,   280,     0,     0,
     283,     0,   285,   286,   287,   288,   289,   290,     0,     0,
     291,     0,   293,     0,     0,   295,     0,     0,   296,   297,
     298,   299,   300,   301,   302,   537,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,     0,   327,
     328,   329,   330,   331,   332,     0,   333,   334,     0,   336,
       0,   337,   338,   339,   340,   341,   342,     0,   343,   344,
       0,     0,   345,   346,   347,     0,     0,   348,   349,   350,
       0,   352,   353,     0,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,    26,    27,    28,
       0,   368,   369,   370,     0,   372,   373,   374,     0,   375,
     376,   377,     0,   378,   379,   380,   381,   382,   383,     0,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
       0,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,     0,   407,   408,     0,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,    33,     0,   427,   428,   429,
     430,   431,   432,   433,   434,   435,     0,     0,   437,   438,
     439,   440,     0,   441,   442,   443,   444,   445,   446,   447,
     448,   449,   450,   451,   452,   538,   454,   455,     0,     0,
     456,   457,    38,   458,     0,   460,     0,   461,   462,   463,
     464,   465,     0,   466,   910,   468,     0,     0,   911,   470,
     471,   472,   473,     0,   474,   475,   476,   477,   478,   479,
     480,   481,     0,     0,   482,   483,   484,    40,   485,   486,
     487,   488,     0,   489,   490,   491,   492,   493,   820,   495,
     496,     0,   497,     0,   499,   500,   501,   502,   503,   504,
     505,     0,     0,   506,     0,    44,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,   517,   518,   519,   520,
     521,   522,   523,   524,   525,   526,   527,   535,     0,    45,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    46,     0,     0,   119,   120,   121,   122,
     123,   124,   125,   126,     0,   127,   128,   129,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   131,   132,     0,
     133,   134,   135,     0,   137,   138,   139,   140,   141,     0,
     143,   144,     0,   145,   146,   147,   148,   149,   150,     0,
       0,   151,   152,   153,   154,   155,   156,   157,     0,   158,
     159,   160,   161,   162,     0,     0,     0,   164,   165,   166,
     167,   168,   169,     0,   171,   172,   173,     0,   174,   175,
     176,   177,   178,   179,     0,     0,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,     0,   196,     0,   197,   198,   199,   200,   201,   202,
       0,     0,   203,   204,   205,   206,     0,     0,   207,   208,
     209,   210,   211,   212,     0,   213,   214,   215,     0,   216,
     217,   218,     0,   219,   220,   221,   222,   223,   224,   225,
     226,   227,   228,   229,   230,     0,   231,     0,     0,   232,
     233,   234,   235,     0,   236,     0,   237,     0,    23,     0,
     240,   241,   536,     0,   244,     0,     0,   245,     0,   246,
     247,   248,   249,     0,   250,   251,   252,   253,   254,   255,
     256,     0,   258,   259,   260,   261,     0,   262,   263,   264,
     265,   266,   267,   268,     0,   269,     0,   271,   272,   273,
     274,   275,   276,   277,   278,     0,   279,     0,   280,     0,
       0,   283,     0,   285,   286,   287,   288,   289,   290,     0,
       0,   291,     0,   293,     0,     0,   295,     0,     0,   296,
     297,   298,   299,   300,   301,   302,   537,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     327,   328,   329,   330,   331,   332,     0,   333,   334,     0,
     336,     0,   337,   338,   339,   340,   341,   342,     0,   343,
     344,     0,     0,   345,   346,   347,     0,     0,   348,   349,
     350,     0,   352,   353,     0,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,    26,    27,
      28,     0,   368,   369,   370,     0,   372,   373,   374,     0,
     375,   376,   377,     0,   378,   379,   380,   381,   382,   383,
       0,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,     0,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,     0,   407,   408,     0,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,    33,     0,   427,   428,
     429,   430,   431,   432,   433,   434,   435,     0,     0,   437,
     438,   439,   440,     0,   441,   442,   443,   444,   445,   446,
     447,   448,   449,   450,   451,   452,   538,   454,   455,     0,
       0,   456,   457,    38,   458,     0,   460,     0,   461,   462,
     463,   464,   465,     0,   466,   467,   468,     0,     0,   469,
     470,   471,   472,   473,     0,   474,   475,   476,   477,   478,
     479,   480,   481,     0,     0,   482,   483,   484,    40,   485,
     486,   487,   488,     0,   489,   490,   491,   492,   493,   820,
     495,   496,     0,   497,     0,   499,   500,   501,   502,   503,
     504,   505,     0,     0,   506,     0,    44,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   518,   519,
     520,   521,   522,   523,   524,   525,   526,   527,     0,   535,
      45,   561,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    46,     0,     0,     0,   119,   120,
     121,   122,   123,   124,   125,   126,     0,   127,   128,   129,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   131,
     132,     0,   133,   134,   135,     0,   137,   138,   139,   140,
     141,     0,   143,   144,     0,   145,   146,   147,   148,   149,
     150,     0,     0,   151,   152,   153,   154,   155,   156,   157,
       0,   158,   159,   160,   161,   162,     0,     0,     0,   164,
     165,   166,   167,   168,   169,     0,   171,   172,   173,     0,
     174,   175,   176,   177,   178,   179,     0,     0,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,     0,   196,     0,   197,   198,   199,   200,
     201,   202,     0,     0,   203,   204,   205,   206,     0,     0,
     207,   208,   209,   210,   211,   212,     0,   213,   214,   215,
       0,   216,   217,   218,     0,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,     0,   231,     0,
       0,   232,   233,   234,   235,     0,   236,     0,   237,     0,
       0,     0,   240,   241,   536,     0,   244,     0,     0,   245,
       0,   246,   247,   248,   249,     0,   250,   251,   252,   253,
     254,   255,   256,     0,   258,   259,   260,   261,     0,   262,
     263,   264,   265,   266,   267,   268,     0,   269,     0,   271,
     272,   273,   274,   275,   276,   277,   278,     0,   279,     0,
     280,     0,     0,   283,     0,   285,   286,   287,   288,   289,
     290,     0,     0,   291,     0,   293,     0,     0,   295,     0,
       0,   296,   297,   298,   299,   300,   301,   302,   537,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,     0,   327,   328,   329,   330,   331,   332,     0,   333,
     334,     0,   336,     0,   337,   338,   339,   340,   341,   342,
       0,   343,   344,     0,     0,   345,   346,   347,     0,     0,
     348,   349,   350,     0,   352,   353,     0,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
       0,     0,     0,     0,   368,   369,   370,     0,   372,   373,
     374,     0,   375,   376,   377,     0,   378,   379,   380,   381,
     382,   383,     0,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,     0,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,     0,   407,   408,
       0,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,     0,     0,
     427,   428,   429,   430,   431,   432,   433,   434,   435,     0,
       0,   437,   438,   439,   440,     0,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   538,   454,
     455,     0,     0,   456,   457,     0,   458,     0,   460,     0,
     461,   462,   463,   464,   465,     0,   466,   467,   468,     0,
       0,   469,   470,   471,   472,   473,     0,   474,   475,   476,
     477,   478,   479,   480,   481,     0,     0,   482,   483,   484,
       0,   485,   486,   487,   488,     0,   489,   490,   491,   492,
     493,   494,   495,   496,     0,   497,     0,   499,   500,   501,
     502,   503,   504,   505,     0,     0,   506,     0,     0,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,   519,   520,   521,   522,   523,   524,   525,   526,   527,
     535,     0,   561,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1015,     0,     0,   119,
     120,   121,   122,   123,   124,   125,   126,     0,   127,   128,
     129,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     131,   132,     0,   133,   134,   135,     0,   137,   138,   139,
     140,   141,     0,   143,   144,     0,   145,   146,   147,   148,
     149,   150,     0,     0,   151,   152,   153,   154,   155,   156,
     157,     0,   158,   159,   160,   161,   162,     0,     0,     0,
     164,   165,   166,   167,   168,   169,     0,   171,   172,   173,
       0,   174,   175,   176,   177,   178,   179,     0,     0,   181,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,     0,   196,     0,   197,   198,   199,
     200,   201,   202,     0,     0,   203,   204,   205,   206,     0,
       0,   207,   208,   209,   210,   211,   212,     0,   213,   214,
     215,     0,   216,   217,   218,     0,   219,   220,   221,   222,
     223,   224,   225,   226,   227,   228,   229,   230,     0,   231,
       0,     0,   232,   233,   234,   235,     0,   236,     0,   237,
       0,     0,     0,   240,   241,   536,     0,   244,     0,     0,
     245,     0,   246,   247,   248,   249,     0,   250,   251,   252,
     253,   254,   255,   256,     0,   258,   259,   260,   261,     0,
     262,   263,   264,   265,   266,   267,   268,     0,   269,     0,
     271,   272,   273,   274,   275,   276,   277,   278,     0,   279,
       0,   280,     0,     0,   283,     0,   285,   286,   287,   288,
     289,   290,     0,     0,   291,     0,   293,     0,     0,   295,
       0,     0,   296,   297,   298,   299,   300,   301,   302,   537,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,     0,   327,   328,   329,   330,   331,   332,     0,
     333,   334,     0,   336,     0,   337,   338,   339,   340,   341,
     342,     0,   343,   344,     0,     0,   345,   346,   347,     0,
       0,   348,   349,   350,     0,   352,   353,     0,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,     0,     0,     0,     0,   368,   369,   370,     0,   372,
     373,   374,     0,   375,   376,   377,     0,   378,   379,   380,
     381,   382,   383,     0,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,     0,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,     0,   407,
     408,     0,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,     0,
       0,   427,   428,   429,   430,   431,   432,   433,   434,   435,
       0,     0,   437,   438,   439,   440,     0,   441,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   538,
     454,   455,     0,     0,   456,   457,     0,   458,     0,   460,
       0,   461,   462,   463,   464,   465,     0,   466,   467,   468,
       0,     0,   469,   470,   471,   472,   473,     0,   474,   475,
     476,   477,   478,   479,   480,   481,     0,     0,   482,   483,
     484,     0,   485,   486,   487,   488,     0,   489,   490,   491,
     492,   493,   494,   495,   496,     0,   497,     0,   499,   500,
     501,   502,   503,   504,   505,     0,     0,   506,     0,     0,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   518,   519,   520,   521,   522,   523,   524,   525,   526,
     527,   535,     0,   561,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1504,     0,     0,
     119,   120,   121,   122,   123,   124,   125,   126,     0,   127,
     128,   129,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   131,   132,     0,   133,   134,   135,     0,   137,   138,
     139,   140,   141,     0,   143,   144,     0,   145,   146,   147,
     148,   149,   150,     0,     0,   151,   152,   153,   154,   155,
     156,   157,     0,   158,   159,   160,   161,   162,     0,     0,
       0,   164,   165,   166,   167,   168,   169,     0,   171,   172,
     173,     0,   174,   175,   176,   177,   178,   179,     0,     0,
     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,     0,   196,     0,   197,   198,
     199,   200,   201,   202,     0,     0,   203,   204,   205,   206,
       0,     0,   207,   208,   209,   210,   211,   212,     0,   213,
     214,   215,     0,   216,   217,   218,     0,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,     0,
     231,     0,     0,   232,   233,   234,   235,     0,   236,     0,
     237,     0,     0,     0,   240,   241,   536,     0,   244,     0,
       0,   245,     0,   246,   247,   248,   249,     0,   250,   251,
     252,   253,   254,   255,   256,     0,   258,   259,   260,   261,
       0,   262,   263,   264,   265,   266,   267,   268,     0,   269,
       0,   271,   272,   273,   274,   275,   276,   277,   278,     0,
     279,     0,   280,     0,     0,   283,     0,   285,   286,   287,
     288,   289,   290,     0,     0,   291,     0,   293,     0,     0,
     295,     0,     0,   296,   297,   298,   299,   300,   301,   302,
     537,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,     0,   327,   328,   329,   330,   331,   332,
       0,   333,   334,     0,   336,     0,   337,   338,   339,   340,
     341,   342,     0,   343,   344,     0,     0,   345,   346,   347,
       0,     0,   348,   349,   350,     0,   352,   353,     0,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,     0,     0,     0,     0,   368,   369,   370,     0,
     372,   373,   374,     0,   375,   376,   377,     0,   378,   379,
     380,   381,   382,   383,     0,   384,   385,   386,   387,   388,
     389,   390,   391,   392,   393,     0,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,     0,
     407,   408,     0,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
       0,     0,   427,   428,   429,   430,   431,   432,   433,   434,
     435,     0,     0,   437,   438,   439,   440,     0,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
     538,   454,   455,     0,     0,   456,   457,     0,   458,     0,
     460,     0,   461,   462,   463,   464,   465,     0,   466,   467,
     468,     0,     0,   469,   470,   471,   472,   473,     0,   474,
     475,   476,   477,   478,   479,   480,   481,     0,     0,   482,
     483,   484,     0,   485,   486,   487,   488,     0,   489,   490,
     491,   492,   493,   494,   495,   496,     0,   497,     0,   499,
     500,   501,   502,   503,   504,   505,     0,     0,   506,     0,
       0,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   518,   519,   520,   521,   522,   523,   524,   525,
     526,   527,   535,     0,   561,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2260,     0,
       0,   119,   120,   121,   122,   123,   124,   125,   126,     0,
     127,   128,   129,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   131,   132,     0,   133,   134,   135,     0,   137,
     138,   139,   140,   141,     0,   143,   144,     0,   145,   146,
     147,   148,   149,   150,     0,     0,   151,   152,   153,   154,
     155,   156,   157,     0,   158,   159,   160,   161,   162,     0,
       0,     0,   164,   165,   166,   167,   168,   169,     0,   171,
     172,   173,     0,   174,   175,   176,   177,   178,   179,     0,
       0,   181,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,     0,   196,     0,   197,
     198,   199,   200,   201,   202,     0,     0,   203,   204,   205,
     206,     0,     0,   207,   208,   209,   210,   211,   212,     0,
     213,   214,   215,     0,   216,   217,   218,     0,   219,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
       0,   231,     0,     0,   232,   233,   234,   235,     0,   236,
       0,   237,     0,     0,     0,   240,   241,   536,     0,   244,
       0,     0,   245,     0,   246,   247,   248,   249,     0,   250,
     251,   252,   253,   254,   255,   256,     0,   258,   259,   260,
     261,     0,   262,   263,   264,   265,   266,   267,   268,     0,
     269,     0,   271,   272,   273,   274,   275,   276,   277,   278,
       0,   279,     0,   280,     0,     0,   283,     0,   285,   286,
     287,   288,   289,   290,     0,     0,   291,     0,   293,     0,
       0,   295,     0,     0,   296,   297,   298,   299,   300,   301,
     302,   537,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,     0,   327,   328,   329,   330,   331,
     332,     0,   333,   334,     0,   336,     0,   337,   338,   339,
     340,   341,   342,     0,   343,   344,     0,     0,   345,   346,
     347,     0,     0,   348,   349,   350,     0,   352,   353,     0,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,     0,     0,     0,     0,   368,   369,   370,
       0,   372,   373,   374,     0,   375,   376,   377,     0,   378,
     379,   380,   381,   382,   383,     0,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,     0,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
       0,   407,   408,     0,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,     0,     0,   427,   428,   429,   430,   431,   432,   433,
     434,   435,     0,     0,   437,   438,   439,   440,     0,   441,
     442,   443,   444,   445,   446,   447,   448,   449,   450,   451,
     452,   538,   454,   455,     0,     0,   456,   457,     0,   458,
       0,   460,     0,   461,   462,   463,   464,   465,     0,   466,
     467,   468,     0,     0,   469,   470,   471,   472,   473,     0,
     474,   475,   476,   477,   478,   479,   480,   481,     0,     0,
     482,   483,   484,     0,   485,   486,   487,   488,     0,   489,
     490,   491,   492,   493,   494,   495,   496,     0,   497,     0,
     499,   500,   501,   502,   503,   504,   505,     0,     0,   506,
       0,     0,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   535,     0,   561,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2504,
       0,     0,   119,   120,   121,   122,   123,   124,   125,   126,
       0,   127,   128,   129,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   131,   132,     0,   133,   134,   135,     0,
     137,   138,   139,   140,   141,     0,   143,   144,     0,   145,
     146,   147,   148,   149,   150,     0,     0,   151,   152,   153,
     154,   155,   156,   157,     0,   158,   159,   160,   161,   162,
       0,     0,     0,   164,   165,   166,   167,   168,   169,     0,
     171,   172,   173,     0,   174,   175,   176,   177,   178,   179,
       0,     0,   181,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,     0,   196,     0,
     197,   198,   199,   200,   201,   202,     0,     0,   203,   204,
     205,   206,     0,     0,   207,   208,   209,   210,   211,   212,
       0,   213,   214,   215,     0,   216,   217,   218,     0,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     230,     0,   231,     0,     0,   232,   233,   234,   235,     0,
     236,     0,   237,     0,     0,     0,   240,   241,   536,     0,
     244,     0,     0,   245,     0,   246,   247,   248,   249,     0,
     250,   251,   252,   253,   254,   255,   256,     0,   258,   259,
     260,   261,     0,   262,   263,   264,   265,   266,   267,   268,
       0,   269,     0,   271,   272,   273,   274,   275,   276,   277,
     278,     0,   279,     0,   280,     0,     0,   283,     0,   285,
     286,   287,   288,   289,   290,     0,     0,   291,     0,   293,
       0,     0,   295,     0,     0,   296,   297,   298,   299,   300,
     301,   302,   537,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,     0,   327,   328,   329,   330,
     331,   332,     0,   333,   334,     0,   336,     0,   337,   338,
     339,   340,   341,   342,     0,   343,   344,     0,     0,   345,
     346,   347,     0,     0,   348,   349,   350,     0,   352,   353,
       0,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,     0,     0,     0,     0,   368,   369,
     370,     0,   372,   373,   374,     0,   375,   376,   377,     0,
     378,   379,   380,   381,   382,   383,     0,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,     0,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,     0,   407,   408,     0,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,     0,     0,   427,   428,   429,   430,   431,   432,
     433,   434,   435,     0,     0,   437,   438,   439,   440,     0,
     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
     451,   452,   538,   454,   455,     0,     0,   456,   457,     0,
     458,     0,   460,     0,   461,   462,   463,   464,   465,     0,
     466,   467,   468,     0,     0,   469,   470,   471,   472,   473,
       0,   474,   475,   476,   477,   478,   479,   480,   481,     0,
       0,   482,   483,   484,     0,   485,   486,   487,   488,     0,
     489,   490,   491,   492,   493,   494,   495,   496,     0,   497,
       0,   499,   500,   501,   502,   503,   504,   505,     0,     0,
     506,     0,     0,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   518,   519,   520,   521,   522,   523,
     524,   525,   526,   527,   535,     0,   561,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2642,     0,     0,   119,   120,   121,   122,   123,   124,   125,
     126,     0,   127,   128,   129,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   131,   132,     0,   133,   134,   135,
       0,   137,   138,   139,   140,   141,     0,   143,   144,     0,
     145,   146,   147,   148,   149,   150,     0,     0,   151,   152,
     153,   154,   155,   156,   157,     0,   158,   159,   160,   161,
     162,     0,     0,     0,   164,   165,   166,   167,   168,   169,
       0,   171,   172,   173,     0,   174,   175,   176,   177,   178,
     179,     0,     0,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,     0,   196,
       0,   197,   198,   199,   200,   201,   202,     0,     0,   203,
     204,   205,   206,     0,     0,   207,   208,   209,   210,   211,
     212,     0,   213,   214,   215,     0,   216,   217,   218,     0,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   230,     0,   231,     0,     0,   232,   233,   234,   235,
       0,   236,     0,   237,     0,     0,     0,   240,   241,   536,
       0,   244,     0,     0,   245,     0,   246,   247,   248,   249,
       0,   250,   251,   252,   253,   254,   255,   256,     0,   258,
     259,   260,   261,     0,   262,   263,   264,   265,   266,   267,
     268,     0,   269,     0,   271,   272,   273,   274,   275,   276,
     277,   278,     0,   279,     0,   280,     0,     0,   283,     0,
     285,   286,   287,   288,   289,   290,     0,     0,   291,     0,
     293,     0,     0,   295,     0,     0,   296,   297,   298,   299,
     300,   301,   302,   537,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,     0,   327,   328,   329,
     330,   331,   332,     0,   333,   334,     0,   336,     0,   337,
     338,   339,   340,   341,   342,     0,   343,   344,     0,     0,
     345,   346,   347,     0,     0,   348,   349,   350,     0,   352,
     353,     0,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,     0,     0,     0,     0,   368,
     369,   370,     0,   372,   373,   374,     0,   375,   376,   377,
       0,   378,   379,   380,   381,   382,   383,     0,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,     0,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,     0,   407,   408,     0,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,     0,     0,   427,   428,   429,   430,   431,
     432,   433,   434,   435,     0,     0,   437,   438,   439,   440,
       0,   441,   442,   443,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   538,   454,   455,     0,     0,   456,   457,
       0,   458,     0,   460,     0,   461,   462,   463,   464,   465,
       0,   466,   467,   468,     0,     0,   469,   470,   471,   472,
     473,     0,   474,   475,   476,   477,   478,   479,   480,   481,
       0,     0,   482,   483,   484,     0,   485,   486,   487,   488,
       0,   489,   490,   491,   492,   493,   494,   495,   496,     0,
     497,     0,   499,   500,   501,   502,   503,   504,   505,     0,
       0,   506,     0,     0,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,   518,   519,   520,   521,   522,
     523,   524,   525,   526,   527,   535,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3315,     0,     0,   119,   120,   121,   122,   123,   124,
     125,   126,     0,   127,   128,   129,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   131,   132,     0,   133,   134,
     135,     0,   137,   138,   139,   140,   141,     0,   143,   144,
       0,   145,   146,   147,   148,   149,   150,     0,     0,   151,
     152,   153,   154,   155,   156,   157,     0,   158,   159,   160,
     161,   162,     0,     0,     0,   164,   165,   166,   167,   168,
     169,     0,   171,   172,   173,     0,   174,   175,   176,   177,
     178,   179,     0,     0,   181,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,     0,
     196,     0,   197,   198,   199,   200,   201,   202,     0,     0,
     203,   204,   205,   206,     0,     0,   207,   208,   209,   210,
     211,   212,     0,   213,   214,   215,     0,   216,   217,   218,
       0,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,     0,   231,     0,     0,   232,   233,   234,
     235,     0,   236,     0,   237,     0,     0,     0,   240,   241,
     536,     0,   244,     0,     0,   245,     0,   246,   247,   248,
     249,     0,   250,   251,   252,   253,   254,   255,   256,     0,
     258,   259,   260,   261,     0,   262,   263,   264,   265,   266,
     267,   268,     0,   269,     0,   271,   272,   273,   274,   275,
     276,   277,   278,     0,   279,     0,   280,     0,     0,   283,
       0,   285,   286,   287,   288,   289,   290,     0,     0,   291,
       0,   293,     0,     0,   295,     0,     0,   296,   297,   298,
     299,   300,   301,   302,   537,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,     0,   327,   328,
     329,   330,   331,   332,     0,   333,   334,     0,   336,     0,
     337,   338,   339,   340,   341,   342,     0,   343,   344,     0,
       0,   345,   346,   347,     0,     0,   348,   349,   350,     0,
     352,   353,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,     0,     0,     0,     0,
     368,   369,   370,     0,   372,   373,   374,     0,   375,   376,
     377,     0,   378,   379,   380,   381,   382,   383,     0,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,     0,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,     0,   407,   408,     0,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,     0,     0,   427,   428,   429,   430,
     431,   432,   433,   434,   435,     0,     0,   437,   438,   439,
     440,     0,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   538,   454,   455,     0,     0,   456,
     457,     0,   458,     0,   460,     0,   461,   462,   463,   464,
     465,     0,   466,   467,   468,     0,     0,   469,   470,   471,
     472,   473,     0,   474,   475,   476,   477,   478,   479,   480,
     481,     0,     0,   482,   483,   484,     0,   485,   486,   487,
     488,     0,   489,   490,   491,   492,   493,   494,   495,   496,
       0,   497,     0,   499,   500,   501,   502,   503,   504,   505,
       0,     0,   506,     0,     0,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520,   521,
     522,   523,   524,   525,   526,   527,   535,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2111,     0,     0,   119,   120,   121,   122,   123,
     124,   125,   126,     0,   127,   128,   129,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   131,   132,     0,   133,
     134,   135,     0,   137,   138,   139,   140,   141,     0,   143,
     144,     0,   145,   146,   147,   148,   149,   150,     0,     0,
     151,   152,   153,   154,   155,   156,   157,     0,   158,   159,
     160,   161,   162,     0,     0,     0,   164,   165,   166,   167,
     168,   169,     0,   171,   172,   173,     0,   174,   175,   176,
     177,   178,   179,     0,     0,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
       0,   196,     0,   197,   198,   199,   200,   201,   202,     0,
       0,   203,   204,   205,   206,     0,     0,   207,   208,   209,
     210,   211,   212,     0,   213,   214,   215,     0,   216,   217,
     218,     0,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,     0,   231,     0,     0,   232,   233,
     234,   235,     0,   236,     0,   237,     0,     0,     0,   240,
     241,   536,     0,   244,     0,     0,   245,     0,   246,   247,
     248,   249,     0,   250,   251,   252,   253,   254,   255,   256,
       0,   258,   259,   260,   261,     0,   262,   263,   264,   265,
     266,   267,   268,     0,   269,     0,   271,   272,   273,   274,
     275,   276,   277,   278,     0,   279,     0,   280,     0,     0,
     283,     0,   285,   286,   287,   288,   289,   290,     0,     0,
     291,     0,   293,     0,     0,   295,     0,     0,   296,   297,
     298,   299,   300,   301,   302,   537,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,     0,   327,
     328,   329,   330,   331,   332,     0,   333,   334,     0,   336,
       0,   337,   338,   339,   340,   341,   342,     0,   343,   344,
       0,     0,   345,   346,   347,     0,     0,   348,   349,   350,
       0,   352,   353,     0,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,     0,     0,     0,
       0,   368,   369,   370,     0,   372,   373,   374,     0,   375,
     376,   377,     0,   378,   379,   380,   381,   382,   383,     0,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
       0,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,     0,   407,   408,     0,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,     0,     0,   427,   428,   429,
     430,   431,   432,   433,   434,   435,     0,     0,   437,   438,
     439,   440,     0,   441,   442,   443,   444,   445,   446,   447,
     448,   449,   450,   451,   452,   538,   454,   455,     0,     0,
     456,   457,     0,   458,     0,   460,     0,   461,   462,   463,
     464,   465,     0,   466,   467,   468,     0,     0,   469,   470,
     471,   472,   473,     0,   474,   475,   476,   477,   478,   479,
     480,   481,     0,     0,   482,   483,   484,     0,   485,   486,
     487,   488,     0,   489,   490,   491,   492,   493,   494,   495,
     496,     0,   497,     0,   499,   500,   501,   502,   503,   504,
     505,     0,     0,   506,     0,     0,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,   517,   518,   519,   520,
     521,   522,   523,   524,   525,   526,   527,   535,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  2216,     0,     0,   119,   120,   121,   122,
     123,   124,   125,   126,     0,   127,   128,   129,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   131,   132,     0,
     133,   134,   135,     0,   137,   138,   139,   140,   141,     0,
     143,   144,     0,   145,   146,   147,   148,   149,   150,     0,
       0,   151,   152,   153,   154,   155,   156,   157,     0,   158,
     159,   160,   161,   162,     0,     0,     0,   164,   165,   166,
     167,   168,   169,     0,   171,   172,   173,     0,   174,   175,
     176,   177,   178,   179,     0,     0,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,     0,   196,     0,   197,   198,   199,   200,   201,   202,
       0,     0,   203,   204,   205,   206,     0,     0,   207,   208,
     209,   210,   211,   212,     0,   213,   214,   215,     0,   216,
     217,   218,     0,   219,   220,   221,   222,   223,   224,   225,
     226,   227,   228,   229,   230,     0,   231,     0,     0,   232,
     233,   234,   235,     0,   236,     0,   237,     0,     0,     0,
     240,   241,   536,     0,   244,     0,     0,   245,     0,   246,
     247,   248,   249,     0,   250,   251,   252,   253,   254,   255,
     256,     0,   258,   259,   260,   261,     0,   262,   263,   264,
     265,   266,   267,   268,     0,   269,     0,   271,   272,   273,
     274,   275,   276,   277,   278,     0,   279,     0,   280,     0,
       0,   283,     0,   285,   286,   287,   288,   289,   290,     0,
       0,   291,     0,   293,     0,     0,   295,     0,     0,   296,
     297,   298,   299,   300,   301,   302,   537,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     327,   328,   329,   330,   331,   332,     0,   333,   334,     0,
     336,     0,   337,   338,   339,   340,   341,   342,     0,   343,
     344,     0,     0,   345,   346,   347,     0,     0,   348,   349,
     350,     0,   352,   353,     0,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,     0,     0,
       0,     0,   368,   369,   370,     0,   372,   373,   374,     0,
     375,   376,   377,     0,   378,   379,   380,   381,   382,   383,
       0,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,     0,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,     0,   407,   408,     0,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,     0,     0,   427,   428,
     429,   430,   431,   432,   433,   434,   435,     0,     0,   437,
     438,   439,   440,     0,   441,   442,   443,   444,   445,   446,
     447,   448,   449,   450,   451,   452,   538,   454,   455,     0,
       0,   456,   457,     0,   458,     0,   460,     0,   461,   462,
     463,   464,   465,     0,   466,   467,   468,     0,     0,   469,
     470,   471,   472,   473,     0,   474,   475,   476,   477,   478,
     479,   480,   481,     0,     0,   482,   483,   484,     0,   485,
     486,   487,   488,     0,   489,   490,   491,   492,   493,   494,
     495,   496,     0,   497,     0,   499,   500,   501,   502,   503,
     504,   505,     0,     0,   506,     0,     0,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   518,   519,
     520,   521,   522,   523,   524,   525,   526,   527,     0,  2979,
    1380,   836,     0,     0,  2086,  1077,     0,     0,     0,     0,
       0,  2087,  2088,     0,  3170,  2089,  2090,  2091,   119,   120,
     121,   122,   123,   124,   125,   126,   568,   127,   128,   129,
     569,   570,   571,  2980,   573,   574,   575,   576,  2981,   131,
     132,   578,   133,   134,   135,  2982,   137,   138,   139,     0,
    1517,  2983,  1519,  1520,   585,   145,   146,   147,   148,   149,
     150,   586,   587,   151,   152,   153,   154,  1521,  1522,   157,
     590,   158,   159,   160,   161,     0,   592,  2984,   594,  2985,
     165,   166,   167,   168,   169,  2986,   171,   172,   173,   597,
     174,   175,   176,   177,   178,   179,   598,  2987,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,  1527,   192,
     193,  1528,   195,   603,   196,   604,   197,   198,   199,   200,
     201,   202,   605,   606,   203,   204,   205,   206,   607,   608,
     207,   208,  1090,   210,   211,   212,   609,   213,   214,   215,
     610,   216,   217,   218,   611,   219,   220,   221,   222,     0,
     224,   225,   226,   227,   228,   229,     0,   614,   231,   615,
     616,   232,   233,  1529,   235,   618,   236,   619,   237,  2988,
     621,  2989,   240,   241,  2990,  2991,   244,   625,   626,   245,
     627,     0,     0,   248,   249,   630,   250,   251,   252,   253,
     254,   255,   256,  2992,   258,   259,   260,   261,   632,   262,
     263,   264,   265,   266,   267,   268,   633,   269,  2993,     0,
     272,   273,   274,   275,   276,  1535,  1536,   638,  1537,   640,
     280,  2994,  2995,   283,  2996,   285,   286,   287,   288,   289,
     290,   644,   645,   291,  2997,   293,  2998,   648,   295,   649,
     650,   296,   297,   298,   299,   300,   301,   302,  2999,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
    1544,  3000,  1546,   328,   329,   330,   331,  3001,   656,   333,
     334,  3002,   336,   658,     0,   338,  1548,   340,   341,   342,
     661,   343,   344,   662,   663,  3003,   346,   347,   664,   665,
     348,   349,     0,  3004,   352,   353,  3005,     0,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     670,   671,   672,   673,   368,   369,     0,  3006,   372,   373,
       0,   677,   375,   376,   377,   678,   378,   379,   380,   381,
     382,   383,   679,   384,   385,   386,   387,   388,  1552,   390,
     391,   392,   393,   681,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   682,   407,   408,
    3007,   410,   411,   412,  1554,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   685,  3008,
     427,   428,   429,   430,   431,   432,  3009,   434,   435,   688,
    3010,   437,   438,  1558,   440,   691,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,  3011,   454,
       0,   694,   695,   456,   457,   696,   458,  3012,   460,   698,
     461,   462,   463,   464,   465,   699,   466,  1561,  1562,   702,
     703,   469,   470,     0,   472,     0,   706,   474,   475,  3013,
     477,   478,   479,   480,   481,  3014,   709,   482,   483,   484,
     710,   485,   486,   487,   488,   711,   489,   490,   491,   492,
     493,     0,  1565,   496,   714,   497,  3015,   499,   500,   501,
     502,   503,   504,   505,   716,   717,   506,   718,   719,   507,
     508,   509,   510,   511,   512,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   524,   525,   526,   527,
       0,   535,     0,  2092,  2093,  2094,  2086,  3016,  3017,  2097,
    2098,  2099,  2100,  2087,  2088,     0,     0,  2089,  2090,  2091,
     119,   120,   121,   122,   123,   124,   125,   126,     0,   127,
     128,   129,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   131,   132,     0,   133,   134,   135,     0,   137,   138,
     139,   140,   141,     0,   143,   144,     0,   145,   146,   147,
     148,   149,   150,     0,     0,   151,   152,   153,   154,   155,
     156,   157,     0,   158,   159,   160,   161,   162,     0,     0,
       0,   164,   165,   166,   167,   168,   169,     0,   171,   172,
     173,     0,   174,   175,   176,   177,   178,   179,     0,     0,
     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,     0,   196,     0,   197,   198,
     199,   200,   201,   202,     0,     0,   203,   204,   205,   206,
       0,     0,   207,   208,   209,   210,   211,   212,     0,   213,
     214,   215,     0,   216,   217,   218,     0,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,     0,
     231,     0,     0,   232,   233,   234,   235,     0,   236,     0,
     237,     0,     0,     0,   240,   241,   536,     0,   244,     0,
       0,   245,     0,   246,   247,   248,   249,     0,   250,   251,
     252,   253,   254,   255,   256,     0,   258,   259,   260,   261,
       0,   262,   263,   264,   265,   266,   267,   268,     0,   269,
       0,   271,   272,   273,   274,   275,   276,   277,   278,     0,
     279,     0,   280,     0,     0,   283,     0,   285,   286,   287,
     288,   289,   290,     0,     0,   291,     0,   293,     0,     0,
     295,     0,     0,   296,   297,   298,   299,   300,   301,   302,
     537,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,     0,   327,   328,   329,   330,   331,   332,
       0,   333,   334,     0,   336,     0,   337,   338,   339,   340,
     341,   342,     0,   343,   344,     0,     0,   345,   346,   347,
       0,     0,   348,   349,   350,     0,   352,   353,     0,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,     0,     0,     0,     0,   368,   369,   370,     0,
     372,   373,   374,     0,   375,   376,   377,     0,   378,   379,
     380,   381,   382,   383,     0,   384,   385,   386,   387,   388,
     389,   390,   391,   392,   393,     0,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,     0,
     407,   408,     0,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
       0,     0,   427,   428,   429,   430,   431,   432,   433,   434,
     435,     0,     0,   437,   438,   439,   440,     0,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
     538,   454,   455,     0,     0,   456,   457,     0,   458,     0,
     460,     0,   461,   462,   463,   464,   465,     0,   466,   467,
     468,     0,     0,   469,   470,   471,   472,   473,     0,   474,
     475,   476,   477,   478,   479,   480,   481,     0,     0,   482,
     483,   484,     0,   485,   486,   487,   488,     0,   489,   490,
     491,   492,   493,   494,   495,   496,     0,   497,     0,   499,
     500,   501,   502,   503,   504,   505,     0,     0,   506,     0,
       0,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   518,   519,   520,   521,   522,   523,   524,   525,
     526,   527,     0,     0,     0,  2092,  2093,  2094,     0,  2095,
    2096,  2097,  2098,  2099,  2100,  1649,     0,     0,  1650,     0,
       0,     0,  1651,  1652,  1653,  1654,  1655,  1656,  1657,     0,
       0,     0,     0,     0,     0,     0,     0,  1649,     0,     0,
    1650,     0,     0,  1658,  1651,  1652,  1653,  1654,  1655,  1656,
    1657,     0,     0,  1660,     0,     0,     0,     0,     0,     0,
    1661,     0,     0,     0,     0,  1658,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1660,     0,     0,     0,     0,
       0,     0,  1661,     0,     0,  1649,     0,  1662,  1650,     0,
       0,     0,  1651,  1652,  1653,  1654,  1655,  1656,  1657,     0,
       0,     0,     0,     0,     0,     0,     0,  1649,     0,  1662,
    1650,     0,     0,  1658,  1651,  1652,  1653,  1654,  1655,  1656,
    1657,     0,     0,  1660,     0,     0,     0,     0,     0,     0,
    1661,     0,     0,     0,     0,  1658,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1660,     0,     0,     0,     0,
       0,     0,  1661,     0,     0,     0,     0,  1662,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1649,     0,     0,
    1650,     0,     0,     0,  1651,  1652,     0,     0,     0,  1662,
       0,     0,     0,     0,     0,     0,  1663,     0,     0,  1649,
       0,     0,  1650,     0,     0,     0,  1651,  1652,  1653,  1654,
    1655,  1656,  1657,     0,  1664,  1660,     0,     0,  1663,  1665,
       0,     0, -2116,     0,     0,     0,     0,  1658,     0,     0,
       0,     0,     0,     0,     0,     0,  1664,  1660,     0,     0,
       0,  1665,  1666,  1667,  1661,     0,     0,     0,     0,  1662,
       0,     0,     0,     0,     0,     0,     0,  1668,     0,     0,
       0,     0,     0,     0,  1666,  1667,  1663,     0,     0,     0,
       0,  1662,     0,     0,     0,     0,     0,     0,     0,  1668,
       0,     0,     0,     0,  1664,     0,     0,     0,  1663,  1665,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1669,
       0,     0,  1670,     0,     0,     0,  1664,     0,     0,     0,
       0,  1665,  1666,  1667,     0,  2876,  1671,     0,     0,  1672,
       0,  1669,     0,     0,  1670,     0,     0,  1668,     0,     0,
       0,     0,     0,     0,  1666,  1667,     0,     0,  1671,     0,
       0,  1672,     0,     0,     0,     0,     0,     0, -2116,  1668,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0, -2116,     0,     0,  1669,
    1663, -2116,  1670,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1671,     0,  1664,  1672,
       0,  1669,     0,  1665,  1670,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1671, -2116,
       0,  1672,     0,     0,     0,     0,  1666,  1667,     0,     0,
       0,  1673,     0,     0,     0,     0,     0,  1649,     0,     0,
    1650,  1668,     0,     0,  1651,  1652,  1653,  1654,  1655,  1656,
    1657,     0,     0,  1673,     0,     0,     0,     0,     0,  1649,
       0,     0,  1650,     0,     0,  1658,  1651,  1652,  1653,  1654,
    1655,  1656,  1657,     0,     0,  1660,     0,     0,  1671,     0,
       0,     0,  1661,  1669,     0,     0,  1670,  1658,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1660,     0,     0,
    1671,  1673,     0,  1672,  1661,     0,     0,     0,     0,  1662,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1673,     0,     0,     0,     0,     0,     0,
       0,  1662,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1674,     0,     0,  1675,  1676,  1677,     0,  1678,  1679,
    1680,  1681,  1682,  1683,     0,     0,     0,     0,  2782,     0,
       0,     0,     0,  1674,     0,     0,  1675,  1676,  1677,     0,
    1678,  1679,  1680,  1681,  1682,  1683,     0,     0,     0,     0,
    2849,     0,     0, -2116,     0,     0,     0,     0,     0,  1649,
       0,     0,  1650,     0,     0,     0,  1651,  1652,  1653,  1654,
    1655,  1656,  1657,     0,     0,  1673,     0,     0,  1663,     0,
       0,  1674,     0,     0,  1675,  1676,  1677,  1658,  1678,  1679,
    1680,  1681,  1682,  1683,     0,     0,  1664,  1660,  2858,     0,
    1663,  1665,     0,  1674,  1661,     0,  1675,  1676,  1677,     0,
    1678,  1679,  1680,  1681,  1682,  1683,     0,     0,  1664,     0,
    2925,     0,     0,  1665,  1666,  1667,     0,     0,     0,     0,
       0,  1662,     0,     0,     0,     0,     0,     0,     0,  1668,
       0,     0,     0,     0,     0,     0,  1666,  1667,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1668,     0, -2116,     0,     0,     0,     0,     0,     0,
    1678,  1679,  1680,  1681,  1682,  1683,     0,     0,     0,     0,
       0,  1669,     0,     0,  1670,  1674,     0,     0,  1675,  1676,
    1677,     0,  1678,  1679,  1680,  1681,  1682,  1683,  1671,     0,
       0,  1672,  3162,  1669,     0,     0,  1670,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1671,     0,     0,  1672,     0,     0,     0,     0,     0,     0,
    1663,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1664,     0,
       0,     0,     0,  1665,     0,     0,     0,     0,     0,     0,
    1649,     0,     0,  1650,     0,     0,     0,  1651,  1652,  1653,
    1654,  1655,  1656,  1657,     0,     0,  1666,  1667,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1658,     0,
       0,  1668,     0,     0,     0,     0,     0,     0,  1660,     0,
       0,     0,     0,  1673,     0,  1661,     0,     0,     0,  1649,
       0,     0,  1650,     0,     0,     0,  1651,  1652,  1653,  1654,
    1655,  1656,  1657,     0,     0,  1673,     0,     0,     0,     0,
       0,  1649,  1662,  1669,  1650,     0,  1670,  1658,  1651,  1652,
    1653,  1654,  1655,  1656,  1657,     0,     0,  1660,     0,     0,
    1671,     0,     0,  1672,  1661,     0,     0,     0,     0,  1658,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1660,
       0,     0,     0,     0,     0,     0,  1661,     0,     0,     0,
       0,  1662,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1662,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1674,     0,     0,  1675,  1676,  1677,     0,
    1678,  1679,  1680,  1681,  1682,  1683,     0,     0,     0,     0,
    3169,  1663,     0,     0,     0,  1674,     0,     0,  1675,  1676,
    1677,     0,  1678,  1679,  1680,  1681,  1682,  1683,     0,  1664,
       0,     0,  3335,     0,  1665,  1673,  1649,     0,     0,  1650,
       0,     0,     0,  1651,  1652,  1653,  1654,  1655,  1656,  1657,
       0,     0,     0,     0,     0,     0,     0,  1666,  1667,     0,
    1663,     0,     0,     0,  1658,     0,     0,     0,     0,     0,
       0,     0,  1668,     0,  1660,     0,     0,     0,  1664,     0,
       0,  1661,  1663,  1665,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1664,     0,     0,     0,     0,  1665,  1666,  1667,  1662,     0,
       0,     0,     0,     0,  1669,     0,     0,  1670,     0,     0,
       0,  1668,     0,     0,     0,     0,     0,     0,  1666,  1667,
       0,  1671,     0,     0,  1672,     0,     0,     0,     0,     0,
       0,     0,     0,  1668,     0,  1674,     0,     0,  1675,  1676,
    1677,     0,  1678,  1679,  1680,  1681,  1682,  1683,     0,     0,
       0,     0,  3357,  1669,     0,     0,  1670,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1671,     0,     0,  1672,     0,  1669,     0,     0,  1670,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1671,     0,     0,  1672,     0,  1663,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1664,     0,     0,     0,     0,
    1665,     0,     0,     0,     0,     0,  1673,     0,     0,     0,
       0,     0,     0,     0,  1649,     0,     0,  1650,     0,     0,
       0,  1651,  1652,  1666,  1667, -2116, -2116, -2116,     0,     0,
       0,     0,     0,     0,  1649,     0,     0,  1650,  1668,     0,
       0,  1651,  1652,  1653,  1654,  1655,  1656,  1657,     0,     0,
       0,     0,  1660,     0,     0,  1673,     0,     0,     0,  1661,
       0,     0,  1658,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1660,     0,     0,     0,     0,  1673,     0,  1661,
    1669,     0,     0,  1670,     0,     0,  1662,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1671,     0,     0,
    1672,     0,     0,     0,     0,     0,  1662,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1674,     0,     0,  1675,
    1676,  1677,     0,  1678,  1679,  1680,  1681,  1682,  1683,     0,
       0,     0,     0,  3464,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1649,     0,     0,  1650,     0,     0,     0,
    1651,  1652,  1653,  1654,  1655,  1656,  1657,     0,     0,     0,
       0,     0,     0,     0,     0,  1674,     0,     0,  1675,  1676,
    1677,  1658,  1678,  1679,  1680,  1681,  1682,  1683,     0,     0,
       0,  1660,  3530,     0,     0,  1663,     0,  1674,  1661,     0,
    1675,  1676,  1677,     0,  1678,  1679,  1680,  1681,  1682,  1683,
       0,     0,  1673,  1664,  3558,  1663,     0,     0,  1665,  1649,
       0,     0,  1650,     0,     0,  1662,  1651,  1652,  1653,  1654,
    1655,  1656,  1657,  1664,     0,     0,     0,     0,  1665,     0,
       0,     0,     0,     0,     0,     0,     0,  1658,     0,     0,
       0,     0,     0,     0,     0,     0,  1668,  1660,     0,     0,
       0,  1666,  1667,     0,  1661,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1668,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1662,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1671,     0,     0,  1669,     0,
       0,  1670,  1674,     0,  1663,  1675,  1676,  1677,     0,  1678,
    1679,  1680,  1681,  1682,  1683,  1671,     0,  1838,  1672,     0,
       0,     0,  1664,     0,     0,     0,     0,  1665,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1666,  1667,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1668,     0,     0,     0,     0,
    1663,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1664,     0,
       0,     0,     0,  1665,     0,     0,     0,     0,     0,     0,
    1673,     0,     0,     0,     0,     0,     0,  1669,     0,     0,
    1670,     0,     0,     0,     0,     0,  1666,  1667,     0,     0,
    1673,     0,     0,     0,  1671,     0,     0,  1672,     0,     0,
       0,  1668,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1669,     0,     0,  1670,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1671,     0,     0,  1672,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1674,     0,     0, -2116, -2116, -2116,     0,  1678,  1679,  1680,
    1681,  1682,  1683,     0,     0,     0,     0,     0,     0,  1673,
    1674,     0,     0,  1675,  1676,  1677,     0,  1678,  1679,  1680,
    1681,  1682,  1683,     0,     0,  2879,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1673,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1674,
       0,     0,  1675,  1676,  1677,     0,  1678,  1679,  1680,  1681,
    1682,  1683,     0,     0,  3325,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   567,     0,     0,  1674,     0,     0,  1675,  1676,
    1677,     0,  1678,  1679,  1680,  1681,  1682,  1683,     0,     0,
    3514,   119,   120,   121,   122,   123,   124,   125,   126,   568,
     127,   128,   129,   569,   570,   571,   572,   573,   574,   575,
     576,   577,   131,   132,   578,   133,   134,   135,   579,   137,
     138,   139,   580,   581,   582,   583,   584,   585,   145,   146,
     147,   148,   149,   150,   586,   587,   151,   152,   153,   154,
     588,   589,   157,   590,   158,   159,   160,   161,   591,   592,
     593,   594,   595,   165,   166,   167,   168,   169,   596,   171,
     172,   173,   597,   174,   175,   176,   177,   178,   179,   598,
     599,   181,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   601,   192,   193,   602,   195,   603,   196,   604,   197,
     198,   199,   200,   201,   202,   605,   606,   203,   204,   205,
     206,   607,   608,   207,   208,   209,   210,   211,   212,   609,
     213,   214,   215,   610,   216,   217,   218,   611,   219,   220,
     221,   222,   612,   224,   225,   226,   227,   228,   229,   613,
     614,   231,   615,   616,   232,   233,   617,   235,   618,   236,
     619,   237,   620,   621,   622,   240,   241,   623,   624,   244,
     625,   626,   245,   627,   628,   629,   248,   249,   630,   250,
     251,   252,   253,   254,   255,   256,   631,   258,   259,   260,
     261,   632,   262,   263,   264,   265,   266,   267,   268,   633,
     269,   634,   635,   272,   273,   274,   275,   276,   636,   637,
     638,   639,   640,   280,   641,   642,   283,   643,   285,   286,
     287,   288,   289,   290,   644,   645,   291,   646,   293,   647,
     648,   295,   649,   650,   296,   297,   298,   299,   300,   301,
     302,   651,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   652,   653,   654,   328,   329,   330,   331,
     655,   656,   333,   334,   657,   336,   658,   659,   338,   660,
     340,   341,   342,   661,   343,   344,   662,   663,   345,   346,
     347,   664,   665,   348,   349,   666,   667,   352,   353,   668,
     669,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   670,   671,   672,   673,   368,   369,   674,
     675,   372,   373,   676,   677,   375,   376,   377,   678,   378,
     379,   380,   381,   382,   383,   679,   384,   385,   386,   387,
     388,   680,   390,   391,   392,   393,   681,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     682,   407,   408,   683,   410,   411,   412,   684,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   685,   686,   427,   428,   429,   430,   431,   432,   687,
     434,   435,   688,   689,   437,   438,   690,   440,   691,   441,
     442,   443,   444,   445,   446,   447,   448,   449,   450,   451,
     452,   692,   454,   693,   694,   695,   456,   457,   696,   458,
     697,   460,   698,   461,   462,   463,   464,   465,   699,   466,
     700,   701,   702,   703,   469,   470,   704,   472,   705,   706,
     474,   475,   707,   477,   478,   479,   480,   481,   708,   709,
     482,   483,   484,   710,   485,   486,   487,   488,   711,   489,
     490,   491,   492,   493,   712,   713,   496,   714,   497,   715,
     499,   500,   501,   502,   503,   504,   505,   716,   717,   506,
     718,   719,   507,   508,   509,   510,   511,   512,   720,   721,
     722,   723,   724,   725,   726,   727,   728,   729,   730,   524,
     525,   526,   527,   535,     0,     0,     0,     0,     0,     0,
       0,     0,  2122,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   119,   120,   121,   122,   123,   124,   125,   126,
       0,   127,   128,   129,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   131,   132,     0,   133,   134,   135,     0,
     137,   138,   139,   140,   141,     0,   143,   144,     0,   145,
     146,   147,   148,   149,   150,     0,     0,   151,   152,   153,
     154,   155,   156,   157,     0,   158,   159,   160,   161,   162,
       0,     0,     0,   164,   165,   166,   167,   168,   169,     0,
     171,   172,   173,     0,   174,   175,   176,   177,   178,   179,
       0,     0,   181,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,     0,   196,     0,
     197,   198,   199,   200,   201,   202,     0,     0,   203,   204,
     205,   206,     0,     0,   207,   208,   209,   210,   211,   212,
       0,   213,   214,   215,     0,   216,   217,   218,     0,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     230,     0,   231,     0,     0,   232,   233,   234,   235,     0,
     236,     0,   237,     0,     0,     0,   240,   241,   536,     0,
     244,     0,     0,   245,     0,   246,   247,   248,   249,     0,
     250,   251,   252,   253,   254,   255,   256,     0,   258,   259,
     260,   261,     0,   262,   263,   264,   265,   266,   267,   268,
       0,   269,     0,   271,   272,   273,   274,   275,   276,   277,
     278,     0,   279,     0,   280,     0,     0,   283,     0,   285,
     286,   287,   288,   289,   290,     0,     0,   291,     0,   293,
       0,     0,   295,     0,     0,   296,   297,   298,   299,   300,
     301,   302,   537,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,     0,   327,   328,   329,   330,
     331,   332,     0,   333,   334,     0,   336,     0,   337,   338,
     339,   340,   341,   342,     0,   343,   344,     0,     0,   345,
     346,   347,     0,     0,   348,   349,   350,     0,   352,   353,
       0,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,     0,     0,     0,     0,   368,   369,
     370,     0,   372,   373,   374,     0,   375,   376,   377,     0,
     378,   379,   380,   381,   382,   383,     0,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,     0,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,     0,   407,   408,     0,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,     0,     0,   427,   428,   429,   430,   431,   432,
     433,   434,   435,     0,     0,   437,   438,   439,   440,     0,
     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
     451,   452,   538,   454,   455,     0,     0,   456,   457,     0,
     458,     0,   460,     0,   461,   462,   463,   464,   465,     0,
     466,   467,   468,     0,     0,   469,   470,   471,   472,   473,
       0,   474,   475,   476,   477,   478,   479,   480,   481,     0,
       0,   482,   483,   484,     0,   485,   486,   487,   488,     0,
     489,   490,   491,   492,   493,   494,   495,   496,     0,   497,
       0,   499,   500,   501,   502,   503,   504,   505,     0,     0,
     506,     0,     0,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   518,   519,   520,   521,   522,   523,
     524,   525,   526,   527,   535,     0,     0,     0,     0,     0,
       0,     0,     0,  2775,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   119,   120,   121,   122,   123,   124,   125,
     126,     0,   127,   128,   129,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   131,   132,     0,   133,   134,   135,
       0,   137,   138,   139,   140,   141,     0,   143,   144,     0,
     145,   146,   147,   148,   149,   150,     0,     0,   151,   152,
     153,   154,   155,   156,   157,     0,   158,   159,   160,   161,
     162,     0,     0,     0,   164,   165,   166,   167,   168,   169,
       0,   171,   172,   173,     0,   174,   175,   176,   177,   178,
     179,     0,     0,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,     0,   196,
       0,   197,   198,   199,   200,   201,   202,     0,     0,   203,
     204,   205,   206,     0,     0,   207,   208,   209,   210,   211,
     212,     0,   213,   214,   215,     0,   216,   217,   218,     0,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   230,     0,   231,     0,     0,   232,   233,   234,   235,
       0,   236,     0,   237,     0,     0,     0,   240,   241,   536,
       0,   244,     0,     0,   245,     0,   246,   247,   248,   249,
       0,   250,   251,   252,   253,   254,   255,   256,     0,   258,
     259,   260,   261,     0,   262,   263,   264,   265,   266,   267,
     268,     0,   269,     0,   271,   272,   273,   274,   275,   276,
     277,   278,     0,   279,     0,   280,     0,     0,   283,     0,
     285,   286,   287,   288,   289,   290,     0,     0,   291,     0,
     293,     0,     0,   295,     0,     0,   296,   297,   298,   299,
     300,   301,   302,   537,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,     0,   327,   328,   329,
     330,   331,   332,     0,   333,   334,     0,   336,     0,   337,
     338,   339,   340,   341,   342,     0,   343,   344,     0,     0,
     345,   346,   347,     0,     0,   348,   349,   350,     0,   352,
     353,     0,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,     0,     0,     0,     0,   368,
     369,   370,     0,   372,   373,   374,     0,   375,   376,   377,
       0,   378,   379,   380,   381,   382,   383,     0,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,     0,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,     0,   407,   408,     0,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,     0,     0,   427,   428,   429,   430,   431,
     432,   433,   434,   435,     0,     0,   437,   438,   439,   440,
       0,   441,   442,   443,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   538,   454,   455,     0,     0,   456,   457,
       0,   458,     0,   460,     0,   461,   462,   463,   464,   465,
       0,   466,   467,   468,     0,     0,   469,   470,   471,   472,
     473,     0,   474,   475,   476,   477,   478,   479,   480,   481,
       0,     0,   482,   483,   484,     0,   485,   486,   487,   488,
       0,   489,   490,   491,   492,   493,   494,   495,   496,     0,
     497,     0,   499,   500,   501,   502,   503,   504,   505,     0,
       0,   506,     0,     0,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,   518,   519,   520,   521,   522,
     523,   524,   525,   526,   527,   995,  1380,   836,     0,     0,
       0,  1077,     0,     0,  2778,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   119,   120,   121,   122,   123,   124,
     125,   126,     0,   127,   128,   129,     0,     0,     0,   572,
       0,     0,     0,     0,   577,   131,   132,     0,   133,   134,
     135,   579,   137,   138,   139,   580,   581,   582,   583,   584,
       0,   145,   146,   147,   148,   149,   150,     0,     0,   151,
     152,   153,   154,   588,   589,   157,     0,   158,   159,   160,
     161,   591,     0,   593,     0,   595,   165,   166,   167,   168,
     169,   596,   171,   172,   173,     0,   174,   175,   176,   177,
     178,   179,     0,   599,   181,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   601,   192,   193,   602,   195,     0,
     196,     0,   197,   198,   199,   200,   201,   202,     0,     0,
     203,   204,   205,   206,     0,     0,   207,   208,   209,   210,
     211,   212,     0,   213,   214,   215,     0,   216,   217,   218,
       0,   219,   220,   221,   222,   612,   224,   225,   226,   227,
     228,   229,   613,  1381,   231,     0,     0,   232,   233,   617,
     235,     0,   236,     0,   237,   620,     0,   622,   240,   241,
     623,   624,   244,     0,     0,   245,     0,   628,   629,   248,
     249,     0,   250,   251,   252,   253,   254,   255,   256,   631,
     258,   259,   260,   261,     0,   262,   263,   264,   265,   266,
     267,   268,     0,   269,   634,   635,   272,   273,   274,   275,
     276,   636,   637,     0,   639,     0,   280,   641,   642,   283,
     643,   285,   286,   287,   288,   289,   290,     0,     0,   291,
     646,   293,   647,     0,   295,     0,     0,   296,   297,   298,
     299,   300,   301,   302,   651,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   652,   653,   654,   328,
     329,   330,   331,   655,     0,   333,   334,   657,   336,     0,
     659,   338,   660,   340,   341,   342,     0,   343,   344,  1382,
       0,   345,   346,   347,     0,     0,   348,   349,   666,   667,
     352,   353,   668,   669,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,     0,     0,     0,     0,
     368,   369,   674,   675,   372,   373,   676,     0,   375,   376,
     377,     0,   378,   379,   380,   381,   382,   383,     0,   384,
     385,   386,   387,   388,   680,   390,   391,   392,   393,     0,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,     0,   407,   408,   683,   410,   411,   412,
     684,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,     0,   686,   427,   428,   429,   430,
     431,   432,   687,   434,   435,     0,   689,   437,   438,   690,
     440,     0,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   692,   454,   693,     0,     0,   456,
     457,     0,   458,   697,   460,     0,   461,   462,   463,   464,
     465,     0,   466,   700,   701,     0,     0,   469,   470,   704,
     472,   705,  1383,   474,   475,   707,   477,   478,   479,   480,
     481,     0,     0,   482,   483,   484,     0,   485,   486,   487,
     488,     0,   489,   490,   491,   492,   493,   712,   713,   496,
       0,   497,   715,   499,   500,   501,   502,   503,   504,   505,
       0,     0,   506,     0,     0,   507,   508,   509,   510,   511,
     512,   720,   721,   722,   723,   724,   725,   726,   727,   728,
     729,   730,   524,   525,   526,   527,     0,     0,  1649,     0,
       0,  1650,     0,  1384,  1385,  1651,  1652,  1653,  1654,  1655,
    1656,  1657,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1658,     0,     0,     0,
       0,  2226,     0,     0,     0,     0,  1660,  1649,     0,     0,
    1650,     0,     0,  1661,  1651,  1652,  1653,  1654,  1655,  1656,
    1657,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1658,     0,     0,     0,     0,
    1662,     0,     0,     0,     0,  1660,  1649,     0,     0,  1650,
       0,     0,  1661,  1651,  1652,  1653,  1654,  1655,  1656,  1657,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1658,     0,     0,     0,     0,  1662,
       0,     0,     0,     0,  1660,     0,  2227,     0,     0,     0,
       0,  1661,     0,     0,     0,     0,     0,     0,  1649,     0,
       0,  1650,     0,     0,     0,  1651,  1652,  1653,  1654,  1655,
    1656,  1657,     0,     0,     0,     0,     0,     0,  1662,     0,
       0,     0,     0,     0,     0,     0,  1658,     0,     0,     0,
    1941,     0,     0,     0,     0,     0,  1660,  1649,     0,  1663,
    1650,     0,     0,  1661,  1651,  1652,  1653,  1654,  1655,  1656,
    1657,     0,     0,     0,     0,     0,     0,  1664,     0,     0,
       0,     0,  1665,     0,     0,  1658,     0,     0,  1978,     0,
    1662,     0,     0,  1979,     0,  1660,     0,     0,  1663,     0,
       0,     0,  1661,     0,     0,  1666,  1667,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1664,     0,     0,     0,
    1668,  1665,     0,     0,     0,     0,  3636,     0,     0,  1662,
       0,     0,     0,     0,     0,     0,     0,  1663,     0,     0,
       0,     0,     0,  1649,  1666,  1667,  1650,     0,     0,     0,
    1651,  1652,     0,     0,     0,  1664,     0,     0,     0,  1668,
    1665,     0,  1669,     0,     0,  1670,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1671,
       0,  1660,  1672,  1666,  1667,     0,     0,     0, -2116,  1663,
       0,     0,     0,     0,     0,     0,     0,     0,  1668,     0,
       0,  1669,     0,     0,  1670,     0,     0,  1664,     0,     0,
       0,     0,  1665,     0,     0,  1662,     0,     0,  1671,     0,
       0,  1672,     0,     0,     0,     0,     0,     0,  1663,     0,
       0,     0,     0,     0,     0,  1666,  1667,     0,     0,     0,
    1669,     0,     0,  1670,     0,     0,  1664,     0,     0,     0,
    1668,  1665,     0,     0,     0,     0,     0,  1671,     0,     0,
    1672,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1666,  1667,     0,     0,     0,     0,
       0,  3161,     0,     0,  1673,     0,     0,     0,     0,  1668,
       0,  3637,  1669,     0,     0,  1670,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1671,
       0,     0,  1672,     0, -2116,     0,     0,     0,     0,     0,
       0,     0,     0,  1673,     0,     0,     0,     0,     0,     0,
       0,  1669, -2116,     0,  1670,     0,     0, -2116,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1671,  2230,
       0,  1672,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1673,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0, -2116,  1948,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1674,     0,     0,  1675,  1676,  1677,
       0,  1678,  1679,  1680,  1681,  1682,  1683,     0,     0,     0,
       0,     0,     0,     0,  1673,     0,     0,     0,  1649,     0,
       0,  1650,     0,     0,     0,  1651,  1652,  1653,  1654,  1655,
    1656,  1657,     0,  1674,  1671,     0,  1675,  1676,  1677,     0,
    1678,  1679,  1680,  1681,  1682,  1683,  1658,     0,     0,     0,
    1984,     0,     0,  1673,     0,     0,  1660,     0,  1649,     0,
       0,  1650,     0,  1661,     0,  1651,  1652,  1653,  1654,  1655,
    1656,  1657,  1674,     0,     0,  1675,  1676,  1677,     0,  1678,
    1679,  1680,  1681,  1682,  1683,     0,  1658,     0,     0,     0,
    1662,     0,     0,     0,     0,     0,  1660,     0,     0,     0,
       0,     0,     0,  1661,     0,     0,     0,     0,     0,  1649,
       0,     0,  1650,     0,     0,     0,  1651,  1652,  1653,  1654,
    1655,  1656,  1657,     0,  1674,     0,     0,  1675,  1676,  1677,
    1662,  1678,  1679,  1680,  1681,  1682,  1683,  1658,     0, -2116,
       0,  1991,     0,     0,     0,     0,     0,  1660,     0,  1649,
       0,     0,  1650,     0,  1661,     0,  1651,  1652,  1653,  1654,
    1655,  1656,  1657,  1674,     0,     0,  1675,  1676,  1677,     0,
    1678,  1679,  1680,  1681,  1682,  1683,     0,  1658,     0,     0,
       0,  1662,     0,     0,     0,     0,     0,  1660,     0,  1663,
       0,     0,     0,     0,  1661,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1664,     0,     0,
       0,     0,  1665,     0,     0,     0,     0,     0,     0,     0,
       0,  1662,     0,     0,  1989,     0,     0,     0,     0,  1663,
       0,     0,     0,     0,     0,  1666,  1667,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1664,     0, -2116,
    1668,     0,  1665,     0,     0,     0,  1678,  1679,  1680,  1681,
    1682,  1683,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1666,  1667,     0,     0,     0,
    1663,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1668,     0,  1669,     0,     0,  1670,     0,     0,  1664,     0,
       0,     0,     0,  1665,     0,     0,     0,     0,     0,  1671,
    2115,     0,  1672,     0,     0,     0,     0,     0,     0,     0,
    1663,     0,     0,     0,     0,     0,  1666,  1667,     0,     0,
       0,     0,  1669,     0,     0,  1670,     0,     0,  1664,     0,
       0,  1668,     0,  1665,     0,     0,     0,     0,     0,  1671,
       0,     0,  1672,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1666,  1667,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1668,     0,  1669,     0,     0,  1670,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1649,
    1671,     0,  1650,  1672,     0,     0,  1651,  1652,  1653,  1654,
    1655,  1656,  1657,     0,  1673,     0,     0,     0,     0,     0,
       0,     0,     0,  1669,     0,     0,  1670,  1658,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1660,     0,  1649,
    1671,     0,  1650,  1672,  1661,     0,  1651,  1652,  1653,  1654,
    1655,  1656,  1657,     0,  1673,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1658,     0,     0,
       0,  1662,     0,     0,     0,     0,     0,  1660,     0,     0,
    1649,     0,     0,  1650,  1661,     0,     0,  1651,  1652,  1653,
    1654,  1655,  1656,  1657,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1673,     0,     0,  1658,     0,
       0,  1662,  2855,     0,     0,     0,     0,     0,  1660,     0,
       0,     0,     0,     0,  1674,  1661,     0,  1675,  1676,  1677,
       0,  1678,  1679,  1680,  1681,  1682,  1683,     0,     0,     0,
       0,     0,     0,     0,     0,  1673,     0,     0,     0,     0,
       0,     0,  1662,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1674,     0,     0,  1675,  1676,  1677,
    1663,  1678,  1679,  1680,  1681,  1682,  1683,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1664,     0,
       0,     0,     0,  1665,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1663,     0,     0,     0,     0,  1674,  1666,  1667,  1675,  1676,
    1677,     0,  1678,  1679,  1680,  1681,  1682,  1683,  1664,     0,
       0,  1668,     0,  1665,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1663,     0,     0,     0,  1674,  1666,  1667,  1675,  1676,
    1677,     0,  1678,  1679,  1680,  1681,  1682,  1683,     0,  1664,
       0,  1668,     0,  1669,  1665,     0,  1670,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1671,     0,     0,  1672,     0,     0,     0,  1666,  1667,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1668,  1669,     0,     0,  1670,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1671,     0,     0,  1672,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1649,     0,  1669,  1650,     0,  1670,     0,  1651,
    1652,  1653,  1654,  1655,  1656,  1657,     0,     0,     0,     0,
       0,  1671,     0,     0,  1672,     0,     0,     0,     0,     0,
    1658,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1660,  1649,     0,     0,  1650,  1673,     0,  1661,  1651,  1652,
    1653,  1654,  1655,  1656,  1657,     0,     0,     0,     0,     0,
    1649,     0,     0,  1650,     0,     0,     0,  1651,  1652,  1658,
       0,  1655,  1656,  1657,  1662,     0,     0,     0,     0,  1660,
    2841,     0,     0,     0,     0,  1673,  1661,     0,  1658,     0,
       0,     0,     0,     0,     0,     0,  1649,     0,  1660,  1650,
       0,     0,     0,  1651,  1652,  1661,     0,  1655,  1656,  1657,
       0,     0,     0,  1662,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1658,     0,  1673,     0,     0,     0,
       0,     0,  1662,     0,  1660,     0,     0,     0,     0,     0,
       0,  1661,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1674,     0,     0,  1675,  1676,
    1677,     0,  1678,  1679,  1680,  1681,  1682,  1683,  1662,     0,
       0,     0,     0,  1663,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1664,     0,     0,     0,  1674,  1665,     0,  1675,  1676,
    1677,     0,  1678,  1679,  1680,  1681,  1682,  1683,     0,     0,
       0,     0,  1663,     0,     0,     0,     0,     0,     0,  1848,
    1667,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1664,  1663,     0,     0,  1668,  1665,  1674,     0,     0,  1675,
    1676,  1677,     0,  1678,  1679,  1680,  1681,  1682,  1683,  1664,
       0,     0,     0,     0,  1665,     0,     0,     0,  1666,  1667,
       0,     0,     0,     0,     0,     0,     0,  1663,     0,     0,
       0,     0,     0,  1668,     0,     0,  1669,  1666,  1667,  1670,
       0,     0,     0,     0,     0,  1664,     0,     0,     0,     0,
    1665,     0,  1668,  1671,     0,     0,  1672,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1666,  1667,  1669,     0,     0,  1670,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1668,     0,
       0,     0,  1671,     0,  1669,  1672,     0,  1670,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1671,     0,     0,  1672,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1669,     0,     0,  1670,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1671,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1673,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1673,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1673,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1673,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1674,     0,
       0,  1675,  1676,  1677,     0,  1678,  1679,  1680,  1681,  1682,
    1683,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1674,     0,     0,
    1675,  1676,  1677,     0,  1678,  1679,  1680,  1681,  2247,  1683,
       0,     0,     0,     0,     0,     0,  1674,     0,     0,  1675,
    1676,  1677,     0,  1678,  1679,  1680,  1681,  1682,  1683,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   567,     0,  2138,     0,
       0,     0,  1674,     0,     0,  1675,  1676,  1677,     0,  1678,
    1679,  1680,  1681,  1682,  1683,   119,   120,   121,   122,   123,
     124,   125,   126,   568,   127,   128,   129,   569,   570,   571,
     572,   573,   574,   575,   576,   577,   131,   132,   578,   133,
     134,   135,   579,   137,   138,   139,   580,   581,   582,   583,
     584,   585,   145,   146,   147,   148,   149,   150,   586,   587,
     151,   152,   153,   154,   588,   589,   157,   590,   158,   159,
     160,   161,   591,   592,   593,   594,   595,   165,   166,   167,
     168,   169,   596,   171,   172,   173,   597,   174,   175,   176,
     177,   178,   179,   598,   599,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   601,   192,   193,   602,   195,
     603,   196,   604,   197,   198,   199,   200,   201,   202,   605,
     606,   203,   204,   205,   206,   607,   608,   207,   208,   209,
     210,   211,   212,   609,   213,   214,   215,   610,   216,   217,
     218,   611,   219,   220,   221,   222,   612,   224,   225,   226,
     227,   228,   229,   613,   614,   231,   615,   616,   232,   233,
     617,   235,   618,   236,   619,   237,   620,   621,   622,   240,
     241,   623,   624,   244,   625,   626,   245,   627,   628,   629,
     248,   249,   630,   250,   251,   252,   253,   254,   255,   256,
     631,   258,   259,   260,   261,   632,   262,   263,   264,   265,
     266,   267,   268,   633,   269,   634,   635,   272,   273,   274,
     275,   276,   636,   637,   638,   639,   640,   280,   641,   642,
     283,   643,   285,   286,   287,   288,   289,   290,   644,   645,
     291,   646,   293,   647,   648,   295,   649,   650,   296,   297,
     298,   299,   300,   301,   302,   651,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   652,   653,   654,
     328,   329,   330,   331,   655,   656,   333,   334,   657,   336,
     658,   659,   338,   660,   340,   341,   342,   661,   343,   344,
     662,   663,   345,   346,   347,   664,   665,   348,   349,   666,
     667,   352,   353,   668,   669,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   670,   671,   672,
     673,   368,   369,   674,   675,   372,   373,   676,   677,   375,
     376,   377,   678,   378,   379,   380,   381,   382,   383,   679,
     384,   385,   386,   387,   388,   680,   390,   391,   392,   393,
     681,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   682,   407,   408,   683,   410,   411,
     412,   684,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   685,   686,   427,   428,   429,
     430,   431,   432,   687,   434,   435,   688,   689,   437,   438,
     690,   440,   691,   441,   442,   443,   444,   445,   446,   447,
     448,   449,   450,   451,   452,   692,   454,   693,   694,   695,
     456,   457,   696,   458,   697,   460,   698,   461,   462,   463,
     464,   465,   699,   466,   700,   701,   702,   703,   469,   470,
     704,   472,   705,   706,   474,   475,   707,   477,   478,   479,
     480,   481,   708,   709,   482,   483,   484,   710,   485,   486,
     487,   488,   711,   489,   490,   491,   492,   493,   712,   713,
     496,   714,   497,   715,   499,   500,   501,   502,   503,   504,
     505,   716,   717,   506,   718,   719,   507,   508,   509,   510,
     511,   512,   720,   721,   722,   723,   724,   725,   726,   727,
     728,   729,   730,   524,   525,   526,   527,   567,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   119,   120,   121,   122,
     123,   124,   125,   126,   568,   127,   128,   129,   569,   570,
     571,   572,   573,   574,   575,   576,   577,   131,   132,   578,
     133,   134,   135,   579,   137,   138,   139,   580,   581,   582,
     583,   584,   585,   145,   146,   147,   148,   149,   150,   586,
     587,   151,   152,   153,   154,   588,   589,   157,   590,   158,
     159,   160,   161,   591,   592,   593,   594,   595,   165,   166,
     167,   168,   169,   596,   171,   172,   173,   597,   174,   175,
     176,   177,   178,   179,   598,   599,   181,   182,   183,   184,
     185,   186,   600,   188,   189,   190,   601,   192,   193,   602,
     195,   603,   196,   604,   197,   198,   199,   200,   201,   202,
     605,   606,   203,   204,   205,   206,   607,   608,   207,   208,
     209,   210,   211,   212,   609,   213,   214,   215,   610,   216,
     217,   218,   611,   219,   220,   221,   222,   612,   224,   225,
     226,   227,   228,   229,   613,   614,   231,   615,   616,   232,
     233,   617,   235,   618,   236,   619,   237,   620,   621,   622,
     240,   241,   623,   624,   244,   625,   626,   245,   627,   628,
     629,   248,   249,   630,   250,   251,   252,   253,   254,   255,
     256,   631,   258,   259,   260,   261,   632,   262,   263,   264,
     265,   266,   267,   268,   633,   269,   634,   635,   272,   273,
     274,   275,   276,   636,   637,   638,   639,   640,   280,   641,
     642,   283,   643,   285,   286,   287,   288,   289,   290,   644,
     645,   291,   646,   293,   647,   648,   295,   649,   650,   296,
     297,   298,   299,   300,   301,   302,   651,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   652,   653,
     654,   328,   329,   330,   331,   655,   656,   333,   334,   657,
     336,   658,   659,   338,   660,   340,   341,   342,   661,   343,
     344,   662,   663,   345,   346,   347,   664,   665,   348,   349,
     666,   667,   352,   353,   668,   669,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   670,   671,
     672,   673,   368,   369,   674,   675,   372,   373,   676,   677,
     375,   376,   377,   678,   378,   379,   380,   381,   382,   383,
     679,   384,   385,   386,   387,   388,   680,   390,   391,   392,
     393,   681,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   682,   407,   408,   683,   410,
     411,   412,   684,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   685,   686,   427,   428,
     429,   430,   431,   432,   687,   434,   435,   688,   689,   437,
     438,   690,   440,   691,   441,   442,   443,   444,   445,   446,
     447,   448,   449,   450,   451,   452,   692,   454,   693,   694,
     695,   456,   457,   696,   458,   697,   460,   698,   461,   462,
     463,   464,   465,   699,   466,   700,   701,   702,   703,   469,
     470,   704,   472,   705,   706,   474,   475,   707,   477,   478,
     479,   480,   481,   708,   709,   482,   483,   484,   710,   485,
     486,   487,   488,   711,   489,   490,   491,   492,   493,   712,
     713,   496,   714,   497,   715,   499,   500,   501,   502,   503,
     504,   505,   716,   717,   506,   718,   719,   507,   508,   509,
     510,   511,   512,   720,   721,   722,   723,   724,   725,   726,
     727,   728,   729,   730,   524,   525,   526,   527,   567,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   119,   120,   121,
     122,   123,   124,   125,   126,   568,   127,   128,   129,   569,
     570,   571,   572,   573,   574,   575,   576,   577,   131,   132,
     578,   133,   134,   135,   579,   137,   138,   139,   580,   581,
     582,   583,   584,   585,   145,   146,   147,   148,   149,   150,
     586,   587,   151,   152,   153,   154,   588,   589,   157,   590,
     158,   159,   160,   161,   591,   592,   593,   594,   595,   165,
     166,   167,   168,   169,   596,   171,   172,   173,   597,   174,
     175,   176,   177,   178,   179,   598,   599,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   601,   192,   193,
     602,   195,   603,   196,   604,   197,   198,   199,   200,   201,
     202,   605,   606,   203,   204,   205,   206,   607,   608,   207,
     208,   209,   210,   211,   212,   609,   213,   214,   215,   610,
     216,   217,   218,   611,   219,   220,   221,   222,   612,   224,
     225,   226,   227,   228,   229,   613,   614,   231,   615,   616,
     232,   233,   617,   235,   618,   236,   619,   237,   620,   621,
     622,   240,   241,   623,   624,   244,   625,   626,   245,   627,
     628,   629,   248,   249,   630,   250,   251,   252,   253,   254,
     971,   256,   631,   258,   259,   260,   261,   632,   262,   263,
     264,   265,   266,   267,   268,   633,   269,   634,   635,   272,
     273,   274,   275,   276,   636,   637,   638,   639,   640,   280,
     641,   642,   283,   643,   285,   286,   287,   288,   289,   290,
     644,   645,   291,   646,   293,   647,   648,   295,   649,   650,
     296,   297,   298,   299,   300,   301,   302,   651,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   652,
     653,   654,   328,   329,   330,   331,   655,   656,   333,   334,
     657,   336,   658,   659,   338,   660,   340,   341,   342,   661,
     343,   344,   662,   663,   345,   346,   347,   664,   665,   348,
     349,   666,   667,   352,   353,   668,   669,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   670,
     671,   672,   673,   368,   369,   674,   675,   372,   373,   676,
     677,   375,   376,   377,   678,   378,   379,   380,   381,   382,
     383,   679,   384,   385,   386,   387,   388,   680,   390,   391,
     392,   393,   681,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   682,   407,   408,   683,
     410,   411,   412,   684,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   685,   686,   427,
     428,   429,   430,   431,   432,   687,   434,   435,   688,   689,
     437,   438,   690,   440,   691,   441,   442,   443,   444,   445,
     446,   447,   448,   449,   450,   451,   452,   692,   454,   693,
     694,   695,   456,   457,   696,   458,   697,   460,   698,   461,
     462,   463,   464,   465,   699,   466,   700,   701,   702,   703,
     469,   470,   704,   472,   705,   706,   474,   475,   707,   477,
     478,   479,   480,   481,   708,   709,   482,   483,   484,   710,
     485,   486,   487,   488,   711,   489,   490,   491,   492,   493,
     712,   713,   496,   714,   497,   715,   499,   500,   501,   502,
     503,   504,   505,   716,   717,   506,   718,   719,   507,   508,
     509,   510,   511,   512,   720,   721,   722,   723,   724,   725,
     726,   727,   728,   729,   730,   524,   525,   526,   527,   567,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   119,   120,
     121,   122,   123,   124,   125,   126,   568,   127,   128,   129,
     569,   570,   571,   572,   573,   574,   575,   576,   577,   131,
     132,   578,   133,   134,   135,   579,   137,   138,   139,   580,
     581,   582,   583,   584,   585,   145,   146,   147,   148,   149,
     150,   586,   587,   151,   152,   153,   154,   588,   589,   157,
     590,   158,   159,   160,   161,   591,   592,   593,   594,   595,
     165,   166,   167,   168,   169,   596,   171,   172,   173,   597,
     174,   175,   176,   177,   178,   179,   598,   599,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   601,   192,
     193,   602,   195,   603,   196,   604,   197,   198,   199,   200,
     201,   202,   605,   606,   203,   204,   205,   206,   607,   608,
     207,   208,   209,   210,   211,   212,   609,   213,   214,   215,
     610,   216,   217,   218,   611,   219,   220,   221,   222,   612,
     224,   225,   226,   227,   228,   229,   613,   614,   231,   615,
     616,   232,   233,   617,   235,   618,   236,   619,   237,   620,
     621,   622,   240,   241,   623,   624,   244,   625,   626,   245,
     627,   628,   629,   248,   249,   630,   250,   251,   252,   253,
     254,   255,   256,   631,   258,   259,   260,   261,   632,   262,
     263,   264,   265,   266,   267,   268,   633,   269,   634,   635,
     272,   273,   274,   275,   276,   636,   637,   638,   639,   640,
     280,   641,   642,   283,   643,   285,   286,   287,   288,   289,
     290,   644,   645,   291,   646,   293,   647,   648,   295,   649,
     650,   296,   297,   298,   299,   300,   301,   302,   651,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     652,   653,   654,   328,   329,   330,   331,   655,   656,   333,
     334,   657,   336,   658,   659,   338,   660,   340,   341,   342,
     661,   343,   344,   662,   663,   345,   346,   347,   664,   665,
     348,   349,   666,   667,   352,   353,   668,   669,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     670,   671,   672,   673,   368,   369,   674,   675,   372,   373,
     676,   677,   375,   376,   377,   678,   378,   379,   380,   381,
     382,   383,   679,   384,   385,   386,   387,   388,   680,   390,
     391,   392,   393,   681,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   682,   407,   408,
     683,   410,   411,   412,   684,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   685,   686,
     427,   428,   429,   430,   431,   432,   687,   434,   435,   688,
     689,   437,   438,   690,   440,   691,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   692,   454,
     693,   694,   695,   456,   457,   696,   458,   697,   460,   698,
     461,   462,   463,   464,   465,   699,   466,   700,   701,   702,
     703,   469,   470,   704,   472,   705,   706,   474,   475,   707,
     477,   478,   479,   480,   481,   708,   709,   482,   483,   484,
     710,   485,   486,   487,   488,   711,   489,   490,   491,   492,
     493,   712,   713,   496,   714,   497,   715,   499,   500,   501,
     502,   503,   504,   505,   716,   717,   506,   718,   719,   507,
     508,   509,   510,   511,   512,   720,   721,   722,   723,   724,
     725,   726,   727,   728,   729,   730,   524,   525,   526,   527,
     567,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   119,
     120,   121,   122,  2292,   124,   125,   126,   568,   127,   128,
     129,   569,   570,   571,   572,   573,   574,   575,   576,   577,
     131,   132,   578,   133,   134,   135,   579,   137,   138,   139,
     580,   581,   582,   583,   584,   585,   145,   146,   147,   148,
     149,   150,   586,   587,   151,   152,   153,   154,   588,   589,
     157,   590,   158,   159,   160,   161,   591,   592,   593,   594,
     595,   165,   166,   167,   168,   169,   596,   171,   172,   173,
     597,   174,   175,   176,   177,   178,   179,   598,   599,   181,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   601,
     192,   193,   602,   195,   603,   196,   604,   197,   198,   199,
     200,   201,   202,   605,   606,   203,   204,   205,   206,   607,
     608,   207,   208,   209,  2293,   211,   212,   609,   213,   214,
     215,   610,   216,   217,   218,   611,   219,   220,   221,   222,
     612,   224,   225,   226,   227,   228,   229,   613,   614,   231,
     615,   616,   232,   233,   617,   235,   618,   236,   619,   237,
     620,   621,   622,   240,   241,   623,   624,   244,   625,   626,
     245,   627,   628,   629,   248,   249,   630,   250,   251,   252,
     253,   254,   255,   256,   631,   258,   259,   260,   261,   632,
     262,   263,   264,   265,   266,   267,   268,   633,   269,   634,
     635,   272,   273,   274,   275,   276,   636,   637,   638,   639,
     640,   280,   641,   642,   283,   643,   285,   286,   287,   288,
     289,   290,   644,   645,   291,   646,   293,   647,   648,   295,
     649,   650,   296,   297,   298,   299,   300,   301,   302,   651,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   652,   653,   654,   328,   329,   330,   331,   655,   656,
     333,   334,   657,   336,   658,   659,   338,   660,   340,   341,
     342,   661,   343,   344,   662,   663,   345,   346,   347,   664,
     665,   348,   349,   666,   667,   352,   353,   668,   669,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   670,   671,   672,   673,   368,   369,   674,   675,   372,
     373,   676,   677,   375,   376,   377,   678,   378,   379,   380,
     381,   382,   383,   679,   384,   385,   386,   387,   388,   680,
     390,   391,   392,   393,   681,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   682,   407,
     408,   683,   410,   411,   412,   684,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   685,
     686,   427,   428,   429,   430,   431,  2294,   687,   434,   435,
     688,   689,   437,   438,   690,   440,   691,   441,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   692,
     454,   693,   694,   695,   456,   457,   696,   458,   697,   460,
     698,   461,   462,   463,   464,   465,   699,   466,   700,   701,
     702,   703,   469,   470,   704,   472,   705,   706,   474,   475,
     707,   477,   478,   479,   480,   481,   708,   709,   482,   483,
     484,   710,   485,   486,   487,   488,   711,   489,   490,   491,
     492,   493,   712,   713,   496,   714,   497,   715,   499,   500,
     501,   502,   503,   504,   505,   716,   717,   506,   718,   719,
     507,   508,   509,   510,   511,   512,   720,   721,   722,   723,
     724,   725,   726,   727,   728,   729,   730,   524,   525,   526,
     527,   995,     0,   836,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     119,   120,   121,   122,   123,   124,   125,   126,     0,   127,
     128,   129,     0,     0,     0,   572,     0,     0,     0,     0,
     577,   131,   132,     0,   133,   134,   135,   579,   137,   138,
     139,   580,   581,   582,   583,   584,     0,   145,   146,   147,
     148,   149,   150,     0,     0,   151,   152,   153,   154,   588,
     589,   157,     0,   158,   159,   160,   161,   591,     0,   593,
       0,   595,   165,   166,   167,   168,   169,   596,   171,   172,
     173,     0,   174,   175,   176,   177,   178,   179,     0,   599,
     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     601,   192,   193,   602,   195,     0,   196,     0,   197,   198,
     199,   200,   201,   202,     0,     0,   203,   204,   205,   206,
       0,     0,   207,   208,   209,   210,   211,   212,     0,   213,
     214,   215,     0,   216,   217,   218,     0,   219,   220,   221,
     222,   612,   224,   225,   226,   227,   228,   229,   613,  1381,
     231,     0,     0,   232,   233,   617,   235,     0,   236,     0,
     237,   620,     0,   622,   240,   241,   623,   624,   244,     0,
       0,   245,     0,   628,   629,   248,   249,     0,   250,   251,
     252,   253,   254,   255,   256,   631,   258,   259,   260,   261,
       0,   262,   263,   264,   265,   266,   267,   268,     0,   269,
     634,   635,   272,   273,   274,   275,   276,   636,   637,     0,
     639,     0,   280,   641,   642,   283,   643,   285,   286,   287,
     288,   289,   290,     0,     0,   291,   646,   293,   647,     0,
     295,     0,     0,   296,   297,   298,   299,   300,   301,   302,
     651,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   652,   653,   654,   328,   329,   330,   331,   655,
       0,   333,   334,   657,   336,     0,   659,   338,   660,   340,
     341,   342,     0,   343,   344,  1382,     0,   345,   346,   347,
       0,     0,   348,   349,   666,   667,   352,   353,   668,   669,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,     0,     0,     0,     0,   368,   369,   674,   675,
     372,   373,   676,     0,   375,   376,   377,     0,   378,   379,
     380,   381,   382,   383,     0,   384,   385,   386,   387,   388,
     680,   390,   391,   392,   393,     0,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,     0,
     407,   408,   683,   410,   411,   412,   684,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
       0,   686,   427,   428,   429,   430,   431,   432,   687,   434,
     435,     0,   689,   437,   438,   690,   440,     0,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
     692,   454,   693,     0,     0,   456,   457,     0,   458,   697,
     460,     0,   461,   462,   463,   464,   465,     0,   466,   700,
     701,     0,     0,   469,   470,   704,   472,   705,  1383,   474,
     475,   707,   477,   478,   479,   480,   481,     0,     0,   482,
     483,   484,     0,   485,   486,   487,   488,     0,   489,   490,
     491,   492,   493,   712,   713,   496,     0,   497,   715,   499,
     500,   501,   502,   503,   504,   505,     0,     0,   506,     0,
       0,   507,   508,   509,   510,   511,   512,   720,   721,   722,
     723,   724,   725,   726,   727,   728,   729,   730,   524,   525,
     526,   527,   995,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   119,   120,   121,   122,   123,   124,   125,   126,     0,
     127,   128,   129,     3,     4,     0,   572,     0,     0,     0,
       0,   577,   131,   132,     0,   133,   134,   135,   579,   137,
     138,   139,   580,   581,   582,   583,   584,     0,   145,   146,
     147,   148,   149,   150,     0,     0,   151,   152,   153,   154,
     588,   589,   157,     0,   158,   159,   160,   161,   591,     0,
     593,     0,   595,   165,   166,   167,   168,   169,   596,   171,
     172,   173,     0,   174,   175,   176,   177,   178,   179,     0,
     599,   181,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   601,   192,   193,   602,   195,     0,   196,     0,   197,
     198,   199,   200,   201,   202,     0,     0,   203,   204,   205,
     206,     0,     0,   207,   208,   209,   210,   211,   212,     0,
     213,   214,   215,     0,   216,   217,   218,     0,   219,   220,
     221,   222,   612,   224,   225,   226,   227,   228,   229,   613,
       0,   231,     0,     0,   232,   233,   617,   235,     0,   236,
       0,   237,   620,     0,   622,   240,   241,   623,   624,   244,
       0,     0,   245,     0,   628,   629,   248,   249,     0,   250,
     251,   252,   253,   254,   255,   256,   631,   258,   259,   260,
     261,     0,   262,   263,   264,   265,   266,   267,   268,     0,
     269,   634,   635,   272,   273,   274,   275,   276,   636,   637,
       0,   639,     0,   280,   641,   642,   283,   643,   285,   286,
     287,   288,   289,   290,     0,     0,   291,   646,   293,   647,
       0,   295,     0,     0,   296,   297,   298,   299,   300,   301,
     302,   651,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   652,   653,   654,   328,   329,   330,   331,
     655,     0,   333,   334,   657,   336,     0,   659,   338,   660,
     340,   341,   342,     0,   343,   344,     0,     0,   345,   346,
     347,     0,     0,   348,   349,   666,   667,   352,   353,   668,
     669,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,     0,     0,     0,     0,   368,   369,   674,
     675,   372,   373,   676,     0,   375,   376,   377,     0,   378,
     379,   380,   381,   382,   383,     0,   384,   385,   386,   387,
     388,   680,   390,   391,   392,   393,     0,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
       0,   407,   408,   683,   410,   411,   412,   684,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,     0,   686,   427,   428,   429,   430,   431,   432,   687,
     434,   435,     0,   689,   437,   438,   690,   440,     0,   441,
     442,   443,   444,   445,   446,   447,   448,   449,   450,   451,
     452,   692,   454,   693,     0,     0,   456,   457,     0,   458,
     697,   460,     0,   461,   462,   463,   464,   465,     0,   466,
     700,   701,     0,     0,   469,   470,   704,   472,   705,     0,
     474,   475,   707,   477,   478,   479,   480,   481,     0,     0,
     482,   483,   484,     0,   485,   486,   487,   488,     0,   489,
     490,   491,   492,   493,   712,   713,   496,     0,   497,   715,
     499,   500,   501,   502,   503,   504,   505,     0,     0,   506,
       0,     0,   507,   508,   509,   510,   511,   512,   720,   721,
     722,   723,   724,   725,   726,   727,   728,   729,   730,   524,
     525,   526,   527,   118,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   119,   120,   121,   122,   123,   124,   125,   126,
       0,   127,   128,   129,     0,     0,     0,     0,     0,     0,
       0,     0,   130,   131,   132,     0,   133,   134,   135,   136,
     137,   138,   139,   140,   141,   142,   143,   144,     0,   145,
     146,   147,   148,   149,   150,     0,   805,   151,   152,   153,
     154,   155,   156,   157,     0,   158,   159,   160,   161,   806,
       0,   807,     0,   164,   165,   166,   167,   168,   169,   170,
     171,   172,   173,     0,   174,   175,   176,   177,   178,   179,
       0,   180,   181,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,     0,   196,     0,
     197,   198,   199,   200,   201,   202,     0,     0,   203,   204,
     205,   206,     0,     0,   207,   208,   209,   210,   211,   212,
       0,   213,   214,   215,     0,   216,   217,   218,     0,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     808,     0,   231,     0,     0,   232,   233,   234,   235,     0,
     236,     0,   237,   238,     0,   239,   240,   241,   242,   243,
     244,     0,     0,   245,     0,   246,   247,   248,   249,     0,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,     0,   262,   263,   264,   265,   266,   267,   268,
       0,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,     0,   279,     0,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,     0,     0,   291,   292,   293,
     294,     0,   295,     0,     0,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,   332,     0,   333,   334,   335,   336,     0,   810,   338,
     339,   340,   341,   342,     0,   343,   344,     0,     0,   345,
     346,   347,     0,     0,   348,   349,   350,   351,   352,   353,
     354,   812,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,     0,     0,     0,     0,   368,   369,
     813,   371,   372,   373,   374,     0,   375,   376,   377,     0,
     378,   379,   380,   381,   382,   383,     0,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,     0,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,     0,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,     0,     0,   427,   428,   429,   430,   431,   432,
     433,   434,   435,     0,   436,   437,   438,   439,   440,     0,
     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
     451,   452,   453,   454,   816,     0,     0,   456,   457,     0,
     458,   459,   460,     0,   461,   462,   463,   464,   465,     0,
     466,   467,   468,     0,     0,   469,   470,   817,   472,   818,
       0,   474,   475,   819,   477,   478,   479,   480,   481,     0,
       0,   482,   483,   484,     0,   485,   486,   487,   488,     0,
     489,   490,   491,   492,   493,   494,   495,   496,     0,   497,
     498,   499,   500,   501,   502,   503,   504,   505,     0,     0,
     506,     0,     0,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   518,   519,   520,   521,   522,   523,
     524,   525,   526,   527,   118,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   119,   120,   121,   122,   123,   124,   125,
     126,     0,   127,   128,   129,     0,     0,     0,     0,     0,
       0,     0,     0,   130,   131,   132,     0,   133,   134,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,     0,
     145,   146,   147,   148,   149,   150,     0,     0,   151,   152,
     153,   154,   155,   156,   157,     0,   158,   159,   160,   161,
     162,     0,   163,     0,   164,   165,   166,   167,   168,   169,
     170,   171,   172,   173,     0,   174,   175,   176,   177,   178,
     179,     0,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,     0,   196,
       0,   197,   198,   199,   200,   201,   202,     0,     0,   203,
     204,   205,   206,     0,     0,   207,   208,   209,   210,   211,
     212,     0,   213,   214,   215,     0,   216,   217,   218,     0,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   230,     0,   231,     0,     0,   232,   233,   234,   235,
       0,   236,     0,   237,   238,     0,   239,   240,   241,   242,
     243,   244,     0,     0,   245,     0,   246,   247,   248,   249,
       0,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,     0,   262,   263,   264,   265,   266,   267,
     268,     0,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,     0,   279,     0,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,     0,     0,   291,   292,
     293,   294,     0,   295,     0,     0,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   332,     0,   333,   334,   335,   336,     0,   337,
     338,   339,   340,   341,   342,     0,   343,   344,     0,     0,
     345,   346,   347,     0,     0,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,     0,     0,     0,     0,   368,
     369,   370,   371,   372,   373,   374,     0,   375,   376,   377,
       0,   378,   379,   380,   381,   382,   383,     0,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,     0,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,     0,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,     0,     0,   427,   428,   429,   430,   431,
     432,   433,   434,   435,     0,   436,   437,   438,   439,   440,
       0,   441,   442,   443,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   453,   454,   455,     0,     0,   456,   457,
       0,   458,   459,   460,     0,   461,   462,   463,   464,   465,
       0,   466,   467,   468,     0,     0,   469,   470,   471,   472,
     473,     0,   474,   475,   476,   477,   478,   479,   480,   481,
       0,     0,   482,   483,   484,     0,   485,   486,   487,   488,
       0,   489,   490,   491,   492,   493,   494,   495,   496,     0,
     497,   498,   499,   500,   501,   502,   503,   504,   505,     0,
       0,   506,     0,     0,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,   518,   519,   520,   521,   522,
     523,   524,   525,   526,   527,   535,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   119,   120,   121,   122,   123,   124,
     125,   126,     0,   127,   128,   129,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   131,   132,     0,   133,   134,
     135,     0,   137,   138,   139,   140,   141,     0,   143,   144,
       0,   145,   146,   147,   148,   149,   150,     0,     0,   151,
     152,   153,   154,   155,   156,   157,  1781,   158,   159,   160,
     161,   162,     0,     0,  1782,   164,   165,   166,   167,   168,
     169,     0,   171,   172,   173,  1783,   174,   175,   176,   177,
     178,   179,     0,     0,   181,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,     0,
     196,     0,   197,   198,   199,   200,   201,   202,     0,     0,
     203,   204,   205,   206,     0,     0,   207,   208,   209,   210,
     211,   212,     0,   213,   214,   215,     0,   216,   217,   218,
       0,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,     0,   231,     0,     0,   232,   233,   234,
     235,     0,   236,  1784,   237,     0,     0,     0,   240,   241,
     536,     0,   244,     0,     0,   245,     0,   246,   247,   248,
     249,     0,   250,   251,   252,   253,   254,  1785,   256,     0,
     258,   259,   260,   261,     0,   262,   263,   264,   265,   266,
     267,   268,     0,   269,     0,   271,   272,   273,   274,   275,
     276,   277,   278,     0,   279,     0,   280,     0,     0,   283,
       0,   285,   286,   287,   288,   289,   290,     0,     0,   291,
       0,   293,     0,     0,   295,     0,     0,   296,   297,   298,
     299,   300,   301,   302,   537,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,     0,   327,   328,
     329,   330,   331,   332,     0,   333,   334,     0,   336,     0,
     337,   338,   339,   340,   341,   342,     0,   343,   344,     0,
       0,   345,   346,   347,     0,     0,   348,   349,   350,     0,
     352,   353,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,     0,     0,     0,     0,
     368,   369,   370,     0,   372,   373,   374,     0,   375,   376,
     377,  1786,   378,   379,   380,   381,   382,   383,     0,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,     0,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,     0,   407,   408,     0,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,     0,     0,   427,   428,   429,   430,
     431,   432,   433,   434,   435,     0,     0,   437,   438,   439,
     440,     0,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   538,   454,   455,     0,     0,   456,
     457,     0,   458,     0,   460,     0,   461,   462,   463,   464,
     465,     0,   466,   467,   468,     0,     0,   469,   470,   471,
     472,   473,     0,   474,   475,   476,   477,   478,   479,   480,
     481,     0,  1787,   482,   483,   484,     0,   485,   486,   487,
     488,     0,   489,   490,   491,   492,   493,   494,   495,   496,
       0,   497,     0,   499,   500,   501,   502,   503,   504,   505,
       0,     0,   506,     0,     0,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520,   521,
     522,   523,   524,   525,   526,   527,   535,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   119,   120,   121,   122,   123,
     124,   125,   126,     0,   127,   128,   129,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   131,   132,     0,   133,
     134,   135,     0,   137,   138,   139,   140,   141,     0,   143,
     144,     0,   145,   146,   147,   148,   149,   150,     0,     0,
     151,   152,   153,   154,   155,   156,   157,  1781,   158,   159,
     160,   161,   162,     0,     0,     0,   164,   165,   166,   167,
     168,   169,     0,   171,   172,   173,  1783,   174,   175,   176,
     177,   178,   179,     0,     0,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
       0,   196,     0,   197,   198,   199,   200,   201,   202,     0,
       0,   203,   204,   205,   206,     0,     0,   207,   208,   209,
     210,   211,   212,     0,   213,   214,   215,     0,   216,   217,
     218,     0,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,     0,   231,     0,     0,   232,   233,
     234,   235,     0,   236,  1784,   237,     0,     0,     0,   240,
     241,   536,     0,   244,     0,     0,   245,     0,   246,   247,
     248,   249,     0,   250,   251,   252,   253,   254,   255,   256,
       0,   258,   259,   260,   261,     0,   262,   263,   264,   265,
     266,   267,   268,     0,   269,     0,   271,   272,   273,   274,
     275,   276,   277,   278,     0,   279,     0,   280,     0,     0,
     283,     0,   285,   286,   287,   288,   289,   290,     0,     0,
     291,     0,   293,  2375,     0,   295,     0,     0,   296,   297,
     298,   299,   300,   301,   302,   537,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,     0,   327,
     328,   329,   330,   331,   332,     0,   333,   334,     0,   336,
       0,   337,   338,   339,   340,   341,   342,     0,   343,   344,
       0,     0,   345,   346,   347,     0,     0,   348,   349,   350,
       0,   352,   353,     0,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,     0,     0,     0,
       0,   368,   369,   370,     0,   372,   373,   374,     0,   375,
     376,   377,  1786,   378,   379,   380,   381,   382,   383,     0,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
       0,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,     0,   407,   408,     0,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,     0,     0,   427,   428,   429,
     430,   431,   432,   433,   434,   435,     0,     0,   437,   438,
     439,   440,     0,   441,   442,   443,   444,   445,   446,   447,
     448,   449,   450,   451,   452,   538,   454,   455,     0,     0,
     456,   457,     0,   458,     0,   460,     0,   461,   462,   463,
     464,   465,     0,   466,   467,   468,     0,     0,   469,   470,
     471,   472,   473,     0,   474,   475,   476,   477,   478,   479,
     480,   481,     0,  1787,   482,   483,   484,     0,   485,   486,
     487,   488,     0,   489,   490,   491,   492,   493,   494,   495,
     496,     0,   497,     0,   499,   500,   501,   502,   503,   504,
     505,     0,     0,   506,     0,     0,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,   517,   518,   519,   520,
     521,   522,   523,   524,   525,   526,   527,   535,     0,   561,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   119,   120,   121,   122,
     123,   124,   125,   126,     0,   127,   128,   129,     3,     4,
       0,     0,     0,     0,     0,     0,     0,   131,   132,     0,
     133,   134,   135,     0,   137,   138,   139,   140,   141,     0,
     143,   144,     0,   145,   146,   147,   148,   149,   150,     0,
       0,   151,   152,   153,   154,   155,   156,   157,     0,   158,
     159,   160,   161,   162,     0,     0,     0,   164,   165,   166,
     167,   168,   169,     0,   171,   172,   173,     0,   174,   175,
     176,   177,   178,   179,     0,     0,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,     0,   196,     0,   197,   198,   199,   200,   201,   202,
       0,     0,   203,   204,   205,   206,     0,     0,   207,   208,
     209,   210,   211,   212,     0,   213,   214,   215,     0,   216,
     217,   218,     0,   219,   220,   221,   222,   223,   224,   225,
     226,   227,   228,   229,   230,     0,   231,     0,     0,   232,
     233,   234,   235,     0,   236,     0,   237,     0,     0,     0,
     240,   241,   536,     0,   244,     0,     0,   245,     0,   246,
     247,   248,   249,     0,   250,   251,   252,   253,   254,   255,
     256,     0,   258,   259,   260,   261,     0,   262,   263,   264,
     265,   266,   267,   268,     0,   269,     0,   271,   272,   273,
     274,   275,   276,   277,   278,     0,   279,     0,   280,     0,
       0,   283,     0,   285,   286,   287,   288,   289,   290,     0,
       0,   291,     0,   293,     0,     0,   295,     0,     0,   296,
     297,   298,   299,   300,   301,   302,   537,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     327,   328,   329,   330,   331,   332,     0,   333,   334,     0,
     336,     0,   337,   338,   339,   340,   341,   342,     0,   343,
     344,     0,     0,   345,   346,   347,     0,     0,   348,   349,
     350,     0,   352,   353,     0,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,     0,     0,
       0,     0,   368,   369,   370,     0,   372,   373,   374,     0,
     375,   376,   377,     0,   378,   379,   380,   381,   382,   383,
       0,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,     0,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,     0,   407,   408,     0,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,     0,     0,   427,   428,
     429,   430,   431,   432,   433,   434,   435,     0,     0,   437,
     438,   439,   440,     0,   441,   442,   443,   444,   445,   446,
     447,   448,   449,   450,   451,   452,   538,   454,   455,     0,
       0,   456,   457,     0,   458,     0,   460,     0,   461,   462,
     463,   464,   465,     0,   466,   467,   468,     0,     0,   469,
     470,   471,   472,   473,     0,   474,   475,   476,   477,   478,
     479,   480,   481,     0,     0,   482,   483,   484,     0,   485,
     486,   487,   488,     0,   489,   490,   491,   492,   493,   494,
     495,   496,     0,   497,     0,   499,   500,   501,   502,   503,
     504,   505,     0,     0,   506,     0,     0,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   518,   519,
     520,   521,   522,   523,   524,   525,   526,   527,   535,     0,
     561,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   119,   120,   121,
     122,   123,   124,   125,   126,   562,   127,   128,   129,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   131,   132,
       0,   133,   134,   135,     0,   137,   138,   139,   140,   141,
       0,   143,   144,     0,   145,   146,   147,   148,   149,   150,
       0,     0,   151,   152,   153,   154,   155,   156,   157,     0,
     158,   159,   160,   161,   162,     0,     0,     0,   164,   165,
     166,   167,   168,   169,     0,   171,   172,   173,     0,   174,
     175,   176,   177,   178,   179,     0,     0,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,     0,   196,     0,   197,   198,   199,   200,   201,
     202,     0,     0,   203,   204,   205,   206,     0,     0,   207,
     208,   209,   210,   211,   212,     0,   213,   214,   215,     0,
     216,   217,   218,     0,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,     0,   231,     0,     0,
     232,   233,   234,   235,     0,   236,     0,   237,     0,     0,
       0,   240,   241,   536,     0,   244,     0,     0,   245,     0,
     246,   247,   248,   249,     0,   250,   251,   252,   253,   254,
     255,   256,     0,   258,   259,   260,   261,     0,   262,   263,
     264,   265,   266,   267,   268,     0,   269,     0,   271,   272,
     273,   274,   275,   276,   277,   278,     0,   279,     0,   280,
       0,     0,   283,     0,   285,   286,   287,   288,   289,   290,
       0,     0,   291,     0,   293,     0,     0,   295,     0,     0,
     296,   297,   298,   299,   300,   301,   302,   537,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
       0,   327,   328,   329,   330,   331,   332,     0,   333,   334,
       0,   336,     0,   337,   338,   339,   340,   341,   342,     0,
     343,   344,     0,     0,   345,   346,   347,     0,     0,   348,
     349,   350,     0,   352,   353,     0,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,     0,
       0,     0,     0,   368,   369,   370,     0,   372,   373,   374,
       0,   563,   376,   377,     0,   378,   379,   380,   381,   382,
     383,     0,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,     0,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,     0,   407,   408,     0,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,     0,     0,   427,
     428,   429,   430,   431,   432,   433,   434,   435,     0,     0,
     437,   438,   439,   440,     0,   441,   442,   443,   444,   445,
     446,   447,   448,   449,   450,   451,   452,   538,   454,   455,
       0,     0,   456,   457,     0,   458,     0,   460,     0,   461,
     462,   463,   464,   465,     0,   466,   467,   468,     0,     0,
     469,   470,   471,   472,   473,     0,   474,   475,   476,   477,
     478,   479,   480,   481,     0,     0,   482,   483,   484,     0,
     485,   486,   487,   488,     0,   489,   490,   491,   492,   493,
     494,   495,   496,     0,   497,     0,   499,   500,   501,   502,
     503,   504,   505,     0,     0,   506,     0,     0,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,   518,
     519,   520,   521,   522,   523,   524,   525,   526,   527,   535,
       0,   561,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   119,   120,
     121,   122,   123,   124,   125,   126,     0,   127,   128,   129,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   131,
     132,     0,   133,   134,   135,     0,   137,   138,   139,   140,
     141,     0,   143,   144,     0,   145,   146,   147,   148,   149,
     150,     0,     0,   151,   152,   153,   154,   155,   156,   157,
       0,   158,   159,   160,   161,   162,     0,     0,     0,   164,
     165,   166,   167,   168,   169,     0,   171,   172,   173,     0,
     174,   175,   176,   177,   178,   179,     0,     0,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,     0,   196,     0,   197,   198,   199,   200,
     201,   202,     0,     0,   203,   204,   205,   206,     0,     0,
     207,   208,   209,   210,   211,   212,     0,   213,   214,   215,
       0,   216,   217,   218,     0,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,     0,   231,     0,
       0,   232,   233,   234,   235,     0,   236,     0,   237,     0,
       0,     0,   240,   241,   536,     0,   244,     0,     0,   245,
       0,   246,   247,   248,   249,     0,   250,   251,   252,   253,
     254,   255,   256,     0,   258,   259,   260,   261,     0,   262,
     263,   264,   265,   266,   267,   268,     0,   269,     0,   271,
     272,   273,   274,   275,   276,   277,   278,     0,   279,     0,
     280,     0,     0,   283,     0,   285,   286,   287,   288,   289,
     290,     0,     0,   291,     0,   293,     0,     0,   295,     0,
       0,   296,   297,   298,   299,   300,   301,   302,   537,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,     0,   327,   328,   329,   330,   331,   332,     0,   333,
     334,     0,   336,     0,   337,   338,   339,   340,   341,   342,
       0,   343,   344,     0,   811,   345,   346,   347,     0,     0,
     348,   349,   350,     0,   352,   353,     0,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
       0,     0,     0,     0,   368,   369,   370,     0,   372,   373,
     374,     0,   375,   376,   377,     0,   378,   379,   380,   381,
     382,   383,     0,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,     0,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,     0,   407,   408,
       0,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,     0,     0,
     427,   428,   429,   430,   431,   432,   433,   434,   435,     0,
       0,   437,   438,   439,   440,     0,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   538,   454,
     455,     0,     0,   456,   457,     0,   458,     0,   460,     0,
     461,   462,   463,   464,   465,     0,   466,   467,   468,     0,
       0,   469,   470,   471,   472,   473,     0,   474,   475,   476,
     477,   478,   479,   480,   481,     0,     0,   482,   483,   484,
       0,   485,   486,   487,   488,     0,   489,   490,   491,   492,
     493,   494,   495,   496,     0,   497,     0,   499,   500,   501,
     502,   503,   504,   505,     0,     0,   506,     0,     0,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,   519,   520,   521,   522,   523,   524,   525,   526,   527,
     535,     0,   561,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   119,
     120,   121,   122,   123,   124,   125,   126,     0,   127,   128,
     129,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     131,   132,     0,   133,   134,   135,     0,   137,   138,   139,
     140,   141,     0,   143,   144,     0,   145,   146,   147,   148,
     149,   150,     0,     0,   151,   152,   153,   154,   155,   156,
     157,     0,   158,   159,   160,   161,   162,     0,     0,     0,
     164,   165,   166,   167,   168,   169,     0,   171,   172,   173,
       0,   174,   175,   176,   177,   178,   179,     0,     0,   181,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,     0,   196,     0,   197,   198,   199,
     200,   201,   202,     0,     0,   203,   204,   205,   206,     0,
       0,   207,   208,   209,   210,   211,   212,     0,   213,   214,
     215,     0,   216,   217,   218,     0,   219,   220,   221,   222,
     223,   224,   225,   226,   227,   228,   229,   230,     0,   231,
       0,     0,   232,   233,   234,   235,     0,   236,     0,   237,
       0,     0,     0,   240,   241,   536,     0,   244,     0,     0,
     245,     0,   246,   247,   248,   249,     0,   250,   251,   252,
     253,   254,   919,   256,     0,   258,   259,   260,   261,     0,
     262,   263,   264,   265,   266,   267,   268,     0,   269,     0,
     271,   272,   273,   274,   275,   276,   277,   278,     0,   279,
       0,   280,     0,     0,   283,     0,   285,   286,   287,   288,
     289,   290,     0,     0,   291,     0,   293,     0,     0,   295,
       0,     0,   296,   297,   298,   299,   300,   301,   302,   537,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,     0,   327,   328,   329,   330,   331,   332,     0,
     333,   334,     0,   336,     0,   337,   338,   339,   340,   341,
     342,     0,   343,   344,     0,   811,   345,   346,   347,     0,
       0,   348,   349,   350,     0,   352,   353,     0,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,     0,     0,     0,     0,   368,   369,   370,     0,   372,
     373,   374,     0,   375,   376,   377,     0,   378,   379,   380,
     381,   382,   383,     0,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,     0,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,     0,   407,
     408,     0,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,     0,
       0,   427,   428,   429,   430,   431,   432,   433,   434,   435,
       0,     0,   437,   438,   439,   440,     0,   441,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   538,
     454,   455,     0,     0,   456,   457,     0,   458,     0,   460,
       0,   461,   462,   463,   464,   465,     0,   466,   467,   468,
       0,     0,   469,   470,   471,   472,   473,     0,   474,   475,
     476,   477,   478,   479,   480,   481,     0,     0,   482,   483,
     484,     0,   485,   486,   487,   488,     0,   489,   490,   491,
     492,   493,   494,   495,   496,     0,   497,     0,   499,   500,
     501,   502,   503,   504,   505,     0,     0,   506,     0,     0,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   518,   519,   520,   521,   522,   523,   524,   525,   526,
     527,   535,     0,   561,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     119,   120,   121,   122,   123,   124,   125,   126,   969,   127,
     128,   129,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   131,   132,     0,   133,   134,   135,     0,   137,   138,
     139,   140,   141,     0,   143,   144,     0,   145,   146,   147,
     148,   149,   150,     0,     0,   151,   152,   153,   154,   155,
     156,   157,     0,   158,   159,   160,   161,   162,     0,     0,
       0,   164,   165,   166,   167,   168,   169,     0,   171,   172,
     173,     0,   174,   175,   176,   177,   178,   179,     0,     0,
     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,     0,   196,     0,   197,   198,
     199,   200,   201,   202,     0,     0,   203,   204,   205,   206,
       0,     0,   207,   208,   209,   210,   211,   212,     0,   213,
     214,   215,     0,   216,   217,   218,     0,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,     0,
     231,     0,     0,   232,   233,   234,   235,     0,   236,     0,
     237,     0,     0,     0,   240,   241,   536,     0,   244,     0,
       0,   245,     0,   246,   247,   248,   249,     0,   250,   251,
     252,   253,   254,   255,   256,     0,   258,   259,   260,   261,
       0,   262,   263,   264,   265,   266,   267,   268,     0,   269,
       0,   271,   272,   273,   274,   275,   276,   277,   278,     0,
     279,     0,   280,     0,     0,   283,     0,   285,   286,   287,
     288,   289,   290,     0,     0,   291,     0,   293,     0,     0,
     295,     0,     0,   296,   297,   298,   299,   300,   301,   302,
     537,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,     0,   327,   328,   329,   330,   331,   332,
       0,   333,   334,     0,   336,     0,   337,   338,   339,   340,
     341,   342,     0,   343,   344,     0,     0,   345,   346,   347,
       0,     0,   348,   349,   350,     0,   352,   353,     0,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,     0,     0,     0,     0,   368,   369,   370,     0,
     372,   373,   374,     0,   375,   376,   377,     0,   378,   379,
     380,   381,   382,   383,     0,   384,   385,   386,   387,   388,
     389,   390,   391,   392,   393,     0,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,     0,
     407,   408,     0,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
       0,     0,   427,   428,   429,   430,   431,   432,   433,   434,
     435,     0,     0,   437,   438,   439,   440,     0,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
     538,   454,   455,     0,     0,   456,   457,     0,   458,     0,
     460,     0,   461,   462,   463,   464,   465,     0,   466,   467,
     468,     0,     0,   469,   470,   471,   472,   473,     0,   474,
     475,   476,   477,   478,   479,   480,   481,     0,     0,   482,
     483,   484,     0,   485,   486,   487,   488,     0,   489,   490,
     491,   492,   493,   494,   495,   496,     0,   497,     0,   499,
     500,   501,   502,   503,   504,   505,     0,     0,   506,     0,
       0,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   518,   519,   520,   521,   522,   523,   524,   525,
     526,   527,   535,     0,   561,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   119,   120,   121,   122,   123,   124,   125,   126,     0,
     127,   128,   129,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   131,   132,     0,   133,   134,   135,     0,   137,
     138,   139,   140,   141,     0,   143,   144,     0,   145,   146,
     147,   148,   149,   150,     0,     0,   151,   152,   153,   154,
     155,   156,   157,     0,   158,   159,   160,   161,   162,     0,
       0,     0,   164,   165,   166,   167,   168,   169,     0,   171,
     172,   173,     0,   174,   175,   176,   177,   178,   179,     0,
       0,   181,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,     0,   196,     0,   197,
     198,   199,   200,   201,   202,     0,     0,   203,   204,   205,
     206,     0,     0,   207,   208,   209,   210,   211,   212,     0,
     213,   214,   215,     0,   216,   217,   218,     0,   219,   220,
     221,   222,   223,   224,   225,   226,   227,  1201,   229,   230,
       0,   231,     0,     0,   232,   233,   234,   235,     0,   236,
       0,   237,     0,     0,     0,   240,   241,   536,     0,   244,
       0,     0,   245,     0,   246,   247,   248,   249,     0,   250,
     251,   252,   253,   254,   255,   256,     0,   258,   259,   260,
     261,     0,   262,   263,   264,   265,   266,   267,   268,     0,
     269,     0,   271,   272,   273,   274,   275,   276,   277,   278,
       0,   279,     0,   280,     0,     0,   283,     0,   285,   286,
     287,   288,   289,   290,     0,     0,   291,     0,   293,     0,
       0,   295,     0,     0,   296,   297,   298,   299,   300,   301,
     302,   537,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,     0,   327,   328,   329,   330,   331,
     332,     0,   333,   334,     0,   336,     0,   337,   338,   339,
     340,   341,   342,     0,   343,   344,     0,   811,   345,   346,
     347,     0,     0,   348,   349,   350,     0,   352,   353,     0,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,     0,     0,     0,     0,   368,   369,   370,
       0,   372,   373,   374,     0,   375,   376,   377,     0,   378,
     379,   380,   381,   382,   383,     0,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,     0,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
       0,   407,   408,     0,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,     0,     0,   427,   428,   429,   430,   431,   432,   433,
     434,   435,     0,     0,   437,   438,   439,   440,     0,   441,
     442,   443,   444,   445,   446,   447,   448,   449,   450,   451,
     452,   538,   454,   455,     0,     0,   456,   457,     0,   458,
       0,   460,     0,   461,   462,   463,   464,   465,     0,   466,
     467,   468,     0,     0,   469,   470,   471,   472,   473,     0,
     474,   475,   476,   477,   478,   479,   480,   481,     0,     0,
     482,   483,   484,     0,   485,   486,   487,   488,     0,   489,
     490,   491,   492,   493,   494,   495,   496,     0,   497,     0,
     499,   500,   501,   502,   503,   504,   505,     0,     0,   506,
       0,     0,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   535,  1995,     0,     0,     0,     0,  1996,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   119,   120,   121,   122,   123,   124,   125,   126,
       0,   127,   128,   129,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   131,   132,     0,   133,   134,   135,     0,
     137,   138,   139,   140,   141,     0,   143,   144,     0,   145,
     146,   147,   148,   149,   150,     0,     0,   151,   152,   153,
     154,   155,   156,   157,     0,   158,   159,   160,   161,   162,
       0,     0,     0,   164,   165,   166,   167,   168,   169,     0,
     171,   172,   173,     0,   174,   175,   176,   177,   178,   179,
       0,     0,   181,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,     0,   196,     0,
     197,   198,   199,   200,   201,   202,     0,     0,   203,   204,
     205,   206,     0,     0,   207,   208,   209,   210,   211,   212,
       0,   213,   214,   215,     0,   216,   217,   218,     0,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     230,     0,   231,     0,     0,   232,   233,   234,   235,     0,
     236,     0,   237,     0,     0,     0,   240,   241,   536,     0,
     244,     0,     0,   245,     0,   246,   247,   248,   249,     0,
     250,   251,   252,   253,   254,   255,   256,     0,   258,   259,
     260,   261,     0,   262,   263,   264,   265,   266,   267,   268,
       0,   269,     0,   271,   272,   273,   274,   275,   276,   277,
     278,     0,   279,     0,   280,     0,     0,   283,     0,   285,
     286,   287,   288,   289,   290,     0,     0,   291,     0,   293,
       0,     0,   295,     0,     0,   296,   297,   298,   299,   300,
     301,   302,   537,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,     0,   327,   328,   329,   330,
     331,   332,     0,   333,   334,     0,   336,     0,   337,   338,
     339,   340,   341,   342,     0,   343,   344,     0,     0,   345,
     346,   347,     0,     0,   348,   349,   350,     0,   352,   353,
       0,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,     0,     0,     0,     0,   368,   369,
     370,     0,   372,   373,   374,     0,   375,   376,   377,     0,
     378,   379,   380,   381,   382,   383,     0,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,     0,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,     0,   407,   408,     0,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,     0,     0,   427,   428,   429,   430,   431,   432,
     433,   434,   435,     0,     0,   437,   438,   439,   440,     0,
     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
     451,   452,   538,   454,   455,     0,     0,   456,   457,     0,
     458,     0,   460,     0,   461,   462,   463,   464,   465,     0,
     466,   467,   468,     0,     0,   469,   470,   471,   472,   473,
       0,   474,   475,   476,   477,   478,   479,   480,   481,     0,
       0,   482,   483,   484,     0,   485,   486,   487,   488,     0,
     489,   490,   491,   492,   493,   494,   495,   496,     0,   497,
       0,   499,   500,   501,   502,   503,   504,   505,     0,     0,
     506,     0,     0,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   518,   519,   520,   521,   522,   523,
     524,   525,   526,   527,   535,     0,   561,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   119,   120,   121,   122,   123,   124,   125,
     126,     0,   127,   128,   129,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   131,   132,     0,   133,   134,   135,
       0,   137,   138,   139,   140,   141,     0,   143,   144,     0,
     145,   146,   147,   148,   149,   150,     0,     0,   151,   152,
     153,   154,   155,   156,   157,     0,   158,   159,   160,   161,
     162,     0,     0,     0,   164,   165,   166,   167,   168,   169,
       0,   171,   172,   173,     0,   174,   175,   176,   177,   178,
     179,     0,     0,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,     0,   196,
       0,   197,   198,   199,   200,   201,   202,     0,     0,   203,
     204,   205,   206,     0,     0,   207,   208,   209,   210,   211,
     212,     0,   213,   214,   215,     0,   216,   217,   218,     0,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   230,     0,   231,     0,     0,   232,   233,   234,   235,
       0,   236,     0,   237,     0,     0,     0,   240,   241,   536,
       0,  2003,     0,     0,   245,     0,   246,   247,   248,   249,
       0,   250,   251,   252,   253,   254,   255,   256,     0,   258,
     259,   260,   261,     0,   262,   263,   264,   265,   266,   267,
     268,     0,   269,     0,   271,   272,   273,   274,   275,   276,
     277,   278,     0,   279,     0,   280,     0,     0,   283,     0,
     285,   286,   287,   288,   289,   290,     0,     0,   291,     0,
     293,     0,     0,   295,     0,     0,   296,  2004,   298,   299,
     300,   301,   302,   537,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,     0,   327,   328,   329,
     330,   331,   332,     0,   333,   334,     0,   336,     0,   337,
     338,   339,   340,   341,   342,     0,   343,   344,     0,     0,
     345,   346,   347,     0,     0,   348,   349,   350,     0,   352,
     353,     0,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,     0,     0,     0,     0,   368,
     369,   370,     0,   372,   373,   374,     0,   375,   376,   377,
       0,   378,   379,   380,   381,   382,   383,     0,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,     0,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,     0,   407,   408,     0,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,     0,     0,   427,   428,   429,   430,   431,
     432,   433,   434,   435,     0,     0,   437,   438,   439,   440,
       0,   441,   442,   443,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   538,   454,   455,     0,     0,   456,   457,
    2005,   458,     0,   460,     0,   461,  2006,   463,  2007,   465,
       0,   466,   467,   468,     0,     0,   469,   470,   471,   472,
     473,     0,   474,   475,   476,   477,   478,   479,   480,   481,
       0,     0,   482,   483,  2008,     0,   485,   486,   487,   488,
       0,   489,   490,   491,   492,   493,   494,   495,   496,     0,
     497,     0,   499,   500,   501,   502,   503,   504,   505,     0,
       0,   506,     0,     0,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,   518,   519,   520,   521,   522,
     523,   524,   525,   526,   527,   535,     0,   561,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   119,   120,   121,   122,   123,   124,
     125,   126,     0,   127,   128,   129,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   131,   132,     0,   133,   134,
     135,     0,   137,   138,   139,   140,   141,     0,   143,   144,
       0,   145,   146,   147,   148,   149,   150,     0,     0,   151,
     152,   153,   154,   155,   156,   157,     0,   158,   159,   160,
     161,   162,     0,     0,     0,   164,   165,   166,   167,   168,
     169,     0,   171,   172,   173,     0,   174,   175,   176,   177,
     178,   179,     0,     0,   181,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,     0,
     196,     0,   197,   198,   199,   200,   201,   202,     0,     0,
     203,   204,   205,   206,     0,     0,   207,   208,   209,   210,
     211,   212,     0,   213,   214,   215,     0,   216,   217,   218,
       0,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,     0,   231,     0,     0,   232,   233,   234,
     235,     0,   236,     0,   237,     0,     0,     0,   240,   241,
     536,     0,   244,     0,     0,   245,     0,   246,   247,   248,
     249,     0,   250,   251,   252,   253,   254,   255,   256,     0,
     258,   259,   260,   261,     0,   262,   263,   264,   265,   266,
     267,   268,     0,   269,     0,   271,   272,   273,   274,   275,
     276,   277,   278,     0,   279,     0,   280,     0,     0,   283,
       0,   285,   286,   287,   288,   289,   290,     0,     0,   291,
       0,   293,     0,     0,   295,     0,     0,   296,   297,   298,
     299,   300,   301,   302,   537,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,     0,   327,   328,
     329,   330,   331,   332,     0,   333,   334,     0,   336,     0,
     337,   338,   339,   340,   341,   342,     0,   343,   344,     0,
       0,   345,   346,   347,     0,     0,   348,   349,   350,     0,
     352,   353,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,     0,     0,     0,     0,
     368,   369,   370,     0,   372,   373,   374,     0,   375,   376,
     377,     0,   378,   379,   380,   381,   382,   383,     0,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,     0,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,     0,   407,   408,     0,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,     0,     0,   427,   428,   429,   430,
     431,   432,   433,   434,   435,     0,     0,   437,   438,   439,
     440,     0,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   538,   454,   455,     0,     0,   456,
     457,     0,   458,     0,   460,     0,   461,   462,   463,   464,
     465,     0,   466,   467,   468,     0,     0,   469,   470,   471,
     472,   473,     0,   474,   475,   476,   477,   478,   479,   480,
     481,     0,     0,   482,   483,   484,     0,   485,   486,   487,
     488,     0,   489,   490,   491,   492,   493,   494,   495,   496,
       0,   497,     0,   499,   500,   501,   502,   503,   504,   505,
       0,     0,   506,     0,     0,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520,   521,
     522,   523,   524,   525,   526,   527,   535,     0,   836,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   119,   120,   121,   122,   123,
     124,   125,   126,     0,   127,   128,   129,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   131,   132,     0,   133,
     134,   135,     0,   137,   138,   139,   140,   141,     0,   143,
     144,     0,   145,   146,   147,   148,   149,   150,     0,     0,
     151,   152,   153,   154,   155,   156,   157,     0,   158,   159,
     160,   161,   162,     0,     0,     0,   164,   165,   166,   167,
     168,   169,     0,   171,   172,   173,     0,   174,   175,   176,
     177,   178,   179,     0,     0,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
       0,   196,     0,   197,   198,   199,   200,   201,   202,     0,
       0,   203,   204,   205,   206,     0,     0,   207,   208,   209,
     210,   211,   212,     0,   213,   214,   215,     0,   216,   217,
     218,     0,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,     0,   231,     0,     0,   232,   233,
     234,   235,     0,   236,     0,   237,     0,     0,     0,   240,
     241,   536,     0,   244,     0,     0,   245,     0,   246,   247,
     248,   249,     0,   250,   251,   252,   253,   254,   255,   256,
       0,   258,   259,   260,   261,     0,   262,   263,   264,   265,
     266,   267,   268,     0,   269,     0,   271,   272,   273,   274,
     275,   276,   277,   278,     0,   279,     0,   280,     0,     0,
     283,     0,   285,   286,   287,   288,   289,   290,     0,     0,
     291,     0,   293,     0,     0,   295,     0,     0,   296,   297,
     298,   299,   300,   301,   302,   537,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,     0,   327,
     328,   329,   330,   331,   332,     0,   333,   334,     0,   336,
       0,   337,   338,   339,   340,   341,   342,     0,   343,   344,
       0,     0,   345,   346,   347,     0,     0,   348,   349,   350,
       0,   352,   353,     0,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,     0,     0,     0,
       0,   368,   369,   370,     0,   372,   373,   374,     0,   375,
     376,   377,     0,   378,   379,   380,   381,   382,   383,     0,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
       0,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,     0,   407,   408,     0,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,     0,     0,   427,   428,   429,
     430,   431,   432,   433,   434,   435,     0,     0,   437,   438,
     439,   440,     0,   441,   442,   443,   444,   445,   446,   447,
     448,   449,   450,   451,   452,   538,   454,   455,     0,     0,
     456,   457,     0,   458,     0,   460,     0,   461,   462,   463,
     464,   465,     0,   466,   467,   468,     0,     0,   469,   470,
     471,   472,   473,     0,   474,   475,   476,   477,   478,   479,
     480,   481,     0,     0,   482,   483,   484,     0,   485,   486,
     487,   488,     0,   489,   490,   491,   492,   493,   494,   495,
     496,     0,   497,     0,   499,   500,   501,   502,   503,   504,
     505,     0,     0,   506,     0,     0,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,   517,   518,   519,   520,
     521,   522,   523,   524,   525,   526,   527,   535,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   119,   120,   121,   122,
     123,   124,   125,   126,   842,   127,   128,   129,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   131,   132,     0,
     133,   134,   135,     0,   137,   138,   139,   140,   141,     0,
     143,   144,     0,   145,   146,   147,   148,   149,   150,     0,
       0,   151,   152,   153,   154,   155,   156,   157,     0,   158,
     159,   160,   161,   162,     0,     0,     0,   164,   165,   166,
     167,   168,   169,     0,   171,   172,   173,     0,   174,   175,
     176,   177,   178,   179,     0,     0,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,     0,   196,     0,   197,   198,   199,   200,   201,   202,
       0,     0,   203,   204,   205,   206,     0,     0,   207,   208,
     209,   210,   211,   212,     0,   213,   214,   215,     0,   216,
     217,   218,     0,   219,   220,   221,   222,   223,   224,   225,
     226,   227,   228,   229,   230,     0,   231,     0,     0,   232,
     233,   234,   235,     0,   236,     0,   237,     0,     0,     0,
     240,   241,   536,     0,   843,     0,     0,   245,     0,   246,
     247,   248,   249,     0,   250,   251,   252,   253,   254,   255,
     256,     0,   258,   259,   260,   261,     0,   262,   263,   264,
     265,   266,   267,   268,     0,   269,     0,   271,   272,   273,
     274,   275,   276,   277,   278,     0,   279,     0,   280,     0,
       0,   283,     0,   285,   286,   287,   288,   289,   290,     0,
       0,   291,     0,   293,     0,     0,   295,     0,     0,   296,
     844,   298,   299,   300,   301,   302,   537,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     327,   328,   329,   330,   331,   332,     0,   333,   334,     0,
     336,     0,   337,   338,   339,   340,   341,   342,     0,   343,
     344,     0,     0,   345,   346,   347,     0,     0,   348,   349,
     350,     0,   352,   353,     0,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,     0,     0,
       0,     0,   368,   369,   370,     0,   372,   373,   374,     0,
     375,   376,   377,     0,   378,   379,   380,   381,   382,   383,
       0,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,     0,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,     0,   407,   408,     0,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,     0,     0,   427,   428,
     429,   430,   845,   432,   433,   434,   435,     0,     0,   437,
     438,   439,   440,     0,   441,   442,   443,   444,   445,   446,
     447,   448,   449,   450,   451,   452,   538,   454,   455,     0,
       0,   456,   457,     0,   458,     0,   460,     0,   461,   462,
     463,   464,   465,     0,   466,   846,   468,     0,     0,   847,
     470,   471,   472,   473,     0,   474,   475,   476,   477,   478,
     479,   480,   481,     0,     0,   482,   483,   484,     0,   485,
     486,   487,   488,     0,   489,   490,   491,   492,   493,   494,
     495,   848,     0,   497,     0,   499,   500,   501,   502,   503,
     504,   505,     0,     0,   506,     0,     0,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   518,   519,
     520,   521,   522,   523,   524,   525,   526,   527,   535,     0,
     561,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   119,   120,   121,
     122,   123,   124,   125,   126,     0,   127,   128,   129,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   131,   132,
       0,   133,   134,   135,     0,   137,   138,   139,   140,   141,
       0,   143,   144,     0,   145,   146,   147,   148,   149,   150,
       0,     0,   151,   152,   153,   154,   155,   156,   157,     0,
     158,   159,   160,   161,   162,     0,     0,     0,   164,   165,
     166,   167,   168,   169,     0,   171,   172,   173,     0,   174,
     175,   176,   177,   178,   179,     0,     0,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,     0,   196,     0,   197,   198,   199,   200,   201,
     202,     0,     0,   203,   204,   205,   206,     0,     0,   207,
     208,   209,   210,   211,   212,     0,   213,   214,   215,     0,
     216,   217,   218,     0,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,     0,   231,     0,     0,
     232,   233,   234,   235,     0,   236,     0,   237,     0,     0,
       0,   240,   241,   536,     0,   244,     0,     0,   245,     0,
     246,   247,   248,   249,     0,   250,   251,   252,   253,   254,
     255,   256,     0,   258,   259,   260,   261,     0,   262,   263,
     264,   265,   266,   267,   268,     0,   269,     0,   271,   272,
     273,   274,   275,   276,   277,   278,     0,   279,     0,   280,
       0,     0,   283,     0,   285,   286,   287,   288,   289,   290,
       0,     0,   291,     0,   293,     0,     0,   295,     0,     0,
     296,   297,   298,   299,   300,   301,   302,   537,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
       0,   327,   328,   329,   330,   331,   332,     0,   333,   334,
       0,   336,     0,   337,   338,   339,   340,   341,   342,     0,
     343,   344,     0,     0,   345,   346,   347,     0,     0,   348,
     349,   350,     0,   352,   353,     0,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,     0,
       0,     0,     0,   368,   369,   370,     0,   372,   373,   374,
       0,   375,   376,   377,     0,   378,   379,   380,   381,   382,
     383,     0,   384,   385,   386,   387,   388,   389,   390,   391,
     881,   393,     0,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,     0,   407,   408,     0,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,     0,     0,   427,
     428,   429,   430,   431,   432,   433,   434,   435,     0,     0,
     437,   438,   439,   440,     0,   441,   442,   443,   444,   445,
     446,   447,   448,   449,   450,   451,   452,   538,   454,   455,
       0,     0,   456,   457,     0,   458,     0,   460,     0,   461,
     462,   463,   464,   465,     0,   466,   467,   468,     0,     0,
     469,   470,   471,   472,   473,     0,   474,   475,   476,   477,
     478,   479,   480,   481,     0,     0,   482,   483,   484,     0,
     485,   486,   487,   488,     0,   489,   490,   491,   492,   493,
     494,   495,   496,     0,   497,     0,   499,   500,   501,   502,
     503,   504,   505,     0,     0,   506,     0,     0,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,   518,
     519,   520,   521,   522,   523,   524,   525,   526,   527,   535,
       0,   561,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   119,   120,
     121,   122,   123,   124,   125,   126,     0,   127,   128,   129,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   131,
     132,     0,   133,   134,   135,     0,   137,   138,   139,   140,
     141,     0,   143,   144,     0,   145,   146,   147,   148,   149,
     150,     0,     0,   151,   152,   153,   154,   155,   156,   157,
       0,   158,   159,   160,   161,   162,     0,     0,     0,   164,
     165,   166,   167,   168,   169,     0,   171,   172,   173,     0,
     174,   175,   176,   177,   178,   179,     0,     0,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,     0,   196,     0,   197,   198,   199,   200,
     201,   202,     0,     0,   203,   204,   205,   206,     0,     0,
     207,   208,   209,   210,   211,   212,     0,   213,   214,   215,
       0,   216,   217,   218,     0,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,     0,   231,     0,
       0,   232,   233,   234,   235,     0,   236,     0,   237,     0,
       0,     0,   240,   241,   536,     0,   244,     0,     0,   245,
       0,   246,   247,   248,   249,     0,   250,   251,   252,   253,
     254,   914,   256,     0,   258,   259,   260,   261,     0,   262,
     263,   264,   265,   266,   267,   268,     0,   269,     0,   271,
     272,   273,   274,   275,   276,   277,   278,     0,   279,     0,
     280,     0,     0,   283,     0,   285,   286,   287,   288,   289,
     290,     0,     0,   291,     0,   293,     0,     0,   295,     0,
       0,   296,   297,   298,   299,   300,   301,   302,   537,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,     0,   327,   328,   329,   330,   331,   332,     0,   333,
     334,     0,   336,     0,   337,   338,   339,   340,   341,   342,
       0,   343,   344,     0,     0,   345,   346,   347,     0,     0,
     348,   349,   350,     0,   352,   353,     0,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
       0,     0,     0,     0,   368,   369,   370,     0,   372,   373,
     374,     0,   375,   376,   377,     0,   378,   379,   380,   381,
     382,   383,     0,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,     0,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,     0,   407,   408,
       0,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,     0,     0,
     427,   428,   429,   430,   431,   432,   433,   434,   435,     0,
       0,   437,   438,   439,   440,     0,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   538,   454,
     455,     0,     0,   456,   457,     0,   458,     0,   460,     0,
     461,   462,   463,   464,   465,     0,   466,   467,   468,     0,
       0,   469,   470,   471,   472,   473,     0,   474,   475,   476,
     477,   478,   479,   480,   481,     0,     0,   482,   483,   484,
       0,   485,   486,   487,   488,     0,   489,   490,   491,   492,
     493,   494,   495,   496,     0,   497,     0,   499,   500,   501,
     502,   503,   504,   505,     0,     0,   506,     0,     0,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,   519,   520,   521,   522,   523,   524,   525,   526,   527,
     535,     0,   561,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   119,
     120,   121,   122,   123,   124,   125,   126,     0,   127,   128,
     129,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     131,   132,     0,   133,   134,   135,     0,   137,   138,   139,
     140,   141,     0,   143,   144,     0,   145,   146,   147,   148,
     149,   150,     0,     0,   151,   152,   153,   154,   155,   156,
     157,     0,   158,   159,   160,   161,   162,     0,     0,     0,
     164,   165,   166,   167,   168,   169,     0,   171,   172,   173,
       0,   174,   175,   176,   177,   178,   179,     0,     0,   181,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,     0,   196,     0,   197,   198,   199,
     200,   201,   202,     0,     0,   203,   204,   205,   206,     0,
       0,   207,   208,   209,   210,   211,   212,     0,   213,   214,
     215,     0,   216,   217,   218,     0,   219,   220,   221,   222,
     223,   224,   225,   226,   227,   228,   229,   230,     0,   231,
       0,     0,   232,   233,   234,   235,     0,   236,     0,   237,
       0,     0,     0,   240,   241,   536,     0,   244,     0,     0,
     245,     0,   246,   247,   248,   249,     0,   250,   251,   252,
     253,   254,   917,   256,     0,   258,   259,   260,   261,     0,
     262,   263,   264,   265,   266,   267,   268,     0,   269,     0,
     271,   272,   273,   274,   275,   276,   277,   278,     0,   279,
       0,   280,     0,     0,   283,     0,   285,   286,   287,   288,
     289,   290,     0,     0,   291,     0,   293,     0,     0,   295,
       0,     0,   296,   297,   298,   299,   300,   301,   302,   537,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,     0,   327,   328,   329,   330,   331,   332,     0,
     333,   334,     0,   336,     0,   337,   338,   339,   340,   341,
     342,     0,   343,   344,     0,     0,   345,   346,   347,     0,
       0,   348,   349,   350,     0,   352,   353,     0,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,     0,     0,     0,     0,   368,   369,   370,     0,   372,
     373,   374,     0,   375,   376,   377,     0,   378,   379,   380,
     381,   382,   383,     0,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,     0,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,     0,   407,
     408,     0,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,     0,
       0,   427,   428,   429,   430,   431,   432,   433,   434,   435,
       0,     0,   437,   438,   439,   440,     0,   441,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   538,
     454,   455,     0,     0,   456,   457,     0,   458,     0,   460,
       0,   461,   462,   463,   464,   465,     0,   466,   467,   468,
       0,     0,   469,   470,   471,   472,   473,     0,   474,   475,
     476,   477,   478,   479,   480,   481,     0,     0,   482,   483,
     484,     0,   485,   486,   487,   488,     0,   489,   490,   491,
     492,   493,   494,   495,   496,     0,   497,     0,   499,   500,
     501,   502,   503,   504,   505,     0,     0,   506,     0,     0,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   518,   519,   520,   521,   522,   523,   524,   525,   526,
     527,   535,     0,   561,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     119,   120,   121,   122,   123,   124,   125,   126,     0,   127,
     128,   129,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   131,   132,     0,   133,   134,   135,     0,   137,   138,
     139,   140,   141,     0,   143,   144,     0,   145,   146,   147,
     148,   149,   150,     0,     0,   151,   152,   153,   154,   155,
     156,   157,     0,   158,   159,   160,   161,   162,     0,     0,
       0,   164,   165,   166,   167,   168,   169,     0,   171,   172,
     173,     0,   174,   175,   176,   177,   178,   179,     0,     0,
     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,     0,   196,     0,   197,   198,
     199,   200,   201,   202,     0,     0,   203,   204,   205,   206,
       0,     0,   207,   208,   209,   210,   211,   212,     0,   213,
     214,   215,     0,   216,   217,   218,     0,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,     0,
     231,     0,     0,   232,   233,   234,   235,     0,   236,     0,
     237,     0,     0,     0,   240,   241,   536,     0,   244,     0,
       0,   245,     0,   246,   247,   248,   249,     0,   250,   251,
     252,   253,   254,   921,   256,     0,   258,   259,   260,   261,
       0,   262,   263,   264,   265,   266,   267,   268,     0,   269,
       0,   271,   272,   273,   274,   275,   276,   277,   278,     0,
     279,     0,   280,     0,     0,   283,     0,   285,   286,   287,
     288,   289,   290,     0,     0,   291,     0,   293,     0,     0,
     295,     0,     0,   296,   297,   298,   299,   300,   301,   302,
     537,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,     0,   327,   328,   329,   330,   331,   332,
       0,   333,   334,     0,   336,     0,   337,   338,   339,   340,
     341,   342,     0,   343,   344,     0,     0,   345,   346,   347,
       0,     0,   348,   349,   350,     0,   352,   353,     0,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,     0,     0,     0,     0,   368,   369,   370,     0,
     372,   373,   374,     0,   375,   376,   377,     0,   378,   379,
     380,   381,   382,   383,     0,   384,   385,   386,   387,   388,
     389,   390,   391,   392,   393,     0,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,     0,
     407,   408,     0,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
       0,     0,   427,   428,   429,   430,   431,   432,   433,   434,
     435,     0,     0,   437,   438,   439,   440,     0,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
     538,   454,   455,     0,     0,   456,   457,     0,   458,     0,
     460,     0,   461,   462,   463,   464,   465,     0,   466,   467,
     468,     0,     0,   469,   470,   471,   472,   473,     0,   474,
     475,   476,   477,   478,   479,   480,   481,     0,     0,   482,
     483,   484,     0,   485,   486,   487,   488,     0,   489,   490,
     491,   492,   493,   494,   495,   496,     0,   497,     0,   499,
     500,   501,   502,   503,   504,   505,     0,     0,   506,     0,
       0,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   518,   519,   520,   521,   522,   523,   524,   525,
     526,   527,   535,     0,   561,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   119,   120,   121,   122,   123,   124,   125,   126,     0,
     127,   128,   129,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   131,   132,     0,   133,   134,   135,     0,   137,
     138,   139,   140,   141,     0,   143,   144,     0,   145,   146,
     147,   148,   149,   150,     0,     0,   151,   152,   153,   154,
     155,   156,   157,     0,   158,   159,   160,   161,   162,     0,
       0,     0,   164,   165,   166,   167,   168,   169,     0,   171,
     172,   173,     0,   174,   175,   176,   177,   178,   179,     0,
       0,   181,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,     0,   196,     0,   197,
     198,   199,   200,   201,   202,     0,     0,   203,   204,   205,
     206,     0,     0,   207,   208,   209,   210,   211,   212,     0,
     213,   214,   215,     0,   216,   217,   218,     0,   219,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
       0,   231,     0,     0,   232,   233,   234,   235,     0,   236,
       0,   237,     0,     0,     0,   240,   241,   536,     0,   244,
       0,     0,   245,     0,   246,   247,   248,   249,     0,   250,
     251,   252,   253,   254,   952,   256,     0,   258,   259,   260,
     261,     0,   262,   263,   264,   265,   266,   267,   268,     0,
     269,     0,   271,   272,   273,   274,   275,   276,   277,   278,
       0,   279,     0,   280,     0,     0,   283,     0,   285,   286,
     287,   288,   289,   290,     0,     0,   291,     0,   293,     0,
       0,   295,     0,     0,   296,   297,   298,   299,   300,   301,
     302,   537,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,     0,   327,   328,   329,   330,   331,
     332,     0,   333,   334,     0,   336,     0,   337,   338,   339,
     340,   341,   342,     0,   343,   344,     0,     0,   345,   346,
     347,     0,     0,   348,   349,   350,     0,   352,   353,     0,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,     0,     0,     0,     0,   368,   369,   370,
       0,   372,   373,   374,     0,   375,   376,   377,     0,   378,
     379,   380,   381,   382,   383,     0,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,     0,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
       0,   407,   408,     0,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,     0,     0,   427,   428,   429,   430,   431,   432,   433,
     434,   435,     0,     0,   437,   438,   439,   440,     0,   441,
     442,   443,   444,   445,   446,   447,   448,   449,   450,   451,
     452,   538,   454,   455,     0,     0,   456,   457,     0,   458,
       0,   460,     0,   461,   462,   463,   464,   465,     0,   466,
     467,   468,     0,     0,   469,   470,   471,   472,   473,     0,
     474,   475,   476,   477,   478,   479,   480,   481,     0,     0,
     482,   483,   484,     0,   485,   486,   487,   488,     0,   489,
     490,   491,   492,   493,   494,   495,   496,     0,   497,     0,
     499,   500,   501,   502,   503,   504,   505,     0,     0,   506,
       0,     0,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   535,     0,   561,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   119,   120,   121,   122,   123,   124,   125,   126,
       0,   127,   128,   129,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   131,   132,     0,   133,   134,   135,     0,
     137,   138,   139,   140,   141,     0,   143,   144,     0,   145,
     146,   147,   148,   149,   150,     0,     0,   151,   152,   153,
     154,   155,   156,   157,     0,   158,   159,   160,   161,   162,
       0,     0,     0,   164,   165,   166,   167,   168,   169,     0,
     171,   172,   173,     0,   174,   175,   176,   177,   178,   179,
       0,     0,   181,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,     0,   196,     0,
     197,   198,   199,   200,   201,   202,     0,     0,   203,   204,
     205,   206,     0,     0,   207,   208,   209,   210,   211,   212,
       0,   213,   214,   215,     0,   216,   217,   218,     0,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     230,     0,   231,     0,     0,   232,   233,   234,   235,     0,
     236,     0,   237,     0,     0,     0,   240,   241,   536,     0,
     244,     0,     0,   245,     0,   246,   247,   248,   249,     0,
     250,   251,   252,   253,   254,   985,   256,     0,   258,   259,
     260,   261,     0,   262,   263,   264,   265,   266,   267,   268,
       0,   269,     0,   271,   272,   273,   274,   275,   276,   277,
     278,     0,   279,     0,   280,     0,     0,   283,     0,   285,
     286,   287,   288,   289,   290,     0,     0,   291,     0,   293,
       0,     0,   295,     0,     0,   296,   297,   298,   299,   300,
     301,   302,   537,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,     0,   327,   328,   329,   330,
     331,   332,     0,   333,   334,     0,   336,     0,   337,   338,
     339,   340,   341,   342,     0,   343,   344,     0,     0,   345,
     346,   347,     0,     0,   348,   349,   350,     0,   352,   353,
       0,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,     0,     0,     0,     0,   368,   369,
     370,     0,   372,   373,   374,     0,   375,   376,   377,     0,
     378,   379,   380,   381,   382,   383,     0,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,     0,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,     0,   407,   408,     0,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,     0,     0,   427,   428,   429,   430,   431,   432,
     433,   434,   435,     0,     0,   437,   438,   439,   440,     0,
     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
     451,   452,   538,   454,   455,     0,     0,   456,   457,     0,
     458,     0,   460,     0,   461,   462,   463,   464,   465,     0,
     466,   467,   468,     0,     0,   469,   470,   471,   472,   473,
       0,   474,   475,   476,   477,   478,   479,   480,   481,     0,
       0,   482,   483,   484,     0,   485,   486,   487,   488,     0,
     489,   490,   491,   492,   493,   494,   495,   496,     0,   497,
       0,   499,   500,   501,   502,   503,   504,   505,     0,     0,
     506,     0,     0,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   518,   519,   520,   521,   522,   523,
     524,   525,   526,   527,   535,     0,   561,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   119,   120,   121,   122,   123,   124,   125,
     126,     0,   127,   128,   129,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   131,   132,     0,   133,   134,   135,
       0,   137,   138,   139,   140,   141,     0,   143,   144,     0,
     145,   146,   147,   148,   149,   150,     0,     0,   151,   152,
     153,   154,   155,   156,   157,     0,   158,   159,   160,   161,
     162,     0,     0,     0,   164,   165,   166,   167,   168,   169,
       0,   171,   172,   173,     0,   174,   175,   176,   177,   178,
     179,     0,     0,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,     0,   196,
       0,   197,   198,   199,   200,   201,   202,     0,     0,   203,
     204,   205,   206,     0,     0,   207,   208,   209,   210,   211,
     212,     0,   213,   214,   215,     0,   216,   217,   218,     0,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   230,     0,   231,     0,     0,   232,   233,   234,   235,
       0,   236,     0,   237,     0,     0,     0,   240,   241,   536,
       0,   244,     0,     0,   245,     0,   246,   247,   248,   249,
       0,   250,   251,   252,   253,   254,   988,   256,     0,   258,
     259,   260,   261,     0,   262,   263,   264,   265,   266,   267,
     268,     0,   269,     0,   271,   272,   273,   274,   275,   276,
     277,   278,     0,   279,     0,   280,     0,     0,   283,     0,
     285,   286,   287,   288,   289,   290,     0,     0,   291,     0,
     293,     0,     0,   295,     0,     0,   296,   297,   298,   299,
     300,   301,   302,   537,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,     0,   327,   328,   329,
     330,   331,   332,     0,   333,   334,     0,   336,     0,   337,
     338,   339,   340,   341,   342,     0,   343,   344,     0,     0,
     345,   346,   347,     0,     0,   348,   349,   350,     0,   352,
     353,     0,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,     0,     0,     0,     0,   368,
     369,   370,     0,   372,   373,   374,     0,   375,   376,   377,
       0,   378,   379,   380,   381,   382,   383,     0,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,     0,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,     0,   407,   408,     0,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,     0,     0,   427,   428,   429,   430,   431,
     432,   433,   434,   435,     0,     0,   437,   438,   439,   440,
       0,   441,   442,   443,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   538,   454,   455,     0,     0,   456,   457,
       0,   458,     0,   460,     0,   461,   462,   463,   464,   465,
       0,   466,   467,   468,     0,     0,   469,   470,   471,   472,
     473,     0,   474,   475,   476,   477,   478,   479,   480,   481,
       0,     0,   482,   483,   484,     0,   485,   486,   487,   488,
       0,   489,   490,   491,   492,   493,   494,   495,   496,     0,
     497,     0,   499,   500,   501,   502,   503,   504,   505,     0,
       0,   506,     0,     0,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,   518,   519,   520,   521,   522,
     523,   524,   525,   526,   527,   535,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   119,   120,   121,   122,   123,   124,
     125,   126,     0,   127,   128,   129,     0,     0,     0,     0,
       0,     0,  1031,     0,     0,   131,   132,     0,   133,   134,
     135,     0,   137,   138,   139,   140,   141,     0,   143,   144,
       0,   145,   146,   147,   148,   149,   150,     0,     0,   151,
     152,   153,   154,   155,   156,   157,     0,   158,   159,   160,
     161,   162,     0,     0,     0,   164,   165,   166,   167,   168,
     169,     0,   171,   172,   173,     0,   174,   175,   176,   177,
     178,   179,     0,     0,   181,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,     0,
     196,     0,   197,   198,   199,   200,   201,   202,     0,     0,
     203,   204,   205,   206,     0,     0,   207,   208,   209,   210,
     211,   212,     0,   213,   214,   215,     0,   216,   217,   218,
       0,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,     0,   231,     0,     0,   232,   233,   234,
     235,     0,   236,     0,   237,     0,     0,     0,   240,   241,
     536,     0,   244,     0,     0,   245,     0,   246,   247,   248,
     249,     0,   250,   251,   252,   253,   254,   255,   256,     0,
     258,   259,   260,   261,     0,   262,   263,   264,   265,   266,
     267,   268,     0,   269,     0,   271,   272,   273,   274,   275,
     276,   277,   278,     0,   279,     0,   280,     0,     0,   283,
       0,   285,   286,   287,   288,   289,   290,     0,     0,   291,
       0,   293,     0,     0,   295,     0,     0,   296,   297,   298,
     299,   300,   301,   302,   537,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,     0,   327,   328,
     329,   330,   331,   332,     0,   333,   334,     0,   336,     0,
     337,   338,   339,   340,   341,   342,     0,   343,   344,     0,
       0,   345,   346,   347,     0,     0,   348,   349,   350,     0,
     352,   353,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,     0,     0,     0,     0,
     368,   369,   370,     0,   372,   373,   374,     0,   375,   376,
     377,     0,   378,   379,   380,   381,   382,   383,     0,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,     0,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,     0,   407,   408,     0,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,     0,     0,   427,   428,   429,   430,
     431,   432,   433,   434,   435,     0,     0,   437,   438,   439,
     440,     0,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   538,   454,   455,     0,     0,   456,
     457,     0,   458,     0,   460,     0,   461,   462,   463,   464,
     465,     0,   466,   467,   468,     0,     0,   469,   470,   471,
     472,   473,     0,   474,   475,   476,   477,   478,   479,   480,
     481,     0,     0,   482,   483,   484,     0,   485,   486,   487,
     488,     0,   489,   490,   491,   492,   493,   494,   495,   496,
       0,   497,     0,   499,   500,   501,   502,   503,   504,   505,
       0,     0,   506,     0,     0,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520,   521,
     522,   523,   524,   525,   526,   527,   535,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   119,   120,   121,   122,   123,
     124,   125,   126,     0,   127,   128,   129,     0,     0,     0,
       0,     0,     0,  1054,     0,     0,   131,   132,     0,   133,
     134,   135,     0,   137,   138,   139,   140,   141,     0,   143,
     144,     0,   145,   146,   147,   148,   149,   150,     0,     0,
     151,   152,   153,   154,   155,   156,   157,     0,   158,   159,
     160,   161,   162,     0,     0,     0,   164,   165,   166,   167,
     168,   169,     0,   171,   172,   173,     0,   174,   175,   176,
     177,   178,   179,     0,     0,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
       0,   196,     0,   197,   198,   199,   200,   201,   202,     0,
       0,   203,   204,   205,   206,     0,     0,   207,   208,   209,
     210,   211,   212,     0,   213,   214,   215,     0,   216,   217,
     218,     0,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,     0,   231,     0,     0,   232,   233,
     234,   235,     0,   236,     0,   237,     0,     0,     0,   240,
     241,   536,     0,   244,     0,     0,   245,     0,   246,   247,
     248,   249,     0,   250,   251,   252,   253,   254,   255,   256,
       0,   258,   259,   260,   261,     0,   262,   263,   264,   265,
     266,   267,   268,     0,   269,     0,   271,   272,   273,   274,
     275,   276,   277,   278,     0,   279,     0,   280,     0,     0,
     283,     0,   285,   286,   287,   288,   289,   290,     0,     0,
     291,     0,   293,     0,     0,   295,     0,     0,   296,   297,
     298,   299,   300,   301,   302,   537,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,     0,   327,
     328,   329,   330,   331,   332,     0,   333,   334,     0,   336,
       0,   337,   338,   339,   340,   341,   342,     0,   343,   344,
       0,     0,   345,   346,   347,     0,     0,   348,   349,   350,
       0,   352,   353,     0,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,     0,     0,     0,
       0,   368,   369,   370,     0,   372,   373,   374,     0,   375,
     376,   377,     0,   378,   379,   380,   381,   382,   383,     0,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
       0,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,     0,   407,   408,     0,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,     0,     0,   427,   428,   429,
     430,   431,   432,   433,   434,   435,     0,     0,   437,   438,
     439,   440,     0,   441,   442,   443,   444,   445,   446,   447,
     448,   449,   450,   451,   452,   538,   454,   455,     0,     0,
     456,   457,     0,   458,     0,   460,     0,   461,   462,   463,
     464,   465,     0,   466,   467,   468,     0,     0,   469,   470,
     471,   472,   473,     0,   474,   475,   476,   477,   478,   479,
     480,   481,     0,     0,   482,   483,   484,     0,   485,   486,
     487,   488,     0,   489,   490,   491,   492,   493,   494,   495,
     496,     0,   497,     0,   499,   500,   501,   502,   503,   504,
     505,     0,     0,   506,     0,     0,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,   517,   518,   519,   520,
     521,   522,   523,   524,   525,   526,   527,   535,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   119,   120,   121,   122,
     123,   124,   125,   126,   842,   127,   128,   129,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   131,   132,     0,
     133,   134,   135,     0,   137,   138,   139,   140,   141,     0,
     143,   144,     0,   145,   146,   147,   148,   149,   150,     0,
       0,   151,   152,   153,   154,   155,   156,   157,     0,   158,
     159,   160,   161,   162,     0,     0,     0,   164,   165,   166,
     167,   168,   169,     0,   171,   172,   173,     0,   174,   175,
     176,   177,   178,   179,     0,     0,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,     0,   196,     0,   197,   198,   199,   200,   201,   202,
       0,     0,   203,   204,   205,   206,     0,     0,   207,   208,
     209,   210,   211,   212,     0,   213,   214,   215,     0,   216,
     217,   218,     0,   219,   220,   221,   222,   223,   224,   225,
     226,   227,   228,   229,   230,     0,   231,     0,     0,   232,
     233,   234,   235,     0,   236,     0,   237,     0,     0,     0,
     240,   241,   536,     0,   244,     0,     0,   245,     0,   246,
     247,   248,   249,     0,   250,   251,   252,   253,   254,   255,
     256,     0,   258,   259,   260,   261,     0,   262,   263,   264,
     265,   266,   267,   268,     0,   269,     0,   271,   272,   273,
     274,   275,   276,   277,   278,     0,   279,     0,   280,     0,
       0,   283,     0,   285,   286,   287,   288,   289,   290,     0,
       0,   291,     0,   293,     0,     0,   295,     0,     0,   296,
     297,   298,   299,   300,   301,   302,   537,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     327,   328,   329,   330,   331,   332,     0,   333,   334,     0,
     336,     0,   337,   338,   339,   340,   341,   342,     0,   343,
     344,     0,     0,   345,   346,   347,     0,     0,   348,   349,
     350,     0,   352,   353,     0,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,     0,     0,
       0,     0,   368,   369,   370,     0,   372,   373,   374,     0,
     375,   376,   377,     0,   378,   379,   380,   381,   382,   383,
       0,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,     0,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,     0,   407,   408,     0,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,     0,     0,   427,   428,
     429,   430,   431,   432,   433,   434,   435,     0,     0,   437,
     438,   439,   440,     0,   441,   442,   443,   444,   445,   446,
     447,   448,   449,   450,   451,   452,   538,   454,   455,     0,
       0,   456,   457,     0,   458,     0,   460,     0,   461,   462,
     463,   464,   465,     0,   466,   846,   468,     0,     0,   847,
     470,   471,   472,   473,     0,   474,   475,   476,   477,   478,
     479,   480,   481,     0,     0,   482,   483,   484,     0,   485,
     486,   487,   488,     0,   489,   490,   491,   492,   493,   494,
     495,   496,     0,   497,     0,   499,   500,   501,   502,   503,
     504,   505,     0,     0,   506,     0,     0,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   518,   519,
     520,   521,   522,   523,   524,   525,   526,   527,   535,     0,
     561,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   119,   120,   121,
     122,   123,   124,   125,   126,     0,   127,   128,   129,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   131,   132,
       0,   133,   134,   135,     0,   137,   138,   139,   140,   141,
       0,   143,   144,     0,   145,   146,   147,   148,   149,   150,
       0,     0,   151,   152,   153,   154,   155,   156,   157,     0,
     158,   159,   160,   161,   162,     0,     0,     0,   164,   165,
     166,   167,   168,   169,     0,   171,   172,   173,     0,   174,
     175,   176,   177,   178,   179,     0,     0,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,     0,   196,     0,   197,   198,   199,   200,   201,
     202,     0,     0,   203,   204,   205,   206,     0,     0,   207,
     208,   209,   210,   211,   212,     0,   213,   214,   215,     0,
     216,   217,   218,     0,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,     0,   231,     0,     0,
     232,   233,   234,   235,     0,   236,     0,   237,     0,     0,
       0,   240,   241,   536,     0,   244,     0,     0,   245,     0,
     246,   247,   248,   249,     0,   250,   251,   252,   253,   254,
    1338,   256,     0,   258,   259,   260,   261,     0,   262,   263,
     264,   265,   266,   267,   268,     0,   269,     0,   271,   272,
     273,   274,   275,   276,   277,   278,     0,   279,     0,   280,
       0,     0,   283,     0,   285,   286,   287,   288,   289,   290,
       0,     0,   291,     0,   293,     0,     0,   295,     0,     0,
     296,   297,   298,   299,   300,   301,   302,   537,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
       0,   327,   328,   329,   330,   331,   332,     0,   333,   334,
       0,   336,     0,   337,   338,   339,   340,   341,   342,     0,
     343,   344,     0,     0,   345,   346,   347,     0,     0,   348,
     349,   350,     0,   352,   353,     0,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,     0,
       0,     0,     0,   368,   369,   370,     0,   372,   373,   374,
       0,   375,   376,   377,     0,   378,   379,   380,   381,   382,
     383,     0,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,     0,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,     0,   407,   408,     0,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,     0,     0,   427,
     428,   429,   430,   431,   432,   433,   434,   435,     0,     0,
     437,   438,   439,   440,     0,   441,   442,   443,   444,   445,
     446,   447,   448,   449,   450,   451,   452,   538,   454,   455,
       0,     0,   456,   457,     0,   458,     0,   460,     0,   461,
     462,   463,   464,   465,     0,   466,   467,   468,     0,     0,
     469,   470,   471,   472,   473,     0,   474,   475,   476,   477,
     478,   479,   480,   481,     0,     0,   482,   483,   484,     0,
     485,   486,   487,   488,     0,   489,   490,   491,   492,   493,
     494,   495,   496,     0,   497,     0,   499,   500,   501,   502,
     503,   504,   505,     0,     0,   506,     0,     0,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,   518,
     519,   520,   521,   522,   523,   524,   525,   526,   527,   535,
       0,   561,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   119,   120,
     121,   122,   123,   124,   125,   126,     0,   127,   128,   129,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   131,
     132,     0,   133,   134,   135,     0,   137,   138,   139,   140,
     141,     0,   143,   144,     0,   145,   146,   147,   148,   149,
     150,     0,     0,   151,   152,   153,   154,   155,   156,   157,
       0,   158,   159,   160,   161,   162,     0,     0,     0,   164,
     165,   166,   167,   168,   169,     0,   171,   172,   173,     0,
     174,   175,   176,   177,   178,   179,     0,     0,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,     0,   196,     0,   197,   198,   199,   200,
     201,   202,     0,     0,   203,   204,   205,   206,     0,     0,
     207,   208,   209,   210,   211,   212,     0,   213,   214,   215,
       0,   216,   217,   218,     0,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,     0,   231,     0,
       0,   232,   233,   234,   235,     0,   236,     0,   237,     0,
       0,     0,   240,   241,   536,     0,   244,     0,     0,   245,
       0,   246,   247,   248,   249,     0,   250,   251,   252,   253,
     254,  1340,   256,     0,   258,   259,   260,   261,     0,   262,
     263,   264,   265,   266,   267,   268,     0,   269,     0,   271,
     272,   273,   274,   275,   276,   277,   278,     0,   279,     0,
     280,     0,     0,   283,     0,   285,   286,   287,   288,   289,
     290,     0,     0,   291,     0,   293,     0,     0,   295,     0,
       0,   296,   297,   298,   299,   300,   301,   302,   537,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,     0,   327,   328,   329,   330,   331,   332,     0,   333,
     334,     0,   336,     0,   337,   338,   339,   340,   341,   342,
       0,   343,   344,     0,     0,   345,   346,   347,     0,     0,
     348,   349,   350,     0,   352,   353,     0,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
       0,     0,     0,     0,   368,   369,   370,     0,   372,   373,
     374,     0,   375,   376,   377,     0,   378,   379,   380,   381,
     382,   383,     0,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,     0,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,     0,   407,   408,
       0,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,     0,     0,
     427,   428,   429,   430,   431,   432,   433,   434,   435,     0,
       0,   437,   438,   439,   440,     0,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   538,   454,
     455,     0,     0,   456,   457,     0,   458,     0,   460,     0,
     461,   462,   463,   464,   465,     0,   466,   467,   468,     0,
       0,   469,   470,   471,   472,   473,     0,   474,   475,   476,
     477,   478,   479,   480,   481,     0,     0,   482,   483,   484,
       0,   485,   486,   487,   488,     0,   489,   490,   491,   492,
     493,   494,   495,   496,     0,   497,     0,   499,   500,   501,
     502,   503,   504,   505,     0,     0,   506,     0,     0,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,   519,   520,   521,   522,   523,   524,   525,   526,   527,
     535,     0,   561,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   119,
     120,   121,   122,   123,   124,   125,   126,     0,   127,   128,
     129,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     131,   132,     0,   133,   134,   135,     0,   137,   138,   139,
     140,   141,     0,   143,   144,     0,   145,   146,   147,   148,
     149,   150,     0,     0,   151,   152,   153,   154,   155,   156,
     157,     0,   158,   159,   160,   161,   162,     0,     0,     0,
     164,   165,   166,   167,   168,   169,     0,   171,   172,   173,
       0,   174,   175,   176,   177,   178,   179,     0,     0,   181,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,     0,   196,     0,   197,   198,   199,
     200,   201,   202,     0,     0,   203,   204,   205,   206,     0,
       0,   207,   208,   209,   210,   211,   212,     0,   213,   214,
     215,     0,   216,   217,   218,     0,   219,   220,   221,   222,
     223,   224,   225,   226,   227,   228,   229,   230,     0,   231,
       0,     0,   232,   233,   234,   235,     0,   236,     0,   237,
       0,     0,     0,   240,   241,   536,     0,   244,     0,     0,
     245,     0,   246,   247,   248,   249,     0,   250,   251,   252,
     253,   254,  1343,   256,     0,   258,   259,   260,   261,     0,
     262,   263,   264,   265,   266,   267,   268,     0,   269,     0,
     271,   272,   273,   274,   275,   276,   277,   278,     0,   279,
       0,   280,     0,     0,   283,     0,   285,   286,   287,   288,
     289,   290,     0,     0,   291,     0,   293,     0,     0,   295,
       0,     0,   296,   297,   298,   299,   300,   301,   302,   537,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,     0,   327,   328,   329,   330,   331,   332,     0,
     333,   334,     0,   336,     0,   337,   338,   339,   340,   341,
     342,     0,   343,   344,     0,     0,   345,   346,   347,     0,
       0,   348,   349,   350,     0,   352,   353,     0,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,     0,     0,     0,     0,   368,   369,   370,     0,   372,
     373,   374,     0,   375,   376,   377,     0,   378,   379,   380,
     381,   382,   383,     0,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,     0,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,     0,   407,
     408,     0,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,     0,
       0,   427,   428,   429,   430,   431,   432,   433,   434,   435,
       0,     0,   437,   438,   439,   440,     0,   441,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   538,
     454,   455,     0,     0,   456,   457,     0,   458,     0,   460,
       0,   461,   462,   463,   464,   465,     0,   466,   467,   468,
       0,     0,   469,   470,   471,   472,   473,     0,   474,   475,
     476,   477,   478,   479,   480,   481,     0,     0,   482,   483,
     484,     0,   485,   486,   487,   488,     0,   489,   490,   491,
     492,   493,   494,   495,   496,     0,   497,     0,   499,   500,
     501,   502,   503,   504,   505,     0,     0,   506,     0,     0,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   518,   519,   520,   521,   522,   523,   524,   525,   526,
     527,   535,     0,   561,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     119,   120,   121,   122,   123,   124,   125,   126,     0,   127,
     128,   129,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   131,   132,     0,   133,   134,   135,     0,   137,   138,
     139,   140,   141,     0,   143,   144,     0,   145,   146,   147,
     148,   149,   150,     0,     0,   151,   152,   153,   154,   155,
     156,   157,     0,   158,   159,   160,   161,   162,     0,     0,
       0,   164,   165,   166,   167,   168,   169,     0,   171,   172,
     173,     0,   174,   175,   176,   177,   178,   179,     0,     0,
     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,     0,   196,     0,   197,   198,
     199,   200,   201,   202,     0,     0,   203,   204,   205,   206,
       0,     0,   207,   208,   209,   210,   211,   212,     0,   213,
     214,   215,     0,   216,   217,   218,     0,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,     0,
     231,     0,     0,   232,   233,   234,   235,     0,   236,     0,
     237,     0,     0,     0,   240,   241,   536,     0,   244,     0,
       0,   245,     0,   246,   247,   248,   249,     0,   250,   251,
     252,   253,   254,  1345,   256,     0,   258,   259,   260,   261,
       0,   262,   263,   264,   265,   266,   267,   268,     0,   269,
       0,   271,   272,   273,   274,   275,   276,   277,   278,     0,
     279,     0,   280,     0,     0,   283,     0,   285,   286,   287,
     288,   289,   290,     0,     0,   291,     0,   293,     0,     0,
     295,     0,     0,   296,   297,   298,   299,   300,   301,   302,
     537,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,     0,   327,   328,   329,   330,   331,   332,
       0,   333,   334,     0,   336,     0,   337,   338,   339,   340,
     341,   342,     0,   343,   344,     0,     0,   345,   346,   347,
       0,     0,   348,   349,   350,     0,   352,   353,     0,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,     0,     0,     0,     0,   368,   369,   370,     0,
     372,   373,   374,     0,   375,   376,   377,     0,   378,   379,
     380,   381,   382,   383,     0,   384,   385,   386,   387,   388,
     389,   390,   391,   392,   393,     0,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,     0,
     407,   408,     0,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
       0,     0,   427,   428,   429,   430,   431,   432,   433,   434,
     435,     0,     0,   437,   438,   439,   440,     0,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
     538,   454,   455,     0,     0,   456,   457,     0,   458,     0,
     460,     0,   461,   462,   463,   464,   465,     0,   466,   467,
     468,     0,     0,   469,   470,   471,   472,   473,     0,   474,
     475,   476,   477,   478,   479,   480,   481,     0,     0,   482,
     483,   484,     0,   485,   486,   487,   488,     0,   489,   490,
     491,   492,   493,   494,   495,   496,     0,   497,     0,   499,
     500,   501,   502,   503,   504,   505,     0,     0,   506,     0,
       0,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   518,   519,   520,   521,   522,   523,   524,   525,
     526,   527,   535,     0,   561,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   119,   120,   121,   122,   123,   124,   125,   126,     0,
     127,   128,   129,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   131,   132,     0,   133,   134,   135,     0,   137,
     138,   139,   140,   141,     0,   143,   144,     0,   145,   146,
     147,   148,   149,   150,     0,     0,   151,   152,   153,   154,
     155,   156,   157,     0,   158,   159,   160,   161,   162,     0,
       0,     0,   164,   165,   166,   167,   168,   169,     0,   171,
     172,   173,     0,   174,   175,   176,   177,   178,   179,     0,
       0,   181,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,     0,   196,     0,   197,
     198,   199,   200,   201,   202,     0,     0,   203,   204,   205,
     206,     0,     0,   207,   208,   209,   210,   211,   212,     0,
     213,   214,   215,     0,   216,   217,   218,     0,   219,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
       0,   231,     0,     0,   232,   233,   234,   235,     0,   236,
       0,   237,     0,     0,     0,   240,   241,   536,     0,   244,
       0,     0,   245,     0,   246,   247,   248,   249,     0,   250,
     251,   252,   253,   254,  1894,   256,     0,   258,   259,   260,
     261,     0,   262,   263,   264,   265,   266,   267,   268,     0,
     269,     0,   271,   272,   273,   274,   275,   276,   277,   278,
       0,   279,     0,   280,     0,     0,   283,     0,   285,   286,
     287,   288,   289,   290,     0,     0,   291,     0,   293,     0,
       0,   295,     0,     0,   296,   297,   298,   299,   300,   301,
     302,   537,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,     0,   327,   328,   329,   330,   331,
     332,     0,   333,   334,     0,   336,     0,   337,   338,   339,
     340,   341,   342,     0,   343,   344,     0,     0,   345,   346,
     347,     0,     0,   348,   349,   350,     0,   352,   353,     0,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,     0,     0,     0,     0,   368,   369,   370,
       0,   372,   373,   374,     0,   375,   376,   377,     0,   378,
     379,   380,   381,   382,   383,     0,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,     0,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
       0,   407,   408,     0,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,     0,     0,   427,   428,   429,   430,   431,   432,   433,
     434,   435,     0,     0,   437,   438,   439,   440,     0,   441,
     442,   443,   444,   445,   446,   447,   448,   449,   450,   451,
     452,   538,   454,   455,     0,     0,   456,   457,     0,   458,
       0,   460,     0,   461,   462,   463,   464,   465,     0,   466,
     467,   468,     0,     0,   469,   470,   471,   472,   473,     0,
     474,   475,   476,   477,   478,   479,   480,   481,     0,     0,
     482,   483,   484,     0,   485,   486,   487,   488,     0,   489,
     490,   491,   492,   493,   494,   495,   496,     0,   497,     0,
     499,   500,   501,   502,   503,   504,   505,     0,     0,   506,
       0,     0,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   535,     0,   561,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   119,   120,   121,   122,   123,   124,   125,   126,
       0,   127,   128,   129,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   131,   132,     0,   133,   134,   135,     0,
     137,   138,   139,   140,   141,     0,   143,   144,     0,   145,
     146,   147,   148,   149,   150,     0,     0,   151,   152,   153,
     154,   155,   156,   157,     0,   158,   159,   160,   161,   162,
       0,     0,     0,   164,   165,   166,   167,   168,   169,     0,
     171,   172,   173,     0,   174,   175,   176,   177,   178,   179,
       0,     0,   181,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,     0,   196,     0,
     197,   198,   199,   200,   201,   202,     0,     0,   203,   204,
     205,   206,     0,     0,   207,   208,   209,   210,   211,   212,
       0,   213,   214,   215,     0,   216,   217,   218,     0,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     230,     0,   231,     0,     0,   232,   233,   234,   235,     0,
     236,     0,   237,     0,     0,     0,   240,   241,   536,     0,
     244,     0,     0,   245,     0,   246,   247,   248,   249,     0,
     250,   251,   252,   253,   254,  2288,   256,     0,   258,   259,
     260,   261,     0,   262,   263,   264,   265,   266,   267,   268,
       0,   269,     0,   271,   272,   273,   274,   275,   276,   277,
     278,     0,   279,     0,   280,     0,     0,   283,     0,   285,
     286,   287,   288,   289,   290,     0,     0,   291,     0,   293,
       0,     0,   295,     0,     0,   296,   297,   298,   299,   300,
     301,   302,   537,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,     0,   327,   328,   329,   330,
     331,   332,     0,   333,   334,     0,   336,     0,   337,   338,
     339,   340,   341,   342,     0,   343,   344,     0,     0,   345,
     346,   347,     0,     0,   348,   349,   350,     0,   352,   353,
       0,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,     0,     0,     0,     0,   368,   369,
     370,     0,   372,   373,   374,     0,   375,   376,   377,     0,
     378,   379,   380,   381,   382,   383,     0,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,     0,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,     0,   407,   408,     0,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,     0,     0,   427,   428,   429,   430,   431,   432,
     433,   434,   435,     0,     0,   437,   438,   439,   440,     0,
     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
     451,   452,   538,   454,   455,     0,     0,   456,   457,     0,
     458,     0,   460,     0,   461,   462,   463,   464,   465,     0,
     466,   467,   468,     0,     0,   469,   470,   471,   472,   473,
       0,   474,   475,   476,   477,   478,   479,   480,   481,     0,
       0,   482,   483,   484,     0,   485,   486,   487,   488,     0,
     489,   490,   491,   492,   493,   494,   495,   496,     0,   497,
       0,   499,   500,   501,   502,   503,   504,   505,     0,     0,
     506,     0,     0,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   518,   519,   520,   521,   522,   523,
     524,   525,   526,   527,  1513,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   119,   120,   121,   122,   123,   124,   125,
     126,     0,   127,   128,   129,     0,     0,     0,  1514,     0,
       0,  -882,     0,  1515,   131,   132,     0,   133,   134,   135,
    1516,   137,   138,   139,     0,  1517,  1518,  1519,  1520,     0,
     145,   146,   147,   148,   149,   150,     0,     0,   151,   152,
     153,   154,  1521,  1522,   157,     0,   158,   159,   160,   161,
       0,     0,  1523,     0,  1524,   165,   166,   167,   168,   169,
    1525,   171,   172,   173,     0,   174,   175,   176,   177,   178,
     179,     0,  1526,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,  1527,   192,   193,  1528,   195,     0,   196,
       0,   197,   198,   199,   200,   201,   202,     0,     0,   203,
     204,   205,   206,     0,     0,   207,   208,  1090,   210,   211,
     212,     0,   213,   214,   215,     0,   216,   217,   218,     0,
     219,   220,   221,   222,     0,   224,   225,   226,   227,   228,
     229,     0,     0,   231,     0,     0,   232,   233,  1529,   235,
       0,   236,     0,   237,  1530,     0,  1531,   240,   241,  -882,
    1532,   244,     0,     0,   245,     0,     0,     0,   248,   249,
       0,   250,   251,   252,   253,   254,   255,   256,  1533,   258,
     259,   260,   261,     0,   262,   263,   264,   265,   266,   267,
     268,     0,   269,  1534,     0,   272,   273,   274,   275,   276,
    1535,  1536,     0,  1537,     0,   280,  1538,  1539,   283,  1540,
     285,   286,   287,   288,   289,   290,     0,     0,   291,  1541,
     293,  1542,     0,   295,     0,     0,   296,   297,   298,   299,
     300,   301,   302,  1543,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,  1544,  1545,  1546,   328,   329,
     330,   331,     0,     0,   333,   334,  1547,   336,     0,     0,
     338,  1548,   340,   341,   342,     0,   343,   344,     0,     0,
     345,   346,   347,     0,     0,   348,   349,     0,  1549,   352,
     353,  1550,     0,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,     0,     0,     0,     0,   368,
     369,     0,  1551,   372,   373,     0,     0,   375,   376,   377,
       0,   378,   379,   380,   381,   382,   383,     0,   384,   385,
     386,   387,   388,  1552,   390,   391,   392,   393,     0,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,     0,   407,   408,  1553,   410,   411,   412,  1554,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,     0,  1555,   427,   428,   429,   430,   431,
     432,  1556,   434,   435,     0,  1557,   437,   438,  1558,   440,
       0,   441,   442,   443,   444,   445,   446,   447,   448,   449,
     450,   451,   452,  1559,   454,     0,     0,     0,   456,   457,
       0,   458,  1560,   460,     0,   461,   462,   463,   464,   465,
       0,   466,  1561,  1562,     0,     0,   469,   470,     0,   472,
       0,     0,   474,   475,  1563,   477,   478,   479,   480,   481,
    1564,     0,   482,   483,   484,     0,   485,   486,   487,   488,
       0,   489,   490,   491,   492,   493,     0,  1565,   496,     0,
     497,  1566,   499,   500,   501,   502,   503,   504,   505,     0,
       0,   506,     0,     0,   507,   508,   509,   510,   511,   512,
     535,     0,   561,     0,     0,     0,     0,     0,     0,     0,
       0,   524,   525,   526,   527,     0,     0,     0,     0,   119,
     120,   121,   122,   123,   124,   125,   126,     0,   127,   128,
     129,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     131,   132,     0,   133,   134,   135,     0,   137,   138,   139,
     140,   141,     0,   143,   144,     0,   145,   146,   147,   148,
     149,   150,     0,     0,   151,   152,   153,   154,   155,   156,
     157,     0,   158,   159,   160,   161,   162,     0,     0,     0,
     164,   165,   166,   167,   168,   169,     0,   171,   172,   173,
       0,   174,   175,   176,   177,   178,   179,     0,     0,   181,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,     0,   196,     0,   197,   198,   199,
     200,   201,   202,     0,     0,   203,   204,   205,   206,     0,
       0,   207,   208,   209,   210,   211,   212,     0,   213,   214,
     215,     0,   216,   217,   218,     0,   219,   220,   221,   222,
     223,   224,   225,   226,   227,   228,   229,   230,     0,   231,
       0,     0,   232,   233,   234,   235,     0,   236,     0,   237,
       0,     0,     0,   240,   241,   536,     0,   244,     0,     0,
     245,     0,   246,   247,   248,   249,     0,   250,   251,   252,
     253,   254,  3058,   256,     0,   258,   259,   260,   261,     0,
     262,   263,   264,   265,   266,   267,   268,     0,   269,     0,
     271,   272,   273,   274,   275,   276,   277,   278,     0,   279,
       0,   280,     0,     0,   283,     0,   285,   286,   287,   288,
     289,   290,     0,     0,   291,     0,   293,     0,     0,   295,
       0,     0,   296,   297,   298,   299,   300,   301,   302,   537,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,     0,   327,   328,   329,   330,   331,   332,     0,
     333,   334,     0,   336,     0,   337,   338,   339,   340,   341,
     342,     0,   343,   344,     0,     0,   345,   346,   347,     0,
       0,   348,   349,   350,     0,   352,   353,     0,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,     0,     0,     0,     0,   368,   369,   370,     0,   372,
     373,   374,     0,   375,   376,   377,     0,   378,   379,   380,
     381,   382,   383,     0,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,     0,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,     0,   407,
     408,     0,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,     0,
       0,   427,   428,   429,   430,   431,   432,   433,   434,   435,
       0,     0,   437,   438,   439,   440,     0,   441,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   538,
     454,   455,     0,     0,   456,   457,     0,   458,     0,   460,
       0,   461,   462,   463,   464,   465,     0,   466,   467,   468,
       0,     0,   469,   470,   471,   472,   473,     0,   474,   475,
     476,   477,   478,   479,   480,   481,     0,     0,   482,   483,
     484,     0,   485,   486,   487,   488,     0,   489,   490,   491,
     492,   493,   494,   495,   496,     0,   497,     0,   499,   500,
     501,   502,   503,   504,   505,     0,     0,   506,     0,     0,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   518,   519,   520,   521,   522,   523,   524,   525,   526,
     527,   535,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     119,   120,   121,   122,   123,   124,   125,   126,     0,   127,
     128,   129,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   131,   132,     0,   133,   134,   135,     0,   137,   138,
     139,   140,   141,     0,   143,   144,     0,   145,   146,   147,
     148,   149,   150,     0,     0,   151,   152,   153,   154,   155,
     156,   157,     0,   158,   159,   160,   161,   162,     0,     0,
       0,   164,   165,   166,   167,   168,   169,     0,   171,   172,
     173,     0,   174,   175,   176,   177,   178,   179,     0,     0,
     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,     0,   196,     0,   197,   198,
     199,   200,   201,   202,     0,     0,   203,   204,   205,   206,
       0,     0,   207,   208,   209,   210,   211,   212,     0,   213,
     214,   215,     0,   216,   217,   218,     0,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,     0,
     231,     0,     0,   232,   233,   234,   235,     0,   236,     0,
     237,     0,     0,     0,   240,   241,   536,     0,   244,     0,
       0,   245,     0,   246,   247,   248,   249,     0,   250,   251,
     252,   253,   254,   255,   256,     0,   258,   259,   260,   261,
       0,   262,   263,   264,   265,   266,   267,   268,     0,   269,
       0,   271,   272,   273,   274,   275,   276,   277,   278,     0,
     279,     0,   280,     0,     0,   283,     0,   285,   286,   287,
     288,   289,   290,     0,     0,   291,     0,   293,     0,     0,
     295,     0,     0,   296,   297,   298,   299,   300,   301,   302,
     537,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,     0,   327,   328,   329,   330,   331,   332,
       0,   333,   334,     0,   336,     0,   337,   338,   339,   340,
     341,   342,     0,   343,   344,     0,     0,   345,   346,   347,
       0,     0,   348,   349,   350,     0,   352,   353,     0,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,     0,     0,     0,     0,   368,   369,   370,     0,
     372,   373,   374,     0,   375,   376,   377,     0,   378,   379,
     380,   381,   382,   383,     0,   384,   385,   386,   387,   388,
     389,   390,   391,   392,   393,     0,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,     0,
     407,   408,     0,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
       0,     0,   427,   428,   429,   430,   431,   432,   433,   434,
     435,     0,     0,   437,   438,   439,   440,     0,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
     538,   454,   455,     0,     0,   456,   457,     0,   458,     0,
     460,     0,   461,   462,   463,   464,   465,     0,   466,   467,
     468,     0,     0,   469,   470,   471,   472,   473,     0,   474,
     475,   476,   477,   478,   479,   480,   481,     0,     0,   482,
     483,   484,     0,   485,   486,   487,   488,     0,   489,   490,
     491,   492,   493,   494,   495,   496,     0,   497,     0,   499,
     500,   501,   502,   503,   504,   505,     0,     0,   506,     0,
       0,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   518,   519,   520,   521,   522,   523,   524,   525,
     526,   527,   535,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   119,   120,   121,   122,   123,   124,   125,   126,     0,
     127,   128,   129,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   131,   132,     0,   133,   134,   135,     0,   137,
     138,   139,   140,   141,     0,   143,   144,     0,   145,   146,
     147,   148,   149,   150,     0,     0,   151,   152,   153,   154,
     155,   156,   157,     0,   158,   159,   160,   161,   162,     0,
       0,     0,   164,   165,   166,   167,   168,   169,     0,   171,
     172,   173,     0,   174,   175,   176,   177,   178,   179,     0,
       0,   181,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,     0,   196,     0,   197,
     198,   199,   200,   201,   202,     0,     0,   203,   204,   205,
     206,     0,     0,   207,   208,   209,   210,   211,   212,     0,
     213,   214,   215,     0,   216,   217,   218,     0,   219,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
       0,   231,     0,     0,   232,   233,   234,   235,     0,   236,
       0,   237,     0,     0,     0,   240,   241,   536,     0,   858,
       0,     0,   245,     0,   246,   247,   248,   249,     0,   250,
     251,   252,   253,   254,   255,   256,     0,   258,   259,   260,
     261,     0,   262,   263,   264,   265,   266,   267,   268,     0,
     269,     0,   271,   272,   273,   274,   275,   276,   277,   278,
       0,   279,     0,   280,     0,     0,   283,     0,   285,   286,
     287,   288,   289,   290,     0,     0,   291,     0,   293,     0,
       0,   295,     0,     0,   296,   859,   298,   299,   300,   301,
     302,   537,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,     0,   327,   328,   329,   330,   331,
     332,     0,   333,   334,     0,   336,     0,   337,   338,   339,
     340,   341,   342,     0,   343,   344,     0,     0,   345,   346,
     347,     0,     0,   348,   349,   350,     0,   352,   353,     0,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,     0,     0,     0,     0,   368,   369,   370,
       0,   372,   373,   374,     0,   375,   376,   377,     0,   378,
     379,   380,   381,   382,   383,     0,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,     0,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
       0,   407,   408,     0,   410,   411,   412,   413,   414,   415,
     416,   417,   860,   419,   420,   421,   422,   423,   424,   425,
     426,     0,     0,   427,   428,   429,   430,   861,   432,   433,
     434,   435,     0,     0,   437,   438,   439,   440,     0,   441,
     442,   443,   444,   445,   446,   447,   448,   449,   450,   451,
     452,   538,   454,   455,     0,     0,   456,   457,     0,   458,
       0,   460,     0,   461,   462,   463,   464,   465,     0,   466,
     862,   468,     0,     0,   469,   470,   471,   472,   473,     0,
     474,   475,   476,   477,   478,   479,   480,   481,     0,     0,
     482,   483,   484,     0,   485,   486,   487,   488,     0,   489,
     490,   491,   492,   493,   494,   495,   863,     0,   497,     0,
     499,   500,   501,   502,   503,   504,   505,     0,     0,   506,
       0,     0,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   535,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   119,   120,   121,   122,   123,   124,   125,   126,
       0,   127,   128,   129,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   131,   132,     0,   133,   134,   135,     0,
     137,   138,   139,   140,   141,     0,   143,   144,     0,   145,
     146,   147,   148,   149,   150,     0,     0,   151,   152,   153,
     154,   155,   156,   157,     0,   158,   159,   160,   161,   162,
       0,     0,     0,   164,   165,   166,   167,   168,   169,     0,
     171,   172,   173,     0,   174,   175,   176,   177,   178,   179,
       0,     0,   181,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,     0,   196,     0,
     197,   198,   199,   200,   201,   202,     0,     0,   203,   204,
     205,   206,     0,     0,   207,   208,   209,   210,   211,   212,
       0,   213,   214,   215,     0,   216,   217,   218,     0,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     230,     0,   231,     0,     0,   232,   233,   234,   235,     0,
     236,     0,   237,     0,     0,     0,   240,   241,   536,     0,
     244,     0,     0,   245,     0,   246,   247,   248,   249,     0,
     250,   251,   252,   253,   254,   981,   256,     0,   258,   259,
     260,   261,     0,   262,   263,   264,   265,   266,   267,   268,
       0,   269,     0,   271,   272,   273,   274,   275,   276,   277,
     278,     0,   279,     0,   280,     0,     0,   283,     0,   285,
     286,   287,   288,   289,   290,     0,     0,   291,     0,   293,
       0,     0,   295,     0,     0,   296,   297,   298,   299,   300,
     301,   302,   537,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,     0,   327,   328,   329,   330,
     331,   332,     0,   333,   334,     0,   336,     0,   337,   338,
     339,   340,   341,   342,     0,   343,   344,     0,     0,   345,
     346,   347,     0,     0,   348,   349,   350,     0,   352,   353,
       0,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,     0,     0,     0,     0,   368,   369,
     370,     0,   372,   373,   374,     0,   375,   376,   377,     0,
     378,   379,   380,   381,   382,   383,     0,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,     0,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,     0,   407,   408,     0,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,     0,     0,   427,   428,   429,   430,   431,   432,
     433,   434,   435,     0,     0,   437,   438,   439,   440,     0,
     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
     451,   452,   538,   454,   455,     0,     0,   456,   457,     0,
     458,     0,   460,     0,   461,   462,   463,   464,   465,     0,
     466,   467,   468,     0,     0,   469,   470,   471,   472,   473,
       0,   474,   475,   476,   477,   478,   479,   480,   481,     0,
       0,   482,   483,   484,     0,   485,   486,   487,   488,     0,
     489,   490,   491,   492,   493,   494,   495,   496,     0,   497,
       0,   499,   500,   501,   502,   503,   504,   505,     0,     0,
     506,     0,     0,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   518,   519,   520,   521,   522,   523,
     524,   525,   526,   527,   535,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   119,   120,   121,   122,   123,   124,   125,
     126,     0,   127,   128,   129,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   131,   132,     0,   133,   134,   135,
       0,   137,   138,   139,   140,   141,     0,   143,   144,     0,
     145,   146,   147,   148,   149,   150,     0,     0,   151,   152,
     153,   154,   155,   156,   157,     0,   158,   159,   160,   161,
     162,     0,     0,     0,   164,   165,   166,   167,   168,   169,
       0,   171,   172,   173,     0,   174,   175,   176,   177,   178,
     179,     0,     0,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,     0,   196,
       0,   197,   198,   199,   200,   201,   202,     0,     0,   203,
     204,   205,   206,     0,     0,   207,   208,   209,   210,   211,
     212,     0,   213,   214,   215,     0,   216,   217,   218,     0,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   230,     0,   231,     0,     0,   232,   233,   234,   235,
       0,   236,     0,   237,     0,     0,     0,   240,   241,   536,
       0,   244,     0,     0,   245,     0,   246,   247,   248,   249,
       0,   250,   251,   252,   253,   254,   255,   256,     0,   258,
     259,   260,   261,     0,   262,   263,   264,   265,   266,   267,
     268,     0,   269,     0,   271,   272,   273,   274,   275,   276,
     277,   278,     0,   279,     0,   280,     0,     0,   283,     0,
     285,   286,   287,   288,   289,   290,     0,     0,   291,     0,
     293,     0,     0,   295,     0,     0,   296,   297,   298,   299,
     300,   301,   302,   537,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,     0,   327,   328,   329,
     330,   331,   332,     0,   333,   334,     0,   336,     0,   337,
     338,   339,   340,   341,   342,     0,   343,   344,     0,     0,
     345,   346,   347,     0,     0,   348,   349,   350,     0,   352,
     353,     0,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,     0,     0,     0,     0,   368,
     369,   370,     0,   372,   373,   374,     0,   375,   376,   377,
       0,   378,   379,   380,   381,   382,   383,     0,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,     0,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,     0,   407,   408,     0,   410,   411,   412,   413,
     414,   415,   416,   417,   860,   419,   420,   421,   422,   423,
     424,   425,   426,     0,     0,   427,   428,   429,   430,   431,
     432,   433,   434,   435,     0,     0,   437,   438,   439,   440,
       0,   441,   442,   443,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   538,   454,   455,     0,     0,   456,   457,
       0,   458,     0,   460,     0,   461,   462,   463,   464,   465,
       0,   466,   862,   468,     0,     0,   469,   470,   471,   472,
     473,     0,   474,   475,   476,   477,   478,   479,   480,   481,
       0,     0,   482,   483,   484,     0,   485,   486,   487,   488,
       0,   489,   490,   491,   492,   493,   494,   495,   496,     0,
     497,     0,   499,   500,   501,   502,   503,   504,   505,     0,
       0,   506,     0,     0,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,   518,   519,   520,   521,   522,
     523,   524,   525,   526,   527,   535,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   119,   120,   121,   122,   123,   124,
     125,   126,     0,   127,   128,   129,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   131,   132,     0,   133,   134,
     135,     0,   137,   138,   139,   140,   141,     0,   143,   144,
       0,   145,   146,   147,   148,   149,   150,     0,     0,   151,
     152,   153,   154,   155,   156,   157,     0,   158,   159,   160,
     161,   162,     0,     0,     0,   164,   165,   166,   167,   168,
     169,     0,   171,   172,   173,     0,   174,   175,   176,   177,
     178,   179,     0,     0,   181,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,     0,
     196,     0,   197,   198,   199,   200,   201,   202,     0,     0,
     203,   204,   205,   206,     0,     0,   207,   208,   209,   210,
     211,   212,     0,   213,   214,   215,     0,   216,   217,   218,
       0,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,     0,   231,     0,     0,   232,   233,   234,
     235,     0,   236,     0,   237,     0,     0,     0,   240,   241,
     536,     0,   244,     0,     0,   245,     0,   246,   247,   248,
     249,     0,   250,   251,   252,   253,   254,  1348,   256,     0,
     258,   259,   260,   261,     0,   262,   263,   264,   265,   266,
     267,   268,     0,   269,     0,   271,   272,   273,   274,   275,
     276,   277,   278,     0,   279,     0,   280,     0,     0,   283,
       0,   285,   286,   287,   288,   289,   290,     0,     0,   291,
       0,   293,     0,     0,   295,     0,     0,   296,   297,   298,
     299,   300,   301,   302,   537,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,     0,   327,   328,
     329,   330,   331,   332,     0,   333,   334,     0,   336,     0,
     337,   338,   339,   340,   341,   342,     0,   343,   344,     0,
       0,   345,   346,   347,     0,     0,   348,   349,   350,     0,
     352,   353,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,     0,     0,     0,     0,
     368,   369,   370,     0,   372,   373,   374,     0,   375,   376,
     377,     0,   378,   379,   380,   381,   382,   383,     0,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,     0,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,     0,   407,   408,     0,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,     0,     0,   427,   428,   429,   430,
     431,   432,   433,   434,   435,     0,     0,   437,   438,   439,
     440,     0,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   538,   454,   455,     0,     0,   456,
     457,     0,   458,     0,   460,     0,   461,   462,   463,   464,
     465,     0,   466,   467,   468,     0,     0,   469,   470,   471,
     472,   473,     0,   474,   475,   476,   477,   478,   479,   480,
     481,     0,     0,   482,   483,   484,     0,   485,   486,   487,
     488,     0,   489,   490,   491,   492,   493,   494,   495,   496,
       0,   497,     0,   499,   500,   501,   502,   503,   504,   505,
       0,     0,   506,     0,     0,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520,   521,
     522,   523,   524,   525,   526,   527,   535,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   119,   120,   121,   122,   123,
     124,   125,   126,     0,   127,   128,   129,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   131,   132,     0,   133,
     134,   135,     0,   137,   138,   139,   140,   141,     0,   143,
     144,     0,   145,   146,   147,   148,   149,   150,     0,     0,
     151,   152,   153,   154,   155,   156,   157,     0,   158,   159,
     160,   161,   162,     0,     0,     0,   164,   165,   166,   167,
     168,   169,     0,   171,   172,   173,     0,   174,   175,   176,
     177,   178,   179,     0,     0,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
       0,   196,     0,   197,   198,   199,   200,   201,   202,     0,
       0,   203,   204,   205,   206,     0,     0,   207,   208,   209,
     210,   211,   212,     0,   213,   214,   215,     0,   216,   217,
     218,     0,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,     0,   231,     0,     0,   232,   233,
     234,   235,     0,   236,     0,   237,     0,     0,     0,   240,
     241,   536,     0,   244,     0,     0,   245,     0,   246,   247,
     248,   249,     0,   250,   251,   252,   253,   254,  1359,   256,
       0,   258,   259,   260,   261,     0,   262,   263,   264,   265,
     266,   267,   268,     0,   269,     0,   271,   272,   273,   274,
     275,   276,   277,   278,     0,   279,     0,   280,     0,     0,
     283,     0,   285,   286,   287,   288,   289,   290,     0,     0,
     291,     0,   293,     0,     0,   295,     0,     0,   296,   297,
     298,   299,   300,   301,   302,   537,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,     0,   327,
     328,   329,   330,   331,   332,     0,   333,   334,     0,   336,
       0,   337,   338,   339,   340,   341,   342,     0,   343,   344,
       0,     0,   345,   346,   347,     0,     0,   348,   349,   350,
       0,   352,   353,     0,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,     0,     0,     0,
       0,   368,   369,   370,     0,   372,   373,   374,     0,   375,
     376,   377,     0,   378,   379,   380,   381,   382,   383,     0,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
       0,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,     0,   407,   408,     0,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,     0,     0,   427,   428,   429,
     430,   431,   432,   433,   434,   435,     0,     0,   437,   438,
     439,   440,     0,   441,   442,   443,   444,   445,   446,   447,
     448,   449,   450,   451,   452,   538,   454,   455,     0,     0,
     456,   457,     0,   458,     0,   460,     0,   461,   462,   463,
     464,   465,     0,   466,   467,   468,     0,     0,   469,   470,
     471,   472,   473,     0,   474,   475,   476,   477,   478,   479,
     480,   481,     0,     0,   482,   483,   484,     0,   485,   486,
     487,   488,     0,   489,   490,   491,   492,   493,   494,   495,
     496,     0,   497,     0,   499,   500,   501,   502,   503,   504,
     505,     0,     0,   506,     0,     0,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,   517,   518,   519,   520,
     521,   522,   523,   524,   525,   526,   527,   535,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   119,   120,   121,   122,
     123,   124,   125,   126,     0,   127,   128,   129,     0,     0,
       0,     0,     0,     0,  1709,     0,     0,   131,   132,     0,
     133,   134,   135,     0,   137,   138,   139,   140,   141,     0,
     143,   144,     0,   145,   146,   147,   148,   149,   150,     0,
       0,   151,   152,   153,   154,   155,   156,   157,     0,   158,
     159,   160,   161,   162,     0,     0,     0,   164,   165,   166,
     167,   168,   169,     0,   171,   172,   173,     0,   174,   175,
     176,   177,   178,   179,     0,     0,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,     0,   196,     0,   197,   198,   199,   200,   201,   202,
       0,     0,   203,   204,   205,   206,     0,     0,   207,   208,
     209,   210,   211,   212,     0,   213,   214,   215,     0,   216,
     217,   218,     0,   219,   220,   221,   222,   223,   224,   225,
     226,   227,   228,   229,   230,     0,   231,     0,     0,   232,
     233,   234,   235,     0,   236,     0,   237,     0,     0,     0,
     240,   241,   536,     0,   244,     0,     0,   245,     0,   246,
     247,   248,   249,     0,   250,   251,   252,   253,   254,   255,
     256,     0,   258,   259,   260,   261,     0,   262,   263,   264,
     265,   266,   267,   268,     0,   269,     0,   271,   272,   273,
     274,   275,   276,   277,   278,     0,   279,     0,   280,     0,
       0,   283,     0,   285,   286,   287,   288,   289,   290,     0,
       0,   291,     0,   293,     0,     0,   295,     0,     0,   296,
     297,   298,   299,   300,   301,   302,   537,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     327,   328,   329,   330,   331,   332,     0,   333,   334,     0,
     336,     0,   337,   338,   339,   340,   341,   342,     0,   343,
     344,     0,     0,   345,   346,   347,     0,     0,   348,   349,
     350,     0,   352,   353,     0,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,     0,     0,
       0,     0,   368,   369,   370,     0,   372,   373,   374,     0,
     375,   376,   377,     0,   378,   379,   380,   381,   382,   383,
       0,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,     0,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,     0,   407,   408,     0,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,     0,     0,   427,   428,
     429,   430,   431,     0,   433,   434,   435,     0,     0,   437,
     438,   439,   440,     0,   441,   442,   443,   444,   445,   446,
     447,   448,   449,   450,   451,   452,   538,   454,   455,     0,
       0,   456,   457,     0,   458,     0,   460,     0,   461,   462,
     463,   464,   465,     0,   466,   467,   468,     0,     0,   469,
     470,   471,   472,   473,     0,   474,   475,   476,   477,   478,
     479,   480,   481,     0,     0,   482,   483,   484,     0,   485,
     486,   487,   488,     0,   489,   490,   491,   492,   493,   494,
     495,   496,     0,   497,     0,   499,   500,   501,   502,   503,
     504,   505,     0,     0,   506,     0,     0,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   518,   519,
     520,   521,   522,   523,   524,   525,   526,   527,   535,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   119,   120,   121,
     122,   123,   124,   125,   126,     0,   127,   128,   129,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   131,   132,
       0,   133,   134,   135,     0,   137,   138,   139,   140,   141,
       0,   143,   144,     0,   145,   146,   147,   148,   149,   150,
       0,     0,   151,   152,   153,   154,   155,   156,   157,     0,
     158,   159,   160,   161,   162,     0,     0,     0,   164,   165,
     166,   167,   168,   169,     0,   171,   172,   173,     0,   174,
     175,   176,   177,   178,   179,     0,     0,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,     0,   196,     0,   197,   198,   199,   200,   201,
     202,     0,     0,   203,   204,   205,   206,     0,     0,   207,
     208,   209,   210,   211,   212,     0,   213,   214,   215,     0,
     216,   217,   218,     0,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,     0,   231,     0,     0,
     232,   233,   234,   235,     0,   236,     0,   237,     0,     0,
       0,   240,   241,   536,     0,   244,     0,     0,   245,     0,
     246,   247,   248,   249,     0,   250,   251,   252,   253,   254,
    1899,   256,     0,   258,   259,   260,   261,     0,   262,   263,
     264,   265,   266,   267,   268,     0,   269,     0,   271,   272,
     273,   274,   275,   276,   277,   278,     0,   279,     0,   280,
       0,     0,   283,     0,   285,   286,   287,   288,   289,   290,
       0,     0,   291,     0,   293,     0,     0,   295,     0,     0,
     296,   297,   298,   299,   300,   301,   302,   537,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
       0,   327,   328,   329,   330,   331,   332,     0,   333,   334,
       0,   336,     0,   337,   338,   339,   340,   341,   342,     0,
     343,   344,     0,     0,   345,   346,   347,     0,     0,   348,
     349,   350,     0,   352,   353,     0,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,     0,
       0,     0,     0,   368,   369,   370,     0,   372,   373,   374,
       0,   375,   376,   377,     0,   378,   379,   380,   381,   382,
     383,     0,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,     0,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,     0,   407,   408,     0,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,     0,     0,   427,
     428,   429,   430,   431,   432,   433,   434,   435,     0,     0,
     437,   438,   439,   440,     0,   441,   442,   443,   444,   445,
     446,   447,   448,   449,   450,   451,   452,   538,   454,   455,
       0,     0,   456,   457,     0,   458,     0,   460,     0,   461,
     462,   463,   464,   465,     0,   466,   467,   468,     0,     0,
     469,   470,   471,   472,   473,     0,   474,   475,   476,   477,
     478,   479,   480,   481,     0,     0,   482,   483,   484,     0,
     485,   486,   487,   488,     0,   489,   490,   491,   492,   493,
     494,   495,   496,     0,   497,     0,   499,   500,   501,   502,
     503,   504,   505,     0,     0,   506,     0,     0,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,   518,
     519,   520,   521,   522,   523,   524,   525,   526,   527,   535,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   119,   120,
     121,   122,   123,   124,   125,   126,     0,   127,   128,   129,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   131,
     132,     0,   133,   134,   135,     0,   137,   138,   139,   140,
     141,     0,   143,   144,     0,   145,   146,   147,   148,   149,
     150,     0,     0,   151,   152,   153,   154,   155,   156,   157,
       0,   158,   159,   160,   161,   162,     0,     0,     0,   164,
     165,   166,   167,   168,   169,     0,   171,   172,   173,     0,
     174,   175,   176,   177,   178,   179,     0,     0,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,     0,   196,     0,   197,   198,   199,   200,
     201,   202,     0,     0,   203,   204,   205,   206,     0,     0,
     207,   208,   209,   210,   211,   212,     0,   213,   214,   215,
       0,   216,   217,   218,     0,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,     0,   231,     0,
       0,   232,   233,   234,   235,     0,   236,     0,   237,     0,
       0,     0,   240,   241,   536,     0,   244,     0,     0,   245,
       0,   246,   247,   248,   249,     0,   250,   251,   252,   253,
     254,  2275,   256,     0,   258,   259,   260,   261,     0,   262,
     263,   264,   265,   266,   267,   268,     0,   269,     0,   271,
     272,   273,   274,   275,   276,   277,   278,     0,   279,     0,
     280,     0,     0,   283,     0,   285,   286,   287,   288,   289,
     290,     0,     0,   291,     0,   293,     0,     0,   295,     0,
       0,   296,   297,   298,   299,   300,   301,   302,   537,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,     0,   327,   328,   329,   330,   331,   332,     0,   333,
     334,     0,   336,     0,   337,   338,   339,   340,   341,   342,
       0,   343,   344,     0,     0,   345,   346,   347,     0,     0,
     348,   349,   350,     0,   352,   353,     0,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
       0,     0,     0,     0,   368,   369,   370,     0,   372,   373,
     374,     0,   375,   376,   377,     0,   378,   379,   380,   381,
     382,   383,     0,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,     0,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,     0,   407,   408,
       0,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,     0,     0,
     427,   428,   429,   430,   431,   432,   433,   434,   435,     0,
       0,   437,   438,   439,   440,     0,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   538,   454,
     455,     0,     0,   456,   457,     0,   458,     0,   460,     0,
     461,   462,   463,   464,   465,     0,   466,   467,   468,     0,
       0,   469,   470,   471,   472,   473,     0,   474,   475,   476,
     477,   478,   479,   480,   481,     0,     0,   482,   483,   484,
       0,   485,   486,   487,   488,     0,   489,   490,   491,   492,
     493,   494,   495,   496,     0,   497,     0,   499,   500,   501,
     502,   503,   504,   505,     0,     0,   506,     0,     0,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,   519,   520,   521,   522,   523,   524,   525,   526,   527,
     535,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   119,
     120,   121,   122,   123,   124,   125,   126,     0,   127,   128,
     129,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     131,   132,     0,   133,   134,   135,     0,   137,   138,   139,
     140,   141,     0,   143,   144,     0,   145,   146,   147,   148,
     149,   150,     0,     0,   151,   152,   153,   154,   155,   156,
     157,     0,   158,   159,   160,   161,   162,     0,     0,     0,
     164,   165,   166,   167,   168,   169,     0,   171,   172,   173,
       0,   174,   175,   176,   177,   178,   179,     0,     0,   181,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,     0,   196,     0,   197,   198,   199,
     200,   201,   202,     0,     0,   203,   204,   205,   206,     0,
       0,   207,   208,   209,   210,   211,   212,     0,   213,   214,
     215,     0,   216,   217,   218,     0,   219,   220,   221,   222,
     223,   224,   225,   226,   227,   228,   229,   230,     0,   231,
       0,     0,   232,   233,   234,   235,     0,   236,     0,   237,
       0,     0,     0,   240,   241,   536,     0,   244,     0,     0,
     245,     0,   246,   247,   248,   249,     0,   250,   251,   252,
     253,   254,  2290,   256,     0,   258,   259,   260,   261,     0,
     262,   263,   264,   265,   266,   267,   268,     0,   269,     0,
     271,   272,   273,   274,   275,   276,   277,   278,     0,   279,
       0,   280,     0,     0,   283,     0,   285,   286,   287,   288,
     289,   290,     0,     0,   291,     0,   293,     0,     0,   295,
       0,     0,   296,   297,   298,   299,   300,   301,   302,   537,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,     0,   327,   328,   329,   330,   331,   332,     0,
     333,   334,     0,   336,     0,   337,   338,   339,   340,   341,
     342,     0,   343,   344,     0,     0,   345,   346,   347,     0,
       0,   348,   349,   350,     0,   352,   353,     0,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,     0,     0,     0,     0,   368,   369,   370,     0,   372,
     373,   374,     0,   375,   376,   377,     0,   378,   379,   380,
     381,   382,   383,     0,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,     0,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,     0,   407,
     408,     0,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,     0,
       0,   427,   428,   429,   430,   431,   432,   433,   434,   435,
       0,     0,   437,   438,   439,   440,     0,   441,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   538,
     454,   455,     0,     0,   456,   457,     0,   458,     0,   460,
       0,   461,   462,   463,   464,   465,     0,   466,   467,   468,
       0,     0,   469,   470,   471,   472,   473,     0,   474,   475,
     476,   477,   478,   479,   480,   481,     0,     0,   482,   483,
     484,     0,   485,   486,   487,   488,     0,   489,   490,   491,
     492,   493,   494,   495,   496,     0,   497,     0,   499,   500,
     501,   502,   503,   504,   505,     0,     0,   506,     0,     0,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   518,   519,   520,   521,   522,   523,   524,   525,   526,
     527,  1513,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     119,   120,   121,   122,   123,   124,   125,   126,     0,   127,
     128,   129,     0,     0,     0,  1514,     0,     0,     0,     0,
    1515,   131,   132,     0,   133,   134,   135,  1516,   137,   138,
     139,     0,  1517,  1518,  1519,  1520,     0,   145,   146,   147,
     148,   149,   150,     0,     0,   151,   152,   153,   154,  1521,
    1522,   157,     0,   158,   159,   160,   161,     0,     0,  1523,
       0,  1524,   165,   166,   167,   168,   169,  1525,   171,   172,
     173,     0,   174,   175,   176,   177,   178,   179,     0,  1526,
     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
    1527,   192,   193,  1528,   195,     0,   196,     0,   197,   198,
     199,   200,   201,   202,     0,     0,   203,   204,   205,   206,
       0,     0,   207,   208,  1090,   210,   211,   212,     0,   213,
     214,   215,     0,   216,   217,   218,     0,   219,   220,   221,
     222,     0,   224,   225,   226,   227,   228,   229,     0,     0,
     231,     0,     0,   232,   233,  1529,   235,     0,   236,     0,
     237,  1530,     0,  1531,   240,   241,     0,  1532,   244,     0,
       0,   245,     0,     0,     0,   248,   249,     0,   250,   251,
     252,   253,   254,   255,   256,  1533,   258,   259,   260,   261,
       0,   262,   263,   264,   265,   266,   267,   268,     0,   269,
    1534,     0,   272,   273,   274,   275,   276,  1535,  1536,     0,
    1537,     0,   280,  1538,  1539,   283,  1540,   285,   286,   287,
     288,   289,   290,     0,     0,   291,  1541,   293,  1542,     0,
     295,     0,     0,   296,   297,   298,   299,   300,   301,   302,
    1543,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,  1544,  1545,  1546,   328,   329,   330,   331,     0,
       0,   333,   334,  1547,   336,     0,     0,   338,  1548,   340,
     341,   342,     0,   343,   344,     0,     0,   345,   346,   347,
       0,     0,   348,   349,     0,  1549,   352,   353,  1550,     0,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,     0,     0,     0,     0,   368,   369,     0,  1551,
     372,   373,     0,     0,   375,   376,   377,     0,   378,   379,
     380,   381,   382,   383,     0,   384,   385,   386,   387,   388,
    1552,   390,   391,   392,   393,     0,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,     0,
     407,   408,  1553,   410,   411,   412,  1554,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
       0,  1555,   427,   428,   429,   430,   431,   432,  1556,   434,
     435,     0,  1557,   437,   438,  1558,   440,     0,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
    1559,   454,     0,     0,     0,   456,   457,     0,   458,  1560,
     460,     0,   461,   462,   463,   464,   465,     0,   466,  1561,
    1562,     0,     0,   469,   470,     0,   472,     0,     0,   474,
     475,  1563,   477,   478,   479,   480,   481,  1564,     0,   482,
     483,   484,     0,   485,   486,   487,   488,     0,   489,   490,
     491,   492,   493,     0,  1565,   496,     0,   497,  1566,   499,
     500,   501,   502,   503,   504,   505,     0,     0,   506,     0,
       0,   507,   508,   509,   510,   511,   512,  1513,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   524,   525,
     526,   527,     0,     0,     0,     0,   119,   120,   121,   122,
     123,   124,   125,   126,     0,   127,   128,   129,     0,     0,
       0,  1514,     0,     0,     0,     0,  1515,   131,   132,     0,
     133,   134,   135,  1516,   137,   138,   139,     0,  1517,  1518,
    1519,  1520,     0,   145,   146,   147,   148,   149,   150,     0,
       0,   151,   152,   153,   154,  1521,  1522,   157,     0,   158,
     159,   160,   161,     0,     0,  1523,     0,  1524,   165,   166,
     167,   168,   169,  1525,   171,   172,   173,     0,   174,   175,
     176,   177,   178,   179,     0,  1526,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,  1527,   192,   193,  1528,
     195,     0,   196,     0,   197,   198,   199,   200,   201,   202,
       0,     0,   203,   204,   205,   206,     0,     0,   207,   208,
    1090,   210,   211,   212,     0,   213,   214,   215,     0,  1873,
     217,   218,     0,   219,   220,   221,   222,     0,   224,   225,
     226,   227,   228,   229,     0,     0,   231,     0,     0,   232,
     233,  1529,   235,     0,   236,     0,   237,  1530,     0,  1531,
     240,   241,     0,  1532,   244,     0,     0,   245,     0,     0,
       0,   248,   249,     0,   250,   251,   252,   253,   254,   255,
     256,  1533,   258,   259,   260,   261,     0,   262,   263,   264,
     265,   266,   267,   268,     0,   269,  1534,     0,   272,   273,
     274,   275,   276,  1535,  1536,     0,  1537,     0,   280,  1538,
    1539,   283,  1540,   285,   286,   287,   288,   289,   290,     0,
       0,   291,  1541,   293,  1542,     0,   295,     0,     0,   296,
     297,   298,   299,   300,   301,   302,  1543,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,  1544,  1545,
    1546,   328,   329,   330,   331,     0,     0,   333,   334,  1547,
     336,     0,     0,   338,  1548,   340,   341,   342,     0,   343,
     344,     0,     0,   345,   346,   347,     0,     0,   348,   349,
       0,  1549,   352,   353,  1550,     0,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,     0,     0,
       0,     0,   368,   369,     0,  1551,   372,   373,     0,     0,
     375,   376,   377,     0,   378,   379,   380,   381,   382,   383,
       0,   384,   385,   386,   387,   388,  1552,   390,   391,   392,
     393,     0,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,     0,   407,   408,  1553,   410,
     411,   412,  1554,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,     0,  1555,   427,   428,
     429,   430,   431,   432,  1556,   434,   435,     0,  1557,   437,
     438,  1558,   440,     0,   441,   442,   443,   444,   445,   446,
     447,   448,   449,   450,   451,   452,  1559,   454,     0,     0,
       0,   456,   457,     0,   458,  1560,   460,     0,   461,   462,
     463,   464,   465,     0,   466,  1561,  1562,     0,     0,   469,
     470,     0,   472,     0,     0,   474,   475,  1563,   477,   478,
     479,   480,   481,  1564,     0,   482,   483,   484,     0,   485,
     486,   487,   488,     0,   489,   490,   491,   492,   493,     0,
    1565,   496,     0,   497,  1566,   499,   500,   501,   502,   503,
     504,   505,     0,     0,   506,     0,     0,   507,   508,   509,
     510,   511,   512,  3238,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   524,   525,   526,   527,     0,     0,
       0,     0,   119,   120,   121,   122,   123,   124,   125,   126,
       0,   127,   128,   129,     0,     0,     0,  2980,     0,     0,
       0,     0,  2981,   131,   132,     0,   133,   134,   135,  2982,
     137,   138,   139,     0,  1517,  2983,  1519,  1520,     0,   145,
     146,   147,   148,   149,   150,     0,     0,   151,   152,   153,
     154,  1521,  1522,   157,     0,   158,   159,   160,   161,     0,
       0,  2984,     0,  2985,   165,   166,   167,   168,   169,  2986,
     171,   172,   173,     0,   174,   175,   176,   177,   178,   179,
       0,  2987,   181,   182,   183,   184,   185,   186,   187,   188,
     189,   190,  1527,   192,   193,  1528,   195,     0,   196,     0,
     197,   198,   199,   200,   201,   202,     0,     0,   203,   204,
     205,   206,     0,     0,   207,   208,  1090,   210,   211,   212,
       0,   213,   214,   215,     0,   216,   217,   218,     0,   219,
     220,   221,   222,     0,   224,   225,   226,   227,   228,   229,
       0,     0,   231,     0,     0,   232,   233,  1529,   235,     0,
     236,     0,   237,  2988,     0,  2989,   240,   241,  2990,  2991,
     244,     0,     0,   245,     0,     0,     0,   248,   249,     0,
     250,   251,   252,   253,   254,   255,   256,  2992,   258,   259,
     260,   261,     0,   262,   263,   264,   265,   266,   267,   268,
       0,   269,  2993,     0,   272,   273,   274,   275,   276,  1535,
    1536,     0,  1537,     0,   280,  2994,  2995,   283,  2996,   285,
     286,   287,   288,   289,   290,     0,     0,   291,  2997,   293,
    2998,     0,   295,     0,     0,   296,   297,   298,   299,   300,
     301,   302,  3239,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,  1544,  3000,  1546,   328,   329,   330,
     331,     0,     0,   333,   334,  3002,   336,     0,     0,   338,
    1548,   340,   341,   342,     0,   343,   344,     0,     0,   345,
     346,   347,     0,     0,   348,   349,     0,  3004,   352,   353,
    3005,     0,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,     0,     0,     0,     0,   368,   369,
       0,  3006,   372,   373,     0,     0,   375,   376,   377,     0,
     378,   379,   380,   381,   382,   383,     0,   384,   385,   386,
     387,   388,  1552,   390,   391,   392,   393,     0,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,     0,   407,   408,  3007,   410,   411,   412,     0,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,     0,  3008,   427,   428,   429,   430,   431,   432,
       0,   434,   435,     0,  3010,   437,   438,  1558,   440,     0,
     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
     451,   452,  3240,   454,     0,     0,     0,   456,   457,     0,
     458,  3012,   460,     0,   461,   462,   463,   464,   465,     0,
     466,  1561,  1562,     0,     0,   469,   470,     0,   472,     0,
       0,   474,   475,  3013,   477,   478,   479,   480,   481,     0,
       0,   482,   483,   484,     0,   485,   486,   487,   488,     0,
     489,   490,   491,   492,   493,     0,  1565,   496,     0,   497,
    3015,   499,   500,   501,   502,   503,   504,   505,     0,     0,
     506,     0,     0,   507,   508,   509,   510,   511,   512,   535,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     524,   525,   526,   527,     0,     0,     0,     0,   119,   120,
     121,   122,   123,   124,   125,   126,     0,   127,   128,   129,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   131,
     132,     0,   133,   134,   135,     0,   137,   138,   139,   140,
     141,     0,   143,   144,     0,   145,   146,   147,   148,   149,
     150,     0,     0,   151,   152,   153,   154,   155,   156,   157,
       0,   158,   159,   160,   161,   162,     0,     0,     0,   164,
     165,   166,   167,   168,   169,     0,   171,   172,   173,     0,
     174,   175,   176,   177,   178,   179,     0,     0,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,     0,   196,     0,   197,   198,   199,   200,
     201,   202,     0,     0,   203,   204,   205,   206,     0,     0,
     207,   208,   209,   210,   211,   212,     0,   213,   214,   215,
       0,   216,   217,   218,     0,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,     0,   231,     0,
       0,   232,   233,   234,   235,     0,   236,     0,   237,     0,
       0,     0,   240,   241,   536,     0,   244,     0,     0,   245,
       0,   246,   247,     0,   249,     0,   250,   251,   252,   253,
     254,   255,   256,     0,   258,   259,   260,   261,     0,   262,
     263,   264,   265,   266,   267,   268,     0,   269,     0,   271,
     272,   273,   274,   275,   276,   277,   278,     0,   279,     0,
     280,     0,     0,   283,     0,   285,   286,   287,   288,   289,
     290,     0,     0,   291,     0,   293,     0,     0,   295,     0,
       0,   296,   297,   298,   299,   300,   301,   302,   537,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,     0,   327,   328,   329,   330,   331,   332,     0,   333,
     334,     0,   336,     0,   337,   338,   339,   340,   341,   342,
       0,   343,   344,     0,     0,   345,   346,   347,     0,     0,
     348,   349,   350,     0,   352,   353,     0,   355,   356,   357,
     358,   359,   360,   361,     0,   363,   364,   365,   366,   367,
       0,     0,     0,     0,   368,   369,   370,     0,   372,   373,
     374,     0,   375,   376,   377,     0,   378,   379,   380,   381,
     382,   383,     0,   384,   385,   386,     0,   388,   389,   390,
     391,   392,   393,     0,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,     0,   407,   408,
       0,   410,   411,   412,   413,     0,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,     0,     0,
     427,   428,   429,   430,   431,   432,   433,   434,   435,     0,
       0,   437,   438,   439,   440,     0,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   538,   454,
     455,     0,     0,   456,   457,     0,   458,     0,   460,     0,
     461,   462,   463,   464,   465,     0,   466,   467,   468,     0,
       0,   469,   470,   471,   472,   473,     0,   474,   475,   476,
     477,   478,   479,   480,   481,     0,     0,   482,   483,   484,
       0,   485,   486,   487,   488,     0,   489,   490,   491,   492,
     493,   494,   495,   496,     0,   497,     0,   499,   500,   501,
     502,   503,   504,   505,     0,     0,   506,     0,     0,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,   519,   520,   521,   522,   523,   524,   525,   526,   527,
    1808,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   119,
     120,   121,   122,   123,   124,   125,   126,     0,   127,   128,
     129,     0,     0,     0,  1514,     0,     0,     0,     0,  1515,
     131,   132,     0,   133,   134,   135,  1516,   137,   138,   139,
       0,  1517,  1518,  1519,  1520,     0,   145,   146,   147,   148,
     149,   150,     0,     0,   151,   152,   153,   154,  1521,  1522,
     157,     0,   158,   159,   160,   161,     0,     0,  1523,     0,
    1524,   165,   166,   167,   168,   169,  1525,   171,   172,   173,
       0,   174,   175,   176,   177,   178,   179,     0,  1526,   181,
     182,   183,   184,   185,   186,   187,   188,   189,   190,  1527,
     192,   193,  1528,   195,     0,   196,     0,   197,   198,   199,
     200,   201,   202,     0,     0,   203,   204,   205,   206,     0,
       0,   207,   208,  1090,   210,   211,   212,     0,   213,   214,
     215,     0,   216,   217,   218,     0,   219,   220,   221,   222,
       0,   224,   225,   226,   227,   228,   229,     0,     0,   231,
       0,     0,   232,   233,  1529,   235,     0,   236,     0,   237,
    1530,     0,  1531,   240,   241,     0,  1532,   244,     0,     0,
     245,     0,     0,     0,   248,   249,     0,   250,   251,   252,
     253,   254,   255,   256,  1533,   258,   259,   260,   261,     0,
     262,   263,   264,   265,   266,   267,   268,     0,   269,  1534,
       0,   272,   273,   274,   275,   276,  1535,  1536,     0,  1537,
       0,   280,  1538,  1539,   283,  1540,   285,   286,   287,   288,
     289,   290,     0,     0,   291,  1541,   293,  1542,     0,   295,
       0,     0,   296,   297,   298,   299,   300,   301,   302,     0,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,  1544,  1545,  1546,   328,   329,   330,   331,     0,     0,
     333,   334,  1547,   336,     0,     0,   338,  1548,   340,   341,
     342,     0,   343,   344,     0,     0,   345,   346,   347,     0,
       0,   348,   349,     0,  1549,   352,   353,  1550,     0,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,     0,     0,     0,     0,   368,   369,     0,  1551,   372,
     373,     0,     0,   375,   376,   377,     0,   378,   379,   380,
     381,   382,   383,     0,   384,   385,   386,   387,   388,  1552,
     390,   391,   392,   393,     0,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,     0,   407,
     408,  1553,   410,   411,   412,     0,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,     0,
    1555,   427,   428,   429,   430,   431,   432,     0,   434,   435,
       0,  1557,   437,   438,  1558,   440,     0,   441,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,     0,
     454,     0,     0,     0,   456,   457,     0,   458,  1560,   460,
       0,   461,   462,   463,   464,   465,     0,   466,  1561,  1562,
       0,     0,   469,   470,     0,   472,     0,     0,   474,   475,
    1563,   477,   478,   479,   480,   481,     0,     0,   482,   483,
     484,     0,   485,   486,   487,   488,     0,   489,   490,   491,
     492,   493,     0,  1565,   496,     0,   497,  1566,   499,   500,
     501,   502,   503,   504,   505,     0,     1,   506,     0,     0,
     507,   508,   509,   510,   511,   512,     2,     0,     3,     4,
       0,     0,     0,   735,     0,     0,     0,   524,   525,   526,
     527,     0,     0,     0,     0,     0,     6,     0,     0,     0,
       0,     0,     0,     0,     0,     7,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     8,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      10,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     736,     0,    11,     0,   765,     0,     0,     0,     1,     0,
       0,     0,     0,     0,     0,    13,   737,     0,     2,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      14,    15,     0,     0,     0,     0,     0,     0,     6,     0,
       0,   766,     0,     0,     0,     0,     0,     7,    18,     0,
       0,     0,     0,     0,     0,     0,    19,     0,     0,     0,
       0,     8,     0,     0,     0,     0,   738,     0,     0,     0,
       0,     0,    10,     0,    22,     0,   739,     0,    23,     0,
       0,     0,     0,     0,    11,     0,   765,     0,     0,     0,
     740,     0,     0,     0,     0,   741,     0,    13,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    14,    15,     0,     0,     0,     0,     0,     0,
       0,  -596,     0,   766,     0,   742,     0,   735,     0,     0,
      18,     0,     0,     0,     0,     0,     0,     0,    19,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    25,
       0,     0,     0,     0,     0,     0,    22,     0,     0,     0,
      23,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     743,     0,     0,     0,   744,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   736,     0,     0,   745,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     737,     0,     0,  -596,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    26,    27,
      28,    25,     0,     0,     0,     0,    29,     0,     0,     0,
      30,     0,   551,     0,     0,     0,     0,     0,   746,     0,
     738,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     739,     0,     0,     0,   747,     0,     0,     0,     0,     0,
       0,    31,     0,     0,   740,     0,     0,     0,     0,   741,
      32,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    33,     0,     0,   748,
       0,     0,   749,    34,     0,     0,     0,    35,     0,   742,
      26,    27,    28,   750,     0,     0,   751,    36,    29,     0,
       0,     0,    30,     0,     0,     0,     0,     0,     0,    37,
       0,     0,     0,    38,   752,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   753,     0,
       0,     0,     0,    31,   743,    39,   754,   755,   744,     0,
       0,     0,    32,     0,     0,     0,     0,   756,    40,     0,
       0,   745,     0,   757,    42,     0,     0,     0,    33,    43,
       0,     0,     0,     0,   767,    34,     0,     0,     0,    35,
       0,     0,     0,     0,     0,     0,    44,     0,     0,    36,
       0,   758,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    37,     0,     0,     0,    38,     0,     0,     0,     0,
      45,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   746,     0,   768,     0,     0,    39,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   747,     0,
      40,     0,     0,     0,     0,     0,    42,     0,     0,     0,
       0,    43,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    44,     0,
       0,     0,     0,   748,     0,     0,   749,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   750,     0,     0,
     751,     0,    45,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    46,     0,   752,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   753,     0,     0,     0,     0,     0,     0,     0,
       0,   755,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   756,     0,     0,     0,     0,     0,   757,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   758
};

static const yytype_int16 yycheck[] =
{
       7,     0,    46,   528,   760,     0,     0,    90,    91,    16,
       0,    88,     0,   906,   918,     0,    23,     0,     0,     0,
     946,     0,  1021,     0,   856,     0,  1272,    38,   768,  1062,
      23,   880,   830,  1259,   929,  1460,  1003,    20,     7,    20,
      16,  1258,   951,  1246,  1191,  1332,  1735,  1233,  1011,  1693,
    1839,  1011,    92,  1011,    23,  2286,    20,  1011,  1611,    92,
    1110,  1506,    37,  1665,   986,  2122,     7,  1235,  2231,  1585,
    2196,  1314,  2198,  1197,  2217,    17,  1238,   990,  1003,  1336,
       0,  2722,    23,    90,    91,  2037,  1646,  1647,     0,  2038,
     918,     0,   920,  2401,   922,  1263,     0,    90,    91,    45,
       0,   112,  2684,     0,     0,     0,  1362,     0,    13,  2684,
    2216,  1156,    34,  2720,    19,     0,  1161,  2282,     0,  1118,
    2162,    90,    91,     0,  2738,    30,  2745,  2553,     0,   104,
       0,   767,     0,  2353,     0,  1030,     0,     0,     0,    44,
      45,   768,     0,     0,   761,  1864,     0,  1697,     0,    90,
      91,   826,  2334,  2335,  2336,     0,   831,  2640,     5,     0,
    1009,  2644,  1753,  1857,  1665,     5,    13,    14,     5,  1755,
    1980,    63,    63,     0,     5,     5,     5,  2013,    80,   787,
       5,  2366,    13,    14,    13,    14,     5,     9,     5,  1860,
    2026,     5,  3067,  2364,    13,    14,    13,    14,     5,    55,
    1167,     5,  2364,     5,     4,   110,     5,  2372,     5,     9,
       9,    26,     9,  2360,  1012,   140,     5,    32,     5,    40,
      13,    14,     5,   124,   194,     5,     0,   901,     5,    82,
       5,   175,    45,    45,   901,    30,     3,   174,     5,    60,
      93,   875,    74,    13,    14,    23,  2503,   122,  1281,    11,
       3,     4,     5,   184,    16,   100,     9,  1290,    63,   119,
       9,   107,    30,  1003,  3243,    37,  2431,  2432,  1117,  2434,
      38,   122,   303,   100,     5,  1201,   104,     4,   122,  1174,
    1247,    82,     9,  1250,  1251,   106,   174,    30,   303,   297,
      85,   230,    93,   295,   174,    38,  1018,    11,   823,    94,
      11,    15,    16,  3026,   175,    16,   322,    64,     8,   230,
       3,    11,    90,    91,   298,    15,    16,    74,   174,    19,
      20,    21,   137,   118,  2908,  3409,   100,  3053,  1475,    11,
      63,   107,    46,    15,    16,    46,    36,   122,  1013,   171,
     279,    34,    35,   298,  3070,   187,    30,   872,  2889,   283,
    2891,  1026,   137,  1556,    38,   392,   184,  3417,   279,  1506,
    2486,   196,    90,   379,   117,   216,    80,   163,  1004,    80,
    1084,  1085,   216,  1088,   148,    40,   117,  2600,  1227,  2602,
     196,    40,   107,  3450,   205,   164,  2654,  1101,   401,  1104,
     164,  1223,  1224,  1650,    30,   169,  2185,  3503,    41,   194,
     174,   129,    30,   175,   168,   166,  2006,  2007,  2008,  2954,
     184,   117,   207,   272,  3260,   189,   322,   255,  1344,  2601,
     164,  3062,  2653,   108,   166,   445,   519,  1320,  1949,     6,
     351,  1040,  3073,    10,  3009,   256,   525,  1046,    33,   532,
     212,    18,   369,   532,   282,   266,   317,   221,    83,   282,
     119,   279,   297,   194,   287,    32,   228,  3064,   279,    36,
    1981,    11,   241,   402,    59,  2628,   238,   241,  1377,   222,
     297,   330,   399,   234,   279,   495,   132,   148,   370,   370,
     173,   402,   175,   126,   280,  2650,   301,  2652,   297,   246,
    3557,  1213,   313,   246,  3600,  2763,   132,   241,  3558,   536,
    1222,   108,  2544,  3378,   132,   536,   443,   339,   350,   525,
     195,  3595,  1562,   178,   149,   294,   349,   530,  3241,   178,
     294,   536,   530,   297,    26,   225,   371,   466,   530,   303,
      80,  1788,   466,   368,   405,    11,   278,   379,   469,    15,
      16,   282,   497,  3269,   371,   466,   530,  3526,   369,   365,
     221,  1225,   367,   338,   279,   443,   287,  2814,  1225,  3405,
     530,    75,  3103,   488,  1198,   370,  2168,   250,   469,   333,
      46,   546,   346,   394,    11,  2798,  2761,  1185,    15,    16,
    2751,   287,   519,   429,   399,  2030,   530,  2734,   316,  2751,
     443,   466,   413,   600,   399,   532,  1782,   371,  1123,   299,
    1843,   481,   374,  3187,    80,  1361,  3481,   383,  2773,  2162,
    1366,   471,   440,   426,   426,   466,  1372,  1466,   287,   525,
     415,   393,   466,   418,   600,   106,   528,  2579,   460,   108,
     532,  2441,   303,   429,     0,   137,   292,   370,   378,  1379,
    2200,   409,   443,  3257,   536,   536,  2237,   492,  1480,   416,
     417,  1877,  2238,  1909,   494,   429,  3201,   472,   563,   469,
     429,  3243,  1695,  2499,  1496,   492,   409,  2168,  3243,   494,
    2220,   119,   479,  2367,   530,  3220,   516,  2230,  1924,   533,
    2399,   533,   536,   530,  1941,   459,   531,   534,   533,   530,
     530,   516,   533,   530,  2925,   469,  1953,   534,   528,   530,
     530,   530,   532,  2374,   531,   530,   533,   529,   436,  3192,
     531,   530,  2932,   530,  3197,   489,   530,   491,   492,  3145,
     530,   521,   522,   530,   768,   409,   530,  1984,   530,  1451,
    1452,   530,   530,   530,  1991,  1457,  3377,   530,   821,  1588,
    1589,   530,  1378,   530,  1639,  1640,  1641,   530,  3056,  1598,
     530,  1368,  1379,   530,   528,   530,  3482,   531,   532,   533,
     530,   768,   210,  1612,   526,   492,   469,  3386,   521,   522,
    2027,  3385,   521,   522,  2031,   256,   480,   821,    13,    14,
     463,  3624,   132,   120,   767,   266,   767,   480,   459,   516,
     530,   536,  2035,  1642,   521,   522,   428,   120,  1473,   301,
    2906,    53,   809,  2060,   768,  3648,   286,  1521,  1522,   523,
     524,   525,   526,  1528,   821,   526,   180,   517,   518,   519,
     419,   521,   522,   523,   524,   525,   526,   530,   821,   906,
     870,   279,  1546,  1548,   282,  2787,   468,   870,   264,   265,
     809,   523,   524,   525,   526,  1812,  1993,   530,   217,   856,
     857,  3604,   821,  1886,   164,  1822,   761,   762,  1825,   169,
    3501,   198,   528,  3045,   875,   367,   532,   369,   809,  1584,
    2912,  3478,  3544,   880,  2823,   198,   531,  2826,   282,  2828,
     821,   536,   246,  2030,   895,   484,  3051,  2487,  2488,  2489,
    2490,   890,  1606,  1607,   492,   890,   890,   399,    11,  3652,
     890,  2503,   890,  1807,   533,   890,  1662,   890,   890,   890,
    2699,   890,  2701,   890,   878,   890,  2868,    74,   516,   250,
     927,   928,  3594,     5,   931,   932,   406,   179,  1453,   519,
    2186,   241,   282,    46,   169,   881,   858,   859,  3545,   861,
     530,   863,   292,   351,  3526,   197,   494,  1840,  1841,  1842,
     202,  3526,  1780,    26,  1037,    82,  2001,  1866,  1925,    32,
     117,  1044,   388,   389,  2111,  3379,    93,    80,   516,   180,
     890,   149,  3203,     5,   530,  3173,   881,  3175,   890,  1807,
    3288,   890,   150,   990,   294,  1907,   890,  3628,   240,  1911,
     890,  2544,  1914,   890,   890,   890,  1003,   890,   530,  1827,
    1925,  1008,  1009,  1916,  1832,   890,  2566,  1014,   890,   951,
    1017,  1018,   108,   890,  1021,  1022,  1023,  1024,   890,  1741,
     890,  1004,   890,  1004,   890,   203,   890,   890,   890,  1589,
    1037,   809,   890,   890,   132,   246,   204,  1044,  1598,  2464,
    3183,    71,    72,   821,  1037,   521,   522,   523,   524,   525,
     526,  1044,   383,   132,  1061,  1062,  1063,  3338,   250,  3340,
     365,   180,  1818,   161,   137,    59,  3480,  1823,  1037,  3483,
     523,   435,   390,   437,  1118,  1044,  1083,   530,  2202,   390,
     494,  2205,   161,  2309,   521,   522,   523,   524,   525,   526,
     206,  2880,  2608,   257,  2337,  1102,  1037,  3443,  3444,   463,
     132,   494,   516,  1044,  3302,   528,  1113,  1114,  1115,   532,
    1117,  1118,   323,  2260,  1932,  1122,   530,    82,  1936,  2376,
     250,  1939,  3353,   516,   529,   282,  1031,   246,    93,   161,
     287,  2684,   463,   529,  2959,   540,  1035,   530,   192,   193,
    1989,  3422,  2967,  3095,   540,  1152,  1122,   206,   525,  1054,
    2318,   250,   404,   448,  1053,   532,   531,   531,  1057,  3505,
     429,   536,   536,  1170,  1171,   148,  1206,  1207,   435,  1209,
     437,    13,   383,  1206,  1207,   250,  1209,    19,  3592,   390,
     174,   164,   339,   387,   282,  1925,   169,  1198,    30,   287,
      37,   383,   250,  2192,   292,    42,   435,   482,   437,   530,
     357,  1208,    44,    45,     4,  1212,  1213,   390,   287,     9,
     264,   265,  2814,   292,  1119,  1222,  1223,  1224,    13,    14,
    1227,  2383,   530,  2072,   435,     4,   437,  2389,   301,   528,
       9,   530,  1954,  1955,  1956,  1957,  1958,  1959,   221,  1246,
    1962,  1963,  1964,  1965,  1966,  1967,  1968,  1969,  1970,  1971,
     282,  1262,   463,   383,   101,   287,   530,   174,   241,  1037,
     292,  2518,    13,    14,   383,   531,  1044,   383,   110,     8,
     536,   463,    11,   530,  1281,   528,    15,    16,   394,   532,
      19,    20,    21,  1290,   383,  1190,  1191,   531,    41,   169,
     363,   531,   536,   164,   367,   180,   536,    36,   169,  2148,
     843,   844,   845,   460,  2197,   848,  1045,  1314,   383,   530,
    1049,   294,   469,   429,   858,   859,   435,   861,   437,   863,
     303,   206,   531,    13,    14,   383,   399,   536,   175,  1336,
     324,   325,   326,   463,   388,   389,  1335,   531,   530,   530,
    1335,  1335,   536,   531,   463,  1335,  1353,  2792,   536,  3406,
    1335,   492,   450,   494,  2501,  1362,   109,  2504,   111,  2912,
     113,   246,   174,   461,   463,   212,   482,  2289,   531,  2291,
     241,   450,  1379,   536,     4,   531,   530,  1353,   531,     9,
     536,   228,   461,   536,  2292,  3616,  2294,   531,   463,  1396,
     530,   238,   536,   530,  1401,  1378,     4,  1378,   392,   472,
     530,     9,   435,  1486,   437,   463,  1489,   324,   325,   326,
       5,  1494,    13,    14,  1497,  1379,   530,   302,   450,  1502,
    1396,  2143,  2144,   294,   435,   531,   437,  2684,   275,   461,
     536,   530,  2650,  2265,  2652,   429,  3562,  2363,  3601,    37,
    3603,  2667,   531,   531,  1451,  1452,   530,   536,   536,  2666,
    1457,  3577,  2698,  1460,   898,   530,   900,   531,  1465,  1466,
    1467,  1468,   536,  1368,  1369,  2651,  1371,   528,   530,   530,
     464,   532,   530,  1480,  1481,   392,   459,   324,   531,  1486,
     531,   475,  1489,   536,   331,   536,   225,  1494,  3651,  1496,
    1497,  1460,   531,  1486,   530,  1502,  1489,   536,  2715,  2549,
    2550,  1494,   531,  2665,  1497,  2667,   531,   536,   531,  1502,
     531,   536,   429,   536,   523,   536,  3642,  1486,   516,  1460,
    1489,   531,   530,    26,  3650,  1494,   536,   374,  1497,    32,
     531,   126,   127,  1502,   531,   536,   530,   513,   531,   536,
     227,  2263,  3331,   536,  3333,  1486,   393,   464,  1489,  1556,
     435,   532,   437,  1494,  2553,   297,  1497,   531,   475,   513,
     299,  1502,   536,  2526,  2527,  2528,  2526,  2416,  2526,  2527,
    1475,  2525,    13,    14,   532,   460,   173,   175,   463,   174,
     531,  1588,  1589,   531,   531,   536,   536,   531,   536,   536,
    1597,  1598,   536,    13,    14,   531,   530,  1585,  1605,  1504,
     536,  1506,  1585,  1585,  1585,  1612,  1585,   531,  1585,   531,
    1585,   531,   536,   530,   212,   180,   536,   464,    13,    14,
      13,    14,  1465,   531,  1467,  1468,    13,    14,    13,    14,
     228,  1638,    13,    14,   137,  1642,    13,    14,  1645,   531,
     238,   206,   174,  1650,  1651,  1652,  1653,  1654,  1655,  1656,
    1657,  1658,  1659,  2409,    13,    14,  1663,  1664,  1665,    13,
      14,  1668,    13,    14,   302,  1672,    13,    14,  1675,  1676,
    1677,  1678,  1679,  1680,  1681,  1682,  1683,  2417,   530,  1686,
      59,   246,  1460,  1659,   531,   430,  1693,   513,  1695,   536,
    3243,    13,    14,    13,    14,   153,  1665,  3341,  1738,    13,
      14,    13,    14,    26,   227,  1738,   363,  1714,  1486,    32,
     153,  1489,    13,    14,   378,   379,  1494,   153,  2975,  1497,
      26,   563,  2617,   153,  1502,   153,    32,    26,   429,   324,
     325,   326,    40,    32,  1741,    13,    14,   302,    13,    14,
    2926,   531,    13,    14,   530,  1752,  1753,  2973,  1712,    13,
      14,   378,   379,   282,    26,   378,   379,    40,   323,   482,
      32,   378,   379,   269,   270,    89,   388,   389,   474,   475,
    3057,  2394,  2395,  2222,  2223,   268,   374,   153,   517,   518,
     519,  1788,   521,   522,   523,   524,   525,   526,  3572,  3573,
    1797,   496,  1799,   153,   547,   393,   532,   392,   301,   552,
    1170,  1171,   555,  3049,  3610,  3611,  3009,   153,   403,   153,
    2642,   297,  2705,   365,   137,   443,   530,   530,   383,  2728,
     530,  1797,  2748,  1799,   531,   390,   530,   431,   228,   223,
     425,   137,  1839,   307,   429,   530,  1843,   228,   137,  1846,
    1847,   530,   228,   304,  2766,    40,   530,   239,  2881,     5,
       5,   530,   334,   530,   530,   530,     5,     5,   530,     5,
     363,  2583,  2584,  1768,   367,   137,     5,  3292,   530,   464,
     435,  3560,   437,     9,   530,  3564,   530,   493,  1783,  1886,
     475,   310,   104,  3140,   536,   536,   531,    40,  1793,   454,
    1795,  1974,   223,  1798,   399,   460,   399,   492,   463,  1804,
     169,  1806,  1909,   169,   294,    59,   239,  1882,   292,  1916,
    1917,   530,   443,    93,  1819,   530,   536,   443,  1925,  1824,
     762,   516,    59,  1828,  1829,  1830,  1831,    59,  1833,  1834,
     443,  2014,   272,   443,  1941,   530,   108,  2020,  1945,  1946,
    3629,  1948,   443,   225,   540,   443,  1953,  1954,  1955,  1956,
    1957,  1958,  1959,   492,   153,  1962,  1963,  1964,  1965,  1966,
    1967,  1968,  1969,  1970,  1971,   390,   100,  1974,   530,   472,
      40,  1978,  1979,  3526,   530,  1982,   202,  1984,   301,   282,
     282,  1974,  1989,   153,  1991,   282,  3243,   148,   282,   282,
    2788,   174,   532,    13,   531,   301,   531,  2964,   174,   489,
     536,   531,   301,   164,  2011,  1974,    37,  2014,   169,  2016,
     531,    42,   531,  2020,   536,   531,   531,   228,   530,   228,
    2027,  2014,   289,   530,  2031,  3450,  2033,  2020,  2035,   301,
    2037,   289,   536,  1974,   530,   532,   530,  3254,   530,   881,
     363,    82,   479,   530,   367,  2014,   530,   530,    39,   530,
     488,  2020,   532,  2060,  2976,  2977,     9,   363,   811,   441,
     221,   367,  2784,  2819,   363,  2072,  2073,   108,   367,   117,
     101,   441,    11,  2014,   530,   365,   399,  3502,   529,  2020,
     241,   536,   536,   540,   441,   535,   287,   443,  1993,  2811,
     530,   363,    25,   399,   184,   367,   165,   174,   531,   221,
     399,   536,   469,  2110,  2148,   536,  2113,   272,   298,   230,
     402,  2118,  2119,  3112,   322,   322,   184,   536,   536,   223,
    2025,   531,   174,   530,   230,  2030,   174,   399,   230,  3375,
     282,   344,  3557,   294,  2856,   176,  2143,  2144,   295,   892,
     303,  2148,   303,   482,   175,   268,   153,   530,   153,   472,
     530,   153,   153,    40,   492,   282,   153,  2164,   536,   321,
    2167,  2168,  2169,   536,     3,   206,   472,   530,   282,   297,
    3317,     3,   181,   472,    40,    59,   174,   297,  2185,  2186,
      11,   212,    40,   116,   169,  2192,   531,   530,  2195,  2945,
     943,   184,   169,     3,   531,   531,  1974,   228,   530,  2168,
     472,   531,  2195,   530,    39,  2212,  2111,   238,   961,   962,
     251,   964,   965,     3,   443,  2120,   443,   528,   528,  2212,
     443,   536,  2229,   443,  3410,  2947,  2195,   268,   535,   149,
     174,   531,   148,   529,   243,   244,  2014,   532,   443,  2246,
    2247,   530,  2020,  2212,   275,   531,    37,   531,   164,   156,
     531,    42,   531,   169,  2195,   531,  2263,   513,  2265,   513,
    3407,   531,  1015,   531,   312,   513,  1019,  2274,   531,  3526,
     530,  2212,   324,   325,   326,   530,   324,   325,   326,   530,
     255,   530,    40,   489,    59,  2292,  2293,  2294,   519,   536,
     481,   515,   298,   324,   298,  3221,   536,   466,   459,   249,
     331,     8,  2207,  3529,    11,   221,    59,    59,    15,    16,
     101,   272,    19,    20,    21,   282,  2292,  2293,  2294,  1018,
     174,   206,    40,   153,  2331,   241,  2370,   443,   530,   153,
    2337,   153,   443,   443,   443,   443,   530,   289,   289,   365,
     392,   530,   383,   374,   392,   531,   355,   531,  1190,   536,
     295,  3091,   492,   394,   297,  2260,    40,   153,  3544,  2358,
       5,  2266,   393,  2358,  2358,   153,   534,   528,  2358,  2376,
    3556,   532,  3094,  2358,   287,   174,    59,   429,   294,    80,
     531,   429,   189,   530,   175,   394,   530,   303,   429,  2396,
       8,   169,   174,    11,  2401,   528,   531,    15,    16,   144,
     531,    19,    20,    21,   202,   531,   531,   531,  3594,  2416,
    2417,   530,   464,   454,   531,   530,   464,  2195,  2425,   531,
     429,   212,   540,   475,   433,  2401,   531,   475,   309,   536,
     371,   531,   530,   464,  2212,   536,   298,   228,   531,   153,
     492,   482,   184,   531,   492,   536,   530,   238,  3343,  2425,
     178,   454,   531,   531,  3303,   531,  3305,  2464,   312,   532,
     321,   536,    40,   530,   516,   530,    86,   531,   516,   530,
     324,   325,   326,   482,    40,    40,   297,   469,   530,  1232,
     536,  2386,   530,  3315,   275,   174,   152,   530,   475,   531,
       8,   491,  1245,    11,   531,  2464,  2503,    15,    16,  3297,
     531,    19,    20,    21,   202,   297,   297,   531,   174,  2553,
     529,  2518,   529,  1266,   536,   531,   531,  2594,  3517,  2530,
    3318,   531,  3320,  2464,   519,    59,  3452,  1369,  2535,  1371,
     492,   208,   531,   324,  2541,  2542,   117,   531,   392,    40,
     331,   531,   531,   459,   530,  2589,  2553,   531,   230,  3442,
      88,   195,   287,   287,   532,   443,   532,  3461,   532,   532,
    2567,   532,   532,  2570,   532,  2572,   532,   532,   532,   532,
     519,   443,  2579,  2580,   532,   429,  2583,  2584,  1331,    40,
       5,  2588,  2589,   374,  1337,   532,   532,   282,  2595,   529,
     532,  3313,   299,   529,  1347,   532,  2501,   532,  2642,  2504,
     532,   532,   393,  2610,  3436,  2510,   532,   225,   532,   532,
     464,   532,   528,  2620,   532,   531,   532,   532,     7,     8,
    2608,   475,   532,   532,    13,  2608,  2608,  2608,   532,  2608,
      19,  2608,   532,  2608,    23,  2642,    25,   532,   492,  2614,
      29,    30,    31,   532,   530,    34,   492,   107,    37,    38,
     429,   531,    41,   531,   531,    44,    45,   321,   324,   325,
     326,   308,   516,   530,   297,     9,   530,   364,   536,    59,
     530,   530,   346,   464,  2681,   531,   530,  2684,  2685,   536,
    2687,   299,   531,   202,   202,   529,  2464,   195,   536,   474,
      91,    37,  2699,   531,  2701,   357,    42,   530,    40,   153,
     124,    90,    91,   532,   531,  2681,  2789,   225,   153,  2685,
      40,  2687,   531,  2757,   379,   104,    40,     5,   379,   530,
     109,   110,   111,   112,   113,   531,   392,   530,  2727,   530,
    1483,    40,  2727,  2727,   536,  2640,   469,  2727,   318,  2644,
    2645,  2646,  2727,  3499,   530,   287,  2721,   530,   254,   469,
     194,   454,  1451,  1452,   308,   101,   530,    74,  1457,   300,
      74,   163,    80,   429,     9,   531,   531,  2811,  2673,   530,
     381,   531,   529,   529,    59,  2750,   133,  2784,    93,   519,
    2787,   299,  2789,  2688,  2689,  2690,  2691,  2692,  2693,  2694,
    2695,  2696,  2697,   279,   297,   454,  2789,    40,   464,  2806,
    2807,   530,   300,   530,  2811,  2888,   300,  2814,   308,   475,
     517,   518,   519,   139,   521,   522,   523,   524,   525,   526,
    2789,   531,   531,   536,   530,   474,   492,   531,   208,   175,
     297,   531,   531,   297,  2841,   301,   530,   399,   531,   122,
     466,   531,   176,   534,   149,   378,    25,   181,  2789,  2856,
     516,   531,    36,   378,   535,  2862,  2863,   305,  2902,    40,
    2867,  2868,   890,  2969,   530,  2872,   212,  1805,  2875,  2876,
     803,  1063,  2287,  2880,  2881,  2681,  2668,  2884,  1713,    60,
    2330,  2888,   228,  1849,  2357,   804,  2425,  2792,  2895,  3414,
    3091,  2717,   238,  3467,  3587,  2888,  1270,  3214,  3530,   517,
     518,   519,   835,   521,   522,   523,   524,   525,   526,   243,
     244,  3539,  3580,  2818,  1233,  3271,  2739,   251,  2280,  2888,
    2293,  3528,  2660,  3537,  2687,   106,  2277,   860,  3525,   275,
    2394,  1332,  2939,  2395,  3082,  1361,  2404,  1916,  2619,  3412,
    2947,  1783,  3345,  2618,  3502,  1379,    55,  2888,  3446,  3615,
     152,  1793,  1190,  1795,  2608,  1036,  1798,  2263,  1711,  2966,
    1713,  2229,  1804,   896,  1806,  1036,   896,  1777,  2975,  2485,
    1216,  1724,   174,  1215,  3511,  1167,  2246,  1819,   324,  1741,
    3424,  3307,  1824,  1776,  1218,   331,  1828,  1829,  1830,  1831,
      23,  1833,  1834,   102,   181,  2212,  2814,   178,  2025,   517,
     518,   519,  3009,   521,   522,   523,   524,   525,   526,  3135,
    2464,  2789,   821,  1766,   123,   809,  2463,    98,  2510,  3235,
    2040,   355,  1925,  1925,   205,  1013,  1925,  3428,   374,   176,
    1011,  1011,  1011,   142,   181,  3427,  3627,   146,  2542,  1011,
    2120,  2946,  1011,  2230,  2168,   126,   127,   393,  2074,  3056,
    2165,  1011,  1011,  2563,  1246,  1011,   243,   244,  1481,  2895,
     394,   170,   867,  1011,   173,  1712,  2857,   104,  3112,  1003,
    1003,  3078,  2033,    -1,    -1,   256,    -1,    -1,  1011,    -1,
    3056,   190,    -1,    -1,  3091,   266,    -1,  3094,  3095,    -1,
    3065,    -1,    -1,   174,    -1,   429,   243,   244,   279,   433,
      -1,    -1,    -1,    -1,   251,  3112,  1859,  1860,  1861,  1862,
    2888,    40,  1865,    -1,    -1,    -1,    -1,    -1,   464,    -1,
      -1,    -1,   324,   325,   326,    -1,    -1,    -1,    -1,    -1,
      -1,    60,   313,  3140,    -1,    -1,    -1,    -1,  3145,    -1,
      -1,    -1,    -1,    -1,  1336,    -1,    -1,    -1,   482,    -1,
    3157,  3158,    -1,    -1,  3161,    -1,  3163,    -1,   547,    -1,
      -1,    -1,    -1,   552,    -1,    -1,   555,    -1,   355,    -1,
      -1,    -1,    -1,    -1,   563,    -1,    -1,   106,   287,    -1,
      -1,  3188,    -1,    -1,    -1,    -1,   295,    -1,   369,     8,
     392,    -1,    -1,    -1,  1127,    -1,    15,    16,  1063,    -1,
      19,    20,    21,  1137,  1137,  3212,    -1,   394,   355,   318,
      -1,    -1,    -1,   394,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3128,    -1,  1158,    -1,   429,    -1,    -1,
    3135,    -1,   413,  1167,  1167,    -1,  3243,    -1,    -1,    -1,
     349,    -1,   429,   324,   325,   326,   433,   394,    -1,    -1,
      -1,    -1,  2005,    -1,    -1,  1954,  1955,  1956,  1957,  1958,
    1959,    -1,   464,  1962,  1963,  1964,  1965,  1966,  1967,  1968,
    1969,  1970,  1971,   475,    -1,    -1,   205,    -1,    -1,   180,
      -1,  3288,   429,    -1,  3259,  3292,   433,  3192,    -1,    -1,
     492,    -1,  3197,    -1,    -1,   482,  3303,    -1,  3305,    -1,
    3307,    -1,    -1,    -1,  3311,   206,  3313,    -1,  3315,    -1,
      -1,   392,  3288,  1247,   516,    -1,  1250,  1251,  3223,  3326,
      -1,    -1,   403,  3292,  3331,    -1,  3333,   256,   530,    -1,
      -1,    -1,    -1,    -1,  3341,   482,    -1,   266,    -1,  3244,
    3245,    -1,    -1,    -1,   425,   246,    -1,  3354,   429,    -1,
     279,  3292,  3359,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3268,  1556,  2207,    -1,  3342,    -1,  3344,
     451,   760,   761,   762,    -1,    -1,    -1,    -1,  3354,    -1,
      -1,  1246,    -1,   464,   313,    -1,    -1,     0,    -1,    -1,
      -1,    -1,    -1,    -1,   475,    -1,    -1,    -1,    -1,    -1,
    1063,   302,    -1,    -1,    -1,    -1,  3413,    20,    -1,  3384,
      23,   492,  3317,    -1,   803,   804,    -1,  3424,    -1,    -1,
     809,    -1,   811,    -1,    37,  3400,    -1,    -1,    -1,  3436,
      -1,    -1,   821,    46,    -1,   516,   825,   826,    -1,    -1,
     369,   830,   831,  3450,  2143,  2144,    -1,    -1,    -1,   530,
    1384,  1385,    -1,    -1,   843,   844,   845,    -1,  1650,   848,
      -1,  3468,  1395,    -1,    -1,   394,    -1,    -1,    -1,   858,
     859,  1336,   861,    -1,   863,    -1,    -1,    90,    91,    92,
     299,  3450,   383,    -1,   413,    -1,   875,    -1,    -1,    -1,
      -1,   104,   881,    -1,    -1,  3502,    -1,    -1,    -1,    -1,
      -1,    -1,  3407,   892,    -1,    -1,   895,   896,    -1,  3450,
    3517,    -1,    -1,    -1,  3292,    -1,    -1,    -1,    -1,  3526,
      -1,  3528,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,
      16,    -1,    -1,  3502,   435,    -1,   437,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2386,    -1,    -1,    -1,    -1,    -1,
    3557,    -1,  3528,   454,   943,   944,    -1,    -1,    -1,   460,
      46,  3502,   463,    -1,  3571,  3572,  3573,    53,  3543,    -1,
      -1,    -1,   961,   962,    -1,   964,   965,    -1,   967,    -1,
      -1,    -1,    -1,  1246,    26,    -1,    -1,    -1,  3557,    -1,
      32,   980,    -1,    -1,    80,    -1,  1788,  3604,    40,    -1,
    3575,    -1,    -1,    -1,    -1,    -1,  2359,    -1,    -1,    74,
      -1,    -1,  2365,    -1,    -1,    80,  3557,  3522,    60,    -1,
    2373,  2374,  2375,  1012,  1013,    -1,  1015,    -1,    93,  1018,
    1019,    -1,    -1,    -1,    -1,  2388,  1025,  1026,  2391,    -1,
      -1,    -1,  1031,    -1,    -1,  3652,    -1,    -1,  1037,    -1,
    2403,    -1,   117,    -1,   119,  1044,    -1,    -1,    -1,    -1,
     146,    -1,    -1,    -1,   106,  1054,    -1,    -1,    -1,  1603,
      -1,    -1,  3450,  1336,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1615,  1071,  1617,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1556,    -1,   179,    -1,   137,    -1,    -1,   517,   518,
     519,    -1,   521,   522,   523,   524,   525,   526,    -1,    -1,
    1644,   197,    -1,    -1,    -1,    -1,   202,    -1,    -1,    -1,
      -1,    -1,  3627,    -1,  3502,    -1,    -1,    -1,    -1,    -1,
    1119,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2492,
    2493,  2494,    -1,  1063,    -1,   210,    -1,    -1,    -1,  1941,
      -1,    -1,    -1,    -1,   240,    -1,  1063,    -1,    -1,    -1,
      -1,  1953,    -1,   205,    -1,    -1,    -1,    -1,    -1,    -1,
    1703,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3557,
      -1,    -1,    -1,    -1,  1173,  1650,    -1,  1176,    -1,    -1,
      -1,    -1,  1984,    -1,  1727,  1728,    -1,    -1,    -1,  1991,
      -1,  1190,  1191,  2645,  2646,    -1,    -1,    -1,    -1,  1198,
      -1,    -1,    -1,   299,   256,    -1,    -1,   282,  1752,  1753,
      -1,    -1,   287,    -1,   266,    -1,    -1,    -1,    -1,    -1,
      -1,  2673,    -1,  1222,    -1,  2027,    -1,   279,    -1,  2031,
      -1,    -1,    -1,  1232,  1233,  2037,  2688,  2689,  2690,  2691,
    2692,  2693,  2694,  2695,  2696,  2697,  1245,    -1,    -1,   301,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1063,  2060,    -1,
      -1,   313,    -1,  1262,   339,    -1,    -1,  1266,  1812,    -1,
      -1,    -1,  1271,  2636,  2583,  2584,    -1,    -1,  1822,    -1,
      -1,  1825,   357,  1556,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1835,   126,   127,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1848,  1849,    -1,   404,    -1,
      -1,   363,    -1,  1788,    -1,   367,  1246,   369,    -1,    -1,
      -1,    -1,    -1,   546,    -1,    -1,    -1,    -1,    -1,  1246,
    1329,    -1,  1331,    -1,    -1,    -1,    -1,    -1,  1337,    -1,
      -1,   174,   394,    -1,    -1,    -1,    -1,   399,  1347,    -1,
      -1,    -1,    -1,  1352,    -1,    -1,    -1,    -1,    -1,    37,
      -1,   413,  1361,    -1,    42,    -1,  2729,  1366,    -1,  1368,
    1369,    -1,  1371,  1372,    -1,    -1,    -1,  1650,    -1,    -1,
      -1,  1925,  1925,    -1,    -1,   460,    -1,    -1,  1931,    -1,
      -1,    -1,    -1,    -1,   469,    -1,  2759,    -1,    -1,    -1,
       8,    -1,    -1,    11,  1063,    -1,  1336,    15,    16,    -1,
      -1,    19,    20,    21,    -1,    -1,    -1,    -1,   514,  1336,
     472,    -1,    -1,   101,    -1,   521,   522,   523,   524,   525,
     526,    -1,    -1,    -1,    -1,    -1,  2799,  2800,  2801,  2802,
    1246,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1451,  1452,    -1,    -1,    -1,    -1,  1457,    -1,
      -1,  1460,    -1,    -1,    -1,    -1,  1941,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1473,  2784,  1475,  1476,  1953,    -1,
      -1,    -1,    -1,    -1,  1483,    -1,    -1,  1486,    -1,    -1,
    1489,   324,   325,   326,  2946,  1494,    -1,   175,  1497,    -1,
    2044,    -1,    -1,  1502,    -1,  1504,   184,  1506,    -1,  1984,
      -1,    -1,    -1,    -1,    -1,  1788,  1991,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1336,    -1,    -1,    -1,   212,     8,    -1,    -1,    11,    -1,
      -1,    -1,    15,    16,   767,   768,    19,    20,    21,    -1,
     228,    -1,  2027,    -1,    -1,    -1,  2031,    -1,    -1,   392,
     238,    -1,  2037,    36,    -1,    -1,    -1,    -1,    -1,    -1,
     403,    -1,    -1,    -1,  2376,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2060,   809,  1246,    -1,    -1,
    2953,    -1,   425,    -1,   202,    -1,   429,   275,   821,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1611,    -1,    -1,    -1,    -1,   225,    -1,   297,
      -1,    -1,    -1,    -1,  1623,    -1,  1556,    -1,    -1,    -1,
      -1,   464,    -1,    -1,    -1,    -1,    -1,    -1,  2947,  1556,
      -1,    -1,   475,    -1,    -1,    -1,   324,   870,    -1,    -1,
      -1,    -1,    -1,   331,    -1,  2199,    -1,    -1,    -1,   492,
      -1,    -1,    -1,  1662,    -1,    -1,  1665,   890,  1941,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1336,    -1,    -1,
    1953,    -1,    -1,   516,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   299,  2236,  2237,    -1,    -1,   374,   530,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1709,  1984,  1711,    -1,  1713,   393,  2518,    -1,  1991,    -1,
    1650,    -1,    -1,     8,    -1,  1724,    11,  1726,  1727,  1728,
      15,    16,    -1,  1650,    19,    20,    21,    -1,    -1,    -1,
      -1,    -1,  1741,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1556,    36,   225,    -1,  2027,    -1,  2299,    -1,  2031,    -1,
      -1,    -1,    -1,    -1,  2037,    -1,    -1,  1766,    -1,  1768,
      -1,  3223,    -1,    -1,    -1,    -1,    -1,  2579,    -1,    -1,
      -1,  1004,    -1,  1782,  1783,  3094,   464,  2060,    -1,    -1,
      -1,   469,  3244,  3245,  1793,  1794,  1795,  1796,    -1,  1798,
      -1,    -1,    -1,     8,    -1,  1804,    11,  1806,  2351,    -1,
      15,    16,    -1,    -1,  1037,    -1,  3268,    -1,    -1,  1818,
    1819,  1044,    -1,    -1,  1823,  1824,   299,  2370,    -1,  1828,
    1829,  1830,  1831,    -1,  1833,  1834,    -1,    -1,    37,    -1,
      -1,    46,    -1,    42,  1650,    -1,    -1,    -1,    53,    -1,
      -1,  1850,    -1,    -1,    -1,    -1,  1079,    -1,  1788,    -1,
    1859,  1860,  1861,  1862,    -1,  1864,  1865,    -1,  1091,    -1,
      -1,  1788,    -1,    -1,  2417,    80,    -1,    -1,    -1,    -1,
      -1,  1880,  2684,    -1,  2427,    -1,  2429,    -1,    -1,    -1,
    2433,    -1,  2435,    -1,    -1,  1118,    -1,  1556,    -1,  3262,
      -1,  2376,   101,    -1,    -1,  1904,    -1,    -1,    -1,   517,
     518,   519,    -1,   521,   522,   523,   524,   525,   526,    -1,
      -1,  3284,  3285,    -1,    -1,    -1,  3289,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,
     225,   146,    11,    -1,    -1,    -1,    15,    16,    -1,    -1,
      19,    20,    21,    -1,    -1,  1954,  1955,  1956,  1957,  1958,
    1959,    -1,    -1,  1962,  1963,  1964,  1965,  1966,  1967,  1968,
    1969,  1970,  1971,    -1,   179,  1974,   175,    -1,  2522,  2523,
      -1,    -1,  1788,  1206,  1207,  2787,  1209,    -1,    -1,  3352,
      -1,  1650,   197,    -1,  1993,    -1,    -1,   202,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2005,    -1,    -1,    -1,
      -1,  1941,    -1,   212,   299,  2014,    -1,    -1,    -1,    -1,
    3383,  2020,    -1,  1953,  1941,    -1,  2025,    -1,    -1,   228,
      -1,  2030,    -1,    -1,    -1,   240,  1953,    -1,    -1,   238,
    2039,  2040,    -1,  2518,   517,   518,   519,    -1,   521,   522,
     523,   524,   525,   526,  1984,    -1,    -1,    -1,    -1,    -1,
      -1,  1991,    -1,    -1,  1018,    -1,  2868,  1984,    -1,    -1,
    3522,    -1,    -1,    -1,  1991,    -1,   275,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   299,    -1,    -1,  2027,   297,    -1,
      -1,  2031,    -1,  2376,  2579,    -1,    -1,  2037,    -1,    -1,
    2027,    -1,  2111,    -1,  2031,    -1,  2115,    -1,    -1,    -1,
    2037,  2120,    -1,    -1,    -1,   324,    -1,    -1,    -1,  1788,
    2060,    -1,   331,    -1,    -1,  1941,    -1,    -1,    -1,    -1,
    2684,  2684,    -1,  2060,  2143,  2144,    -1,  1953,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1378,   225,    -1,    -1,    -1,
      -1,    -1,    -1,  2162,    -1,    -1,    -1,    -1,    -1,  2168,
      -1,    -1,    -1,  2975,  2717,   374,    -1,    -1,  1984,    -1,
      -1,    -1,    -1,    -1,    -1,  1991,    -1,    -1,    -1,    -1,
      -1,  3554,    -1,    -1,   393,    -1,  2195,    -1,    -1,   404,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3009,  2207,  2684,
      -1,    -1,    -1,  2212,    -1,    -1,    -1,  2216,    -1,    -1,
      -1,  2027,    -1,    -1,    -1,  2031,    -1,    -1,    -1,    -1,
     299,  2037,   517,   518,   519,    -1,   521,   522,   523,   524,
     525,   526,    -1,    -1,    -1,  2518,    -1,    -1,    -1,    -1,
       0,    -1,    -1,    -1,  2060,    -1,    -1,    -1,    -1,    -1,
      -1,  2260,    -1,  1486,  2263,   464,  1489,  2266,  1222,    -1,
     469,  1494,    -1,    -1,  1497,    -1,    -1,    -1,    -1,  1502,
    2824,    -1,  1941,  2282,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3095,  1953,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2579,    -1,    -1,   514,
      -1,    -1,  2787,    -1,    -1,    -1,   521,   522,   523,   524,
     525,   526,    -1,    -1,    -1,  1984,    -1,    -1,    -1,    -1,
      -1,    -1,  1991,    -1,    -1,    -1,    -1,    -1,  3140,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2892,
     100,    -1,    -1,    -1,  2353,    -1,    -1,    -1,    -1,    -1,
    2359,    -1,  1585,    -1,    -1,    -1,  2365,    -1,  2027,    -1,
      -1,    -1,  2031,  2372,  2373,  2374,  2375,    -1,  2037,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2386,    -1,  2388,
      -1,    -1,  2391,  2868,    -1,    -1,    -1,    -1,   148,    -1,
    2399,  2060,    -1,    -1,  2403,    -1,    -1,    -1,    -1,    -1,
    2409,  2684,    -1,    -1,   164,    -1,    -1,    -1,    -1,   169,
    2964,    -1,    -1,    -1,   174,  2969,    -1,    -1,    -1,    -1,
      -1,    -1,  2431,  2432,   184,  2434,    -1,    -1,    -1,   189,
      -1,  3243,  1665,    -1,    -1,    -1,  2376,    -1,   517,   518,
     519,    -1,   521,   522,   523,   524,   525,   526,    -1,  2376,
      -1,    -1,    -1,    -1,    -1,  2464,    -1,    -1,    -1,    -1,
      -1,   221,  3016,  3017,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2484,    -1,    -1,    -1,    -1,
      -1,   241,    -1,  2492,  2493,  2494,    -1,  1451,  1452,    -1,
    2975,    -1,  2501,  1457,  2503,  2504,    -1,    -1,    -1,    -1,
      -1,  2510,    -1,    -1,  2787,  1738,    -1,    -1,  3061,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2530,    -1,    -1,  3009,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   294,  2544,    -1,   297,  3091,    -1,
      -1,    -1,    -1,   303,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2376,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2583,  2584,    -1,    -1,  2518,    -1,
      -1,    -1,    -1,    -1,    -1,  2868,   346,    -1,    -1,    -1,
      -1,  2518,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2612,    -1,    -1,    -1,    -1,    -1,  2618,
    3095,   371,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3174,    -1,    -1,    -1,    -1,    -1,  2636,    -1,    -1,
      -1,  2640,    -1,    -1,    -1,  2644,  2645,  2646,    -1,  2579,
    1873,  2650,  2651,  2652,    -1,  2654,    -1,    -1,    -1,  1882,
      -1,    -1,  2579,    -1,    -1,  3140,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2673,    -1,  2675,    -1,    -1,   429,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3231,  3232,  2688,
    2689,  2690,  2691,  2692,  2693,  2694,  2695,  2696,  2697,  3243,
    3243,    -1,  2975,    -1,    -1,    -1,    -1,    -1,    -1,   459,
      -1,    -1,  2518,    -1,    -1,    -1,    -1,  2376,    -1,   469,
      -1,  2720,    -1,    -1,  3526,    -1,    -1,    -1,    -1,    -1,
    2729,    -1,    -1,    -1,    -1,    -1,  3009,  1691,    -1,   489,
    2739,   491,   492,    -1,    -1,     0,    -1,    -1,    -1,    -1,
      -1,  1974,    -1,    -1,  2684,    -1,    -1,    -1,    -1,    -1,
    2759,    -1,    -1,    -1,  2763,    -1,    -1,  2684,  3243,    -1,
      -1,    -1,    -1,  2579,  2773,    -1,    -1,    -1,   528,    -1,
      -1,   531,   532,   533,    -1,  2784,    -1,  1741,    -1,  2788,
    2789,  2014,    -1,  2792,    -1,    -1,    -1,  2020,    -1,    -1,
    2799,  2800,  2801,  2802,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2811,    -1,    -1,  2814,    -1,    -1,    -1,  2818,
    2819,    -1,  3095,    -1,    -1,    -1,    -1,    -1,  2827,    -1,
      -1,    -1,    -1,  3376,    -1,    -1,    -1,    -1,    -1,    68,
      69,    -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2855,  2787,  2857,  2518,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3140,    -1,    -1,
    2787,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2684,    -1,
     109,   110,    -1,    -1,   113,   114,    -1,  2886,    -1,  2888,
      -1,    -1,    -1,   148,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2902,    -1,    -1,    -1,  2906,    -1,   164,
      -1,    -1,    -1,  2912,   169,    -1,    -1,    -1,    -1,   174,
    2579,    -1,    -1,    -1,    -1,  2148,    -1,  2926,    -1,   184,
      -1,    -1,    -1,  2932,   189,    -1,    -1,    -1,  2868,    -1,
      -1,    -1,    -1,    -1,    -1,  2168,  2945,  2946,  2947,    -1,
      -1,  2868,    -1,    -1,  2953,    -1,    -1,    -1,    -1,    -1,
      -1,  2184,    -1,   192,   193,    -1,   221,    -1,    -1,    -1,
    3243,  2970,  2195,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2787,  3526,  3526,    -1,    -1,   241,    -1,    -1,  2212,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1954,  1955,  1956,  1957,  1958,  1959,    -1,    -1,  1962,  1963,
    1964,  1965,  1966,  1967,  1968,  1969,  1970,  1971,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2684,    -1,    -1,    -1,   258,
     259,   260,   261,   262,   263,   264,   265,    -1,    -1,   294,
     269,   270,   297,    -1,    -1,  2975,    -1,    -1,   303,  3048,
      -1,  3526,  3051,    -1,    -1,    -1,    -1,    -1,  2975,    -1,
      -1,    -1,  2868,    -1,    -1,  3064,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   856,   857,    -1,    -1,    -1,  3009,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3087,    -1,
      -1,   346,  3009,    -1,    -1,  3094,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   371,    -1,   347,   348,
      -1,    -1,    -1,  3122,    -1,    -1,    -1,    -1,  2787,  3128,
      -1,    -1,    -1,    -1,    -1,    -1,  3135,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   927,    -1,  2370,    -1,   931,
     932,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   388,
     389,    -1,    -1,    -1,    -1,  3095,    -1,    -1,    -1,  2975,
      -1,  3170,    -1,    -1,   429,    -1,    -1,    -1,  3095,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2143,
    2144,    -1,    -1,  3192,    -1,    -1,    -1,    -1,  3197,    -1,
      -1,    -1,    -1,  3009,   459,    -1,    -1,    -1,   990,  2868,
    3140,    -1,    -1,    -1,   469,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3140,  3223,    -1,  1008,    -1,    -1,    -1,
      -1,    -1,  1014,    -1,   489,  1017,   491,   492,    -1,  1021,
    1022,  1023,  1024,    -1,    -1,  3244,  3245,    -1,    -1,    -1,
      -1,    -1,    -1,  3526,    -1,    -1,    -1,   486,   487,    -1,
      -1,    -1,    -1,  3262,    -1,  3264,    -1,    -1,    -1,  3268,
      -1,    -1,    -1,   528,    -1,    -1,   531,   532,   533,  1061,
    1062,   510,   511,    -1,    -1,  3284,  3285,    -1,    -1,  3095,
    3289,    -1,    -1,  3292,    -1,    -1,    -1,    -1,  3297,    -1,
      -1,  1083,    40,    -1,    -1,    -1,    -1,    -1,    -1,  2263,
      -1,    -1,    -1,  3243,  3313,    -1,  2975,    -1,  3317,  3318,
    1102,  3320,    60,    -1,    -1,    -1,  3243,    -1,    -1,    -1,
    2553,  1113,  1114,  1115,  3140,  1117,  1118,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3345,    -1,    -1,    -1,
    3009,    -1,    -1,  3352,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2589,    -1,   106,   107,
    1152,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   117,
      -1,    -1,    -1,    -1,  3383,  2608,    -1,    -1,  1170,  1171,
      -1,  2614,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3407,    -1,
      -1,  3410,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2642,
      -1,    -1,    -1,    -1,    -1,    -1,  1208,    -1,    -1,  3428,
    1212,  1213,    -1,    -1,    -1,    -1,  3095,  3243,    -1,    -1,
     178,  1223,  1224,    -1,    -1,    -1,    -1,    -1,    -1,     8,
      -1,  3450,    11,    -1,    -1,    -1,    15,    16,    17,    18,
      19,    20,    21,    -1,    -1,    -1,    -1,   205,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,  3478,
      -1,  3140,    -1,    -1,    -1,    -1,    -1,    46,    -1,    -1,
      -1,    -1,    -1,    -1,    53,    -1,    -1,    -1,  2721,  1281,
    3499,  3500,    -1,  3502,  3503,    -1,    -1,    -1,  1290,    -1,
      -1,    -1,  3511,    -1,    -1,    -1,    -1,    -1,   256,    -1,
      -1,    80,    -1,  3522,    -1,    -1,    -1,  2750,   266,    -1,
      -1,    -1,  1314,    -1,  2757,    -1,    -1,    -1,    -1,    -1,
      -1,   279,    -1,    -1,   282,  3544,  3545,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3554,    -1,  3556,  3557,    -1,
      -1,     8,    -1,    -1,    11,    -1,  2789,    -1,    15,    16,
      17,    18,    19,    20,    21,   313,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3243,    -1,    -1,    -1,  2811,    36,
      -1,    -1,    -1,    -1,    -1,  3594,  3526,    -1,    -1,    46,
      -1,  3600,    -1,    -1,    -1,    -1,    53,    -1,    -1,  3526,
      -1,    -1,    -1,    -1,    -1,    -1,  3615,    -1,    -1,  1401,
     179,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3627,  2583,
    2584,   369,    -1,    80,    -1,    -1,    -1,    -1,   197,    -1,
      -1,    -1,    -1,   202,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   394,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2888,   225,   226,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   413,    -1,   415,    -1,  2902,
     418,   240,    -1,  1465,    -1,  1467,  1468,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1480,  1481,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1496,    -1,    -1,    -1,    -1,    -1,
    3526,    -1,    -1,   282,    -1,    -1,   285,    -1,    -1,    -1,
      -1,    -1,   179,    -1,    -1,    -1,    -1,    -1,    -1,  1018,
     299,    -1,    -1,   302,    -1,    -1,    -1,    -1,    -1,    -1,
     197,     3,    -1,    -1,    -1,   202,     8,    -1,    -1,    11,
      -1,    -1,    -1,    15,    16,    17,    18,    19,    20,    21,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   225,   226,
      -1,    -1,    -1,    -1,    36,    -1,    -1,    -1,    40,    -1,
      -1,    -1,   530,   240,    46,    -1,    -1,    -1,    -1,    -1,
      -1,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1597,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1605,    -1,    -1,    -1,    -1,    80,    -1,
    2784,    -1,    -1,    -1,    -1,   282,    -1,    -1,   285,    -1,
      -1,    -1,  3065,    -1,    -1,   404,    -1,    -1,    -1,    -1,
      -1,    -1,   299,    -1,    -1,   302,    -1,  2811,    -1,  1138,
      -1,    -1,    -1,  1645,    -1,    -1,    -1,  3526,    -1,  1651,
    1652,  1653,  1654,  1655,  1656,  1657,  1658,    -1,    -1,    -1,
      -1,  1663,  1664,    -1,    -1,    -1,  1668,    -1,    -1,  3112,
    1672,    -1,    -1,  1675,  1676,  1677,  1678,  1679,  1680,  1681,
    1682,  1683,    -1,    -1,  1686,    -1,    -1,  1186,    -1,    -1,
      -1,  1693,    -1,  1695,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   179,    -1,    -1,
      -1,    -1,  1714,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1222,    -1,   197,    -1,    -1,    -1,    -1,
     202,    -1,    -1,    -1,    -1,   514,    -1,   404,   517,   518,
     519,    -1,   521,   522,   523,   524,   525,   526,    -1,    -1,
    1752,  1753,    -1,   225,   226,    -1,    -1,    -1,    -1,    -1,
      -1,   540,    -1,    -1,    -1,    -1,    -1,    -1,   240,    -1,
      -1,    -1,    -1,  2947,    -1,    -1,  1275,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,    17,
      18,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,    -1,
     282,    -1,    -1,   285,    -1,    -1,  3259,    -1,    36,    -1,
    1319,    -1,    40,    -1,    -1,  1324,    -1,   299,    46,    -1,
     302,    -1,    -1,    -1,    -1,    53,    -1,  1839,  3281,    -1,
      -1,  1843,    -1,    -1,  1846,  1847,    -1,   514,    -1,    -1,
     517,   518,   519,    -1,   521,   522,   523,   524,   525,   526,
      -1,    -1,    80,    -1,    -1,    -1,    -1,    -1,    -1,   536,
      -1,    -1,    -1,    -1,    -1,    -1,  1375,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1886,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3342,
    1399,  3344,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1916,  1917,    -1,    -1,     8,    -1,
    3094,    11,    -1,    -1,    -1,    15,    16,    -1,    -1,    19,
      20,    21,   404,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3384,    -1,  1945,  1946,    -1,  1948,    -1,  1447,    -1,
    1449,    -1,  1451,  1452,    -1,  1454,    46,  3400,  1457,    -1,
      -1,   179,  1461,    53,    -1,  1464,    -1,    -1,    -1,    -1,
    1469,    -1,    -1,  1472,    -1,    -1,  1978,  1979,    -1,   197,
    1982,    -1,    -1,    -1,   202,     8,    -1,    -1,    11,    -1,
      80,    -1,    15,    16,    17,    18,    19,    20,    21,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   225,   226,  2011,
    1509,    -1,    -1,    36,  2016,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   240,    46,    -1,    -1,    -1,    -1,    -1,    -1,
      53,  2033,    -1,  2035,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   514,    -1,    -1,   517,   518,   519,    -1,   521,
     522,   523,   524,   525,   526,    -1,    -1,    80,    -1,    -1,
      -1,    -1,    -1,    -1,   282,    -1,    -1,   285,    -1,    -1,
      -1,  2073,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   299,    -1,    -1,   302,    -1,    -1,    -1,    -1,   179,
      -1,    -1,    -1,    -1,  1593,    -1,     8,    -1,    -1,    11,
    3543,    -1,    -1,    15,    16,    -1,    -1,   197,  2110,    -1,
    1609,  2113,   202,    -1,    -1,    -1,  2118,  2119,    -1,    -1,
    1619,  1620,  1621,    -1,    -1,    -1,    -1,  1626,    -1,    -1,
      -1,  1630,  3575,    -1,    46,   225,   226,    -1,    -1,  3313,
      -1,    53,    -1,    26,    -1,    -1,    -1,    -1,    -1,    32,
     240,    -1,     8,    -1,    -1,    11,   179,    40,    -1,    15,
      16,    -1,  2164,    -1,    -1,  2167,    -1,  2169,    80,    -1,
      -1,    -1,    -1,    -1,   197,    -1,    -1,    60,    -1,   202,
      -1,    -1,    -1,  2185,    -1,    -1,   404,    -1,    -1,    -1,
      46,    -1,   282,  1692,    -1,   285,    -1,    53,    -1,    -1,
      -1,    -1,   225,   226,    -1,    -1,    -1,    -1,    -1,   299,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   240,    -1,    -1,
      -1,    -1,    -1,   106,    80,    -1,    -1,  2229,    -1,    -1,
      -1,    -1,    -1,    -1,   146,    -1,  1735,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2246,  2247,    -1,    -1,    -1,    -1,
      -1,    -1,  1751,    -1,   137,    -1,    -1,  1756,    -1,   282,
      -1,    -1,   285,  2265,    -1,    -1,    -1,   179,    -1,    -1,
      -1,    -1,  2274,    -1,  1773,    -1,   299,    -1,    -1,   302,
      -1,    -1,    -1,    -1,    -1,   197,    -1,    -1,    -1,    -1,
     202,    -1,    -1,    -1,    -1,    -1,   514,    -1,    -1,   517,
     518,   519,    -1,   521,   522,   523,   524,   525,   526,    -1,
      -1,    -1,    -1,   531,   404,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   205,   179,    -1,    -1,    -1,    -1,   240,  2331,
      -1,    -1,    -1,    -1,    -1,  2337,    -1,    -1,    -1,    -1,
      -1,   197,    -1,    -1,    -1,    -1,   202,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   256,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   404,    -1,   266,   240,    -1,    -1,   299,    -1,    -1,
      -1,    -1,    -1,    -1,  2396,    -1,   279,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    68,    69,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   301,    -1,
      -1,    -1,    -1,    -1,   514,    -1,    -1,   517,   518,   519,
     313,   521,   522,   523,   524,   525,   526,    -1,    -1,    -1,
      -1,    -1,    -1,   299,  1943,   109,   110,    -1,    -1,   113,
     114,    -1,  1951,  1952,    -1,  1954,  1955,  1956,  1957,  1958,
    1959,    -1,    -1,  1962,  1963,  1964,  1965,  1966,  1967,  1968,
    1969,  1970,  1971,  1972,    -1,    -1,    -1,    -1,    -1,    -1,
     363,    -1,    -1,    -1,   367,    -1,   369,    -1,    -1,    -1,
      -1,   514,   404,    -1,   517,   518,   519,    -1,   521,   522,
     523,   524,   525,   526,    -1,    -1,    -1,    -1,   531,    -1,
      -1,   394,    -1,    -1,    -1,    -1,   399,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   192,   193,
     413,    -1,    -1,  2535,    -1,    -1,    -1,    -1,    -1,  2541,
    2542,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   404,    -1,
      -1,  2553,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2567,    -1,    -1,  2570,    -1,
    2572,    -1,    -1,    -1,    -1,    -1,    -1,  2076,  2580,    -1,
    2079,    -1,    -1,    -1,    -1,    -1,  2588,  2589,    -1,   472,
      -1,    -1,    -1,  2595,   258,   259,   260,   261,   262,   263,
     264,   265,   514,    -1,    -1,   269,   270,    -1,  2610,   521,
     522,   523,   524,   525,   526,    -1,    -1,    -1,  2620,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2126,    -1,    -1,
      -1,  2130,  2131,  2132,  2133,  2134,  2135,  2136,  2137,    -1,
    2642,    -1,    -1,    -1,  2143,  2144,    -1,  2146,  2147,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   514,    -1,
      -1,  2160,    -1,    -1,  2163,   521,   522,   523,   524,   525,
     526,    -1,  2171,  2172,  2173,  2174,  2175,  2176,  2177,  2178,
    2179,  2180,    -1,   347,   348,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2699,     0,  2701,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2206,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    -1,    -1,    -1,   388,   389,    -1,    -1,    -1,    -1,
      32,    -1,    34,    35,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    47,    -1,    -1,    -1,    -1,
      52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    61,
      -1,    -1,    -1,    -1,  2263,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    75,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    84,    -1,    86,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,   100,    -1,
      -1,    -1,    -1,    -1,  2806,  2807,    -1,    -1,    -1,   111,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   486,   487,   126,   127,   128,    -1,    -1,    -1,
      -1,    -1,    -1,  2332,    -1,   137,    -1,    -1,    -1,  2841,
      -1,    -1,   144,  2342,  2343,    -1,   510,   511,    -1,    -1,
     152,    -1,   154,   155,  2856,    -1,    -1,    -1,    -1,    -1,
    2862,  2863,    -1,    -1,    -1,  2867,   530,    -1,   170,    -1,
    2872,    -1,   174,  2875,  2876,    -1,    -1,    -1,  2880,  2881,
      -1,    -1,  2884,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2895,    -1,    -1,    -1,    -1,    -1,   201,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2412,    -1,   217,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2939,    -1,  2438,
    2439,  2440,    -1,   245,  2443,  2444,  2445,  2446,  2447,  2448,
      -1,    -1,    -1,  2452,  2453,  2454,  2455,  2456,  2457,  2458,
    2459,  2460,  2461,    -1,  2966,    -1,    -1,    -1,  2467,  2468,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,
      17,    18,    19,    20,    21,    -1,  2495,    -1,    -1,    -1,
      -1,  2500,    -1,     8,    -1,    -1,    11,    -1,    -1,    36,
      15,    16,    17,    18,    19,    20,    21,    -1,    -1,    46,
      -1,    -1,   324,   325,   326,    -1,    53,    -1,    -1,    -1,
     332,    36,    -1,    -1,   336,  2534,    -1,    -1,    -1,    -1,
      -1,    46,    -1,    -1,    -1,    -1,    -1,    -1,    53,    -1,
      -1,    -1,  2551,    80,    -1,  2554,    -1,    -1,    -1,    -1,
      -1,  2560,  2561,    -1,    -1,   367,    -1,    -1,    -1,  2568,
    2569,    -1,    -1,    -1,   376,    80,  3078,    -1,    -1,    -1,
      -1,    -1,    -1,  2582,  2583,  2584,  2585,    -1,  2587,    -1,
     392,    -1,  2591,    -1,    -1,    -1,    -1,   399,    -1,    -1,
      -1,   403,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3112,   413,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   425,    -1,    -1,    -1,   429,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3145,    -1,    -1,    -1,    -1,  2647,   451,
      -1,    -1,   179,    -1,    -1,  3157,  3158,    -1,     3,  3161,
       5,  3163,   464,    -1,    -1,   467,    -1,    -1,   470,    -1,
     197,    -1,    -1,   475,   179,   202,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3188,    -1,    -1,    -1,
     492,    -1,   197,    -1,    -1,    -1,    -1,   202,   225,   226,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3212,    -1,    -1,   240,   516,    -1,    -1,    -1,    -1,    -1,
     225,   226,    -1,    68,    69,    -1,    -1,    -1,   530,    -1,
      -1,   533,    -1,    -1,    -1,   240,    -1,    -1,     8,    -1,
      -1,    11,    -1,    -1,    -1,    15,    16,    -1,    -1,    19,
      20,    21,    -1,    -1,    -1,   282,    -1,    -1,   285,  2758,
      -1,    -1,    -1,    -1,   109,   110,    -1,    -1,   113,   114,
      -1,    -1,   299,    -1,    -1,   302,    46,   282,    -1,    -1,
     285,    -1,    -1,    53,    -1,  2784,    -1,    -1,    -1,    -1,
      -1,    -1,     8,    -1,   299,    11,    -1,   302,    -1,    15,
      16,    -1,    -1,    -1,    -1,  3307,    -1,    -1,    -1,  3311,
      80,    -1,    -1,  3315,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3326,    -1,    -1,    -1,    -1,  3331,
      46,  3333,    -1,    -1,    -1,    -1,    -1,    53,    -1,  3341,
      -1,    -1,    -1,  2842,    -1,  2844,    -1,   192,   193,    -1,
      -1,    -1,  2851,    -1,    -1,    -1,    -1,  3359,    -1,    -1,
      -1,    -1,  2861,    -1,    80,  2864,    -1,  2866,    -1,    -1,
      -1,  2870,    -1,    -1,  2873,  2874,    -1,   404,  2877,  2878,
      -1,    -1,    -1,    -1,    -1,    -1,  2885,    -1,    -1,    -1,
      -1,    -1,    -1,     8,    -1,  2894,    11,    -1,    -1,   404,
      15,    16,    17,    18,    19,    20,    21,    -1,    -1,   179,
    2909,  3413,    -1,   258,   259,   260,   261,   262,   263,   264,
     265,    36,  3424,    -1,   269,   270,    -1,   197,    -1,    -1,
     146,    46,   202,    -1,  3436,    -1,    -1,    -1,    53,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2947,    -1,
      -1,    -1,    -1,    -1,    -1,   225,   226,    -1,    -1,    -1,
      -1,    -1,    -1,   179,    -1,    80,  3468,    -1,    -1,    -1,
     240,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   197,    -1,    -1,    -1,    -1,   202,   514,    -1,    -1,
     517,   518,   519,    -1,   521,   522,   523,   524,   525,   526,
      -1,    -1,   347,   348,   531,    -1,    -1,    -1,    -1,   514,
      -1,    -1,   517,   518,   519,   285,   521,   522,   523,   524,
     525,   526,    -1,    -1,   240,    -1,   531,    -1,    -1,   299,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   388,   389,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   179,    -1,    -1,    -1,    -1,  3571,
    3572,  3573,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   197,   299,    -1,    -1,    -1,   202,    -1,    -1,
      -1,    -1,    -1,    -1,  3093,  3094,    -1,    -1,    -1,    -1,
      -1,    -1,  3604,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     225,   226,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3120,  3121,    -1,    -1,   240,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   404,    -1,    -1,    -1,    -1,    -1,
      -1,   486,   487,    -1,    -1,  3144,    -1,    -1,    -1,  3148,
    3652,    -1,  3151,  3152,  3153,    -1,    -1,  3156,    -1,    -1,
    3159,  3160,    -1,    -1,    -1,   510,   511,   282,    -1,  3168,
     285,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   299,    -1,    -1,   302,   404,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3209,    -1,    -1,    -1,    -1,    -1,  3215,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3228,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   514,    -1,    -1,   517,   518,   519,
      -1,   521,   522,   523,   524,   525,   526,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   404,
      -1,    -1,    -1,    -1,    -1,  3294,    -1,    -1,   514,    -1,
      -1,    -1,    -1,    -1,    -1,   521,   522,   523,   524,   525,
     526,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3328,
    3329,  3330,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3348,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3360,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   514,
      -1,    -1,   517,   518,   519,    -1,   521,   522,   523,   524,
     525,   526,    -1,    -1,    -1,    -1,   531,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3429,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3438,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3463,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3498,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,  3541,    -1,    -1,    -1,    -1,    39,    -1,    -1,
      42,    43,    44,    -1,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    81,
      -1,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,  3607,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,    -1,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,   139,    -1,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,    -1,    -1,   165,   166,   167,   168,    -1,   170,    -1,
     172,   173,    -1,   175,   176,   177,   178,   179,   180,    -1,
      -1,   183,    -1,   185,   186,   187,   188,    -1,   190,   191,
     192,   193,   194,   195,   196,   197,   198,   199,   200,   201,
      -1,   203,   204,   205,   206,   207,   208,   209,    -1,   211,
     212,   213,   214,   215,   216,   217,   218,   219,   220,    -1,
     222,    -1,   224,   225,   226,   227,   228,   229,   230,   231,
     232,   233,   234,    -1,    -1,   237,   238,   239,   240,    -1,
     242,    -1,    -1,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,    -1,   295,   296,    -1,    -1,   299,   300,   301,
      -1,    -1,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,    -1,    -1,    -1,    -1,   328,   329,   330,   331,
     332,   333,   334,    -1,   336,   337,   338,    -1,   340,   341,
     342,   343,   344,   345,    -1,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,    -1,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,    -1,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
      -1,    -1,   394,   395,   396,   397,   398,   399,   400,   401,
     402,    -1,   404,   405,   406,   407,   408,    -1,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,    -1,    -1,   427,   428,    -1,   430,   431,
     432,    -1,   434,   435,   436,   437,   438,    -1,   440,   441,
     442,    -1,    -1,   445,   446,   447,   448,   449,   450,   451,
     452,   453,   454,   455,   456,   457,   458,    -1,    -1,   461,
     462,   463,    -1,   465,   466,   467,   468,    -1,   470,   471,
     472,   473,   474,   475,   476,   477,    -1,   479,   480,   481,
     482,   483,   484,   485,   486,   487,    -1,    -1,   490,    -1,
      -1,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,    -1,    -1,    -1,    -1,    -1,    -1,   521,
     522,   523,    -1,    -1,    -1,    -1,   528,    -1,   530,    -1,
      -1,    -1,   534,    -1,    -1,   537,   538,   539,   540,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    81,    -1,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    99,    -1,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,    -1,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,   139,    -1,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,    -1,
      -1,   165,   166,   167,   168,    -1,   170,    -1,   172,   173,
      -1,   175,   176,   177,   178,   179,   180,    -1,    -1,   183,
      -1,   185,   186,   187,   188,    -1,   190,   191,   192,   193,
     194,   195,   196,   197,   198,   199,   200,   201,    -1,   203,
     204,   205,   206,   207,   208,   209,    -1,   211,   212,   213,
     214,   215,   216,   217,   218,   219,   220,    -1,   222,    -1,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,    -1,    -1,   237,   238,   239,   240,    -1,   242,    -1,
      -1,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
      -1,   295,   296,    -1,    -1,   299,   300,   301,    -1,    -1,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
      -1,    -1,    -1,    -1,   328,   329,   330,   331,   332,   333,
     334,    -1,   336,   337,   338,    -1,   340,   341,   342,   343,
     344,   345,    -1,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,    -1,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,    -1,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,    -1,    -1,
     394,   395,   396,   397,   398,   399,   400,   401,   402,    -1,
     404,   405,   406,   407,   408,    -1,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,    -1,    -1,   427,   428,    -1,   430,   431,   432,    -1,
     434,   435,   436,   437,   438,    -1,   440,   441,   442,    -1,
      -1,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,   458,    -1,    -1,   461,   462,   463,
      -1,   465,   466,   467,   468,    -1,   470,   471,   472,   473,
     474,   475,   476,   477,    -1,   479,   480,   481,   482,   483,
     484,   485,   486,   487,    -1,    -1,   490,    -1,    -1,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,    -1,    -1,    -1,    -1,    -1,    -1,   521,   522,   523,
      -1,    -1,    -1,    -1,   528,    -1,   530,    -1,    -1,    -1,
     534,    -1,    -1,   537,   538,   539,   540,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    81,    -1,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,   120,   121,   122,   123,   124,   125,
     126,   127,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,   139,    -1,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,    -1,    -1,   165,
     166,   167,   168,    -1,   170,    -1,   172,   173,   174,   175,
     176,   177,   178,   179,   180,    -1,    -1,   183,    -1,   185,
     186,   187,   188,    -1,   190,   191,   192,   193,   194,   195,
     196,   197,   198,   199,   200,   201,    -1,   203,   204,   205,
     206,   207,   208,   209,    -1,   211,   212,   213,   214,   215,
     216,   217,   218,   219,   220,    -1,   222,    -1,   224,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,    -1,
      -1,   237,   238,   239,   240,    -1,   242,    -1,    -1,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,    -1,   295,
     296,    -1,    -1,   299,   300,   301,    -1,    -1,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,    -1,   328,   329,   330,   331,   332,   333,   334,    -1,
     336,   337,   338,    -1,   340,   341,   342,   343,   344,   345,
      -1,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,    -1,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,    -1,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,    -1,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,    -1,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
      -1,   427,   428,   429,   430,   431,   432,    -1,   434,   435,
     436,   437,   438,    -1,   440,   441,   442,    -1,    -1,   445,
     446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
     456,   457,   458,    -1,    -1,   461,   462,   463,   464,   465,
     466,   467,   468,    -1,   470,   471,   472,   473,   474,   475,
     476,   477,    -1,   479,   480,   481,   482,   483,   484,   485,
     486,   487,    -1,    -1,   490,    -1,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,    -1,
     516,    -1,    -1,    -1,    -1,   521,   522,   523,    -1,    -1,
      -1,    -1,   528,    -1,   530,   531,    -1,    -1,   534,    -1,
      -1,   537,   538,   539,     3,     4,     5,     6,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    -1,    81,    -1,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      99,    -1,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
      -1,   120,   121,   122,   123,   124,   125,   126,   127,   128,
     129,   130,   131,    -1,    -1,   134,   135,   136,   137,   138,
     139,    -1,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,    -1,    -1,   165,   166,   167,   168,
      -1,   170,    -1,   172,   173,   174,   175,   176,   177,   178,
     179,   180,    -1,    -1,   183,    -1,   185,   186,   187,   188,
      -1,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,   200,   201,    -1,   203,   204,   205,   206,   207,   208,
     209,    -1,   211,   212,   213,   214,   215,   216,   217,   218,
     219,   220,    -1,   222,    -1,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,    -1,    -1,   237,   238,
     239,   240,    -1,   242,    -1,    -1,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,    -1,   295,   296,    -1,    -1,
     299,   300,   301,    -1,    -1,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,    -1,   328,
     329,   330,   331,   332,   333,   334,    -1,   336,   337,   338,
      -1,   340,   341,   342,   343,   344,   345,    -1,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,    -1,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,    -1,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,   391,   392,    -1,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
      -1,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,    -1,   427,   428,
     429,   430,   431,   432,    -1,   434,   435,   436,   437,   438,
      -1,   440,   441,   442,    -1,    -1,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
      -1,    -1,   461,   462,   463,   464,   465,   466,   467,   468,
      -1,   470,   471,   472,   473,   474,   475,   476,   477,    -1,
     479,   480,   481,   482,   483,   484,   485,   486,   487,    -1,
      -1,   490,    -1,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,    -1,   516,    -1,    -1,
      -1,    -1,   521,   522,   523,    -1,    -1,    -1,    -1,   528,
      -1,   530,    -1,    -1,    -1,   534,    -1,    -1,   537,   538,
     539,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,
      42,    43,    44,    -1,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    81,
      -1,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,    -1,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,   139,    -1,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,    -1,    -1,   165,   166,   167,   168,    -1,   170,    -1,
     172,   173,   174,   175,   176,   177,   178,   179,   180,    -1,
      -1,   183,    -1,   185,   186,   187,   188,    -1,   190,   191,
     192,   193,   194,   195,   196,   197,   198,   199,   200,   201,
      -1,   203,   204,   205,   206,   207,   208,   209,    -1,   211,
     212,   213,   214,   215,   216,   217,   218,   219,   220,    -1,
     222,    -1,   224,   225,   226,   227,   228,   229,   230,   231,
     232,   233,   234,    -1,    -1,   237,   238,   239,   240,    -1,
     242,    -1,    -1,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,    -1,   295,   296,    -1,    -1,   299,   300,   301,
      -1,    -1,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,    -1,   328,   329,   330,   331,
     332,   333,   334,    -1,   336,   337,   338,    -1,   340,   341,
     342,   343,   344,   345,    -1,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,    -1,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,    -1,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,    -1,   394,   395,   396,   397,   398,   399,   400,   401,
     402,    -1,   404,   405,   406,   407,   408,    -1,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,    -1,    -1,   427,   428,   429,   430,   431,
     432,    -1,   434,   435,   436,   437,   438,    -1,   440,   441,
     442,    -1,    -1,   445,   446,   447,   448,   449,   450,   451,
     452,   453,   454,   455,   456,   457,   458,    -1,    -1,   461,
     462,   463,   464,   465,   466,   467,   468,    -1,   470,   471,
     472,   473,   474,   475,   476,   477,    -1,   479,   480,   481,
     482,   483,   484,   485,   486,   487,    -1,    -1,   490,    -1,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,    -1,   516,    -1,    -1,    -1,    -1,   521,
     522,   523,    -1,    -1,    -1,    -1,   528,    -1,   530,    -1,
      -1,    -1,   534,    -1,    -1,   537,   538,   539,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    -1,
      -1,    -1,    37,    -1,    39,    -1,    -1,    42,    43,    44,
      -1,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    79,    -1,    81,    -1,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    -1,    94,
      95,    96,    97,    98,    99,    -1,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,    -1,   128,   129,   130,   131,   132,    -1,   134,
     135,   136,   137,   138,   139,    -1,   141,   142,   143,    -1,
     145,   146,   147,    -1,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,    -1,    -1,
     165,   166,   167,   168,    -1,   170,    -1,   172,   173,    -1,
     175,   176,   177,   178,   179,   180,    -1,    -1,   183,    -1,
     185,   186,   187,   188,    -1,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,    -1,   203,   204,
     205,   206,   207,   208,   209,    -1,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,    -1,   222,    -1,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
      -1,    -1,   237,   238,   239,   240,    -1,   242,    -1,    -1,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,    -1,
     295,   296,    -1,    -1,   299,   300,   301,    -1,    -1,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,    -1,
      -1,    -1,    -1,   328,   329,   330,   331,   332,   333,   334,
      -1,   336,   337,   338,    -1,   340,   341,   342,   343,   344,
     345,    -1,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,    -1,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,    -1,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,    -1,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,    -1,   404,
     405,   406,   407,   408,    -1,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
      -1,    -1,   427,   428,    -1,   430,   431,   432,    -1,   434,
     435,   436,   437,   438,    -1,   440,   441,   442,    -1,    -1,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,    -1,    -1,   461,   462,   463,    -1,
     465,   466,   467,   468,    -1,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,    -1,    -1,   490,    -1,    -1,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
      -1,    -1,    -1,    -1,    -1,    -1,   521,   522,   523,    -1,
      -1,    -1,    -1,   528,    -1,   530,   531,    -1,    -1,   534,
      -1,    -1,   537,   538,   539,     3,     4,     5,     6,     7,
      -1,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    81,    -1,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,    -1,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,    -1,   120,   121,   122,   123,   124,   125,   126,   127,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,   139,    -1,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,    -1,    -1,   165,   166,   167,
     168,    -1,   170,    -1,   172,   173,   174,   175,   176,   177,
     178,   179,   180,    -1,    -1,   183,    -1,   185,   186,   187,
     188,    -1,   190,   191,   192,   193,   194,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,   204,   205,   206,   207,
     208,   209,    -1,   211,   212,   213,   214,   215,   216,   217,
     218,   219,   220,    -1,   222,    -1,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,    -1,    -1,   237,
     238,   239,   240,    -1,   242,    -1,    -1,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,    -1,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,    -1,   295,   296,    -1,
      -1,   299,   300,   301,    -1,    -1,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,    -1,
     328,   329,   330,   331,   332,   333,   334,    -1,   336,   337,
     338,    -1,   340,   341,   342,   343,   344,   345,    -1,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,    -1,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,    -1,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,    -1,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,    -1,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,    -1,   427,
     428,   429,   430,   431,   432,    -1,   434,   435,   436,   437,
     438,    -1,   440,   441,   442,    -1,    -1,   445,   446,   447,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,    -1,    -1,   461,   462,   463,   464,   465,   466,   467,
     468,    -1,   470,   471,   472,   473,   474,   475,   476,   477,
      -1,   479,   480,   481,   482,   483,   484,   485,   486,   487,
      -1,    -1,   490,    -1,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,    -1,    -1,   516,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     528,    -1,   530,    -1,    -1,    -1,   534,    -1,    -1,   537,
     538,   539,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,   139,    -1,
     141,   142,   143,    -1,   145,   146,   147,    -1,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,    -1,    -1,   165,   166,   167,   168,    -1,   170,
      -1,   172,   173,   174,   175,   176,   177,   178,   179,   180,
      -1,    -1,   183,    -1,   185,   186,   187,   188,    -1,   190,
     191,   192,   193,   194,   195,   196,   197,   198,   199,   200,
     201,    -1,   203,   204,   205,   206,   207,   208,   209,    -1,
     211,   212,   213,   214,   215,   216,   217,   218,   219,   220,
      -1,   222,    -1,   224,   225,   226,   227,   228,   229,   230,
     231,   232,   233,   234,    -1,   236,   237,   238,   239,   240,
      -1,   242,    -1,    -1,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,    -1,   295,   296,    -1,    -1,   299,   300,
     301,    -1,    -1,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,    -1,    -1,    -1,    -1,   328,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,    -1,   340,
     341,   342,   343,   344,   345,    -1,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,    -1,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
      -1,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
     391,    -1,    -1,   394,   395,   396,   397,   398,   399,   400,
     401,   402,    -1,   404,   405,   406,   407,   408,    -1,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,    -1,    -1,   427,   428,    -1,   430,
     431,   432,    -1,   434,   435,   436,   437,   438,    -1,   440,
     441,   442,    -1,   444,   445,   446,   447,   448,   449,   450,
     451,   452,   453,   454,   455,   456,   457,   458,    -1,    -1,
     461,   462,   463,    -1,   465,   466,   467,   468,    -1,   470,
     471,   472,   473,   474,   475,   476,   477,    -1,   479,   480,
     481,   482,   483,   484,   485,   486,   487,    -1,    -1,   490,
      -1,    -1,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,    -1,    -1,    -1,    -1,    -1,    -1,
     521,   522,   523,    -1,    -1,    -1,    -1,   528,    -1,   530,
      -1,    -1,    -1,   534,    -1,    -1,   537,   538,   539,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    37,    -1,    39,    -1,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    81,    -1,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    99,    -1,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,    -1,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,   139,    -1,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,    -1,
      -1,   165,   166,   167,   168,    -1,   170,    -1,   172,   173,
      -1,   175,   176,   177,   178,   179,   180,    -1,    -1,   183,
      -1,   185,   186,   187,   188,    -1,   190,   191,   192,   193,
     194,   195,   196,   197,   198,   199,   200,   201,    -1,   203,
     204,   205,   206,   207,   208,   209,    -1,   211,   212,   213,
     214,   215,   216,   217,   218,   219,   220,    -1,   222,    -1,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,    -1,    -1,   237,   238,   239,   240,    -1,   242,    -1,
      -1,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
      -1,   295,   296,    -1,    -1,   299,   300,   301,    -1,    -1,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
      -1,    -1,    -1,    -1,   328,   329,   330,   331,   332,   333,
     334,    -1,   336,   337,   338,    -1,   340,   341,   342,   343,
     344,   345,    -1,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,    -1,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,    -1,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,    -1,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,    -1,
     404,   405,   406,   407,   408,    -1,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,    -1,    -1,   427,   428,    -1,   430,   431,   432,    -1,
     434,   435,   436,   437,   438,    -1,   440,   441,   442,    -1,
      -1,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,   458,    -1,    -1,   461,   462,   463,
      -1,   465,   466,   467,   468,    -1,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,    -1,    -1,   490,    -1,    -1,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,    -1,    -1,    -1,    -1,    -1,    -1,   521,   522,   523,
      -1,    -1,    -1,    -1,   528,    -1,   530,    -1,    -1,    -1,
     534,    -1,    -1,   537,   538,   539,     3,     4,     5,     6,
       7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      37,    -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    81,    -1,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
      -1,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,    -1,    -1,   165,   166,
     167,   168,    -1,   170,    -1,   172,   173,    -1,   175,   176,
     177,   178,   179,   180,    -1,    -1,   183,    -1,   185,   186,
     187,   188,    -1,   190,   191,   192,   193,   194,   195,   196,
     197,   198,   199,   200,   201,    -1,   203,   204,   205,   206,
     207,   208,   209,    -1,   211,   212,   213,   214,   215,   216,
     217,   218,   219,   220,    -1,   222,    -1,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,    -1,    -1,
     237,   238,   239,   240,    -1,   242,    -1,    -1,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,    -1,   295,   296,
      -1,    -1,   299,   300,   301,    -1,    -1,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,    -1,    -1,    -1,
      -1,   328,   329,   330,   331,   332,   333,   334,    -1,   336,
     337,   338,    -1,   340,   341,   342,   343,   344,   345,    -1,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
      -1,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,    -1,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,   391,    -1,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,    -1,   404,   405,   406,
     407,   408,    -1,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,    -1,    -1,
     427,   428,    -1,   430,   431,   432,    -1,   434,   435,   436,
     437,   438,    -1,   440,   441,   442,    -1,    -1,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,    -1,    -1,   461,   462,   463,    -1,   465,   466,
     467,   468,    -1,   470,   471,   472,   473,   474,   475,   476,
     477,    -1,   479,   480,   481,   482,   483,   484,   485,   486,
     487,    -1,    -1,   490,    -1,    -1,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,    -1,    -1,
      -1,    -1,    -1,    -1,   521,   522,   523,    -1,    -1,    -1,
      -1,   528,    -1,   530,   531,    -1,    -1,   534,    -1,    -1,
     537,   538,   539,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    -1,    -1,    -1,    -1,    38,    39,
      -1,    -1,    42,    43,    44,    -1,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    81,    -1,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    99,
      -1,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,    -1,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,   139,
      -1,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,    -1,    -1,   165,   166,   167,   168,    -1,
     170,    -1,   172,   173,    -1,   175,   176,   177,   178,   179,
     180,    -1,    -1,   183,    -1,   185,   186,   187,   188,    -1,
     190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
     200,   201,    -1,   203,   204,   205,   206,   207,   208,   209,
      -1,   211,   212,   213,   214,   215,   216,   217,   218,   219,
     220,    -1,   222,    -1,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,    -1,    -1,   237,   238,   239,
     240,    -1,   242,    -1,    -1,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,    -1,   295,   296,    -1,    -1,   299,
     300,   301,    -1,    -1,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,    -1,    -1,    -1,    -1,   328,   329,
     330,   331,   332,   333,   334,    -1,   336,   337,   338,    -1,
     340,   341,   342,   343,   344,   345,    -1,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,    -1,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,    -1,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,    -1,    -1,   394,   395,   396,   397,   398,   399,
     400,   401,   402,    -1,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,    -1,    -1,   427,   428,    -1,
     430,   431,   432,    -1,   434,   435,   436,   437,   438,    -1,
     440,   441,   442,    -1,    -1,   445,   446,   447,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   457,   458,    -1,
      -1,   461,   462,   463,    -1,   465,   466,   467,   468,    -1,
     470,   471,   472,   473,   474,   475,   476,   477,    -1,   479,
     480,   481,   482,   483,   484,   485,   486,   487,    -1,    -1,
     490,    -1,    -1,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,    -1,    -1,    -1,    -1,    -1,
      -1,   521,   522,   523,    -1,    -1,    -1,    -1,   528,    -1,
     530,    -1,    -1,    -1,   534,    -1,    -1,   537,   538,   539,
       3,     4,     5,     6,     7,     8,     9,    10,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    37,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    -1,    81,    -1,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    99,    -1,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,   120,   121,   122,
     123,   124,   125,    -1,    -1,   128,   129,   130,   131,    -1,
      -1,   134,   135,   136,   137,   138,   139,    -1,   141,   142,
     143,    -1,   145,   146,   147,    -1,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
      -1,    -1,   165,   166,   167,   168,    -1,   170,    -1,   172,
     173,    -1,   175,   176,   177,   178,   179,   180,    -1,    -1,
     183,    -1,   185,   186,   187,   188,    -1,   190,   191,   192,
     193,   194,   195,   196,   197,   198,   199,   200,   201,    -1,
     203,   204,   205,   206,   207,   208,   209,    -1,   211,   212,
     213,   214,   215,   216,   217,   218,   219,   220,    -1,   222,
      -1,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,    -1,    -1,   237,   238,   239,   240,    -1,   242,
      -1,    -1,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,    -1,   295,   296,    -1,    -1,   299,   300,   301,    -1,
      -1,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,    -1,    -1,    -1,    -1,   328,   329,   330,   331,   332,
     333,   334,    -1,   336,   337,   338,    -1,   340,   341,   342,
     343,   344,   345,    -1,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,    -1,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,    -1,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,    -1,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
      -1,   404,   405,   406,   407,   408,    -1,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,    -1,    -1,   427,   428,    -1,   430,   431,   432,
      -1,   434,   435,   436,   437,   438,    -1,   440,   441,   442,
      -1,    -1,   445,   446,   447,   448,   449,   450,   451,   452,
     453,   454,   455,   456,   457,   458,    -1,    -1,   461,   462,
     463,    -1,   465,   466,   467,   468,    -1,   470,   471,   472,
     473,   474,   475,   476,   477,    -1,   479,   480,   481,   482,
     483,   484,   485,   486,   487,    -1,    -1,   490,    -1,    -1,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,    -1,    -1,    -1,    -1,    -1,    -1,   521,   522,
     523,    -1,    -1,    -1,    -1,   528,    -1,   530,   531,    -1,
      -1,   534,    -1,    -1,   537,   538,   539,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    37,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    81,    -1,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,   139,    -1,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,    -1,    -1,   165,
     166,   167,   168,    -1,   170,    -1,   172,   173,    -1,   175,
     176,   177,   178,   179,   180,    -1,    -1,   183,    -1,   185,
     186,   187,   188,    -1,   190,   191,   192,   193,   194,   195,
     196,   197,   198,   199,   200,   201,    -1,   203,   204,   205,
     206,   207,   208,   209,    -1,   211,   212,   213,   214,   215,
     216,   217,   218,   219,   220,    -1,   222,    -1,   224,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,    -1,
      -1,   237,   238,   239,   240,    -1,   242,    -1,    -1,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,    -1,   295,
     296,    -1,    -1,   299,   300,   301,    -1,    -1,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,    -1,    -1,
      -1,    -1,   328,   329,   330,   331,   332,   333,   334,    -1,
     336,   337,   338,    -1,   340,   341,   342,   343,   344,   345,
      -1,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,    -1,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,    -1,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,    -1,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,    -1,   404,   405,
     406,   407,   408,    -1,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,    -1,
      -1,   427,   428,    -1,   430,   431,   432,    -1,   434,   435,
     436,   437,   438,    -1,   440,   441,   442,    -1,    -1,   445,
     446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
     456,   457,   458,    -1,    -1,   461,   462,   463,    -1,   465,
     466,   467,   468,    -1,   470,   471,   472,   473,   474,   475,
     476,   477,    -1,   479,   480,   481,   482,   483,   484,   485,
     486,   487,    -1,    -1,   490,    -1,    -1,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,    -1,
      -1,    -1,    -1,    -1,    -1,   521,   522,   523,    -1,    -1,
      -1,    -1,   528,    -1,   530,    -1,    -1,    -1,   534,    -1,
      -1,   537,   538,   539,     3,     4,     5,     6,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    -1,    81,    -1,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      99,    -1,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
      -1,   120,   121,   122,   123,   124,   125,    -1,    -1,   128,
     129,   130,   131,    -1,    -1,   134,   135,   136,   137,   138,
     139,    -1,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,    -1,    -1,   165,   166,   167,   168,
      -1,   170,    -1,   172,   173,    -1,   175,   176,   177,   178,
     179,   180,    -1,    -1,   183,    -1,   185,   186,   187,   188,
      -1,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,   200,   201,    -1,   203,   204,   205,   206,   207,   208,
     209,    -1,   211,   212,   213,   214,   215,   216,   217,   218,
     219,   220,    -1,   222,    -1,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,    -1,    -1,   237,   238,
     239,   240,    -1,   242,    -1,    -1,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,    -1,   295,   296,    -1,    -1,
     299,   300,   301,    -1,    -1,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,    -1,    -1,    -1,    -1,   328,
     329,   330,   331,   332,   333,   334,    -1,   336,   337,   338,
      -1,   340,   341,   342,   343,   344,   345,    -1,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,    -1,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,    -1,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,   391,    -1,    -1,   394,   395,   396,   397,   398,
     399,   400,   401,   402,    -1,   404,   405,   406,   407,   408,
      -1,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,    -1,    -1,   427,   428,
      -1,   430,   431,   432,    -1,   434,   435,   436,   437,   438,
      -1,   440,   441,   442,    -1,    -1,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
      -1,    -1,   461,   462,   463,    -1,   465,   466,   467,   468,
      -1,   470,   471,   472,   473,   474,   475,   476,   477,    -1,
     479,   480,   481,   482,   483,   484,   485,   486,   487,    -1,
      -1,   490,    -1,    -1,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,    -1,    -1,    -1,    -1,
      -1,    -1,   521,   522,   523,    -1,    -1,    -1,    -1,   528,
      -1,   530,    -1,    -1,    -1,   534,    -1,    -1,   537,   538,
     539,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,
      42,    43,    44,    -1,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    81,
      -1,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,    -1,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,   139,    -1,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,    -1,    -1,   165,   166,   167,   168,    -1,   170,    -1,
     172,   173,    -1,   175,   176,   177,   178,   179,   180,    -1,
      -1,   183,    -1,   185,   186,   187,   188,    -1,   190,   191,
     192,   193,   194,   195,   196,   197,   198,   199,   200,   201,
      -1,   203,   204,   205,   206,   207,   208,   209,    -1,   211,
     212,   213,   214,   215,   216,   217,   218,   219,   220,    -1,
     222,    -1,   224,   225,   226,   227,   228,   229,   230,   231,
     232,   233,   234,    -1,    -1,   237,   238,   239,   240,    -1,
     242,    -1,    -1,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,    -1,   295,   296,    -1,    -1,   299,   300,   301,
      -1,    -1,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,    -1,    -1,    -1,    -1,   328,   329,   330,   331,
     332,   333,   334,    -1,   336,   337,   338,    -1,   340,   341,
     342,   343,   344,   345,    -1,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,    -1,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,    -1,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
      -1,    -1,   394,   395,   396,   397,   398,   399,   400,   401,
     402,    -1,   404,   405,   406,   407,   408,    -1,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,    -1,    -1,   427,   428,    -1,   430,   431,
     432,    -1,   434,   435,   436,   437,   438,    -1,   440,   441,
     442,    -1,    -1,   445,   446,   447,   448,   449,   450,   451,
     452,   453,   454,   455,   456,   457,   458,    -1,    -1,   461,
     462,   463,    -1,   465,   466,   467,   468,    -1,   470,   471,
     472,   473,   474,   475,   476,   477,    -1,   479,   480,   481,
     482,   483,   484,   485,   486,   487,    -1,    -1,   490,    -1,
      -1,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,    -1,    -1,    -1,    -1,    -1,    -1,   521,
     522,   523,    -1,    -1,    -1,    -1,   528,    -1,   530,    -1,
      -1,    -1,   534,    -1,    -1,   537,   538,   539,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,
      -1,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    79,    -1,    81,    -1,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    -1,    94,
      95,    96,    97,    98,    99,    -1,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,   139,    -1,   141,   142,   143,    -1,
     145,   146,   147,    -1,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,    -1,    -1,
     165,   166,   167,   168,    -1,   170,    -1,   172,   173,   174,
     175,   176,   177,   178,   179,   180,    -1,    -1,   183,    -1,
     185,   186,   187,   188,    -1,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,    -1,   203,   204,
     205,   206,   207,   208,   209,    -1,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,    -1,   222,    -1,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
      -1,    -1,   237,   238,   239,   240,    -1,   242,    -1,    -1,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,    -1,
     295,   296,    -1,    -1,   299,   300,   301,    -1,    -1,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,    -1,
      -1,    -1,    -1,   328,   329,   330,   331,   332,   333,   334,
      -1,   336,   337,   338,    -1,   340,   341,   342,   343,   344,
     345,    -1,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,    -1,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,    -1,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,    -1,    -1,   394,
     395,   396,   397,   398,   399,   400,   401,   402,    -1,   404,
     405,   406,   407,   408,    -1,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
      -1,    -1,   427,   428,    -1,   430,   431,   432,    -1,   434,
     435,   436,   437,   438,    -1,   440,   441,   442,    -1,    -1,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,    -1,    -1,   461,   462,   463,    -1,
     465,   466,   467,   468,    -1,   470,   471,   472,   473,   474,
     475,   476,   477,    -1,   479,   480,   481,   482,   483,   484,
     485,   486,   487,    -1,    -1,   490,    -1,    -1,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
      -1,    -1,    -1,    -1,    -1,    -1,   521,   522,   523,    -1,
      -1,    -1,    -1,   528,    -1,   530,    -1,    -1,    -1,   534,
      -1,    -1,   537,   538,   539,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    81,    -1,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,    -1,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,    -1,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,   139,    -1,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,    -1,    -1,   165,   166,   167,
     168,    -1,   170,    -1,   172,   173,    -1,   175,   176,   177,
     178,   179,   180,    -1,    -1,   183,    -1,   185,   186,   187,
     188,    -1,   190,   191,   192,   193,   194,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,   204,   205,   206,   207,
     208,   209,    -1,   211,   212,   213,   214,   215,   216,   217,
     218,   219,   220,    -1,   222,    -1,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,    -1,    -1,   237,
     238,   239,   240,    -1,   242,    -1,    -1,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,    -1,   295,   296,    -1,
      -1,   299,   300,   301,    -1,    -1,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,    -1,    -1,    -1,    -1,
     328,   329,   330,   331,   332,   333,   334,    -1,   336,   337,
     338,    -1,   340,   341,   342,   343,   344,   345,    -1,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,    -1,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,    -1,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,    -1,    -1,   394,   395,   396,   397,
     398,   399,   400,   401,   402,    -1,   404,   405,   406,   407,
     408,    -1,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,    -1,    -1,   427,
     428,    -1,   430,   431,   432,    -1,   434,   435,   436,   437,
     438,    -1,   440,   441,   442,    -1,    -1,   445,   446,   447,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,    -1,    -1,   461,   462,   463,    -1,   465,   466,   467,
     468,    -1,   470,   471,   472,   473,   474,   475,   476,   477,
      -1,   479,   480,   481,   482,   483,   484,   485,   486,   487,
      -1,    -1,   490,    -1,    -1,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,    -1,    -1,    -1,
      -1,    -1,    -1,   521,   522,   523,    -1,    -1,    -1,    -1,
     528,    -1,   530,   531,    -1,    -1,   534,    -1,    -1,   537,
     538,   539,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,   139,    -1,
     141,   142,   143,    -1,   145,   146,   147,    -1,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,    -1,    -1,   165,   166,   167,   168,    -1,   170,
      -1,   172,   173,    -1,   175,   176,   177,   178,   179,   180,
      -1,    -1,   183,    -1,   185,   186,   187,   188,    -1,   190,
     191,   192,   193,   194,   195,   196,   197,   198,   199,   200,
     201,    -1,   203,   204,   205,   206,   207,   208,   209,    -1,
     211,   212,   213,   214,   215,   216,   217,   218,   219,   220,
      -1,   222,    -1,   224,   225,   226,   227,   228,   229,   230,
     231,   232,   233,   234,    -1,    -1,   237,   238,   239,   240,
      -1,   242,    -1,    -1,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,    -1,   295,   296,    -1,    -1,   299,   300,
     301,    -1,    -1,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,    -1,    -1,    -1,    -1,   328,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,    -1,   340,
     341,   342,   343,   344,   345,    -1,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,    -1,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
      -1,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
     391,    -1,    -1,   394,   395,   396,   397,   398,   399,   400,
     401,   402,    -1,   404,   405,   406,   407,   408,    -1,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,    -1,    -1,   427,   428,   429,   430,
     431,   432,    -1,   434,   435,   436,   437,   438,    -1,   440,
     441,   442,    -1,    -1,   445,   446,   447,   448,   449,   450,
     451,   452,   453,   454,   455,   456,   457,   458,    -1,    -1,
     461,   462,   463,    -1,   465,   466,   467,   468,    -1,   470,
     471,   472,   473,   474,   475,   476,   477,    -1,   479,   480,
     481,   482,   483,   484,   485,   486,   487,    -1,    -1,   490,
      -1,    -1,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,    -1,    -1,    -1,    -1,    -1,    -1,
     521,   522,   523,    -1,    -1,    -1,    -1,   528,    -1,   530,
      -1,    -1,    -1,   534,    -1,    -1,   537,   538,   539,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    81,    -1,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    99,    -1,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,    -1,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,   139,    -1,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,    -1,
      -1,   165,   166,   167,   168,    -1,   170,    -1,   172,   173,
      -1,   175,   176,   177,   178,   179,   180,    -1,    -1,   183,
      -1,   185,   186,   187,   188,    -1,   190,   191,   192,   193,
     194,   195,   196,   197,   198,   199,   200,   201,    -1,   203,
     204,   205,   206,   207,   208,   209,    -1,   211,   212,   213,
     214,   215,   216,   217,   218,   219,   220,    -1,   222,    -1,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,    -1,    -1,   237,   238,   239,   240,    -1,   242,    -1,
      -1,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
      -1,   295,   296,    -1,    -1,   299,   300,   301,    -1,    -1,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
      -1,    -1,    -1,    -1,   328,   329,   330,   331,   332,   333,
     334,    -1,   336,   337,   338,    -1,   340,   341,   342,   343,
     344,   345,    -1,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,    -1,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,    -1,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,    -1,    -1,
     394,   395,   396,   397,   398,   399,   400,   401,   402,    -1,
     404,   405,   406,   407,   408,    -1,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,    -1,    -1,   427,   428,    -1,   430,   431,   432,    -1,
     434,   435,   436,   437,   438,    -1,   440,   441,   442,    -1,
      -1,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,   458,    -1,    -1,   461,   462,   463,
      -1,   465,   466,   467,   468,    -1,   470,   471,   472,   473,
     474,   475,   476,   477,    -1,   479,   480,   481,   482,   483,
     484,   485,   486,   487,    -1,   489,   490,    -1,    -1,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,    -1,    -1,    -1,    -1,    -1,    -1,   521,   522,   523,
      -1,    -1,    -1,    -1,   528,    -1,   530,    -1,    -1,    -1,
     534,    -1,    -1,   537,   538,   539,     3,     4,     5,     6,
       7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    81,    -1,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
      -1,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,    -1,    -1,   165,   166,
     167,   168,    -1,   170,    -1,   172,   173,    -1,   175,   176,
     177,   178,   179,   180,    -1,    -1,   183,    -1,   185,   186,
     187,   188,    -1,   190,   191,   192,   193,   194,   195,   196,
     197,   198,   199,   200,   201,    -1,   203,   204,   205,   206,
     207,   208,   209,    -1,   211,   212,   213,   214,   215,   216,
     217,   218,   219,   220,    -1,   222,    -1,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,    -1,    -1,
     237,   238,   239,   240,    -1,   242,    -1,    -1,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,    -1,   295,   296,
      -1,    -1,   299,   300,   301,    -1,    -1,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,    -1,    -1,    -1,
      -1,   328,   329,   330,   331,   332,   333,   334,    -1,   336,
     337,   338,    -1,   340,   341,   342,   343,   344,   345,    -1,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
      -1,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,    -1,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,   391,    -1,    -1,   394,   395,   396,
     397,   398,   399,   400,   401,   402,    -1,   404,   405,   406,
     407,   408,    -1,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,    -1,    -1,
     427,   428,    -1,   430,   431,   432,    -1,   434,   435,   436,
     437,   438,    -1,   440,   441,   442,    -1,    -1,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,    -1,    -1,   461,   462,   463,    -1,   465,   466,
     467,   468,    -1,   470,   471,   472,   473,   474,   475,   476,
     477,    -1,   479,   480,   481,   482,   483,   484,   485,   486,
     487,    -1,    -1,   490,    -1,    -1,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,    -1,    -1,
      -1,    -1,    -1,    -1,   521,   522,   523,    -1,    -1,    -1,
      -1,   528,    -1,   530,    -1,    -1,    -1,   534,    -1,    -1,
     537,   538,   539,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,
      -1,    -1,    42,    43,    44,    -1,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    81,    -1,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    99,
      -1,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,    -1,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,   139,
      -1,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,    -1,    -1,   165,   166,   167,   168,    -1,
     170,    -1,   172,   173,    -1,   175,   176,   177,   178,   179,
     180,    -1,    -1,   183,    -1,   185,   186,   187,   188,    -1,
     190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
     200,   201,    -1,   203,   204,   205,   206,   207,   208,   209,
      -1,   211,   212,   213,   214,   215,   216,   217,   218,   219,
     220,    -1,   222,    -1,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,    -1,    -1,   237,   238,   239,
     240,    -1,   242,    -1,    -1,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,    -1,   295,   296,    -1,    -1,   299,
     300,   301,    -1,    -1,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,    -1,    -1,    -1,    -1,   328,   329,
     330,   331,   332,   333,   334,    -1,   336,   337,   338,    -1,
     340,   341,   342,   343,   344,   345,    -1,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,    -1,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,    -1,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,    -1,    -1,   394,   395,   396,   397,   398,   399,
     400,   401,   402,    -1,   404,   405,   406,   407,   408,    -1,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,    -1,    -1,   427,   428,    -1,
     430,   431,   432,    -1,   434,   435,   436,   437,   438,    -1,
     440,   441,   442,    -1,    -1,   445,   446,   447,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   457,   458,    -1,
      -1,   461,   462,   463,    -1,   465,   466,   467,   468,    -1,
     470,   471,   472,   473,   474,   475,   476,   477,    -1,   479,
     480,   481,   482,   483,   484,   485,   486,   487,    -1,    -1,
     490,    -1,    -1,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,    -1,    -1,    -1,    -1,    -1,
      -1,   521,   522,   523,    -1,    -1,    -1,    -1,   528,    -1,
     530,    -1,    -1,    -1,   534,    -1,    -1,   537,   538,   539,
       3,     4,     5,     6,     7,     8,     9,    10,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    -1,    81,    -1,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    99,    -1,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,   120,   121,   122,
     123,   124,   125,    -1,    -1,   128,   129,   130,   131,    -1,
      -1,   134,   135,   136,   137,   138,   139,    -1,   141,   142,
     143,    -1,   145,   146,   147,    -1,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
      -1,    -1,   165,   166,   167,   168,    -1,   170,    -1,   172,
     173,    -1,   175,   176,   177,   178,   179,   180,    -1,    -1,
     183,    -1,   185,   186,   187,   188,    -1,   190,   191,   192,
     193,   194,   195,   196,   197,   198,   199,   200,   201,    -1,
     203,   204,   205,   206,   207,   208,   209,    -1,   211,   212,
     213,   214,   215,   216,   217,   218,   219,   220,    -1,   222,
      -1,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,    -1,    -1,   237,   238,   239,   240,    -1,   242,
      -1,    -1,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,    -1,   295,   296,    -1,    -1,   299,   300,   301,    -1,
      -1,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,    -1,    -1,    -1,    -1,   328,   329,   330,   331,   332,
     333,   334,    -1,   336,   337,   338,    -1,   340,   341,   342,
     343,   344,   345,    -1,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,    -1,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,    -1,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,    -1,
      -1,   394,   395,   396,   397,   398,   399,   400,   401,   402,
      -1,   404,   405,   406,   407,   408,    -1,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,    -1,    -1,   427,   428,    -1,   430,   431,   432,
      -1,   434,   435,   436,   437,   438,    -1,   440,   441,   442,
      -1,    -1,   445,   446,   447,   448,   449,   450,   451,   452,
     453,   454,   455,   456,   457,   458,    -1,    -1,   461,   462,
     463,    -1,   465,   466,   467,   468,    -1,   470,   471,   472,
     473,   474,   475,   476,   477,    -1,   479,   480,   481,   482,
     483,   484,   485,   486,   487,    -1,    -1,   490,    -1,    -1,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,    -1,    -1,    -1,    -1,    -1,    -1,   521,   522,
     523,    -1,    -1,    -1,    -1,   528,    -1,   530,    -1,    -1,
      -1,   534,    -1,    -1,   537,   538,   539,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    81,    -1,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,   139,    -1,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,    -1,    -1,   165,
     166,   167,   168,    -1,   170,    -1,   172,   173,    -1,   175,
     176,   177,   178,   179,   180,    -1,    -1,   183,    -1,   185,
     186,   187,   188,    -1,   190,   191,   192,   193,   194,   195,
     196,   197,   198,   199,   200,   201,    -1,   203,   204,   205,
     206,   207,   208,   209,    -1,   211,   212,   213,   214,   215,
     216,   217,   218,   219,   220,    -1,   222,    -1,   224,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,    -1,
      -1,   237,   238,   239,   240,    -1,   242,    -1,    -1,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,    -1,   295,
     296,    -1,    -1,   299,   300,   301,    -1,    -1,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,    -1,    -1,
      -1,    -1,   328,   329,   330,   331,   332,   333,   334,    -1,
     336,   337,   338,    -1,   340,   341,   342,   343,   344,   345,
      -1,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,    -1,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,    -1,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,    -1,    -1,   394,   395,
     396,   397,   398,   399,   400,   401,   402,    -1,   404,   405,
     406,   407,   408,    -1,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,    -1,
      -1,   427,   428,    -1,   430,   431,   432,    -1,   434,   435,
     436,   437,   438,    -1,   440,   441,   442,    -1,    -1,   445,
     446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
     456,   457,   458,    -1,    -1,   461,   462,   463,    -1,   465,
     466,   467,   468,    -1,   470,   471,   472,   473,   474,   475,
     476,   477,    -1,   479,   480,   481,   482,   483,   484,   485,
     486,   487,    -1,    -1,   490,    -1,    -1,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,    -1,
      -1,    -1,    -1,    -1,    -1,   521,   522,   523,    -1,    -1,
      -1,    -1,   528,    -1,   530,    -1,    -1,    -1,   534,    -1,
      -1,   537,   538,   539,     3,     4,     5,     6,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    -1,    81,    -1,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      99,    -1,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
      -1,   120,   121,   122,   123,   124,   125,    -1,    -1,   128,
     129,   130,   131,    -1,    -1,   134,   135,   136,   137,   138,
     139,    -1,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,    -1,    -1,   165,   166,   167,   168,
      -1,   170,    -1,   172,   173,    -1,   175,   176,   177,   178,
     179,   180,    -1,    -1,   183,    -1,   185,   186,   187,   188,
      -1,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,   200,   201,    -1,   203,   204,   205,   206,   207,   208,
     209,    -1,   211,   212,   213,   214,   215,   216,   217,   218,
     219,   220,    -1,   222,    -1,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,    -1,    -1,   237,   238,
     239,   240,    -1,   242,    -1,    -1,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,    -1,   295,   296,    -1,    -1,
     299,   300,   301,    -1,    -1,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,    -1,    -1,    -1,    -1,   328,
     329,   330,   331,   332,   333,   334,    -1,   336,   337,   338,
      -1,   340,   341,   342,   343,   344,   345,    -1,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,    -1,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,    -1,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,   391,    -1,    -1,   394,   395,   396,   397,   398,
     399,   400,   401,   402,    -1,   404,   405,   406,   407,   408,
      -1,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,    -1,    -1,   427,   428,
      -1,   430,   431,   432,    -1,   434,   435,   436,   437,   438,
      -1,   440,   441,   442,    -1,    -1,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
      -1,    -1,   461,   462,   463,    -1,   465,   466,   467,   468,
      -1,   470,   471,   472,   473,   474,   475,   476,   477,    -1,
     479,   480,   481,   482,   483,   484,   485,   486,   487,    -1,
      -1,   490,    -1,    -1,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,    -1,    -1,    -1,    -1,
      -1,    -1,   521,   522,   523,    -1,    -1,    -1,    -1,   528,
      -1,   530,    -1,    -1,    -1,   534,    -1,    -1,   537,   538,
     539,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,
      42,    43,    44,    -1,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    81,
      -1,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,    -1,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,   139,    -1,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,    -1,    -1,   165,   166,   167,   168,    -1,   170,    -1,
     172,   173,    -1,   175,   176,   177,   178,   179,   180,    -1,
      -1,   183,    -1,   185,   186,   187,   188,    -1,   190,   191,
     192,   193,   194,   195,   196,   197,   198,   199,   200,   201,
      -1,   203,   204,   205,   206,   207,   208,   209,    -1,   211,
     212,   213,   214,   215,   216,   217,   218,   219,   220,    -1,
     222,    -1,   224,   225,   226,   227,   228,   229,   230,   231,
     232,   233,   234,    -1,    -1,   237,   238,   239,   240,    -1,
     242,    -1,    -1,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,    -1,   295,   296,    -1,    -1,   299,   300,   301,
      -1,    -1,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,    -1,    -1,    -1,    -1,   328,   329,   330,   331,
     332,   333,   334,    -1,   336,   337,   338,    -1,   340,   341,
     342,   343,   344,   345,    -1,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,    -1,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,    -1,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
      -1,    -1,   394,   395,   396,   397,   398,   399,   400,   401,
     402,    -1,   404,   405,   406,   407,   408,    -1,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,    -1,    -1,   427,   428,    -1,   430,   431,
     432,    -1,   434,   435,   436,   437,   438,    -1,   440,   441,
     442,    -1,    -1,   445,   446,   447,   448,   449,   450,   451,
     452,   453,   454,   455,   456,   457,   458,    -1,    -1,   461,
     462,   463,    -1,   465,   466,   467,   468,    -1,   470,   471,
     472,   473,   474,   475,   476,   477,    -1,   479,   480,   481,
     482,   483,   484,   485,   486,   487,    -1,    -1,   490,    -1,
      -1,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,    -1,    -1,    -1,    -1,    -1,    -1,   521,
     522,   523,    -1,    -1,    -1,    -1,   528,    -1,   530,    -1,
      -1,    -1,   534,    -1,    -1,   537,   538,   539,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,
      -1,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    79,    -1,    81,    -1,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    -1,    94,
      95,    96,    97,    98,    99,    -1,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,   139,    -1,   141,   142,   143,    -1,
     145,   146,   147,    -1,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,    -1,    -1,
     165,   166,   167,   168,    -1,   170,    -1,   172,   173,    -1,
     175,   176,   177,   178,   179,   180,    -1,    -1,   183,    -1,
     185,   186,   187,   188,    -1,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,    -1,   203,   204,
     205,   206,   207,   208,   209,    -1,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,    -1,   222,    -1,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
      -1,    -1,   237,   238,   239,   240,    -1,   242,    -1,    -1,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,    -1,
     295,   296,    -1,    -1,   299,   300,   301,    -1,    -1,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,    -1,
      -1,    -1,    -1,   328,   329,   330,   331,   332,   333,   334,
      -1,   336,   337,   338,    -1,   340,   341,   342,   343,   344,
     345,    -1,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,    -1,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,    -1,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,    -1,    -1,   394,
     395,   396,   397,   398,   399,   400,   401,   402,    -1,   404,
     405,   406,   407,   408,    -1,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
      -1,    -1,   427,   428,    -1,   430,   431,   432,    -1,   434,
     435,   436,   437,   438,    -1,   440,   441,   442,    -1,    -1,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,    -1,    -1,   461,   462,   463,    -1,
     465,   466,   467,   468,    -1,   470,   471,   472,   473,   474,
     475,   476,   477,    -1,   479,   480,   481,   482,   483,   484,
     485,   486,   487,    -1,    -1,   490,    -1,    -1,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
      -1,    -1,    -1,    -1,    -1,    -1,   521,   522,   523,    -1,
      -1,    -1,    -1,   528,    -1,   530,    -1,    -1,    -1,   534,
      -1,    -1,   537,   538,   539,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    81,    -1,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,    -1,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,    -1,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,   139,    -1,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,    -1,    -1,   165,   166,   167,
     168,    -1,   170,    -1,   172,   173,    -1,   175,   176,   177,
     178,   179,   180,    -1,    -1,   183,    -1,   185,   186,   187,
     188,    -1,   190,   191,   192,   193,   194,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,   204,   205,   206,   207,
     208,   209,    -1,   211,   212,   213,   214,   215,   216,   217,
     218,   219,   220,    -1,   222,    -1,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,    -1,    -1,   237,
     238,   239,   240,    -1,   242,    -1,    -1,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,    -1,   295,   296,    -1,
      -1,   299,   300,   301,    -1,    -1,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,    -1,    -1,    -1,    -1,
     328,   329,   330,   331,   332,   333,   334,    -1,   336,   337,
     338,    -1,   340,   341,   342,   343,   344,   345,    -1,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,    -1,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,    -1,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,    -1,    -1,   394,   395,   396,   397,
     398,   399,   400,   401,   402,    -1,   404,   405,   406,   407,
     408,    -1,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,    -1,    -1,   427,
     428,    -1,   430,   431,   432,    -1,   434,   435,   436,   437,
     438,    -1,   440,   441,   442,    -1,    -1,   445,   446,   447,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,    -1,    -1,   461,   462,   463,    -1,   465,   466,   467,
     468,    -1,   470,   471,   472,   473,   474,   475,   476,   477,
      -1,   479,   480,   481,   482,   483,   484,   485,   486,   487,
      -1,    -1,   490,    -1,    -1,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,    -1,    -1,    -1,
      -1,    -1,    -1,   521,   522,   523,    -1,    -1,    -1,    -1,
     528,    -1,   530,    -1,    -1,    -1,   534,    -1,    -1,   537,
     538,   539,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,   139,    -1,
     141,   142,   143,    -1,   145,   146,   147,    -1,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,    -1,    -1,   165,   166,   167,   168,    -1,   170,
      -1,   172,   173,    -1,   175,   176,   177,   178,   179,   180,
      -1,    -1,   183,    -1,   185,   186,   187,   188,    -1,   190,
     191,   192,   193,   194,   195,   196,   197,   198,   199,   200,
     201,    -1,   203,   204,   205,   206,   207,   208,   209,    -1,
     211,   212,   213,   214,   215,   216,   217,   218,   219,   220,
      -1,   222,    -1,   224,   225,   226,   227,   228,   229,   230,
     231,   232,   233,   234,    -1,    -1,   237,   238,   239,   240,
      -1,   242,    -1,    -1,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,    -1,   295,   296,    -1,    -1,   299,   300,
     301,    -1,    -1,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,    -1,    -1,    -1,    -1,   328,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,    -1,   340,
     341,   342,   343,   344,   345,    -1,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,    -1,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
      -1,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
     391,    -1,    -1,   394,   395,   396,   397,   398,   399,   400,
     401,   402,    -1,   404,   405,   406,   407,   408,    -1,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,    -1,    -1,   427,   428,    -1,   430,
     431,   432,    -1,   434,   435,   436,   437,   438,    -1,   440,
     441,   442,    -1,    -1,   445,   446,   447,   448,   449,   450,
     451,   452,   453,   454,   455,   456,   457,   458,    -1,    -1,
     461,   462,   463,    -1,   465,   466,   467,   468,    -1,   470,
     471,   472,   473,   474,   475,   476,   477,    -1,   479,   480,
     481,   482,   483,   484,   485,   486,   487,    -1,    -1,   490,
      -1,    -1,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,    -1,    -1,    -1,    -1,    -1,    -1,
     521,   522,   523,    -1,    -1,    -1,    -1,   528,    -1,   530,
      -1,    -1,    -1,   534,    -1,    -1,   537,   538,   539,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    81,    -1,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    99,    -1,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,    -1,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,   139,    -1,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,    -1,
      -1,   165,   166,   167,   168,    -1,   170,    -1,   172,   173,
      -1,   175,   176,   177,   178,   179,   180,    -1,    -1,   183,
      -1,   185,   186,   187,   188,    -1,   190,   191,   192,   193,
     194,   195,   196,   197,   198,   199,   200,   201,    -1,   203,
     204,   205,   206,   207,   208,   209,    -1,   211,   212,   213,
     214,   215,   216,   217,   218,   219,   220,    -1,   222,    -1,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,    -1,    -1,   237,   238,   239,   240,    -1,   242,    -1,
      -1,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
      -1,   295,   296,    -1,    -1,   299,   300,   301,    -1,    -1,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
      -1,    -1,    -1,    -1,   328,   329,   330,   331,   332,   333,
     334,    -1,   336,   337,   338,    -1,   340,   341,   342,   343,
     344,   345,    -1,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,    -1,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,    -1,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,    -1,    -1,
     394,   395,   396,   397,   398,   399,   400,   401,   402,    -1,
     404,   405,   406,   407,   408,    -1,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,    -1,    -1,   427,   428,    -1,   430,   431,   432,    -1,
     434,   435,   436,   437,   438,    -1,   440,   441,   442,    -1,
      -1,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,   458,    -1,    -1,   461,   462,   463,
      -1,   465,   466,   467,   468,    -1,   470,   471,   472,   473,
     474,   475,   476,   477,    -1,   479,   480,   481,   482,   483,
     484,   485,   486,   487,    -1,    -1,   490,    -1,    -1,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,    -1,    -1,    -1,    -1,    -1,    -1,   521,   522,   523,
      -1,    -1,    -1,    -1,   528,    -1,   530,    -1,    -1,    -1,
     534,    -1,    -1,   537,   538,   539,     3,     4,     5,     6,
       7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    81,    -1,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
      -1,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,    -1,    -1,   165,   166,
     167,   168,    -1,   170,    -1,   172,   173,    -1,   175,   176,
     177,   178,   179,   180,    -1,    -1,   183,    -1,   185,   186,
     187,   188,    -1,   190,   191,   192,   193,   194,   195,   196,
     197,   198,   199,   200,   201,    -1,   203,   204,   205,   206,
     207,   208,   209,    -1,   211,   212,   213,   214,   215,   216,
     217,   218,   219,   220,    -1,   222,    -1,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,    -1,    -1,
     237,   238,   239,   240,    -1,   242,    -1,    -1,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,    -1,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,    -1,   295,   296,
      -1,    -1,   299,   300,   301,    -1,    -1,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,    -1,    -1,    -1,
      -1,   328,   329,   330,   331,   332,   333,   334,    -1,   336,
     337,   338,    -1,   340,   341,   342,   343,   344,   345,    -1,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
      -1,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,    -1,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,   391,    -1,    -1,   394,   395,   396,
     397,   398,   399,   400,   401,   402,    -1,   404,   405,   406,
     407,   408,    -1,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,    -1,    -1,
     427,   428,    -1,   430,   431,   432,    -1,   434,   435,   436,
     437,   438,    -1,   440,   441,   442,    -1,    -1,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,    -1,    -1,   461,   462,   463,    -1,   465,   466,
     467,   468,    -1,   470,   471,   472,   473,   474,   475,   476,
     477,    -1,   479,   480,   481,   482,   483,   484,   485,   486,
     487,    -1,    -1,   490,    -1,    -1,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   521,   522,    -1,    -1,    -1,    -1,
      -1,   528,    -1,   530,    -1,    -1,    -1,   534,    -1,    -1,
     537,   538,   539,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,
      -1,    -1,    42,    43,    44,    -1,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    81,    -1,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    99,
      -1,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,    -1,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,   139,
      -1,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,    -1,    -1,   165,   166,   167,   168,    -1,
     170,    -1,   172,   173,    -1,   175,   176,   177,   178,   179,
     180,    -1,    -1,   183,    -1,   185,   186,   187,   188,    -1,
     190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
     200,   201,    -1,   203,   204,   205,   206,   207,   208,   209,
      -1,   211,   212,   213,   214,   215,   216,   217,   218,   219,
     220,    -1,   222,    -1,   224,    -1,    -1,   227,   228,   229,
     230,   231,   232,   233,   234,    -1,    -1,   237,   238,   239,
     240,    -1,   242,    -1,    -1,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,    -1,   283,   284,    -1,   286,   287,   288,   289,
     290,   291,   292,   293,    -1,   295,   296,    -1,    -1,   299,
     300,   301,    -1,    -1,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,    -1,    -1,    -1,    -1,   328,   329,
     330,   331,   332,   333,   334,    -1,   336,   337,   338,    -1,
     340,   341,   342,   343,   344,   345,    -1,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,    -1,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,    -1,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,    -1,    -1,   394,   395,   396,   397,   398,   399,
     400,   401,   402,    -1,   404,   405,   406,   407,   408,    -1,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,    -1,    -1,   427,   428,    -1,
     430,   431,   432,    -1,   434,   435,   436,   437,   438,    -1,
     440,   441,   442,    -1,    -1,   445,   446,   447,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   457,   458,    -1,
      -1,   461,   462,   463,    -1,   465,   466,   467,   468,    -1,
     470,   471,   472,   473,   474,   475,   476,   477,    -1,   479,
     480,   481,   482,   483,   484,   485,   486,   487,    -1,    -1,
     490,    -1,    -1,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,    -1,    -1,    -1,    -1,    -1,
      -1,   521,   522,   523,    -1,    -1,    -1,    -1,   528,    -1,
     530,    -1,    -1,    -1,   534,    -1,    -1,   537,   538,   539,
       3,     4,     5,     6,     7,    -1,     9,    10,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    -1,    81,    -1,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    99,    -1,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,    -1,   118,    -1,   120,   121,   122,
     123,   124,   125,    -1,    -1,   128,   129,   130,   131,    -1,
      -1,   134,   135,   136,   137,   138,   139,    -1,   141,   142,
     143,    -1,   145,   146,   147,    -1,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
      -1,    -1,   165,   166,   167,   168,    -1,   170,    -1,   172,
     173,    -1,   175,   176,   177,   178,   179,   180,    -1,    -1,
     183,    -1,   185,   186,   187,   188,    -1,   190,   191,   192,
     193,   194,   195,   196,   197,   198,   199,   200,   201,    -1,
     203,   204,   205,   206,   207,   208,   209,    -1,   211,   212,
     213,   214,   215,   216,   217,   218,   219,   220,    -1,   222,
      -1,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,    -1,    -1,   237,   238,   239,   240,    -1,   242,
      -1,    -1,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,    -1,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,    -1,   295,   296,    -1,    -1,   299,   300,   301,    -1,
      -1,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,    -1,    -1,    -1,    -1,   328,   329,   330,   331,   332,
     333,   334,    -1,   336,   337,   338,    -1,   340,   341,   342,
     343,   344,   345,    -1,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,    -1,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,    -1,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,    -1,
      -1,   394,   395,   396,   397,   398,   399,   400,   401,   402,
      -1,   404,   405,   406,   407,   408,    -1,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,    -1,    -1,   427,   428,    -1,   430,   431,   432,
      -1,   434,   435,   436,   437,   438,    -1,   440,   441,   442,
      -1,    -1,   445,   446,   447,   448,   449,   450,   451,   452,
     453,   454,   455,   456,   457,   458,    -1,    -1,   461,   462,
     463,    -1,   465,   466,   467,   468,    -1,   470,   471,   472,
     473,   474,   475,   476,   477,    -1,   479,   480,   481,   482,
     483,   484,   485,   486,   487,    -1,    -1,   490,    -1,    -1,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   521,   522,
      -1,    -1,    -1,    -1,    -1,   528,    -1,   530,    -1,    -1,
      -1,   534,    -1,    -1,   537,   538,   539,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    81,    -1,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,    -1,   118,    -1,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,   139,    -1,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,    -1,    -1,   165,
     166,   167,   168,    -1,   170,    -1,   172,   173,    -1,   175,
     176,   177,   178,   179,   180,    -1,    -1,   183,    -1,   185,
     186,   187,   188,    -1,   190,   191,   192,   193,   194,   195,
     196,   197,   198,   199,   200,   201,    -1,   203,   204,   205,
     206,   207,   208,   209,    -1,   211,   212,   213,   214,   215,
     216,   217,   218,   219,   220,    -1,   222,    -1,   224,    -1,
     226,   227,   228,   229,   230,   231,   232,   233,   234,    -1,
      -1,   237,   238,   239,   240,    -1,   242,    -1,    -1,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,    -1,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,    -1,   295,
     296,    -1,    -1,   299,   300,   301,    -1,    -1,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,    -1,    -1,
      -1,    -1,   328,   329,   330,   331,   332,   333,   334,    -1,
     336,   337,   338,    -1,   340,   341,   342,   343,   344,   345,
      -1,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,    -1,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,    -1,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,    -1,    -1,   394,   395,
     396,   397,   398,   399,   400,   401,   402,    -1,   404,   405,
     406,   407,   408,    -1,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,    -1,
      -1,   427,   428,    -1,   430,   431,   432,    -1,   434,   435,
     436,   437,   438,    -1,   440,   441,   442,    -1,    -1,   445,
     446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
     456,   457,   458,    -1,    -1,   461,   462,   463,    -1,   465,
     466,   467,   468,    -1,   470,   471,   472,   473,   474,   475,
     476,   477,    -1,   479,   480,   481,   482,   483,   484,   485,
     486,   487,    -1,    -1,   490,    -1,    -1,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   521,   522,    -1,    -1,    -1,
      -1,    -1,   528,    -1,   530,    -1,    -1,    -1,   534,    -1,
      -1,   537,   538,   539,     3,     4,     5,     6,     7,    -1,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    -1,    81,    -1,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      99,    -1,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,    -1,   118,
      -1,   120,   121,   122,   123,   124,   125,    -1,    -1,   128,
     129,   130,   131,    -1,    -1,   134,   135,   136,   137,   138,
     139,    -1,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,    -1,    -1,   165,   166,   167,   168,
      -1,   170,    -1,   172,   173,    -1,   175,   176,   177,   178,
     179,   180,    -1,    -1,   183,   184,   185,   186,   187,   188,
      -1,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,   204,   205,   206,   207,   208,
     209,    -1,   211,   212,   213,   214,   215,   216,   217,   218,
     219,   220,    -1,   222,    -1,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,    -1,    -1,   237,   238,
     239,   240,    -1,   242,    -1,    -1,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,    -1,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,    -1,   295,   296,    -1,    -1,
     299,   300,   301,    -1,    -1,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,    -1,    -1,    -1,    -1,   328,
     329,   330,   331,   332,   333,   334,    -1,   336,   337,   338,
      -1,   340,   341,   342,   343,   344,   345,    -1,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,    -1,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,    -1,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,   391,    -1,    -1,   394,   395,   396,   397,   398,
     399,   400,   401,   402,    -1,   404,   405,   406,   407,   408,
      -1,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,    -1,    -1,   427,   428,
      -1,   430,   431,   432,    -1,   434,   435,   436,   437,   438,
      -1,   440,   441,   442,    -1,    -1,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
      -1,    -1,   461,   462,   463,    -1,   465,   466,   467,   468,
      -1,   470,   471,   472,   473,   474,   475,   476,   477,    -1,
     479,   480,   481,   482,   483,   484,   485,   486,   487,    -1,
      -1,   490,    -1,    -1,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   528,
      -1,   530,    -1,    -1,    -1,   534,    -1,    -1,   537,   538,
     539,     3,     4,     5,     6,     7,    -1,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,
      42,    43,    44,    -1,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    81,
      -1,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,    -1,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,   139,    -1,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,    -1,    -1,   165,   166,   167,   168,    -1,   170,    -1,
     172,   173,    -1,   175,   176,   177,   178,   179,   180,    -1,
      -1,   183,    -1,   185,   186,   187,   188,    -1,   190,   191,
     192,   193,   194,   195,   196,   197,   198,   199,   200,   201,
      -1,   203,   204,   205,   206,   207,   208,   209,    -1,   211,
     212,   213,   214,   215,   216,   217,   218,   219,   220,    -1,
     222,    -1,   224,   225,   226,   227,   228,   229,   230,   231,
     232,   233,   234,    -1,    -1,   237,   238,   239,   240,    -1,
     242,    -1,    -1,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
      -1,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,    -1,   295,   296,    -1,    -1,   299,   300,   301,
      -1,    -1,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,    -1,    -1,    -1,    -1,   328,   329,   330,   331,
     332,   333,   334,    -1,   336,   337,   338,    -1,   340,   341,
     342,   343,   344,   345,    -1,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,    -1,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,    -1,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
      -1,    -1,   394,   395,   396,   397,   398,   399,   400,   401,
     402,    -1,   404,   405,   406,   407,   408,    -1,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,    -1,    -1,   427,   428,    -1,   430,   431,
     432,    -1,   434,   435,   436,   437,   438,    -1,   440,   441,
     442,    -1,    -1,   445,   446,   447,   448,   449,   450,   451,
     452,   453,   454,   455,   456,   457,   458,    -1,    -1,   461,
     462,   463,    -1,   465,   466,   467,   468,    -1,   470,   471,
     472,   473,   474,   475,   476,   477,    -1,   479,   480,   481,
     482,   483,   484,   485,   486,   487,    -1,    -1,   490,    -1,
      -1,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   528,    -1,   530,    -1,
      -1,    -1,   534,    -1,    -1,   537,   538,   539,     3,     4,
       5,     6,     7,    -1,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,
      -1,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    79,    -1,    81,    -1,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    -1,    94,
      95,    96,    97,    98,    99,    -1,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,    -1,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,   139,    -1,   141,   142,   143,    -1,
     145,   146,   147,    -1,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,    -1,    -1,
     165,   166,   167,   168,    -1,   170,    -1,   172,   173,    -1,
     175,   176,   177,   178,   179,   180,    -1,    -1,   183,    -1,
     185,   186,   187,   188,    -1,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,    -1,   203,   204,
     205,   206,   207,   208,   209,    -1,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,    -1,   222,    -1,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
      -1,    -1,   237,   238,   239,   240,    -1,   242,    -1,    -1,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,    -1,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,    -1,
     295,   296,    -1,    -1,   299,   300,   301,    -1,    -1,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,    -1,
      -1,    -1,    -1,   328,   329,   330,   331,   332,   333,   334,
      -1,   336,   337,   338,    -1,   340,   341,   342,   343,   344,
     345,    -1,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,    -1,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,    -1,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,    -1,    -1,   394,
     395,   396,   397,   398,   399,   400,   401,   402,    -1,   404,
     405,   406,   407,   408,    -1,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
      -1,    -1,   427,   428,    -1,   430,   431,   432,    -1,   434,
     435,   436,   437,   438,    -1,   440,   441,   442,    -1,    -1,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,    -1,    -1,   461,   462,   463,    -1,
     465,   466,   467,   468,    -1,   470,   471,   472,   473,   474,
     475,   476,   477,    -1,   479,   480,   481,   482,   483,   484,
     485,   486,   487,    -1,    -1,   490,    -1,    -1,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   528,    -1,   530,    -1,    -1,    -1,   534,
      -1,    -1,   537,   538,   539,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    51,    52,    -1,    54,    55,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    81,    -1,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,    -1,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,    -1,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,   139,    -1,   141,   142,   143,    -1,   145,    -1,   147,
      -1,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,    -1,    -1,   165,   166,   167,
     168,    -1,   170,    -1,   172,   173,    -1,   175,   176,   177,
     178,    -1,   180,    -1,    -1,   183,    -1,   185,   186,   187,
     188,    -1,   190,   191,   192,   193,   194,   195,   196,    -1,
     198,   199,   200,   201,    -1,   203,   204,   205,   206,   207,
     208,   209,    -1,   211,   212,   213,   214,   215,   216,   217,
     218,   219,   220,    -1,   222,    -1,   224,    -1,    -1,   227,
     228,   229,   230,   231,   232,   233,   234,    -1,    -1,   237,
     238,   239,    -1,    -1,   242,    -1,    -1,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,    -1,   283,   284,    -1,   286,   287,
     288,   289,   290,   291,   292,   293,    -1,   295,   296,    -1,
      -1,   299,   300,   301,    -1,    -1,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,    -1,    -1,    -1,    -1,
     328,   329,   330,   331,   332,   333,   334,    -1,   336,   337,
     338,    -1,   340,   341,   342,   343,   344,   345,    -1,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,    -1,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,    -1,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,    -1,    -1,   394,   395,   396,   397,
     398,   399,   400,   401,   402,    -1,    -1,   405,   406,   407,
     408,    -1,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,    -1,    -1,   427,
     428,    -1,   430,   431,   432,    -1,   434,   435,   436,   437,
     438,    -1,   440,   441,   442,    -1,    -1,   445,   446,   447,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,    -1,    -1,   461,   462,   463,    -1,   465,   466,   467,
     468,    -1,   470,   471,   472,   473,   474,   475,   476,   477,
      -1,   479,   480,   481,   482,   483,   484,   485,   486,   487,
      -1,    -1,   490,    -1,    -1,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   521,   522,   523,     3,    -1,    -1,    -1,
     528,    -1,   530,    10,    -1,    -1,   534,    -1,    -1,   537,
     538,   539,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    81,    -1,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
      -1,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,    -1,   162,    -1,    -1,   165,   166,
     167,   168,    -1,   170,    -1,   172,   173,    -1,   175,   176,
     177,   178,   179,   180,    -1,    -1,   183,    -1,   185,   186,
     187,   188,    -1,   190,   191,   192,   193,   194,   195,   196,
     197,   198,   199,   200,   201,    -1,   203,   204,   205,   206,
     207,   208,   209,    -1,   211,   212,   213,   214,   215,   216,
     217,   218,   219,   220,    -1,   222,    -1,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,    -1,    -1,
     237,   238,   239,   240,    -1,   242,    -1,    -1,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,    -1,   283,   284,   285,   286,
      -1,   288,   289,   290,   291,   292,   293,    -1,   295,   296,
      -1,    -1,   299,   300,   301,    -1,    -1,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,    -1,    -1,    -1,
      -1,   328,   329,   330,   331,   332,   333,   334,    -1,   336,
     337,   338,    -1,   340,   341,   342,   343,   344,   345,    -1,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
      -1,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,    -1,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,   391,    -1,    -1,   394,   395,   396,
     397,   398,   399,   400,   401,   402,    -1,   404,   405,   406,
     407,   408,    -1,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,    -1,    -1,
     427,   428,    -1,   430,   431,   432,    -1,   434,   435,   436,
     437,   438,    -1,   440,   441,   442,    -1,    -1,   445,   446,
     447,   448,   449,    -1,   451,   452,   453,   454,   455,   456,
     457,   458,    -1,    -1,   461,   462,   463,    -1,   465,   466,
     467,   468,    -1,   470,   471,   472,   473,   474,   475,   476,
     477,    -1,   479,   480,   481,   482,   483,   484,   485,   486,
     487,    -1,    -1,   490,    -1,    -1,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     3,     4,     5,    -1,    -1,    -1,
       9,   528,    -1,   530,    -1,    -1,    -1,   534,    -1,    -1,
     537,   538,   539,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    37,    -1,
      -1,    -1,    -1,    42,    43,    44,    -1,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    -1,    -1,    67,    68,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    -1,    81,    -1,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      99,    -1,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,    -1,   118,
      -1,   120,   121,   122,   123,   124,   125,    -1,    -1,   128,
     129,   130,   131,    -1,    -1,   134,   135,   136,   137,   138,
     139,    -1,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,    -1,    -1,   165,   166,   167,   168,
      -1,   170,    -1,   172,   173,    -1,   175,   176,   177,   178,
     179,   180,    -1,    -1,   183,    -1,   185,   186,   187,   188,
      -1,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,   200,   201,    -1,   203,   204,   205,   206,   207,   208,
     209,    -1,   211,   212,   213,   214,   215,   216,   217,   218,
     219,   220,    -1,   222,    -1,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,    -1,    -1,   237,   238,
     239,   240,    -1,   242,    -1,    -1,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,    -1,   283,   284,   285,   286,    -1,   288,
     289,   290,   291,   292,   293,    -1,   295,   296,   297,    -1,
     299,   300,   301,    -1,    -1,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,    -1,    -1,    -1,    -1,   328,
     329,   330,   331,   332,   333,   334,    -1,   336,   337,   338,
      -1,   340,   341,   342,   343,   344,   345,    -1,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,    -1,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,    -1,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,   391,    -1,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,    -1,   404,   405,   406,   407,   408,
      -1,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,    -1,    -1,   427,   428,
      -1,   430,   431,   432,    -1,   434,   435,   436,   437,   438,
      -1,   440,   441,   442,    -1,    -1,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
      -1,    -1,   461,   462,   463,    -1,   465,   466,   467,   468,
      -1,   470,   471,   472,   473,   474,   475,   476,   477,    -1,
     479,   480,   481,   482,   483,   484,   485,   486,   487,    -1,
      -1,   490,    -1,    -1,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,    -1,    -1,     3,    -1,    -1,
      -1,    -1,   521,   522,   523,    -1,    -1,    -1,    -1,   528,
      -1,   530,    -1,    -1,    -1,   534,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    -1,    40,    -1,    -1,    43,    44,    -1,
      46,    47,    48,    -1,    50,    51,    52,    53,    54,    -1,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    -1,    -1,    83,    84,    85,
      86,    87,    88,    -1,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,    -1,   118,    -1,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,   139,    -1,   141,   142,   143,    -1,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,    -1,   162,    -1,   164,   165,
     166,   167,   168,   169,   170,    -1,   172,    -1,    -1,    -1,
     176,   177,   178,    -1,   180,    -1,    -1,   183,    -1,   185,
     186,   187,   188,    -1,   190,   191,   192,   193,   194,   195,
     196,    -1,   198,   199,   200,   201,    -1,   203,   204,   205,
     206,   207,   208,   209,    -1,   211,    -1,   213,   214,   215,
     216,   217,   218,   219,   220,   221,   222,    -1,   224,    -1,
      -1,   227,    -1,   229,   230,   231,   232,   233,   234,    -1,
      -1,   237,    -1,   239,    -1,   241,   242,    -1,    -1,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,    -1,
     276,   277,   278,   279,   280,   281,    -1,   283,   284,    -1,
     286,    -1,   288,   289,   290,   291,   292,   293,   294,   295,
     296,    -1,    -1,   299,   300,   301,    -1,   303,   304,   305,
     306,    -1,   308,   309,    -1,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,    -1,    -1,
      -1,    -1,   328,   329,   330,    -1,   332,   333,   334,    -1,
     336,   337,   338,    -1,   340,   341,   342,   343,   344,   345,
      -1,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,    -1,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,    -1,   372,   373,    -1,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,    -1,    -1,   394,   395,
     396,   397,   398,   399,   400,   401,   402,    -1,    -1,   405,
     406,   407,   408,    -1,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,    -1,
      -1,   427,   428,    -1,   430,    -1,   432,    -1,   434,   435,
     436,   437,   438,    -1,   440,   441,   442,    -1,    -1,   445,
     446,   447,   448,   449,    -1,   451,   452,   453,   454,   455,
     456,   457,   458,   459,    -1,   461,   462,   463,    -1,   465,
     466,   467,   468,    -1,   470,   471,   472,   473,   474,   475,
     476,   477,    -1,   479,    -1,   481,   482,   483,   484,   485,
     486,   487,    -1,    -1,   490,    -1,    -1,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,     3,    -1,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   531,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,
      -1,    46,    47,    48,    -1,    50,    51,    52,    53,    54,
      -1,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      -1,    -1,    67,    68,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    79,    -1,    -1,    -1,    83,    84,
      85,    86,    87,    88,    -1,    90,    91,    92,    -1,    94,
      95,    96,    97,    98,    99,    -1,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,    -1,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,   139,    -1,   141,   142,   143,    -1,
     145,   146,   147,    -1,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,    -1,   162,    -1,    -1,
     165,   166,   167,   168,    -1,   170,    -1,   172,    -1,    -1,
      -1,   176,   177,   178,    -1,   180,    -1,    -1,   183,    -1,
     185,   186,   187,   188,    -1,   190,   191,   192,   193,   194,
     195,   196,    -1,   198,   199,   200,   201,    -1,   203,   204,
     205,   206,   207,   208,   209,    -1,   211,    -1,   213,   214,
     215,   216,   217,   218,   219,   220,    -1,   222,    -1,   224,
      -1,    -1,   227,    -1,   229,   230,   231,   232,   233,   234,
      -1,    -1,   237,    -1,   239,    -1,    -1,   242,    -1,    -1,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
      -1,   276,   277,   278,   279,   280,   281,    -1,   283,   284,
      -1,   286,    -1,   288,   289,   290,   291,   292,   293,    -1,
     295,   296,    -1,    -1,   299,   300,   301,    -1,    -1,   304,
     305,   306,    -1,   308,   309,    -1,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,    -1,
      -1,    -1,    -1,   328,   329,   330,    -1,   332,   333,   334,
      -1,   336,   337,   338,    -1,   340,   341,   342,   343,   344,
     345,    -1,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,    -1,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,    -1,   372,   373,    -1,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,    -1,    -1,   394,
     395,   396,   397,   398,   399,   400,   401,   402,    -1,    -1,
     405,   406,   407,   408,    -1,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
      -1,    -1,   427,   428,    -1,   430,    -1,   432,    -1,   434,
     435,   436,   437,   438,    -1,   440,   441,   442,    -1,    -1,
     445,   446,   447,   448,   449,    -1,   451,   452,   453,   454,
     455,   456,   457,   458,    -1,    -1,   461,   462,   463,    -1,
     465,   466,   467,   468,    -1,   470,   471,   472,   473,   474,
     475,   476,   477,    -1,   479,    -1,   481,   482,   483,   484,
     485,   486,   487,    -1,    -1,   490,    -1,    -1,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   530,   531,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    -1,    66,    67,    68,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    81,    -1,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    99,    -1,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,    -1,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,   139,    -1,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,    -1,   162,    -1,
      -1,   165,   166,   167,   168,    -1,   170,    -1,   172,   173,
     174,   175,   176,   177,   178,   179,   180,    -1,    -1,   183,
      -1,   185,   186,   187,   188,    -1,   190,   191,   192,   193,
     194,   195,   196,   197,   198,   199,   200,   201,    -1,   203,
     204,   205,   206,   207,   208,   209,    -1,   211,   212,   213,
     214,   215,   216,   217,   218,   219,   220,    -1,   222,    -1,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,    -1,   237,   238,   239,   240,    -1,   242,    -1,
      -1,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,    -1,   283,
     284,   285,   286,    -1,   288,   289,   290,   291,   292,   293,
      -1,   295,   296,    -1,   298,   299,   300,   301,    -1,    -1,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,    -1,   328,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   338,    -1,   340,   341,   342,   343,
     344,   345,    -1,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,    -1,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,    -1,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,    -1,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,    -1,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,    -1,   427,   428,   429,   430,   431,   432,    -1,
     434,   435,   436,   437,   438,    -1,   440,   441,   442,    -1,
      -1,   445,   446,   447,   448,   449,    -1,   451,   452,   453,
     454,   455,   456,   457,   458,    -1,    -1,   461,   462,   463,
     464,   465,   466,   467,   468,    -1,   470,   471,   472,   473,
     474,   475,   476,   477,    -1,   479,   480,   481,   482,   483,
     484,   485,   486,   487,    -1,    -1,   490,    -1,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
       3,    -1,   516,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   530,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    34,    35,    -1,    37,    -1,    -1,    -1,    -1,    42,
      43,    44,    -1,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    -1,    81,    -1,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    99,    -1,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,    -1,   118,    -1,   120,   121,   122,
     123,   124,   125,   126,   127,   128,   129,   130,   131,    -1,
      -1,   134,   135,   136,   137,   138,   139,    -1,   141,   142,
     143,    -1,   145,   146,   147,    -1,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,    -1,   162,
      -1,    -1,   165,   166,   167,   168,    -1,   170,    -1,   172,
     173,   174,   175,   176,   177,   178,   179,   180,    -1,    -1,
     183,    -1,   185,   186,   187,   188,    -1,   190,   191,   192,
     193,   194,   195,   196,   197,   198,   199,   200,   201,    -1,
     203,   204,   205,   206,   207,   208,   209,    -1,   211,   212,
     213,   214,   215,   216,   217,   218,   219,   220,    -1,   222,
      -1,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,    -1,    -1,   237,   238,   239,   240,    -1,   242,
      -1,    -1,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,    -1,
     283,   284,   285,   286,    -1,   288,   289,   290,   291,   292,
     293,    -1,   295,   296,    -1,    -1,   299,   300,   301,    -1,
      -1,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,    -1,   328,   329,   330,   331,   332,
     333,   334,    -1,   336,   337,   338,    -1,   340,   341,   342,
     343,   344,   345,    -1,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,    -1,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,    -1,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,    -1,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,    -1,   427,   428,   429,   430,   431,   432,
      -1,   434,   435,   436,   437,   438,    -1,   440,   441,   442,
      -1,    -1,   445,   446,   447,   448,   449,    -1,   451,   452,
     453,   454,   455,   456,   457,   458,    -1,    -1,   461,   462,
     463,   464,   465,   466,   467,   468,    -1,   470,   471,   472,
     473,   474,   475,   476,   477,    -1,   479,   480,   481,   482,
     483,   484,   485,   486,   487,    -1,    -1,   490,    -1,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,    -1,     3,   516,     5,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   530,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    -1,    66,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,    -1,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,   139,    -1,
     141,   142,   143,    -1,   145,   146,   147,    -1,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
      -1,   162,    -1,    -1,   165,   166,   167,   168,    -1,   170,
      -1,   172,   173,    -1,   175,   176,   177,   178,   179,   180,
      -1,    -1,   183,    -1,   185,   186,   187,   188,    -1,   190,
     191,   192,   193,   194,   195,   196,   197,   198,   199,   200,
     201,    -1,   203,   204,   205,   206,   207,   208,   209,    -1,
     211,   212,   213,   214,   215,   216,   217,   218,   219,   220,
      -1,   222,    -1,   224,   225,   226,   227,   228,   229,   230,
     231,   232,   233,   234,   235,    -1,   237,   238,   239,   240,
      -1,   242,    -1,    -1,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,    -1,   283,   284,   285,   286,    -1,   288,   289,   290,
     291,   292,   293,    -1,   295,   296,    -1,   298,   299,   300,
     301,    -1,    -1,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,    -1,    -1,    -1,    -1,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,    -1,   340,
     341,   342,   343,   344,   345,    -1,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,    -1,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
      -1,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
     391,    -1,    -1,   394,   395,   396,   397,   398,   399,   400,
     401,   402,    -1,   404,   405,   406,   407,   408,    -1,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,    -1,    -1,   427,   428,    -1,   430,
     431,   432,    -1,   434,   435,   436,   437,   438,    -1,   440,
     441,   442,    -1,    -1,   445,   446,   447,   448,   449,    -1,
     451,   452,   453,   454,   455,   456,   457,   458,    -1,    -1,
     461,   462,   463,    -1,   465,   466,   467,   468,    -1,   470,
     471,   472,   473,   474,   475,   476,   477,    -1,   479,   480,
     481,   482,   483,   484,   485,   486,   487,    -1,    -1,   490,
      -1,    -1,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   530,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    42,    43,    44,    -1,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    -1,    66,    67,    68,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    81,    -1,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    99,
      -1,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,    -1,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,    -1,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,   139,
      -1,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,    -1,   162,    -1,    -1,   165,   166,   167,   168,    -1,
     170,    -1,   172,   173,    -1,   175,   176,   177,   178,   179,
     180,    -1,    -1,   183,    -1,   185,   186,   187,   188,    -1,
     190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
     200,   201,    -1,   203,   204,   205,   206,   207,   208,   209,
      -1,   211,   212,   213,   214,   215,   216,   217,   218,   219,
     220,    -1,   222,    -1,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,    -1,    -1,   237,   238,   239,
     240,    -1,   242,    -1,    -1,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,    -1,   283,   284,   285,   286,    -1,   288,   289,
     290,   291,   292,   293,    -1,   295,   296,    -1,    -1,   299,
     300,   301,    -1,    -1,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,    -1,    -1,    -1,    -1,   328,   329,
     330,   331,   332,   333,   334,    -1,   336,   337,   338,    -1,
     340,   341,   342,   343,   344,   345,    -1,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,    -1,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,    -1,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,    -1,    -1,   394,   395,   396,   397,   398,   399,
     400,   401,   402,    -1,   404,   405,   406,   407,   408,    -1,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,    -1,    -1,   427,   428,    -1,
     430,   431,   432,    -1,   434,   435,   436,   437,   438,    -1,
     440,   441,   442,    -1,    -1,   445,   446,   447,   448,   449,
      -1,   451,   452,   453,   454,   455,   456,   457,   458,    -1,
      -1,   461,   462,   463,    -1,   465,   466,   467,   468,    -1,
     470,   471,   472,   473,   474,   475,   476,   477,    -1,   479,
     480,   481,   482,   483,   484,   485,   486,   487,    -1,    -1,
     490,    -1,    -1,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     530,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    42,    43,    44,    -1,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    -1,    66,    67,    68,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    -1,    81,    -1,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      99,    -1,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,    -1,   118,
      -1,   120,   121,   122,   123,   124,   125,    -1,    -1,   128,
     129,   130,   131,    -1,    -1,   134,   135,   136,   137,   138,
     139,    -1,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,    -1,   162,    -1,    -1,   165,   166,   167,   168,
      -1,   170,    -1,   172,   173,    -1,   175,   176,   177,   178,
     179,   180,    -1,    -1,   183,    -1,   185,   186,   187,   188,
      -1,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,   200,   201,    -1,   203,   204,   205,   206,   207,   208,
     209,    -1,   211,   212,   213,   214,   215,   216,   217,   218,
     219,   220,    -1,   222,    -1,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,    -1,    -1,   237,   238,
     239,   240,    -1,   242,    -1,    -1,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,    -1,   283,   284,   285,   286,    -1,   288,
     289,   290,   291,   292,   293,    -1,   295,   296,    -1,    -1,
     299,   300,   301,    -1,    -1,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,    -1,    -1,    -1,    -1,   328,
     329,   330,   331,   332,   333,   334,    -1,   336,   337,   338,
      -1,   340,   341,   342,   343,   344,   345,    -1,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,    -1,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,    -1,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,   391,    -1,    -1,   394,   395,   396,   397,   398,
     399,   400,   401,   402,    -1,   404,   405,   406,   407,   408,
      -1,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,    -1,    -1,   427,   428,
      -1,   430,   431,   432,    -1,   434,   435,   436,   437,   438,
      -1,   440,   441,   442,    -1,    -1,   445,   446,   447,   448,
     449,    -1,   451,   452,   453,   454,   455,   456,   457,   458,
      -1,    -1,   461,   462,   463,    -1,   465,   466,   467,   468,
      -1,   470,   471,   472,   473,   474,   475,   476,   477,    -1,
     479,   480,   481,   482,   483,   484,   485,   486,   487,    -1,
      -1,   490,    -1,    -1,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   530,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,
      48,    -1,    50,    51,    52,    53,    54,    -1,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    -1,    -1,    83,    84,    85,    86,    87,
      88,    -1,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,    -1,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,    -1,   120,   121,   122,   123,   124,   125,   126,   127,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,   139,    -1,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,    -1,   162,    -1,    -1,   165,   166,   167,
     168,    -1,   170,    -1,   172,    -1,   174,    -1,   176,   177,
     178,    -1,   180,    -1,    -1,   183,    -1,   185,   186,   187,
     188,    -1,   190,   191,   192,   193,   194,   195,   196,    -1,
     198,   199,   200,   201,    -1,   203,   204,   205,   206,   207,
     208,   209,    -1,   211,    -1,   213,   214,   215,   216,   217,
     218,   219,   220,    -1,   222,    -1,   224,    -1,    -1,   227,
      -1,   229,   230,   231,   232,   233,   234,    -1,    -1,   237,
      -1,   239,    -1,    -1,   242,    -1,    -1,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,    -1,   276,   277,
     278,   279,   280,   281,    -1,   283,   284,    -1,   286,    -1,
     288,   289,   290,   291,   292,   293,    -1,   295,   296,    -1,
      -1,   299,   300,   301,    -1,    -1,   304,   305,   306,    -1,
     308,   309,    -1,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,    -1,
     328,   329,   330,    -1,   332,   333,   334,    -1,   336,   337,
     338,    -1,   340,   341,   342,   343,   344,   345,    -1,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,    -1,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,    -1,   372,   373,    -1,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,    -1,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,    -1,   405,   406,   407,
     408,    -1,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,    -1,   427,
     428,   429,   430,    -1,   432,    -1,   434,   435,   436,   437,
     438,    -1,   440,   441,   442,    -1,    -1,   445,   446,   447,
     448,   449,    -1,   451,   452,   453,   454,   455,   456,   457,
     458,    -1,    -1,   461,   462,   463,   464,   465,   466,   467,
     468,    -1,   470,   471,   472,   473,   474,   475,   476,   477,
      -1,   479,    -1,   481,   482,   483,   484,   485,   486,   487,
      -1,    -1,   490,    -1,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,     3,    -1,   516,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   530,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    -1,    -1,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
      -1,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,    -1,   162,    -1,    -1,   165,   166,
     167,   168,    -1,   170,    -1,   172,    -1,   174,    -1,   176,
     177,   178,    -1,   180,    -1,    -1,   183,    -1,   185,   186,
     187,   188,    -1,   190,   191,   192,   193,   194,   195,   196,
      -1,   198,   199,   200,   201,    -1,   203,   204,   205,   206,
     207,   208,   209,    -1,   211,    -1,   213,   214,   215,   216,
     217,   218,   219,   220,    -1,   222,    -1,   224,    -1,    -1,
     227,    -1,   229,   230,   231,   232,   233,   234,    -1,    -1,
     237,    -1,   239,    -1,    -1,   242,    -1,    -1,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,    -1,   276,
     277,   278,   279,   280,   281,    -1,   283,   284,    -1,   286,
      -1,   288,   289,   290,   291,   292,   293,    -1,   295,   296,
      -1,    -1,   299,   300,   301,    -1,    -1,   304,   305,   306,
      -1,   308,   309,    -1,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
      -1,   328,   329,   330,    -1,   332,   333,   334,    -1,   336,
     337,   338,    -1,   340,   341,   342,   343,   344,   345,    -1,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
      -1,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,    -1,   372,   373,    -1,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,    -1,   394,   395,   396,
     397,   398,   399,   400,   401,   402,    -1,    -1,   405,   406,
     407,   408,    -1,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,    -1,    -1,
     427,   428,   429,   430,    -1,   432,    -1,   434,   435,   436,
     437,   438,    -1,   440,   441,   442,    -1,    -1,   445,   446,
     447,   448,   449,    -1,   451,   452,   453,   454,   455,   456,
     457,   458,    -1,    -1,   461,   462,   463,   464,   465,   466,
     467,   468,    -1,   470,   471,   472,   473,   474,   475,   476,
     477,    -1,   479,    -1,   481,   482,   483,   484,   485,   486,
     487,    -1,    -1,   490,    -1,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,     3,    -1,   516,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   530,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,
      46,    47,    48,    -1,    50,    51,    52,    53,    54,    -1,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    -1,    -1,    83,    84,    85,
      86,    87,    88,    -1,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,    -1,   118,    -1,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,   139,    -1,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,    -1,   162,    -1,    -1,   165,
     166,   167,   168,    -1,   170,    -1,   172,    -1,   174,    -1,
     176,   177,   178,    -1,   180,    -1,    -1,   183,    -1,   185,
     186,   187,   188,    -1,   190,   191,   192,   193,   194,   195,
     196,    -1,   198,   199,   200,   201,    -1,   203,   204,   205,
     206,   207,   208,   209,    -1,   211,    -1,   213,   214,   215,
     216,   217,   218,   219,   220,    -1,   222,    -1,   224,    -1,
      -1,   227,    -1,   229,   230,   231,   232,   233,   234,    -1,
      -1,   237,    -1,   239,    -1,    -1,   242,    -1,    -1,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,    -1,
     276,   277,   278,   279,   280,   281,    -1,   283,   284,    -1,
     286,    -1,   288,   289,   290,   291,   292,   293,    -1,   295,
     296,    -1,    -1,   299,   300,   301,    -1,    -1,   304,   305,
     306,    -1,   308,   309,    -1,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,    -1,   328,   329,   330,    -1,   332,   333,   334,    -1,
     336,   337,   338,    -1,   340,   341,   342,   343,   344,   345,
      -1,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,    -1,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,    -1,   372,   373,    -1,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,    -1,   394,   395,
     396,   397,   398,   399,   400,   401,   402,    -1,    -1,   405,
     406,   407,   408,    -1,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,    -1,
      -1,   427,   428,   429,   430,    -1,   432,    -1,   434,   435,
     436,   437,   438,    -1,   440,   441,   442,    -1,    -1,   445,
     446,   447,   448,   449,    -1,   451,   452,   453,   454,   455,
     456,   457,   458,    -1,    -1,   461,   462,   463,   464,   465,
     466,   467,   468,    -1,   470,   471,   472,   473,   474,   475,
     476,   477,    -1,   479,    -1,   481,   482,   483,   484,   485,
     486,   487,    -1,    -1,   490,    -1,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,    -1,     3,
     516,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   530,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,
      44,    -1,    46,    47,    48,    -1,    50,    51,    52,    53,
      54,    -1,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,    83,
      84,    85,    86,    87,    88,    -1,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    99,    -1,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,    -1,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,   139,    -1,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,    -1,   162,    -1,
      -1,   165,   166,   167,   168,    -1,   170,    -1,   172,    -1,
      -1,    -1,   176,   177,   178,    -1,   180,    -1,    -1,   183,
      -1,   185,   186,   187,   188,    -1,   190,   191,   192,   193,
     194,   195,   196,    -1,   198,   199,   200,   201,    -1,   203,
     204,   205,   206,   207,   208,   209,    -1,   211,    -1,   213,
     214,   215,   216,   217,   218,   219,   220,    -1,   222,    -1,
     224,    -1,    -1,   227,    -1,   229,   230,   231,   232,   233,
     234,    -1,    -1,   237,    -1,   239,    -1,    -1,   242,    -1,
      -1,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,    -1,   276,   277,   278,   279,   280,   281,    -1,   283,
     284,    -1,   286,    -1,   288,   289,   290,   291,   292,   293,
      -1,   295,   296,    -1,    -1,   299,   300,   301,    -1,    -1,
     304,   305,   306,    -1,   308,   309,    -1,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
      -1,    -1,    -1,    -1,   328,   329,   330,    -1,   332,   333,
     334,    -1,   336,   337,   338,    -1,   340,   341,   342,   343,
     344,   345,    -1,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,    -1,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,    -1,   372,   373,
      -1,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,    -1,    -1,
     394,   395,   396,   397,   398,   399,   400,   401,   402,    -1,
      -1,   405,   406,   407,   408,    -1,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,    -1,    -1,   427,   428,    -1,   430,    -1,   432,    -1,
     434,   435,   436,   437,   438,    -1,   440,   441,   442,    -1,
      -1,   445,   446,   447,   448,   449,    -1,   451,   452,   453,
     454,   455,   456,   457,   458,    -1,    -1,   461,   462,   463,
      -1,   465,   466,   467,   468,    -1,   470,   471,   472,   473,
     474,   475,   476,   477,    -1,   479,    -1,   481,   482,   483,
     484,   485,   486,   487,    -1,    -1,   490,    -1,    -1,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
       3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   530,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      43,    44,    -1,    46,    47,    48,    -1,    50,    51,    52,
      53,    54,    -1,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,
      83,    84,    85,    86,    87,    88,    -1,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    99,    -1,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,    -1,   118,    -1,   120,   121,   122,
     123,   124,   125,    -1,    -1,   128,   129,   130,   131,    -1,
      -1,   134,   135,   136,   137,   138,   139,    -1,   141,   142,
     143,    -1,   145,   146,   147,    -1,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,    -1,   162,
      -1,    -1,   165,   166,   167,   168,    -1,   170,    -1,   172,
      -1,    -1,    -1,   176,   177,   178,    -1,   180,    -1,    -1,
     183,    -1,   185,   186,   187,   188,    -1,   190,   191,   192,
     193,   194,   195,   196,    -1,   198,   199,   200,   201,    -1,
     203,   204,   205,   206,   207,   208,   209,    -1,   211,    -1,
     213,   214,   215,   216,   217,   218,   219,   220,    -1,   222,
      -1,   224,    -1,    -1,   227,    -1,   229,   230,   231,   232,
     233,   234,    -1,    -1,   237,    -1,   239,    -1,    -1,   242,
      -1,    -1,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,    -1,   276,   277,   278,   279,   280,   281,    -1,
     283,   284,    -1,   286,    -1,   288,   289,   290,   291,   292,
     293,    -1,   295,   296,    -1,    -1,   299,   300,   301,    -1,
      -1,   304,   305,   306,    -1,   308,   309,    -1,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,    -1,    -1,    -1,    -1,   328,   329,   330,    -1,   332,
     333,   334,    -1,   336,   337,   338,    -1,   340,   341,   342,
     343,   344,   345,    -1,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,    -1,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,    -1,   372,
     373,    -1,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,    -1,
      -1,   394,   395,   396,   397,   398,   399,   400,   401,   402,
      -1,    -1,   405,   406,   407,   408,    -1,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,    -1,    -1,   427,   428,    -1,   430,    -1,   432,
      -1,   434,   435,   436,   437,   438,    -1,   440,   441,   442,
      -1,    -1,   445,   446,   447,   448,   449,    -1,   451,   452,
     453,   454,   455,   456,   457,   458,    -1,    -1,   461,   462,
     463,    -1,   465,   466,   467,   468,    -1,   470,   471,   472,
     473,   474,   475,   476,   477,    -1,   479,    -1,   481,   482,
     483,   484,   485,   486,   487,    -1,    -1,   490,    -1,    -1,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   530,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    44,    -1,    46,    47,    48,    -1,    50,    51,
      52,    53,    54,    -1,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    -1,
      -1,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,    -1,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,   139,    -1,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,    -1,
     162,    -1,    -1,   165,   166,   167,   168,    -1,   170,    -1,
     172,    -1,    -1,    -1,   176,   177,   178,    -1,   180,    -1,
      -1,   183,    -1,   185,   186,   187,   188,    -1,   190,   191,
     192,   193,   194,   195,   196,    -1,   198,   199,   200,   201,
      -1,   203,   204,   205,   206,   207,   208,   209,    -1,   211,
      -1,   213,   214,   215,   216,   217,   218,   219,   220,    -1,
     222,    -1,   224,    -1,    -1,   227,    -1,   229,   230,   231,
     232,   233,   234,    -1,    -1,   237,    -1,   239,    -1,    -1,
     242,    -1,    -1,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,    -1,   276,   277,   278,   279,   280,   281,
      -1,   283,   284,    -1,   286,    -1,   288,   289,   290,   291,
     292,   293,    -1,   295,   296,    -1,    -1,   299,   300,   301,
      -1,    -1,   304,   305,   306,    -1,   308,   309,    -1,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,    -1,    -1,    -1,    -1,   328,   329,   330,    -1,
     332,   333,   334,    -1,   336,   337,   338,    -1,   340,   341,
     342,   343,   344,   345,    -1,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,    -1,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,    -1,
     372,   373,    -1,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
      -1,    -1,   394,   395,   396,   397,   398,   399,   400,   401,
     402,    -1,    -1,   405,   406,   407,   408,    -1,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,    -1,    -1,   427,   428,    -1,   430,    -1,
     432,    -1,   434,   435,   436,   437,   438,    -1,   440,   441,
     442,    -1,    -1,   445,   446,   447,   448,   449,    -1,   451,
     452,   453,   454,   455,   456,   457,   458,    -1,    -1,   461,
     462,   463,    -1,   465,   466,   467,   468,    -1,   470,   471,
     472,   473,   474,   475,   476,   477,    -1,   479,    -1,   481,
     482,   483,   484,   485,   486,   487,    -1,    -1,   490,    -1,
      -1,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   530,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,    50,
      51,    52,    53,    54,    -1,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      -1,    -1,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,    -1,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,   139,    -1,
     141,   142,   143,    -1,   145,   146,   147,    -1,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
      -1,   162,    -1,    -1,   165,   166,   167,   168,    -1,   170,
      -1,   172,    -1,    -1,    -1,   176,   177,   178,    -1,   180,
      -1,    -1,   183,    -1,   185,   186,   187,   188,    -1,   190,
     191,   192,   193,   194,   195,   196,    -1,   198,   199,   200,
     201,    -1,   203,   204,   205,   206,   207,   208,   209,    -1,
     211,    -1,   213,   214,   215,   216,   217,   218,   219,   220,
      -1,   222,    -1,   224,    -1,    -1,   227,    -1,   229,   230,
     231,   232,   233,   234,    -1,    -1,   237,    -1,   239,    -1,
      -1,   242,    -1,    -1,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,    -1,   276,   277,   278,   279,   280,
     281,    -1,   283,   284,    -1,   286,    -1,   288,   289,   290,
     291,   292,   293,    -1,   295,   296,    -1,    -1,   299,   300,
     301,    -1,    -1,   304,   305,   306,    -1,   308,   309,    -1,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,    -1,    -1,    -1,    -1,   328,   329,   330,
      -1,   332,   333,   334,    -1,   336,   337,   338,    -1,   340,
     341,   342,   343,   344,   345,    -1,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,    -1,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
      -1,   372,   373,    -1,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
     391,    -1,    -1,   394,   395,   396,   397,   398,   399,   400,
     401,   402,    -1,    -1,   405,   406,   407,   408,    -1,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,    -1,    -1,   427,   428,    -1,   430,
      -1,   432,    -1,   434,   435,   436,   437,   438,    -1,   440,
     441,   442,    -1,    -1,   445,   446,   447,   448,   449,    -1,
     451,   452,   453,   454,   455,   456,   457,   458,    -1,    -1,
     461,   462,   463,    -1,   465,   466,   467,   468,    -1,   470,
     471,   472,   473,   474,   475,   476,   477,    -1,   479,    -1,
     481,   482,   483,   484,   485,   486,   487,    -1,    -1,   490,
      -1,    -1,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,     3,    -1,     5,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   530,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,
      50,    51,    52,    53,    54,    -1,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    -1,    -1,    83,    84,    85,    86,    87,    88,    -1,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    99,
      -1,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,    -1,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,    -1,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,   139,
      -1,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,    -1,   162,    -1,    -1,   165,   166,   167,   168,    -1,
     170,    -1,   172,    -1,    -1,    -1,   176,   177,   178,    -1,
     180,    -1,    -1,   183,    -1,   185,   186,   187,   188,    -1,
     190,   191,   192,   193,   194,   195,   196,    -1,   198,   199,
     200,   201,    -1,   203,   204,   205,   206,   207,   208,   209,
      -1,   211,    -1,   213,   214,   215,   216,   217,   218,   219,
     220,    -1,   222,    -1,   224,    -1,    -1,   227,    -1,   229,
     230,   231,   232,   233,   234,    -1,    -1,   237,    -1,   239,
      -1,    -1,   242,    -1,    -1,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,    -1,   276,   277,   278,   279,
     280,   281,    -1,   283,   284,    -1,   286,    -1,   288,   289,
     290,   291,   292,   293,    -1,   295,   296,    -1,    -1,   299,
     300,   301,    -1,    -1,   304,   305,   306,    -1,   308,   309,
      -1,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,    -1,    -1,    -1,    -1,   328,   329,
     330,    -1,   332,   333,   334,    -1,   336,   337,   338,    -1,
     340,   341,   342,   343,   344,   345,    -1,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,    -1,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,    -1,   372,   373,    -1,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,    -1,    -1,   394,   395,   396,   397,   398,   399,
     400,   401,   402,    -1,    -1,   405,   406,   407,   408,    -1,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,    -1,    -1,   427,   428,    -1,
     430,    -1,   432,    -1,   434,   435,   436,   437,   438,    -1,
     440,   441,   442,    -1,    -1,   445,   446,   447,   448,   449,
      -1,   451,   452,   453,   454,   455,   456,   457,   458,    -1,
      -1,   461,   462,   463,    -1,   465,   466,   467,   468,    -1,
     470,   471,   472,   473,   474,   475,   476,   477,    -1,   479,
      -1,   481,   482,   483,   484,   485,   486,   487,    -1,    -1,
     490,    -1,    -1,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,     3,    -1,     5,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     530,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,
      -1,    50,    51,    52,    53,    54,    -1,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    -1,    -1,    67,    68,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    -1,    -1,    -1,    83,    84,    85,    86,    87,    88,
      -1,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      99,    -1,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,    -1,   118,
      -1,   120,   121,   122,   123,   124,   125,    -1,    -1,   128,
     129,   130,   131,    -1,    -1,   134,   135,   136,   137,   138,
     139,    -1,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,    -1,   162,    -1,    -1,   165,   166,   167,   168,
      -1,   170,    -1,   172,    -1,    -1,    -1,   176,   177,   178,
      -1,   180,    -1,    -1,   183,    -1,   185,   186,   187,   188,
      -1,   190,   191,   192,   193,   194,   195,   196,    -1,   198,
     199,   200,   201,    -1,   203,   204,   205,   206,   207,   208,
     209,    -1,   211,    -1,   213,   214,   215,   216,   217,   218,
     219,   220,    -1,   222,    -1,   224,    -1,    -1,   227,    -1,
     229,   230,   231,   232,   233,   234,    -1,    -1,   237,    -1,
     239,    -1,    -1,   242,    -1,    -1,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,    -1,   276,   277,   278,
     279,   280,   281,    -1,   283,   284,    -1,   286,    -1,   288,
     289,   290,   291,   292,   293,    -1,   295,   296,    -1,    -1,
     299,   300,   301,    -1,    -1,   304,   305,   306,    -1,   308,
     309,    -1,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,    -1,    -1,    -1,    -1,   328,
     329,   330,    -1,   332,   333,   334,    -1,   336,   337,   338,
      -1,   340,   341,   342,   343,   344,   345,    -1,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,    -1,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,    -1,   372,   373,    -1,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,   391,    -1,    -1,   394,   395,   396,   397,   398,
     399,   400,   401,   402,    -1,    -1,   405,   406,   407,   408,
      -1,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,    -1,    -1,   427,   428,
      -1,   430,    -1,   432,    -1,   434,   435,   436,   437,   438,
      -1,   440,   441,   442,    -1,    -1,   445,   446,   447,   448,
     449,    -1,   451,   452,   453,   454,   455,   456,   457,   458,
      -1,    -1,   461,   462,   463,    -1,   465,   466,   467,   468,
      -1,   470,   471,   472,   473,   474,   475,   476,   477,    -1,
     479,    -1,   481,   482,   483,   484,   485,   486,   487,    -1,
      -1,   490,    -1,    -1,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   530,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,
      48,    -1,    50,    51,    52,    53,    54,    -1,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    -1,    -1,    83,    84,    85,    86,    87,
      88,    -1,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,    -1,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,    -1,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,   139,    -1,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,    -1,   162,    -1,    -1,   165,   166,   167,
     168,    -1,   170,    -1,   172,    -1,    -1,    -1,   176,   177,
     178,    -1,   180,    -1,    -1,   183,    -1,   185,   186,   187,
     188,    -1,   190,   191,   192,   193,   194,   195,   196,    -1,
     198,   199,   200,   201,    -1,   203,   204,   205,   206,   207,
     208,   209,    -1,   211,    -1,   213,   214,   215,   216,   217,
     218,   219,   220,    -1,   222,    -1,   224,    -1,    -1,   227,
      -1,   229,   230,   231,   232,   233,   234,    -1,    -1,   237,
      -1,   239,    -1,    -1,   242,    -1,    -1,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,    -1,   276,   277,
     278,   279,   280,   281,    -1,   283,   284,    -1,   286,    -1,
     288,   289,   290,   291,   292,   293,    -1,   295,   296,    -1,
      -1,   299,   300,   301,    -1,    -1,   304,   305,   306,    -1,
     308,   309,    -1,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,    -1,    -1,    -1,    -1,
     328,   329,   330,    -1,   332,   333,   334,    -1,   336,   337,
     338,    -1,   340,   341,   342,   343,   344,   345,    -1,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,    -1,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,    -1,   372,   373,    -1,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,    -1,    -1,   394,   395,   396,   397,
     398,   399,   400,   401,   402,    -1,    -1,   405,   406,   407,
     408,    -1,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,    -1,    -1,   427,
     428,    -1,   430,    -1,   432,    -1,   434,   435,   436,   437,
     438,    -1,   440,   441,   442,    -1,    -1,   445,   446,   447,
     448,   449,    -1,   451,   452,   453,   454,   455,   456,   457,
     458,    -1,    -1,   461,   462,   463,    -1,   465,   466,   467,
     468,    -1,   470,   471,   472,   473,   474,   475,   476,   477,
      -1,   479,    -1,   481,   482,   483,   484,   485,   486,   487,
      -1,    -1,   490,    -1,    -1,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   530,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    -1,    -1,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
      -1,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,    -1,   162,    -1,    -1,   165,   166,
     167,   168,    -1,   170,    -1,   172,    -1,    -1,    -1,   176,
     177,   178,    -1,   180,    -1,    -1,   183,    -1,   185,   186,
     187,   188,    -1,   190,   191,   192,   193,   194,   195,   196,
      -1,   198,   199,   200,   201,    -1,   203,   204,   205,   206,
     207,   208,   209,    -1,   211,    -1,   213,   214,   215,   216,
     217,   218,   219,   220,    -1,   222,    -1,   224,    -1,    -1,
     227,    -1,   229,   230,   231,   232,   233,   234,    -1,    -1,
     237,    -1,   239,    -1,    -1,   242,    -1,    -1,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,    -1,   276,
     277,   278,   279,   280,   281,    -1,   283,   284,    -1,   286,
      -1,   288,   289,   290,   291,   292,   293,    -1,   295,   296,
      -1,    -1,   299,   300,   301,    -1,    -1,   304,   305,   306,
      -1,   308,   309,    -1,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,    -1,    -1,    -1,
      -1,   328,   329,   330,    -1,   332,   333,   334,    -1,   336,
     337,   338,    -1,   340,   341,   342,   343,   344,   345,    -1,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
      -1,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,    -1,   372,   373,    -1,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,   391,    -1,    -1,   394,   395,   396,
     397,   398,   399,   400,   401,   402,    -1,    -1,   405,   406,
     407,   408,    -1,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,    -1,    -1,
     427,   428,    -1,   430,    -1,   432,    -1,   434,   435,   436,
     437,   438,    -1,   440,   441,   442,    -1,    -1,   445,   446,
     447,   448,   449,    -1,   451,   452,   453,   454,   455,   456,
     457,   458,    -1,    -1,   461,   462,   463,    -1,   465,   466,
     467,   468,    -1,   470,   471,   472,   473,   474,   475,   476,
     477,    -1,   479,    -1,   481,   482,   483,   484,   485,   486,
     487,    -1,    -1,   490,    -1,    -1,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   530,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,
      46,    47,    48,    -1,    50,    51,    52,    53,    54,    -1,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    -1,    -1,    83,    84,    85,
      86,    87,    88,    -1,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,    -1,   118,    -1,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,   139,    -1,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,    -1,   162,    -1,    -1,   165,
     166,   167,   168,    -1,   170,    -1,   172,    -1,    -1,    -1,
     176,   177,   178,    -1,   180,    -1,    -1,   183,    -1,   185,
     186,   187,   188,    -1,   190,   191,   192,   193,   194,   195,
     196,    -1,   198,   199,   200,   201,    -1,   203,   204,   205,
     206,   207,   208,   209,    -1,   211,    -1,   213,   214,   215,
     216,   217,   218,   219,   220,    -1,   222,    -1,   224,    -1,
      -1,   227,    -1,   229,   230,   231,   232,   233,   234,    -1,
      -1,   237,    -1,   239,    -1,    -1,   242,    -1,    -1,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,    -1,
     276,   277,   278,   279,   280,   281,    -1,   283,   284,    -1,
     286,    -1,   288,   289,   290,   291,   292,   293,    -1,   295,
     296,    -1,    -1,   299,   300,   301,    -1,    -1,   304,   305,
     306,    -1,   308,   309,    -1,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,    -1,    -1,
      -1,    -1,   328,   329,   330,    -1,   332,   333,   334,    -1,
     336,   337,   338,    -1,   340,   341,   342,   343,   344,   345,
      -1,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,    -1,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,    -1,   372,   373,    -1,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,    -1,    -1,   394,   395,
     396,   397,   398,   399,   400,   401,   402,    -1,    -1,   405,
     406,   407,   408,    -1,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,    -1,
      -1,   427,   428,    -1,   430,    -1,   432,    -1,   434,   435,
     436,   437,   438,    -1,   440,   441,   442,    -1,    -1,   445,
     446,   447,   448,   449,    -1,   451,   452,   453,   454,   455,
     456,   457,   458,    -1,    -1,   461,   462,   463,    -1,   465,
     466,   467,   468,    -1,   470,   471,   472,   473,   474,   475,
     476,   477,    -1,   479,    -1,   481,   482,   483,   484,   485,
     486,   487,    -1,    -1,   490,    -1,    -1,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,    -1,     3,
       4,     5,    -1,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    15,    16,    -1,   530,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    -1,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
     144,   145,   146,   147,   148,   149,   150,   151,   152,    -1,
     154,   155,   156,   157,   158,   159,    -1,   161,   162,   163,
     164,   165,   166,   167,   168,   169,   170,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,    -1,    -1,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,   205,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,    -1,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,    -1,   307,   308,   309,   310,    -1,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,    -1,   331,   332,   333,
      -1,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
      -1,   425,   426,   427,   428,   429,   430,   431,   432,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,    -1,   448,    -1,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,    -1,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   510,   511,   512,   513,
      -1,     3,    -1,   517,   518,   519,     8,   521,   522,   523,
     524,   525,   526,    15,    16,    -1,    -1,    19,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    44,    -1,    46,    47,    48,    -1,    50,    51,
      52,    53,    54,    -1,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    -1,
      -1,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,    -1,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,   139,    -1,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,    -1,
     162,    -1,    -1,   165,   166,   167,   168,    -1,   170,    -1,
     172,    -1,    -1,    -1,   176,   177,   178,    -1,   180,    -1,
      -1,   183,    -1,   185,   186,   187,   188,    -1,   190,   191,
     192,   193,   194,   195,   196,    -1,   198,   199,   200,   201,
      -1,   203,   204,   205,   206,   207,   208,   209,    -1,   211,
      -1,   213,   214,   215,   216,   217,   218,   219,   220,    -1,
     222,    -1,   224,    -1,    -1,   227,    -1,   229,   230,   231,
     232,   233,   234,    -1,    -1,   237,    -1,   239,    -1,    -1,
     242,    -1,    -1,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,    -1,   276,   277,   278,   279,   280,   281,
      -1,   283,   284,    -1,   286,    -1,   288,   289,   290,   291,
     292,   293,    -1,   295,   296,    -1,    -1,   299,   300,   301,
      -1,    -1,   304,   305,   306,    -1,   308,   309,    -1,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,    -1,    -1,    -1,    -1,   328,   329,   330,    -1,
     332,   333,   334,    -1,   336,   337,   338,    -1,   340,   341,
     342,   343,   344,   345,    -1,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,    -1,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,    -1,
     372,   373,    -1,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
      -1,    -1,   394,   395,   396,   397,   398,   399,   400,   401,
     402,    -1,    -1,   405,   406,   407,   408,    -1,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,    -1,    -1,   427,   428,    -1,   430,    -1,
     432,    -1,   434,   435,   436,   437,   438,    -1,   440,   441,
     442,    -1,    -1,   445,   446,   447,   448,   449,    -1,   451,
     452,   453,   454,   455,   456,   457,   458,    -1,    -1,   461,
     462,   463,    -1,   465,   466,   467,   468,    -1,   470,   471,
     472,   473,   474,   475,   476,   477,    -1,   479,    -1,   481,
     482,   483,   484,   485,   486,   487,    -1,    -1,   490,    -1,
      -1,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,    -1,    -1,    -1,   517,   518,   519,    -1,   521,
     522,   523,   524,   525,   526,     8,    -1,    -1,    11,    -1,
      -1,    -1,    15,    16,    17,    18,    19,    20,    21,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,
      11,    -1,    -1,    36,    15,    16,    17,    18,    19,    20,
      21,    -1,    -1,    46,    -1,    -1,    -1,    -1,    -1,    -1,
      53,    -1,    -1,    -1,    -1,    36,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    46,    -1,    -1,    -1,    -1,
      -1,    -1,    53,    -1,    -1,     8,    -1,    80,    11,    -1,
      -1,    -1,    15,    16,    17,    18,    19,    20,    21,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,    80,
      11,    -1,    -1,    36,    15,    16,    17,    18,    19,    20,
      21,    -1,    -1,    46,    -1,    -1,    -1,    -1,    -1,    -1,
      53,    -1,    -1,    -1,    -1,    36,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    46,    -1,    -1,    -1,    -1,
      -1,    -1,    53,    -1,    -1,    -1,    -1,    80,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,
      11,    -1,    -1,    -1,    15,    16,    -1,    -1,    -1,    80,
      -1,    -1,    -1,    -1,    -1,    -1,   179,    -1,    -1,     8,
      -1,    -1,    11,    -1,    -1,    -1,    15,    16,    17,    18,
      19,    20,    21,    -1,   197,    46,    -1,    -1,   179,   202,
      -1,    -1,    53,    -1,    -1,    -1,    -1,    36,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   197,    46,    -1,    -1,
      -1,   202,   225,   226,    53,    -1,    -1,    -1,    -1,    80,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   240,    -1,    -1,
      -1,    -1,    -1,    -1,   225,   226,   179,    -1,    -1,    -1,
      -1,    80,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   240,
      -1,    -1,    -1,    -1,   197,    -1,    -1,    -1,   179,   202,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   282,
      -1,    -1,   285,    -1,    -1,    -1,   197,    -1,    -1,    -1,
      -1,   202,   225,   226,    -1,   146,   299,    -1,    -1,   302,
      -1,   282,    -1,    -1,   285,    -1,    -1,   240,    -1,    -1,
      -1,    -1,    -1,    -1,   225,   226,    -1,    -1,   299,    -1,
      -1,   302,    -1,    -1,    -1,    -1,    -1,    -1,   179,   240,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   197,    -1,    -1,   282,
     179,   202,   285,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   299,    -1,   197,   302,
      -1,   282,    -1,   202,   285,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   299,   240,
      -1,   302,    -1,    -1,    -1,    -1,   225,   226,    -1,    -1,
      -1,   404,    -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,
      11,   240,    -1,    -1,    15,    16,    17,    18,    19,    20,
      21,    -1,    -1,   404,    -1,    -1,    -1,    -1,    -1,     8,
      -1,    -1,    11,    -1,    -1,    36,    15,    16,    17,    18,
      19,    20,    21,    -1,    -1,    46,    -1,    -1,   299,    -1,
      -1,    -1,    53,   282,    -1,    -1,   285,    36,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    46,    -1,    -1,
     299,   404,    -1,   302,    53,    -1,    -1,    -1,    -1,    80,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   404,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    80,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   514,    -1,    -1,   517,   518,   519,    -1,   521,   522,
     523,   524,   525,   526,    -1,    -1,    -1,    -1,   531,    -1,
      -1,    -1,    -1,   514,    -1,    -1,   517,   518,   519,    -1,
     521,   522,   523,   524,   525,   526,    -1,    -1,    -1,    -1,
     531,    -1,    -1,   404,    -1,    -1,    -1,    -1,    -1,     8,
      -1,    -1,    11,    -1,    -1,    -1,    15,    16,    17,    18,
      19,    20,    21,    -1,    -1,   404,    -1,    -1,   179,    -1,
      -1,   514,    -1,    -1,   517,   518,   519,    36,   521,   522,
     523,   524,   525,   526,    -1,    -1,   197,    46,   531,    -1,
     179,   202,    -1,   514,    53,    -1,   517,   518,   519,    -1,
     521,   522,   523,   524,   525,   526,    -1,    -1,   197,    -1,
     531,    -1,    -1,   202,   225,   226,    -1,    -1,    -1,    -1,
      -1,    80,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   240,
      -1,    -1,    -1,    -1,    -1,    -1,   225,   226,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   240,    -1,   514,    -1,    -1,    -1,    -1,    -1,    -1,
     521,   522,   523,   524,   525,   526,    -1,    -1,    -1,    -1,
      -1,   282,    -1,    -1,   285,   514,    -1,    -1,   517,   518,
     519,    -1,   521,   522,   523,   524,   525,   526,   299,    -1,
      -1,   302,   531,   282,    -1,    -1,   285,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     299,    -1,    -1,   302,    -1,    -1,    -1,    -1,    -1,    -1,
     179,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   197,    -1,
      -1,    -1,    -1,   202,    -1,    -1,    -1,    -1,    -1,    -1,
       8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,    17,
      18,    19,    20,    21,    -1,    -1,   225,   226,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,
      -1,   240,    -1,    -1,    -1,    -1,    -1,    -1,    46,    -1,
      -1,    -1,    -1,   404,    -1,    53,    -1,    -1,    -1,     8,
      -1,    -1,    11,    -1,    -1,    -1,    15,    16,    17,    18,
      19,    20,    21,    -1,    -1,   404,    -1,    -1,    -1,    -1,
      -1,     8,    80,   282,    11,    -1,   285,    36,    15,    16,
      17,    18,    19,    20,    21,    -1,    -1,    46,    -1,    -1,
     299,    -1,    -1,   302,    53,    -1,    -1,    -1,    -1,    36,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    46,
      -1,    -1,    -1,    -1,    -1,    -1,    53,    -1,    -1,    -1,
      -1,    80,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   514,    -1,    -1,   517,   518,   519,    -1,
     521,   522,   523,   524,   525,   526,    -1,    -1,    -1,    -1,
     531,   179,    -1,    -1,    -1,   514,    -1,    -1,   517,   518,
     519,    -1,   521,   522,   523,   524,   525,   526,    -1,   197,
      -1,    -1,   531,    -1,   202,   404,     8,    -1,    -1,    11,
      -1,    -1,    -1,    15,    16,    17,    18,    19,    20,    21,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   225,   226,    -1,
     179,    -1,    -1,    -1,    36,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   240,    -1,    46,    -1,    -1,    -1,   197,    -1,
      -1,    53,   179,   202,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     197,    -1,    -1,    -1,    -1,   202,   225,   226,    80,    -1,
      -1,    -1,    -1,    -1,   282,    -1,    -1,   285,    -1,    -1,
      -1,   240,    -1,    -1,    -1,    -1,    -1,    -1,   225,   226,
      -1,   299,    -1,    -1,   302,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   240,    -1,   514,    -1,    -1,   517,   518,
     519,    -1,   521,   522,   523,   524,   525,   526,    -1,    -1,
      -1,    -1,   531,   282,    -1,    -1,   285,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     299,    -1,    -1,   302,    -1,   282,    -1,    -1,   285,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   299,    -1,    -1,   302,    -1,   179,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   197,    -1,    -1,    -1,    -1,
     202,    -1,    -1,    -1,    -1,    -1,   404,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     8,    -1,    -1,    11,    -1,    -1,
      -1,    15,    16,   225,   226,    19,    20,    21,    -1,    -1,
      -1,    -1,    -1,    -1,     8,    -1,    -1,    11,   240,    -1,
      -1,    15,    16,    17,    18,    19,    20,    21,    -1,    -1,
      -1,    -1,    46,    -1,    -1,   404,    -1,    -1,    -1,    53,
      -1,    -1,    36,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    46,    -1,    -1,    -1,    -1,   404,    -1,    53,
     282,    -1,    -1,   285,    -1,    -1,    80,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   299,    -1,    -1,
     302,    -1,    -1,    -1,    -1,    -1,    80,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   514,    -1,    -1,   517,
     518,   519,    -1,   521,   522,   523,   524,   525,   526,    -1,
      -1,    -1,    -1,   531,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     8,    -1,    -1,    11,    -1,    -1,    -1,
      15,    16,    17,    18,    19,    20,    21,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   514,    -1,    -1,   517,   518,
     519,    36,   521,   522,   523,   524,   525,   526,    -1,    -1,
      -1,    46,   531,    -1,    -1,   179,    -1,   514,    53,    -1,
     517,   518,   519,    -1,   521,   522,   523,   524,   525,   526,
      -1,    -1,   404,   197,   531,   179,    -1,    -1,   202,     8,
      -1,    -1,    11,    -1,    -1,    80,    15,    16,    17,    18,
      19,    20,    21,   197,    -1,    -1,    -1,    -1,   202,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   240,    46,    -1,    -1,
      -1,   225,   226,    -1,    53,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   240,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    80,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   299,    -1,    -1,   282,    -1,
      -1,   285,   514,    -1,   179,   517,   518,   519,    -1,   521,
     522,   523,   524,   525,   526,   299,    -1,   529,   302,    -1,
      -1,    -1,   197,    -1,    -1,    -1,    -1,   202,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     225,   226,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   240,    -1,    -1,    -1,    -1,
     179,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   197,    -1,
      -1,    -1,    -1,   202,    -1,    -1,    -1,    -1,    -1,    -1,
     404,    -1,    -1,    -1,    -1,    -1,    -1,   282,    -1,    -1,
     285,    -1,    -1,    -1,    -1,    -1,   225,   226,    -1,    -1,
     404,    -1,    -1,    -1,   299,    -1,    -1,   302,    -1,    -1,
      -1,   240,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   282,    -1,    -1,   285,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     299,    -1,    -1,   302,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     514,    -1,    -1,   517,   518,   519,    -1,   521,   522,   523,
     524,   525,   526,    -1,    -1,    -1,    -1,    -1,    -1,   404,
     514,    -1,    -1,   517,   518,   519,    -1,   521,   522,   523,
     524,   525,   526,    -1,    -1,   529,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   404,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   514,
      -1,    -1,   517,   518,   519,    -1,   521,   522,   523,   524,
     525,   526,    -1,    -1,   529,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     3,    -1,    -1,   514,    -1,    -1,   517,   518,
     519,    -1,   521,   522,   523,   524,   525,   526,    -1,    -1,
     529,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
     131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
     141,   142,   143,   144,   145,   146,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,   164,   165,   166,   167,   168,   169,   170,
     171,   172,   173,   174,   175,   176,   177,   178,   179,   180,
     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   204,   205,   206,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
     451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   523,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,
      50,    51,    52,    53,    54,    -1,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    -1,    -1,    83,    84,    85,    86,    87,    88,    -1,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    99,
      -1,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,    -1,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,    -1,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,   139,
      -1,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,    -1,   162,    -1,    -1,   165,   166,   167,   168,    -1,
     170,    -1,   172,    -1,    -1,    -1,   176,   177,   178,    -1,
     180,    -1,    -1,   183,    -1,   185,   186,   187,   188,    -1,
     190,   191,   192,   193,   194,   195,   196,    -1,   198,   199,
     200,   201,    -1,   203,   204,   205,   206,   207,   208,   209,
      -1,   211,    -1,   213,   214,   215,   216,   217,   218,   219,
     220,    -1,   222,    -1,   224,    -1,    -1,   227,    -1,   229,
     230,   231,   232,   233,   234,    -1,    -1,   237,    -1,   239,
      -1,    -1,   242,    -1,    -1,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,    -1,   276,   277,   278,   279,
     280,   281,    -1,   283,   284,    -1,   286,    -1,   288,   289,
     290,   291,   292,   293,    -1,   295,   296,    -1,    -1,   299,
     300,   301,    -1,    -1,   304,   305,   306,    -1,   308,   309,
      -1,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,    -1,    -1,    -1,    -1,   328,   329,
     330,    -1,   332,   333,   334,    -1,   336,   337,   338,    -1,
     340,   341,   342,   343,   344,   345,    -1,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,    -1,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,    -1,   372,   373,    -1,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,    -1,    -1,   394,   395,   396,   397,   398,   399,
     400,   401,   402,    -1,    -1,   405,   406,   407,   408,    -1,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,    -1,    -1,   427,   428,    -1,
     430,    -1,   432,    -1,   434,   435,   436,   437,   438,    -1,
     440,   441,   442,    -1,    -1,   445,   446,   447,   448,   449,
      -1,   451,   452,   453,   454,   455,   456,   457,   458,    -1,
      -1,   461,   462,   463,    -1,   465,   466,   467,   468,    -1,
     470,   471,   472,   473,   474,   475,   476,   477,    -1,   479,
      -1,   481,   482,   483,   484,   485,   486,   487,    -1,    -1,
     490,    -1,    -1,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   523,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,
      -1,    50,    51,    52,    53,    54,    -1,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    -1,    -1,    67,    68,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    -1,    -1,    -1,    83,    84,    85,    86,    87,    88,
      -1,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      99,    -1,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,    -1,   118,
      -1,   120,   121,   122,   123,   124,   125,    -1,    -1,   128,
     129,   130,   131,    -1,    -1,   134,   135,   136,   137,   138,
     139,    -1,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,    -1,   162,    -1,    -1,   165,   166,   167,   168,
      -1,   170,    -1,   172,    -1,    -1,    -1,   176,   177,   178,
      -1,   180,    -1,    -1,   183,    -1,   185,   186,   187,   188,
      -1,   190,   191,   192,   193,   194,   195,   196,    -1,   198,
     199,   200,   201,    -1,   203,   204,   205,   206,   207,   208,
     209,    -1,   211,    -1,   213,   214,   215,   216,   217,   218,
     219,   220,    -1,   222,    -1,   224,    -1,    -1,   227,    -1,
     229,   230,   231,   232,   233,   234,    -1,    -1,   237,    -1,
     239,    -1,    -1,   242,    -1,    -1,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,    -1,   276,   277,   278,
     279,   280,   281,    -1,   283,   284,    -1,   286,    -1,   288,
     289,   290,   291,   292,   293,    -1,   295,   296,    -1,    -1,
     299,   300,   301,    -1,    -1,   304,   305,   306,    -1,   308,
     309,    -1,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,    -1,    -1,    -1,    -1,   328,
     329,   330,    -1,   332,   333,   334,    -1,   336,   337,   338,
      -1,   340,   341,   342,   343,   344,   345,    -1,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,    -1,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,    -1,   372,   373,    -1,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,   391,    -1,    -1,   394,   395,   396,   397,   398,
     399,   400,   401,   402,    -1,    -1,   405,   406,   407,   408,
      -1,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,    -1,    -1,   427,   428,
      -1,   430,    -1,   432,    -1,   434,   435,   436,   437,   438,
      -1,   440,   441,   442,    -1,    -1,   445,   446,   447,   448,
     449,    -1,   451,   452,   453,   454,   455,   456,   457,   458,
      -1,    -1,   461,   462,   463,    -1,   465,   466,   467,   468,
      -1,   470,   471,   472,   473,   474,   475,   476,   477,    -1,
     479,    -1,   481,   482,   483,   484,   485,   486,   487,    -1,
      -1,   490,    -1,    -1,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,     3,     4,     5,    -1,    -1,
      -1,     9,    -1,    -1,   523,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    37,
      -1,    -1,    -1,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    81,    -1,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,    -1,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,    -1,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,   139,    -1,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,    -1,    -1,   165,   166,   167,
     168,    -1,   170,    -1,   172,   173,    -1,   175,   176,   177,
     178,   179,   180,    -1,    -1,   183,    -1,   185,   186,   187,
     188,    -1,   190,   191,   192,   193,   194,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,   204,   205,   206,   207,
     208,   209,    -1,   211,   212,   213,   214,   215,   216,   217,
     218,   219,   220,    -1,   222,    -1,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,    -1,    -1,   237,
     238,   239,   240,    -1,   242,    -1,    -1,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,    -1,   283,   284,   285,   286,    -1,
     288,   289,   290,   291,   292,   293,    -1,   295,   296,   297,
      -1,   299,   300,   301,    -1,    -1,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,    -1,    -1,    -1,    -1,
     328,   329,   330,   331,   332,   333,   334,    -1,   336,   337,
     338,    -1,   340,   341,   342,   343,   344,   345,    -1,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,    -1,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,    -1,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,    -1,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,    -1,   404,   405,   406,   407,
     408,    -1,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,    -1,    -1,   427,
     428,    -1,   430,   431,   432,    -1,   434,   435,   436,   437,
     438,    -1,   440,   441,   442,    -1,    -1,   445,   446,   447,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,    -1,    -1,   461,   462,   463,    -1,   465,   466,   467,
     468,    -1,   470,   471,   472,   473,   474,   475,   476,   477,
      -1,   479,   480,   481,   482,   483,   484,   485,   486,   487,
      -1,    -1,   490,    -1,    -1,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,    -1,    -1,     8,    -1,
      -1,    11,    -1,   521,   522,    15,    16,    17,    18,    19,
      20,    21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,    -1,    -1,
      -1,    41,    -1,    -1,    -1,    -1,    46,     8,    -1,    -1,
      11,    -1,    -1,    53,    15,    16,    17,    18,    19,    20,
      21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    36,    -1,    -1,    -1,    -1,
      80,    -1,    -1,    -1,    -1,    46,     8,    -1,    -1,    11,
      -1,    -1,    53,    15,    16,    17,    18,    19,    20,    21,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    36,    -1,    -1,    -1,    -1,    80,
      -1,    -1,    -1,    -1,    46,    -1,   126,    -1,    -1,    -1,
      -1,    53,    -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,
      -1,    11,    -1,    -1,    -1,    15,    16,    17,    18,    19,
      20,    21,    -1,    -1,    -1,    -1,    -1,    -1,    80,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,    -1,    -1,
      40,    -1,    -1,    -1,    -1,    -1,    46,     8,    -1,   179,
      11,    -1,    -1,    53,    15,    16,    17,    18,    19,    20,
      21,    -1,    -1,    -1,    -1,    -1,    -1,   197,    -1,    -1,
      -1,    -1,   202,    -1,    -1,    36,    -1,    -1,   169,    -1,
      80,    -1,    -1,   174,    -1,    46,    -1,    -1,   179,    -1,
      -1,    -1,    53,    -1,    -1,   225,   226,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   197,    -1,    -1,    -1,
     240,   202,    -1,    -1,    -1,    -1,   168,    -1,    -1,    80,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   179,    -1,    -1,
      -1,    -1,    -1,     8,   225,   226,    11,    -1,    -1,    -1,
      15,    16,    -1,    -1,    -1,   197,    -1,    -1,    -1,   240,
     202,    -1,   282,    -1,    -1,   285,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   299,
      -1,    46,   302,   225,   226,    -1,    -1,    -1,    53,   179,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   240,    -1,
      -1,   282,    -1,    -1,   285,    -1,    -1,   197,    -1,    -1,
      -1,    -1,   202,    -1,    -1,    80,    -1,    -1,   299,    -1,
      -1,   302,    -1,    -1,    -1,    -1,    -1,    -1,   179,    -1,
      -1,    -1,    -1,    -1,    -1,   225,   226,    -1,    -1,    -1,
     282,    -1,    -1,   285,    -1,    -1,   197,    -1,    -1,    -1,
     240,   202,    -1,    -1,    -1,    -1,    -1,   299,    -1,    -1,
     302,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   225,   226,    -1,    -1,    -1,    -1,
      -1,   146,    -1,    -1,   404,    -1,    -1,    -1,    -1,   240,
      -1,   333,   282,    -1,    -1,   285,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   299,
      -1,    -1,   302,    -1,   179,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   404,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   282,   197,    -1,   285,    -1,    -1,   202,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   299,   469,
      -1,   302,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   404,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   240,   327,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   514,    -1,    -1,   517,   518,   519,
      -1,   521,   522,   523,   524,   525,   526,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   404,    -1,    -1,    -1,     8,    -1,
      -1,    11,    -1,    -1,    -1,    15,    16,    17,    18,    19,
      20,    21,    -1,   514,   299,    -1,   517,   518,   519,    -1,
     521,   522,   523,   524,   525,   526,    36,    -1,    -1,    -1,
      40,    -1,    -1,   404,    -1,    -1,    46,    -1,     8,    -1,
      -1,    11,    -1,    53,    -1,    15,    16,    17,    18,    19,
      20,    21,   514,    -1,    -1,   517,   518,   519,    -1,   521,
     522,   523,   524,   525,   526,    -1,    36,    -1,    -1,    -1,
      80,    -1,    -1,    -1,    -1,    -1,    46,    -1,    -1,    -1,
      -1,    -1,    -1,    53,    -1,    -1,    -1,    -1,    -1,     8,
      -1,    -1,    11,    -1,    -1,    -1,    15,    16,    17,    18,
      19,    20,    21,    -1,   514,    -1,    -1,   517,   518,   519,
      80,   521,   522,   523,   524,   525,   526,    36,    -1,   404,
      -1,    40,    -1,    -1,    -1,    -1,    -1,    46,    -1,     8,
      -1,    -1,    11,    -1,    53,    -1,    15,    16,    17,    18,
      19,    20,    21,   514,    -1,    -1,   517,   518,   519,    -1,
     521,   522,   523,   524,   525,   526,    -1,    36,    -1,    -1,
      -1,    80,    -1,    -1,    -1,    -1,    -1,    46,    -1,   179,
      -1,    -1,    -1,    -1,    53,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   197,    -1,    -1,
      -1,    -1,   202,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    80,    -1,    -1,   174,    -1,    -1,    -1,    -1,   179,
      -1,    -1,    -1,    -1,    -1,   225,   226,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   197,    -1,   514,
     240,    -1,   202,    -1,    -1,    -1,   521,   522,   523,   524,
     525,   526,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   225,   226,    -1,    -1,    -1,
     179,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     240,    -1,   282,    -1,    -1,   285,    -1,    -1,   197,    -1,
      -1,    -1,    -1,   202,    -1,    -1,    -1,    -1,    -1,   299,
     169,    -1,   302,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     179,    -1,    -1,    -1,    -1,    -1,   225,   226,    -1,    -1,
      -1,    -1,   282,    -1,    -1,   285,    -1,    -1,   197,    -1,
      -1,   240,    -1,   202,    -1,    -1,    -1,    -1,    -1,   299,
      -1,    -1,   302,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   225,   226,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   240,    -1,   282,    -1,    -1,   285,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,
     299,    -1,    11,   302,    -1,    -1,    15,    16,    17,    18,
      19,    20,    21,    -1,   404,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   282,    -1,    -1,   285,    36,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    46,    -1,     8,
     299,    -1,    11,   302,    53,    -1,    15,    16,    17,    18,
      19,    20,    21,    -1,   404,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,    -1,
      -1,    80,    -1,    -1,    -1,    -1,    -1,    46,    -1,    -1,
       8,    -1,    -1,    11,    53,    -1,    -1,    15,    16,    17,
      18,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   404,    -1,    -1,    36,    -1,
      -1,    80,    40,    -1,    -1,    -1,    -1,    -1,    46,    -1,
      -1,    -1,    -1,    -1,   514,    53,    -1,   517,   518,   519,
      -1,   521,   522,   523,   524,   525,   526,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   404,    -1,    -1,    -1,    -1,
      -1,    -1,    80,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   514,    -1,    -1,   517,   518,   519,
     179,   521,   522,   523,   524,   525,   526,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   197,    -1,
      -1,    -1,    -1,   202,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     179,    -1,    -1,    -1,    -1,   514,   225,   226,   517,   518,
     519,    -1,   521,   522,   523,   524,   525,   526,   197,    -1,
      -1,   240,    -1,   202,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   179,    -1,    -1,    -1,   514,   225,   226,   517,   518,
     519,    -1,   521,   522,   523,   524,   525,   526,    -1,   197,
      -1,   240,    -1,   282,   202,    -1,   285,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     299,    -1,    -1,   302,    -1,    -1,    -1,   225,   226,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   240,   282,    -1,    -1,   285,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     299,    -1,    -1,   302,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     8,    -1,   282,    11,    -1,   285,    -1,    15,
      16,    17,    18,    19,    20,    21,    -1,    -1,    -1,    -1,
      -1,   299,    -1,    -1,   302,    -1,    -1,    -1,    -1,    -1,
      36,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      46,     8,    -1,    -1,    11,   404,    -1,    53,    15,    16,
      17,    18,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,
       8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,    36,
      -1,    19,    20,    21,    80,    -1,    -1,    -1,    -1,    46,
     439,    -1,    -1,    -1,    -1,   404,    53,    -1,    36,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,    46,    11,
      -1,    -1,    -1,    15,    16,    53,    -1,    19,    20,    21,
      -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    36,    -1,   404,    -1,    -1,    -1,
      -1,    -1,    80,    -1,    46,    -1,    -1,    -1,    -1,    -1,
      -1,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   514,    -1,    -1,   517,   518,
     519,    -1,   521,   522,   523,   524,   525,   526,    80,    -1,
      -1,    -1,    -1,   179,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   197,    -1,    -1,    -1,   514,   202,    -1,   517,   518,
     519,    -1,   521,   522,   523,   524,   525,   526,    -1,    -1,
      -1,    -1,   179,    -1,    -1,    -1,    -1,    -1,    -1,   225,
     226,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     197,   179,    -1,    -1,   240,   202,   514,    -1,    -1,   517,
     518,   519,    -1,   521,   522,   523,   524,   525,   526,   197,
      -1,    -1,    -1,    -1,   202,    -1,    -1,    -1,   225,   226,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   179,    -1,    -1,
      -1,    -1,    -1,   240,    -1,    -1,   282,   225,   226,   285,
      -1,    -1,    -1,    -1,    -1,   197,    -1,    -1,    -1,    -1,
     202,    -1,   240,   299,    -1,    -1,   302,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   225,   226,   282,    -1,    -1,   285,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   240,    -1,
      -1,    -1,   299,    -1,   282,   302,    -1,   285,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   299,    -1,    -1,   302,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     282,    -1,    -1,   285,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   299,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   404,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   404,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   404,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   404,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   514,    -1,
      -1,   517,   518,   519,    -1,   521,   522,   523,   524,   525,
     526,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   514,    -1,    -1,
     517,   518,   519,    -1,   521,   522,   523,   524,   525,   526,
      -1,    -1,    -1,    -1,    -1,    -1,   514,    -1,    -1,   517,
     518,   519,    -1,   521,   522,   523,   524,   525,   526,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     3,    -1,     5,    -1,
      -1,    -1,   514,    -1,    -1,   517,   518,   519,    -1,   521,
     522,   523,   524,   525,   526,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
     127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
     137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
     147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,   164,   165,   166,
     167,   168,   169,   170,   171,   172,   173,   174,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,   199,   200,   201,   202,   203,   204,   205,   206,
     207,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
     126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
     166,   167,   168,   169,   170,   171,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,   205,
     206,   207,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
     456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,   166,   167,   168,   169,   170,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,   205,   206,   207,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
     123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
     133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
     143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,   164,   165,   166,   167,   168,   169,   170,   171,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,   196,   197,   198,   199,   200,   201,   202,
     203,   204,   205,   206,   207,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   432,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    37,    -1,    -1,    -1,    -1,
      42,    43,    44,    -1,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    81,
      -1,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,    -1,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,   139,    -1,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,    -1,    -1,   165,   166,   167,   168,    -1,   170,    -1,
     172,   173,    -1,   175,   176,   177,   178,   179,   180,    -1,
      -1,   183,    -1,   185,   186,   187,   188,    -1,   190,   191,
     192,   193,   194,   195,   196,   197,   198,   199,   200,   201,
      -1,   203,   204,   205,   206,   207,   208,   209,    -1,   211,
     212,   213,   214,   215,   216,   217,   218,   219,   220,    -1,
     222,    -1,   224,   225,   226,   227,   228,   229,   230,   231,
     232,   233,   234,    -1,    -1,   237,   238,   239,   240,    -1,
     242,    -1,    -1,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
      -1,   283,   284,   285,   286,    -1,   288,   289,   290,   291,
     292,   293,    -1,   295,   296,   297,    -1,   299,   300,   301,
      -1,    -1,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,    -1,    -1,    -1,    -1,   328,   329,   330,   331,
     332,   333,   334,    -1,   336,   337,   338,    -1,   340,   341,
     342,   343,   344,   345,    -1,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,    -1,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,    -1,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
      -1,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,    -1,   404,   405,   406,   407,   408,    -1,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,    -1,    -1,   427,   428,    -1,   430,   431,
     432,    -1,   434,   435,   436,   437,   438,    -1,   440,   441,
     442,    -1,    -1,   445,   446,   447,   448,   449,   450,   451,
     452,   453,   454,   455,   456,   457,   458,    -1,    -1,   461,
     462,   463,    -1,   465,   466,   467,   468,    -1,   470,   471,
     472,   473,   474,   475,   476,   477,    -1,   479,   480,   481,
     482,   483,   484,   485,   486,   487,    -1,    -1,   490,    -1,
      -1,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    34,    35,    -1,    37,    -1,    -1,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,    -1,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,   139,    -1,
     141,   142,   143,    -1,   145,   146,   147,    -1,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
      -1,   162,    -1,    -1,   165,   166,   167,   168,    -1,   170,
      -1,   172,   173,    -1,   175,   176,   177,   178,   179,   180,
      -1,    -1,   183,    -1,   185,   186,   187,   188,    -1,   190,
     191,   192,   193,   194,   195,   196,   197,   198,   199,   200,
     201,    -1,   203,   204,   205,   206,   207,   208,   209,    -1,
     211,   212,   213,   214,   215,   216,   217,   218,   219,   220,
      -1,   222,    -1,   224,   225,   226,   227,   228,   229,   230,
     231,   232,   233,   234,    -1,    -1,   237,   238,   239,   240,
      -1,   242,    -1,    -1,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,    -1,   283,   284,   285,   286,    -1,   288,   289,   290,
     291,   292,   293,    -1,   295,   296,    -1,    -1,   299,   300,
     301,    -1,    -1,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,    -1,    -1,    -1,    -1,   328,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,    -1,   340,
     341,   342,   343,   344,   345,    -1,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,    -1,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
      -1,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
     391,    -1,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,    -1,   404,   405,   406,   407,   408,    -1,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,    -1,    -1,   427,   428,    -1,   430,
     431,   432,    -1,   434,   435,   436,   437,   438,    -1,   440,
     441,   442,    -1,    -1,   445,   446,   447,   448,   449,    -1,
     451,   452,   453,   454,   455,   456,   457,   458,    -1,    -1,
     461,   462,   463,    -1,   465,   466,   467,   468,    -1,   470,
     471,   472,   473,   474,   475,   476,   477,    -1,   479,   480,
     481,   482,   483,   484,   485,   486,   487,    -1,    -1,   490,
      -1,    -1,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    42,    43,    44,    -1,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    -1,    66,    67,    68,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    81,    -1,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    99,
      -1,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,    -1,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,    -1,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,   139,
      -1,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,    -1,   162,    -1,    -1,   165,   166,   167,   168,    -1,
     170,    -1,   172,   173,    -1,   175,   176,   177,   178,   179,
     180,    -1,    -1,   183,    -1,   185,   186,   187,   188,    -1,
     190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
     200,   201,    -1,   203,   204,   205,   206,   207,   208,   209,
      -1,   211,   212,   213,   214,   215,   216,   217,   218,   219,
     220,    -1,   222,    -1,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,    -1,    -1,   237,   238,   239,
     240,    -1,   242,    -1,    -1,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,    -1,   283,   284,   285,   286,    -1,   288,   289,
     290,   291,   292,   293,    -1,   295,   296,    -1,    -1,   299,
     300,   301,    -1,    -1,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,    -1,    -1,    -1,    -1,   328,   329,
     330,   331,   332,   333,   334,    -1,   336,   337,   338,    -1,
     340,   341,   342,   343,   344,   345,    -1,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,    -1,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,    -1,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,    -1,    -1,   394,   395,   396,   397,   398,   399,
     400,   401,   402,    -1,   404,   405,   406,   407,   408,    -1,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,    -1,    -1,   427,   428,    -1,
     430,   431,   432,    -1,   434,   435,   436,   437,   438,    -1,
     440,   441,   442,    -1,    -1,   445,   446,   447,   448,   449,
      -1,   451,   452,   453,   454,   455,   456,   457,   458,    -1,
      -1,   461,   462,   463,    -1,   465,   466,   467,   468,    -1,
     470,   471,   472,   473,   474,   475,   476,   477,    -1,   479,
     480,   481,   482,   483,   484,   485,   486,   487,    -1,    -1,
     490,    -1,    -1,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    42,    43,    44,    -1,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    -1,    -1,    67,    68,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    -1,    81,    -1,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      99,    -1,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,    -1,   118,
      -1,   120,   121,   122,   123,   124,   125,    -1,    -1,   128,
     129,   130,   131,    -1,    -1,   134,   135,   136,   137,   138,
     139,    -1,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,    -1,   162,    -1,    -1,   165,   166,   167,   168,
      -1,   170,    -1,   172,   173,    -1,   175,   176,   177,   178,
     179,   180,    -1,    -1,   183,    -1,   185,   186,   187,   188,
      -1,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,   200,   201,    -1,   203,   204,   205,   206,   207,   208,
     209,    -1,   211,   212,   213,   214,   215,   216,   217,   218,
     219,   220,    -1,   222,    -1,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,    -1,    -1,   237,   238,
     239,   240,    -1,   242,    -1,    -1,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,    -1,   283,   284,   285,   286,    -1,   288,
     289,   290,   291,   292,   293,    -1,   295,   296,    -1,    -1,
     299,   300,   301,    -1,    -1,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,    -1,    -1,    -1,    -1,   328,
     329,   330,   331,   332,   333,   334,    -1,   336,   337,   338,
      -1,   340,   341,   342,   343,   344,   345,    -1,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,    -1,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,    -1,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,   391,    -1,    -1,   394,   395,   396,   397,   398,
     399,   400,   401,   402,    -1,   404,   405,   406,   407,   408,
      -1,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,    -1,    -1,   427,   428,
      -1,   430,   431,   432,    -1,   434,   435,   436,   437,   438,
      -1,   440,   441,   442,    -1,    -1,   445,   446,   447,   448,
     449,    -1,   451,   452,   453,   454,   455,   456,   457,   458,
      -1,    -1,   461,   462,   463,    -1,   465,   466,   467,   468,
      -1,   470,   471,   472,   473,   474,   475,   476,   477,    -1,
     479,   480,   481,   482,   483,   484,   485,   486,   487,    -1,
      -1,   490,    -1,    -1,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,
      48,    -1,    50,    51,    52,    53,    54,    -1,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    -1,    -1,    82,    83,    84,    85,    86,    87,
      88,    -1,    90,    91,    92,    93,    94,    95,    96,    97,
      98,    99,    -1,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,    -1,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,   139,    -1,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,    -1,   162,    -1,    -1,   165,   166,   167,
     168,    -1,   170,   171,   172,    -1,    -1,    -1,   176,   177,
     178,    -1,   180,    -1,    -1,   183,    -1,   185,   186,   187,
     188,    -1,   190,   191,   192,   193,   194,   195,   196,    -1,
     198,   199,   200,   201,    -1,   203,   204,   205,   206,   207,
     208,   209,    -1,   211,    -1,   213,   214,   215,   216,   217,
     218,   219,   220,    -1,   222,    -1,   224,    -1,    -1,   227,
      -1,   229,   230,   231,   232,   233,   234,    -1,    -1,   237,
      -1,   239,    -1,    -1,   242,    -1,    -1,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,    -1,   276,   277,
     278,   279,   280,   281,    -1,   283,   284,    -1,   286,    -1,
     288,   289,   290,   291,   292,   293,    -1,   295,   296,    -1,
      -1,   299,   300,   301,    -1,    -1,   304,   305,   306,    -1,
     308,   309,    -1,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,    -1,    -1,    -1,    -1,
     328,   329,   330,    -1,   332,   333,   334,    -1,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,    -1,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,    -1,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,    -1,   372,   373,    -1,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,    -1,    -1,   394,   395,   396,   397,
     398,   399,   400,   401,   402,    -1,    -1,   405,   406,   407,
     408,    -1,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,    -1,    -1,   427,
     428,    -1,   430,    -1,   432,    -1,   434,   435,   436,   437,
     438,    -1,   440,   441,   442,    -1,    -1,   445,   446,   447,
     448,   449,    -1,   451,   452,   453,   454,   455,   456,   457,
     458,    -1,   460,   461,   462,   463,    -1,   465,   466,   467,
     468,    -1,   470,   471,   472,   473,   474,   475,   476,   477,
      -1,   479,    -1,   481,   482,   483,   484,   485,   486,   487,
      -1,    -1,   490,    -1,    -1,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    78,    79,    -1,    -1,    -1,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    92,    93,    94,    95,    96,
      97,    98,    99,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
      -1,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,    -1,   162,    -1,    -1,   165,   166,
     167,   168,    -1,   170,   171,   172,    -1,    -1,    -1,   176,
     177,   178,    -1,   180,    -1,    -1,   183,    -1,   185,   186,
     187,   188,    -1,   190,   191,   192,   193,   194,   195,   196,
      -1,   198,   199,   200,   201,    -1,   203,   204,   205,   206,
     207,   208,   209,    -1,   211,    -1,   213,   214,   215,   216,
     217,   218,   219,   220,    -1,   222,    -1,   224,    -1,    -1,
     227,    -1,   229,   230,   231,   232,   233,   234,    -1,    -1,
     237,    -1,   239,   240,    -1,   242,    -1,    -1,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,    -1,   276,
     277,   278,   279,   280,   281,    -1,   283,   284,    -1,   286,
      -1,   288,   289,   290,   291,   292,   293,    -1,   295,   296,
      -1,    -1,   299,   300,   301,    -1,    -1,   304,   305,   306,
      -1,   308,   309,    -1,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,    -1,    -1,    -1,
      -1,   328,   329,   330,    -1,   332,   333,   334,    -1,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,    -1,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
      -1,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,    -1,   372,   373,    -1,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,   391,    -1,    -1,   394,   395,   396,
     397,   398,   399,   400,   401,   402,    -1,    -1,   405,   406,
     407,   408,    -1,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,    -1,    -1,
     427,   428,    -1,   430,    -1,   432,    -1,   434,   435,   436,
     437,   438,    -1,   440,   441,   442,    -1,    -1,   445,   446,
     447,   448,   449,    -1,   451,   452,   453,   454,   455,   456,
     457,   458,    -1,   460,   461,   462,   463,    -1,   465,   466,
     467,   468,    -1,   470,   471,   472,   473,   474,   475,   476,
     477,    -1,   479,    -1,   481,   482,   483,   484,   485,   486,
     487,    -1,    -1,   490,    -1,    -1,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,     3,    -1,     5,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    34,    35,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,
      46,    47,    48,    -1,    50,    51,    52,    53,    54,    -1,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    -1,    -1,    83,    84,    85,
      86,    87,    88,    -1,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,    -1,   118,    -1,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,   139,    -1,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,    -1,   162,    -1,    -1,   165,
     166,   167,   168,    -1,   170,    -1,   172,    -1,    -1,    -1,
     176,   177,   178,    -1,   180,    -1,    -1,   183,    -1,   185,
     186,   187,   188,    -1,   190,   191,   192,   193,   194,   195,
     196,    -1,   198,   199,   200,   201,    -1,   203,   204,   205,
     206,   207,   208,   209,    -1,   211,    -1,   213,   214,   215,
     216,   217,   218,   219,   220,    -1,   222,    -1,   224,    -1,
      -1,   227,    -1,   229,   230,   231,   232,   233,   234,    -1,
      -1,   237,    -1,   239,    -1,    -1,   242,    -1,    -1,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,    -1,
     276,   277,   278,   279,   280,   281,    -1,   283,   284,    -1,
     286,    -1,   288,   289,   290,   291,   292,   293,    -1,   295,
     296,    -1,    -1,   299,   300,   301,    -1,    -1,   304,   305,
     306,    -1,   308,   309,    -1,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,    -1,    -1,
      -1,    -1,   328,   329,   330,    -1,   332,   333,   334,    -1,
     336,   337,   338,    -1,   340,   341,   342,   343,   344,   345,
      -1,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,    -1,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,    -1,   372,   373,    -1,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,    -1,    -1,   394,   395,
     396,   397,   398,   399,   400,   401,   402,    -1,    -1,   405,
     406,   407,   408,    -1,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,    -1,
      -1,   427,   428,    -1,   430,    -1,   432,    -1,   434,   435,
     436,   437,   438,    -1,   440,   441,   442,    -1,    -1,   445,
     446,   447,   448,   449,    -1,   451,   452,   453,   454,   455,
     456,   457,   458,    -1,    -1,   461,   462,   463,    -1,   465,
     466,   467,   468,    -1,   470,   471,   472,   473,   474,   475,
     476,   477,    -1,   479,    -1,   481,   482,   483,   484,   485,
     486,   487,    -1,    -1,   490,    -1,    -1,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,     3,    -1,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,
      -1,    46,    47,    48,    -1,    50,    51,    52,    53,    54,
      -1,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      -1,    -1,    67,    68,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    79,    -1,    -1,    -1,    83,    84,
      85,    86,    87,    88,    -1,    90,    91,    92,    -1,    94,
      95,    96,    97,    98,    99,    -1,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,    -1,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,   139,    -1,   141,   142,   143,    -1,
     145,   146,   147,    -1,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,    -1,   162,    -1,    -1,
     165,   166,   167,   168,    -1,   170,    -1,   172,    -1,    -1,
      -1,   176,   177,   178,    -1,   180,    -1,    -1,   183,    -1,
     185,   186,   187,   188,    -1,   190,   191,   192,   193,   194,
     195,   196,    -1,   198,   199,   200,   201,    -1,   203,   204,
     205,   206,   207,   208,   209,    -1,   211,    -1,   213,   214,
     215,   216,   217,   218,   219,   220,    -1,   222,    -1,   224,
      -1,    -1,   227,    -1,   229,   230,   231,   232,   233,   234,
      -1,    -1,   237,    -1,   239,    -1,    -1,   242,    -1,    -1,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
      -1,   276,   277,   278,   279,   280,   281,    -1,   283,   284,
      -1,   286,    -1,   288,   289,   290,   291,   292,   293,    -1,
     295,   296,    -1,    -1,   299,   300,   301,    -1,    -1,   304,
     305,   306,    -1,   308,   309,    -1,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,    -1,
      -1,    -1,    -1,   328,   329,   330,    -1,   332,   333,   334,
      -1,   336,   337,   338,    -1,   340,   341,   342,   343,   344,
     345,    -1,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,    -1,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,    -1,   372,   373,    -1,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,    -1,    -1,   394,
     395,   396,   397,   398,   399,   400,   401,   402,    -1,    -1,
     405,   406,   407,   408,    -1,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
      -1,    -1,   427,   428,    -1,   430,    -1,   432,    -1,   434,
     435,   436,   437,   438,    -1,   440,   441,   442,    -1,    -1,
     445,   446,   447,   448,   449,    -1,   451,   452,   453,   454,
     455,   456,   457,   458,    -1,    -1,   461,   462,   463,    -1,
     465,   466,   467,   468,    -1,   470,   471,   472,   473,   474,
     475,   476,   477,    -1,   479,    -1,   481,   482,   483,   484,
     485,   486,   487,    -1,    -1,   490,    -1,    -1,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,
      44,    -1,    46,    47,    48,    -1,    50,    51,    52,    53,
      54,    -1,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,    83,
      84,    85,    86,    87,    88,    -1,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    99,    -1,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,    -1,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,   139,    -1,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,    -1,   162,    -1,
      -1,   165,   166,   167,   168,    -1,   170,    -1,   172,    -1,
      -1,    -1,   176,   177,   178,    -1,   180,    -1,    -1,   183,
      -1,   185,   186,   187,   188,    -1,   190,   191,   192,   193,
     194,   195,   196,    -1,   198,   199,   200,   201,    -1,   203,
     204,   205,   206,   207,   208,   209,    -1,   211,    -1,   213,
     214,   215,   216,   217,   218,   219,   220,    -1,   222,    -1,
     224,    -1,    -1,   227,    -1,   229,   230,   231,   232,   233,
     234,    -1,    -1,   237,    -1,   239,    -1,    -1,   242,    -1,
      -1,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,    -1,   276,   277,   278,   279,   280,   281,    -1,   283,
     284,    -1,   286,    -1,   288,   289,   290,   291,   292,   293,
      -1,   295,   296,    -1,   298,   299,   300,   301,    -1,    -1,
     304,   305,   306,    -1,   308,   309,    -1,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
      -1,    -1,    -1,    -1,   328,   329,   330,    -1,   332,   333,
     334,    -1,   336,   337,   338,    -1,   340,   341,   342,   343,
     344,   345,    -1,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,    -1,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,    -1,   372,   373,
      -1,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,    -1,    -1,
     394,   395,   396,   397,   398,   399,   400,   401,   402,    -1,
      -1,   405,   406,   407,   408,    -1,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,    -1,    -1,   427,   428,    -1,   430,    -1,   432,    -1,
     434,   435,   436,   437,   438,    -1,   440,   441,   442,    -1,
      -1,   445,   446,   447,   448,   449,    -1,   451,   452,   453,
     454,   455,   456,   457,   458,    -1,    -1,   461,   462,   463,
      -1,   465,   466,   467,   468,    -1,   470,   471,   472,   473,
     474,   475,   476,   477,    -1,   479,    -1,   481,   482,   483,
     484,   485,   486,   487,    -1,    -1,   490,    -1,    -1,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
       3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      43,    44,    -1,    46,    47,    48,    -1,    50,    51,    52,
      53,    54,    -1,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,
      83,    84,    85,    86,    87,    88,    -1,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    99,    -1,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,    -1,   118,    -1,   120,   121,   122,
     123,   124,   125,    -1,    -1,   128,   129,   130,   131,    -1,
      -1,   134,   135,   136,   137,   138,   139,    -1,   141,   142,
     143,    -1,   145,   146,   147,    -1,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,    -1,   162,
      -1,    -1,   165,   166,   167,   168,    -1,   170,    -1,   172,
      -1,    -1,    -1,   176,   177,   178,    -1,   180,    -1,    -1,
     183,    -1,   185,   186,   187,   188,    -1,   190,   191,   192,
     193,   194,   195,   196,    -1,   198,   199,   200,   201,    -1,
     203,   204,   205,   206,   207,   208,   209,    -1,   211,    -1,
     213,   214,   215,   216,   217,   218,   219,   220,    -1,   222,
      -1,   224,    -1,    -1,   227,    -1,   229,   230,   231,   232,
     233,   234,    -1,    -1,   237,    -1,   239,    -1,    -1,   242,
      -1,    -1,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,    -1,   276,   277,   278,   279,   280,   281,    -1,
     283,   284,    -1,   286,    -1,   288,   289,   290,   291,   292,
     293,    -1,   295,   296,    -1,   298,   299,   300,   301,    -1,
      -1,   304,   305,   306,    -1,   308,   309,    -1,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,    -1,    -1,    -1,    -1,   328,   329,   330,    -1,   332,
     333,   334,    -1,   336,   337,   338,    -1,   340,   341,   342,
     343,   344,   345,    -1,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,    -1,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,    -1,   372,
     373,    -1,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,    -1,
      -1,   394,   395,   396,   397,   398,   399,   400,   401,   402,
      -1,    -1,   405,   406,   407,   408,    -1,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,    -1,    -1,   427,   428,    -1,   430,    -1,   432,
      -1,   434,   435,   436,   437,   438,    -1,   440,   441,   442,
      -1,    -1,   445,   446,   447,   448,   449,    -1,   451,   452,
     453,   454,   455,   456,   457,   458,    -1,    -1,   461,   462,
     463,    -1,   465,   466,   467,   468,    -1,   470,   471,   472,
     473,   474,   475,   476,   477,    -1,   479,    -1,   481,   482,
     483,   484,   485,   486,   487,    -1,    -1,   490,    -1,    -1,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    44,    -1,    46,    47,    48,    -1,    50,    51,
      52,    53,    54,    -1,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    -1,
      -1,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,    -1,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,   139,    -1,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,    -1,
     162,    -1,    -1,   165,   166,   167,   168,    -1,   170,    -1,
     172,    -1,    -1,    -1,   176,   177,   178,    -1,   180,    -1,
      -1,   183,    -1,   185,   186,   187,   188,    -1,   190,   191,
     192,   193,   194,   195,   196,    -1,   198,   199,   200,   201,
      -1,   203,   204,   205,   206,   207,   208,   209,    -1,   211,
      -1,   213,   214,   215,   216,   217,   218,   219,   220,    -1,
     222,    -1,   224,    -1,    -1,   227,    -1,   229,   230,   231,
     232,   233,   234,    -1,    -1,   237,    -1,   239,    -1,    -1,
     242,    -1,    -1,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,    -1,   276,   277,   278,   279,   280,   281,
      -1,   283,   284,    -1,   286,    -1,   288,   289,   290,   291,
     292,   293,    -1,   295,   296,    -1,    -1,   299,   300,   301,
      -1,    -1,   304,   305,   306,    -1,   308,   309,    -1,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,    -1,    -1,    -1,    -1,   328,   329,   330,    -1,
     332,   333,   334,    -1,   336,   337,   338,    -1,   340,   341,
     342,   343,   344,   345,    -1,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,    -1,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,    -1,
     372,   373,    -1,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
      -1,    -1,   394,   395,   396,   397,   398,   399,   400,   401,
     402,    -1,    -1,   405,   406,   407,   408,    -1,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,    -1,    -1,   427,   428,    -1,   430,    -1,
     432,    -1,   434,   435,   436,   437,   438,    -1,   440,   441,
     442,    -1,    -1,   445,   446,   447,   448,   449,    -1,   451,
     452,   453,   454,   455,   456,   457,   458,    -1,    -1,   461,
     462,   463,    -1,   465,   466,   467,   468,    -1,   470,   471,
     472,   473,   474,   475,   476,   477,    -1,   479,    -1,   481,
     482,   483,   484,   485,   486,   487,    -1,    -1,   490,    -1,
      -1,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,    50,
      51,    52,    53,    54,    -1,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      -1,    -1,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,    -1,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,   139,    -1,
     141,   142,   143,    -1,   145,   146,   147,    -1,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
      -1,   162,    -1,    -1,   165,   166,   167,   168,    -1,   170,
      -1,   172,    -1,    -1,    -1,   176,   177,   178,    -1,   180,
      -1,    -1,   183,    -1,   185,   186,   187,   188,    -1,   190,
     191,   192,   193,   194,   195,   196,    -1,   198,   199,   200,
     201,    -1,   203,   204,   205,   206,   207,   208,   209,    -1,
     211,    -1,   213,   214,   215,   216,   217,   218,   219,   220,
      -1,   222,    -1,   224,    -1,    -1,   227,    -1,   229,   230,
     231,   232,   233,   234,    -1,    -1,   237,    -1,   239,    -1,
      -1,   242,    -1,    -1,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,    -1,   276,   277,   278,   279,   280,
     281,    -1,   283,   284,    -1,   286,    -1,   288,   289,   290,
     291,   292,   293,    -1,   295,   296,    -1,   298,   299,   300,
     301,    -1,    -1,   304,   305,   306,    -1,   308,   309,    -1,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,    -1,    -1,    -1,    -1,   328,   329,   330,
      -1,   332,   333,   334,    -1,   336,   337,   338,    -1,   340,
     341,   342,   343,   344,   345,    -1,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,    -1,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
      -1,   372,   373,    -1,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
     391,    -1,    -1,   394,   395,   396,   397,   398,   399,   400,
     401,   402,    -1,    -1,   405,   406,   407,   408,    -1,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,    -1,    -1,   427,   428,    -1,   430,
      -1,   432,    -1,   434,   435,   436,   437,   438,    -1,   440,
     441,   442,    -1,    -1,   445,   446,   447,   448,   449,    -1,
     451,   452,   453,   454,   455,   456,   457,   458,    -1,    -1,
     461,   462,   463,    -1,   465,   466,   467,   468,    -1,   470,
     471,   472,   473,   474,   475,   476,   477,    -1,   479,    -1,
     481,   482,   483,   484,   485,   486,   487,    -1,    -1,   490,
      -1,    -1,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,     3,     4,    -1,    -1,    -1,    -1,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,
      50,    51,    52,    53,    54,    -1,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    -1,    -1,    83,    84,    85,    86,    87,    88,    -1,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    99,
      -1,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,    -1,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,    -1,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,   139,
      -1,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,    -1,   162,    -1,    -1,   165,   166,   167,   168,    -1,
     170,    -1,   172,    -1,    -1,    -1,   176,   177,   178,    -1,
     180,    -1,    -1,   183,    -1,   185,   186,   187,   188,    -1,
     190,   191,   192,   193,   194,   195,   196,    -1,   198,   199,
     200,   201,    -1,   203,   204,   205,   206,   207,   208,   209,
      -1,   211,    -1,   213,   214,   215,   216,   217,   218,   219,
     220,    -1,   222,    -1,   224,    -1,    -1,   227,    -1,   229,
     230,   231,   232,   233,   234,    -1,    -1,   237,    -1,   239,
      -1,    -1,   242,    -1,    -1,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,    -1,   276,   277,   278,   279,
     280,   281,    -1,   283,   284,    -1,   286,    -1,   288,   289,
     290,   291,   292,   293,    -1,   295,   296,    -1,    -1,   299,
     300,   301,    -1,    -1,   304,   305,   306,    -1,   308,   309,
      -1,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,    -1,    -1,    -1,    -1,   328,   329,
     330,    -1,   332,   333,   334,    -1,   336,   337,   338,    -1,
     340,   341,   342,   343,   344,   345,    -1,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,    -1,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,    -1,   372,   373,    -1,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,    -1,    -1,   394,   395,   396,   397,   398,   399,
     400,   401,   402,    -1,    -1,   405,   406,   407,   408,    -1,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,    -1,    -1,   427,   428,    -1,
     430,    -1,   432,    -1,   434,   435,   436,   437,   438,    -1,
     440,   441,   442,    -1,    -1,   445,   446,   447,   448,   449,
      -1,   451,   452,   453,   454,   455,   456,   457,   458,    -1,
      -1,   461,   462,   463,    -1,   465,   466,   467,   468,    -1,
     470,   471,   472,   473,   474,   475,   476,   477,    -1,   479,
      -1,   481,   482,   483,   484,   485,   486,   487,    -1,    -1,
     490,    -1,    -1,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,     3,    -1,     5,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,
      -1,    50,    51,    52,    53,    54,    -1,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    -1,    -1,    67,    68,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    -1,    -1,    -1,    83,    84,    85,    86,    87,    88,
      -1,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      99,    -1,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,    -1,   118,
      -1,   120,   121,   122,   123,   124,   125,    -1,    -1,   128,
     129,   130,   131,    -1,    -1,   134,   135,   136,   137,   138,
     139,    -1,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,    -1,   162,    -1,    -1,   165,   166,   167,   168,
      -1,   170,    -1,   172,    -1,    -1,    -1,   176,   177,   178,
      -1,   180,    -1,    -1,   183,    -1,   185,   186,   187,   188,
      -1,   190,   191,   192,   193,   194,   195,   196,    -1,   198,
     199,   200,   201,    -1,   203,   204,   205,   206,   207,   208,
     209,    -1,   211,    -1,   213,   214,   215,   216,   217,   218,
     219,   220,    -1,   222,    -1,   224,    -1,    -1,   227,    -1,
     229,   230,   231,   232,   233,   234,    -1,    -1,   237,    -1,
     239,    -1,    -1,   242,    -1,    -1,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,    -1,   276,   277,   278,
     279,   280,   281,    -1,   283,   284,    -1,   286,    -1,   288,
     289,   290,   291,   292,   293,    -1,   295,   296,    -1,    -1,
     299,   300,   301,    -1,    -1,   304,   305,   306,    -1,   308,
     309,    -1,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,    -1,    -1,    -1,    -1,   328,
     329,   330,    -1,   332,   333,   334,    -1,   336,   337,   338,
      -1,   340,   341,   342,   343,   344,   345,    -1,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,    -1,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,    -1,   372,   373,    -1,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,   391,    -1,    -1,   394,   395,   396,   397,   398,
     399,   400,   401,   402,    -1,    -1,   405,   406,   407,   408,
      -1,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,    -1,    -1,   427,   428,
     429,   430,    -1,   432,    -1,   434,   435,   436,   437,   438,
      -1,   440,   441,   442,    -1,    -1,   445,   446,   447,   448,
     449,    -1,   451,   452,   453,   454,   455,   456,   457,   458,
      -1,    -1,   461,   462,   463,    -1,   465,   466,   467,   468,
      -1,   470,   471,   472,   473,   474,   475,   476,   477,    -1,
     479,    -1,   481,   482,   483,   484,   485,   486,   487,    -1,
      -1,   490,    -1,    -1,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,     3,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,
      48,    -1,    50,    51,    52,    53,    54,    -1,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    -1,    -1,    83,    84,    85,    86,    87,
      88,    -1,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,    -1,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,    -1,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,   139,    -1,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,    -1,   162,    -1,    -1,   165,   166,   167,
     168,    -1,   170,    -1,   172,    -1,    -1,    -1,   176,   177,
     178,    -1,   180,    -1,    -1,   183,    -1,   185,   186,   187,
     188,    -1,   190,   191,   192,   193,   194,   195,   196,    -1,
     198,   199,   200,   201,    -1,   203,   204,   205,   206,   207,
     208,   209,    -1,   211,    -1,   213,   214,   215,   216,   217,
     218,   219,   220,    -1,   222,    -1,   224,    -1,    -1,   227,
      -1,   229,   230,   231,   232,   233,   234,    -1,    -1,   237,
      -1,   239,    -1,    -1,   242,    -1,    -1,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,    -1,   276,   277,
     278,   279,   280,   281,    -1,   283,   284,    -1,   286,    -1,
     288,   289,   290,   291,   292,   293,    -1,   295,   296,    -1,
      -1,   299,   300,   301,    -1,    -1,   304,   305,   306,    -1,
     308,   309,    -1,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,    -1,    -1,    -1,    -1,
     328,   329,   330,    -1,   332,   333,   334,    -1,   336,   337,
     338,    -1,   340,   341,   342,   343,   344,   345,    -1,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,    -1,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,    -1,   372,   373,    -1,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,    -1,    -1,   394,   395,   396,   397,
     398,   399,   400,   401,   402,    -1,    -1,   405,   406,   407,
     408,    -1,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,    -1,    -1,   427,
     428,    -1,   430,    -1,   432,    -1,   434,   435,   436,   437,
     438,    -1,   440,   441,   442,    -1,    -1,   445,   446,   447,
     448,   449,    -1,   451,   452,   453,   454,   455,   456,   457,
     458,    -1,    -1,   461,   462,   463,    -1,   465,   466,   467,
     468,    -1,   470,   471,   472,   473,   474,   475,   476,   477,
      -1,   479,    -1,   481,   482,   483,   484,   485,   486,   487,
      -1,    -1,   490,    -1,    -1,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,     3,    -1,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    -1,    -1,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
      -1,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,    -1,   162,    -1,    -1,   165,   166,
     167,   168,    -1,   170,    -1,   172,    -1,    -1,    -1,   176,
     177,   178,    -1,   180,    -1,    -1,   183,    -1,   185,   186,
     187,   188,    -1,   190,   191,   192,   193,   194,   195,   196,
      -1,   198,   199,   200,   201,    -1,   203,   204,   205,   206,
     207,   208,   209,    -1,   211,    -1,   213,   214,   215,   216,
     217,   218,   219,   220,    -1,   222,    -1,   224,    -1,    -1,
     227,    -1,   229,   230,   231,   232,   233,   234,    -1,    -1,
     237,    -1,   239,    -1,    -1,   242,    -1,    -1,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,    -1,   276,
     277,   278,   279,   280,   281,    -1,   283,   284,    -1,   286,
      -1,   288,   289,   290,   291,   292,   293,    -1,   295,   296,
      -1,    -1,   299,   300,   301,    -1,    -1,   304,   305,   306,
      -1,   308,   309,    -1,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,    -1,    -1,    -1,
      -1,   328,   329,   330,    -1,   332,   333,   334,    -1,   336,
     337,   338,    -1,   340,   341,   342,   343,   344,   345,    -1,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
      -1,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,    -1,   372,   373,    -1,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,   391,    -1,    -1,   394,   395,   396,
     397,   398,   399,   400,   401,   402,    -1,    -1,   405,   406,
     407,   408,    -1,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,    -1,    -1,
     427,   428,    -1,   430,    -1,   432,    -1,   434,   435,   436,
     437,   438,    -1,   440,   441,   442,    -1,    -1,   445,   446,
     447,   448,   449,    -1,   451,   452,   453,   454,   455,   456,
     457,   458,    -1,    -1,   461,   462,   463,    -1,   465,   466,
     467,   468,    -1,   470,   471,   472,   473,   474,   475,   476,
     477,    -1,   479,    -1,   481,   482,   483,   484,   485,   486,
     487,    -1,    -1,   490,    -1,    -1,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,
      46,    47,    48,    -1,    50,    51,    52,    53,    54,    -1,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    -1,    -1,    83,    84,    85,
      86,    87,    88,    -1,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,    -1,   118,    -1,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,   139,    -1,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,    -1,   162,    -1,    -1,   165,
     166,   167,   168,    -1,   170,    -1,   172,    -1,    -1,    -1,
     176,   177,   178,    -1,   180,    -1,    -1,   183,    -1,   185,
     186,   187,   188,    -1,   190,   191,   192,   193,   194,   195,
     196,    -1,   198,   199,   200,   201,    -1,   203,   204,   205,
     206,   207,   208,   209,    -1,   211,    -1,   213,   214,   215,
     216,   217,   218,   219,   220,    -1,   222,    -1,   224,    -1,
      -1,   227,    -1,   229,   230,   231,   232,   233,   234,    -1,
      -1,   237,    -1,   239,    -1,    -1,   242,    -1,    -1,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,    -1,
     276,   277,   278,   279,   280,   281,    -1,   283,   284,    -1,
     286,    -1,   288,   289,   290,   291,   292,   293,    -1,   295,
     296,    -1,    -1,   299,   300,   301,    -1,    -1,   304,   305,
     306,    -1,   308,   309,    -1,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,    -1,    -1,
      -1,    -1,   328,   329,   330,    -1,   332,   333,   334,    -1,
     336,   337,   338,    -1,   340,   341,   342,   343,   344,   345,
      -1,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,    -1,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,    -1,   372,   373,    -1,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,    -1,    -1,   394,   395,
     396,   397,   398,   399,   400,   401,   402,    -1,    -1,   405,
     406,   407,   408,    -1,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,    -1,
      -1,   427,   428,    -1,   430,    -1,   432,    -1,   434,   435,
     436,   437,   438,    -1,   440,   441,   442,    -1,    -1,   445,
     446,   447,   448,   449,    -1,   451,   452,   453,   454,   455,
     456,   457,   458,    -1,    -1,   461,   462,   463,    -1,   465,
     466,   467,   468,    -1,   470,   471,   472,   473,   474,   475,
     476,   477,    -1,   479,    -1,   481,   482,   483,   484,   485,
     486,   487,    -1,    -1,   490,    -1,    -1,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,     3,    -1,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,
      -1,    46,    47,    48,    -1,    50,    51,    52,    53,    54,
      -1,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      -1,    -1,    67,    68,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    79,    -1,    -1,    -1,    83,    84,
      85,    86,    87,    88,    -1,    90,    91,    92,    -1,    94,
      95,    96,    97,    98,    99,    -1,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,    -1,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,   139,    -1,   141,   142,   143,    -1,
     145,   146,   147,    -1,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,    -1,   162,    -1,    -1,
     165,   166,   167,   168,    -1,   170,    -1,   172,    -1,    -1,
      -1,   176,   177,   178,    -1,   180,    -1,    -1,   183,    -1,
     185,   186,   187,   188,    -1,   190,   191,   192,   193,   194,
     195,   196,    -1,   198,   199,   200,   201,    -1,   203,   204,
     205,   206,   207,   208,   209,    -1,   211,    -1,   213,   214,
     215,   216,   217,   218,   219,   220,    -1,   222,    -1,   224,
      -1,    -1,   227,    -1,   229,   230,   231,   232,   233,   234,
      -1,    -1,   237,    -1,   239,    -1,    -1,   242,    -1,    -1,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
      -1,   276,   277,   278,   279,   280,   281,    -1,   283,   284,
      -1,   286,    -1,   288,   289,   290,   291,   292,   293,    -1,
     295,   296,    -1,    -1,   299,   300,   301,    -1,    -1,   304,
     305,   306,    -1,   308,   309,    -1,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,    -1,
      -1,    -1,    -1,   328,   329,   330,    -1,   332,   333,   334,
      -1,   336,   337,   338,    -1,   340,   341,   342,   343,   344,
     345,    -1,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,    -1,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,    -1,   372,   373,    -1,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,    -1,    -1,   394,
     395,   396,   397,   398,   399,   400,   401,   402,    -1,    -1,
     405,   406,   407,   408,    -1,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
      -1,    -1,   427,   428,    -1,   430,    -1,   432,    -1,   434,
     435,   436,   437,   438,    -1,   440,   441,   442,    -1,    -1,
     445,   446,   447,   448,   449,    -1,   451,   452,   453,   454,
     455,   456,   457,   458,    -1,    -1,   461,   462,   463,    -1,
     465,   466,   467,   468,    -1,   470,   471,   472,   473,   474,
     475,   476,   477,    -1,   479,    -1,   481,   482,   483,   484,
     485,   486,   487,    -1,    -1,   490,    -1,    -1,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,
      44,    -1,    46,    47,    48,    -1,    50,    51,    52,    53,
      54,    -1,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,    83,
      84,    85,    86,    87,    88,    -1,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    99,    -1,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,    -1,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,   139,    -1,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,    -1,   162,    -1,
      -1,   165,   166,   167,   168,    -1,   170,    -1,   172,    -1,
      -1,    -1,   176,   177,   178,    -1,   180,    -1,    -1,   183,
      -1,   185,   186,   187,   188,    -1,   190,   191,   192,   193,
     194,   195,   196,    -1,   198,   199,   200,   201,    -1,   203,
     204,   205,   206,   207,   208,   209,    -1,   211,    -1,   213,
     214,   215,   216,   217,   218,   219,   220,    -1,   222,    -1,
     224,    -1,    -1,   227,    -1,   229,   230,   231,   232,   233,
     234,    -1,    -1,   237,    -1,   239,    -1,    -1,   242,    -1,
      -1,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,    -1,   276,   277,   278,   279,   280,   281,    -1,   283,
     284,    -1,   286,    -1,   288,   289,   290,   291,   292,   293,
      -1,   295,   296,    -1,    -1,   299,   300,   301,    -1,    -1,
     304,   305,   306,    -1,   308,   309,    -1,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
      -1,    -1,    -1,    -1,   328,   329,   330,    -1,   332,   333,
     334,    -1,   336,   337,   338,    -1,   340,   341,   342,   343,
     344,   345,    -1,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,    -1,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,    -1,   372,   373,
      -1,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,    -1,    -1,
     394,   395,   396,   397,   398,   399,   400,   401,   402,    -1,
      -1,   405,   406,   407,   408,    -1,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,    -1,    -1,   427,   428,    -1,   430,    -1,   432,    -1,
     434,   435,   436,   437,   438,    -1,   440,   441,   442,    -1,
      -1,   445,   446,   447,   448,   449,    -1,   451,   452,   453,
     454,   455,   456,   457,   458,    -1,    -1,   461,   462,   463,
      -1,   465,   466,   467,   468,    -1,   470,   471,   472,   473,
     474,   475,   476,   477,    -1,   479,    -1,   481,   482,   483,
     484,   485,   486,   487,    -1,    -1,   490,    -1,    -1,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
       3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      43,    44,    -1,    46,    47,    48,    -1,    50,    51,    52,
      53,    54,    -1,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,
      83,    84,    85,    86,    87,    88,    -1,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    99,    -1,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,    -1,   118,    -1,   120,   121,   122,
     123,   124,   125,    -1,    -1,   128,   129,   130,   131,    -1,
      -1,   134,   135,   136,   137,   138,   139,    -1,   141,   142,
     143,    -1,   145,   146,   147,    -1,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,    -1,   162,
      -1,    -1,   165,   166,   167,   168,    -1,   170,    -1,   172,
      -1,    -1,    -1,   176,   177,   178,    -1,   180,    -1,    -1,
     183,    -1,   185,   186,   187,   188,    -1,   190,   191,   192,
     193,   194,   195,   196,    -1,   198,   199,   200,   201,    -1,
     203,   204,   205,   206,   207,   208,   209,    -1,   211,    -1,
     213,   214,   215,   216,   217,   218,   219,   220,    -1,   222,
      -1,   224,    -1,    -1,   227,    -1,   229,   230,   231,   232,
     233,   234,    -1,    -1,   237,    -1,   239,    -1,    -1,   242,
      -1,    -1,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,    -1,   276,   277,   278,   279,   280,   281,    -1,
     283,   284,    -1,   286,    -1,   288,   289,   290,   291,   292,
     293,    -1,   295,   296,    -1,    -1,   299,   300,   301,    -1,
      -1,   304,   305,   306,    -1,   308,   309,    -1,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,    -1,    -1,    -1,    -1,   328,   329,   330,    -1,   332,
     333,   334,    -1,   336,   337,   338,    -1,   340,   341,   342,
     343,   344,   345,    -1,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,    -1,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,    -1,   372,
     373,    -1,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,    -1,
      -1,   394,   395,   396,   397,   398,   399,   400,   401,   402,
      -1,    -1,   405,   406,   407,   408,    -1,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,    -1,    -1,   427,   428,    -1,   430,    -1,   432,
      -1,   434,   435,   436,   437,   438,    -1,   440,   441,   442,
      -1,    -1,   445,   446,   447,   448,   449,    -1,   451,   452,
     453,   454,   455,   456,   457,   458,    -1,    -1,   461,   462,
     463,    -1,   465,   466,   467,   468,    -1,   470,   471,   472,
     473,   474,   475,   476,   477,    -1,   479,    -1,   481,   482,
     483,   484,   485,   486,   487,    -1,    -1,   490,    -1,    -1,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    44,    -1,    46,    47,    48,    -1,    50,    51,
      52,    53,    54,    -1,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    -1,
      -1,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,    -1,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,   139,    -1,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,    -1,
     162,    -1,    -1,   165,   166,   167,   168,    -1,   170,    -1,
     172,    -1,    -1,    -1,   176,   177,   178,    -1,   180,    -1,
      -1,   183,    -1,   185,   186,   187,   188,    -1,   190,   191,
     192,   193,   194,   195,   196,    -1,   198,   199,   200,   201,
      -1,   203,   204,   205,   206,   207,   208,   209,    -1,   211,
      -1,   213,   214,   215,   216,   217,   218,   219,   220,    -1,
     222,    -1,   224,    -1,    -1,   227,    -1,   229,   230,   231,
     232,   233,   234,    -1,    -1,   237,    -1,   239,    -1,    -1,
     242,    -1,    -1,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,    -1,   276,   277,   278,   279,   280,   281,
      -1,   283,   284,    -1,   286,    -1,   288,   289,   290,   291,
     292,   293,    -1,   295,   296,    -1,    -1,   299,   300,   301,
      -1,    -1,   304,   305,   306,    -1,   308,   309,    -1,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,    -1,    -1,    -1,    -1,   328,   329,   330,    -1,
     332,   333,   334,    -1,   336,   337,   338,    -1,   340,   341,
     342,   343,   344,   345,    -1,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,    -1,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,    -1,
     372,   373,    -1,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
      -1,    -1,   394,   395,   396,   397,   398,   399,   400,   401,
     402,    -1,    -1,   405,   406,   407,   408,    -1,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,    -1,    -1,   427,   428,    -1,   430,    -1,
     432,    -1,   434,   435,   436,   437,   438,    -1,   440,   441,
     442,    -1,    -1,   445,   446,   447,   448,   449,    -1,   451,
     452,   453,   454,   455,   456,   457,   458,    -1,    -1,   461,
     462,   463,    -1,   465,   466,   467,   468,    -1,   470,   471,
     472,   473,   474,   475,   476,   477,    -1,   479,    -1,   481,
     482,   483,   484,   485,   486,   487,    -1,    -1,   490,    -1,
      -1,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,    50,
      51,    52,    53,    54,    -1,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      -1,    -1,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,    -1,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,   139,    -1,
     141,   142,   143,    -1,   145,   146,   147,    -1,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
      -1,   162,    -1,    -1,   165,   166,   167,   168,    -1,   170,
      -1,   172,    -1,    -1,    -1,   176,   177,   178,    -1,   180,
      -1,    -1,   183,    -1,   185,   186,   187,   188,    -1,   190,
     191,   192,   193,   194,   195,   196,    -1,   198,   199,   200,
     201,    -1,   203,   204,   205,   206,   207,   208,   209,    -1,
     211,    -1,   213,   214,   215,   216,   217,   218,   219,   220,
      -1,   222,    -1,   224,    -1,    -1,   227,    -1,   229,   230,
     231,   232,   233,   234,    -1,    -1,   237,    -1,   239,    -1,
      -1,   242,    -1,    -1,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,    -1,   276,   277,   278,   279,   280,
     281,    -1,   283,   284,    -1,   286,    -1,   288,   289,   290,
     291,   292,   293,    -1,   295,   296,    -1,    -1,   299,   300,
     301,    -1,    -1,   304,   305,   306,    -1,   308,   309,    -1,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,    -1,    -1,    -1,    -1,   328,   329,   330,
      -1,   332,   333,   334,    -1,   336,   337,   338,    -1,   340,
     341,   342,   343,   344,   345,    -1,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,    -1,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
      -1,   372,   373,    -1,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
     391,    -1,    -1,   394,   395,   396,   397,   398,   399,   400,
     401,   402,    -1,    -1,   405,   406,   407,   408,    -1,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,    -1,    -1,   427,   428,    -1,   430,
      -1,   432,    -1,   434,   435,   436,   437,   438,    -1,   440,
     441,   442,    -1,    -1,   445,   446,   447,   448,   449,    -1,
     451,   452,   453,   454,   455,   456,   457,   458,    -1,    -1,
     461,   462,   463,    -1,   465,   466,   467,   468,    -1,   470,
     471,   472,   473,   474,   475,   476,   477,    -1,   479,    -1,
     481,   482,   483,   484,   485,   486,   487,    -1,    -1,   490,
      -1,    -1,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,     3,    -1,     5,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,
      50,    51,    52,    53,    54,    -1,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    -1,    -1,    83,    84,    85,    86,    87,    88,    -1,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    99,
      -1,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,    -1,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,    -1,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,   139,
      -1,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,    -1,   162,    -1,    -1,   165,   166,   167,   168,    -1,
     170,    -1,   172,    -1,    -1,    -1,   176,   177,   178,    -1,
     180,    -1,    -1,   183,    -1,   185,   186,   187,   188,    -1,
     190,   191,   192,   193,   194,   195,   196,    -1,   198,   199,
     200,   201,    -1,   203,   204,   205,   206,   207,   208,   209,
      -1,   211,    -1,   213,   214,   215,   216,   217,   218,   219,
     220,    -1,   222,    -1,   224,    -1,    -1,   227,    -1,   229,
     230,   231,   232,   233,   234,    -1,    -1,   237,    -1,   239,
      -1,    -1,   242,    -1,    -1,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,    -1,   276,   277,   278,   279,
     280,   281,    -1,   283,   284,    -1,   286,    -1,   288,   289,
     290,   291,   292,   293,    -1,   295,   296,    -1,    -1,   299,
     300,   301,    -1,    -1,   304,   305,   306,    -1,   308,   309,
      -1,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,    -1,    -1,    -1,    -1,   328,   329,
     330,    -1,   332,   333,   334,    -1,   336,   337,   338,    -1,
     340,   341,   342,   343,   344,   345,    -1,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,    -1,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,    -1,   372,   373,    -1,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,    -1,    -1,   394,   395,   396,   397,   398,   399,
     400,   401,   402,    -1,    -1,   405,   406,   407,   408,    -1,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,    -1,    -1,   427,   428,    -1,
     430,    -1,   432,    -1,   434,   435,   436,   437,   438,    -1,
     440,   441,   442,    -1,    -1,   445,   446,   447,   448,   449,
      -1,   451,   452,   453,   454,   455,   456,   457,   458,    -1,
      -1,   461,   462,   463,    -1,   465,   466,   467,   468,    -1,
     470,   471,   472,   473,   474,   475,   476,   477,    -1,   479,
      -1,   481,   482,   483,   484,   485,   486,   487,    -1,    -1,
     490,    -1,    -1,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,     3,    -1,     5,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,
      -1,    50,    51,    52,    53,    54,    -1,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    -1,    -1,    67,    68,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    -1,    -1,    -1,    83,    84,    85,    86,    87,    88,
      -1,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      99,    -1,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,    -1,   118,
      -1,   120,   121,   122,   123,   124,   125,    -1,    -1,   128,
     129,   130,   131,    -1,    -1,   134,   135,   136,   137,   138,
     139,    -1,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,    -1,   162,    -1,    -1,   165,   166,   167,   168,
      -1,   170,    -1,   172,    -1,    -1,    -1,   176,   177,   178,
      -1,   180,    -1,    -1,   183,    -1,   185,   186,   187,   188,
      -1,   190,   191,   192,   193,   194,   195,   196,    -1,   198,
     199,   200,   201,    -1,   203,   204,   205,   206,   207,   208,
     209,    -1,   211,    -1,   213,   214,   215,   216,   217,   218,
     219,   220,    -1,   222,    -1,   224,    -1,    -1,   227,    -1,
     229,   230,   231,   232,   233,   234,    -1,    -1,   237,    -1,
     239,    -1,    -1,   242,    -1,    -1,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,    -1,   276,   277,   278,
     279,   280,   281,    -1,   283,   284,    -1,   286,    -1,   288,
     289,   290,   291,   292,   293,    -1,   295,   296,    -1,    -1,
     299,   300,   301,    -1,    -1,   304,   305,   306,    -1,   308,
     309,    -1,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,    -1,    -1,    -1,    -1,   328,
     329,   330,    -1,   332,   333,   334,    -1,   336,   337,   338,
      -1,   340,   341,   342,   343,   344,   345,    -1,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,    -1,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,    -1,   372,   373,    -1,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,   391,    -1,    -1,   394,   395,   396,   397,   398,
     399,   400,   401,   402,    -1,    -1,   405,   406,   407,   408,
      -1,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,    -1,    -1,   427,   428,
      -1,   430,    -1,   432,    -1,   434,   435,   436,   437,   438,
      -1,   440,   441,   442,    -1,    -1,   445,   446,   447,   448,
     449,    -1,   451,   452,   453,   454,   455,   456,   457,   458,
      -1,    -1,   461,   462,   463,    -1,   465,   466,   467,   468,
      -1,   470,   471,   472,   473,   474,   475,   476,   477,    -1,
     479,    -1,   481,   482,   483,   484,   485,   486,   487,    -1,
      -1,   490,    -1,    -1,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    40,    -1,    -1,    43,    44,    -1,    46,    47,
      48,    -1,    50,    51,    52,    53,    54,    -1,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    -1,    -1,    83,    84,    85,    86,    87,
      88,    -1,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,    -1,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,    -1,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,   139,    -1,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,    -1,   162,    -1,    -1,   165,   166,   167,
     168,    -1,   170,    -1,   172,    -1,    -1,    -1,   176,   177,
     178,    -1,   180,    -1,    -1,   183,    -1,   185,   186,   187,
     188,    -1,   190,   191,   192,   193,   194,   195,   196,    -1,
     198,   199,   200,   201,    -1,   203,   204,   205,   206,   207,
     208,   209,    -1,   211,    -1,   213,   214,   215,   216,   217,
     218,   219,   220,    -1,   222,    -1,   224,    -1,    -1,   227,
      -1,   229,   230,   231,   232,   233,   234,    -1,    -1,   237,
      -1,   239,    -1,    -1,   242,    -1,    -1,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,    -1,   276,   277,
     278,   279,   280,   281,    -1,   283,   284,    -1,   286,    -1,
     288,   289,   290,   291,   292,   293,    -1,   295,   296,    -1,
      -1,   299,   300,   301,    -1,    -1,   304,   305,   306,    -1,
     308,   309,    -1,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,    -1,    -1,    -1,    -1,
     328,   329,   330,    -1,   332,   333,   334,    -1,   336,   337,
     338,    -1,   340,   341,   342,   343,   344,   345,    -1,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,    -1,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,    -1,   372,   373,    -1,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,    -1,    -1,   394,   395,   396,   397,
     398,   399,   400,   401,   402,    -1,    -1,   405,   406,   407,
     408,    -1,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,    -1,    -1,   427,
     428,    -1,   430,    -1,   432,    -1,   434,   435,   436,   437,
     438,    -1,   440,   441,   442,    -1,    -1,   445,   446,   447,
     448,   449,    -1,   451,   452,   453,   454,   455,   456,   457,
     458,    -1,    -1,   461,   462,   463,    -1,   465,   466,   467,
     468,    -1,   470,   471,   472,   473,   474,   475,   476,   477,
      -1,   479,    -1,   481,   482,   483,   484,   485,   486,   487,
      -1,    -1,   490,    -1,    -1,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    40,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    -1,    -1,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
      -1,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,    -1,   162,    -1,    -1,   165,   166,
     167,   168,    -1,   170,    -1,   172,    -1,    -1,    -1,   176,
     177,   178,    -1,   180,    -1,    -1,   183,    -1,   185,   186,
     187,   188,    -1,   190,   191,   192,   193,   194,   195,   196,
      -1,   198,   199,   200,   201,    -1,   203,   204,   205,   206,
     207,   208,   209,    -1,   211,    -1,   213,   214,   215,   216,
     217,   218,   219,   220,    -1,   222,    -1,   224,    -1,    -1,
     227,    -1,   229,   230,   231,   232,   233,   234,    -1,    -1,
     237,    -1,   239,    -1,    -1,   242,    -1,    -1,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,    -1,   276,
     277,   278,   279,   280,   281,    -1,   283,   284,    -1,   286,
      -1,   288,   289,   290,   291,   292,   293,    -1,   295,   296,
      -1,    -1,   299,   300,   301,    -1,    -1,   304,   305,   306,
      -1,   308,   309,    -1,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,    -1,    -1,    -1,
      -1,   328,   329,   330,    -1,   332,   333,   334,    -1,   336,
     337,   338,    -1,   340,   341,   342,   343,   344,   345,    -1,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
      -1,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,    -1,   372,   373,    -1,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,   391,    -1,    -1,   394,   395,   396,
     397,   398,   399,   400,   401,   402,    -1,    -1,   405,   406,
     407,   408,    -1,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,    -1,    -1,
     427,   428,    -1,   430,    -1,   432,    -1,   434,   435,   436,
     437,   438,    -1,   440,   441,   442,    -1,    -1,   445,   446,
     447,   448,   449,    -1,   451,   452,   453,   454,   455,   456,
     457,   458,    -1,    -1,   461,   462,   463,    -1,   465,   466,
     467,   468,    -1,   470,   471,   472,   473,   474,   475,   476,
     477,    -1,   479,    -1,   481,   482,   483,   484,   485,   486,
     487,    -1,    -1,   490,    -1,    -1,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,
      46,    47,    48,    -1,    50,    51,    52,    53,    54,    -1,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    -1,    -1,    83,    84,    85,
      86,    87,    88,    -1,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,    -1,   118,    -1,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,   139,    -1,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,    -1,   162,    -1,    -1,   165,
     166,   167,   168,    -1,   170,    -1,   172,    -1,    -1,    -1,
     176,   177,   178,    -1,   180,    -1,    -1,   183,    -1,   185,
     186,   187,   188,    -1,   190,   191,   192,   193,   194,   195,
     196,    -1,   198,   199,   200,   201,    -1,   203,   204,   205,
     206,   207,   208,   209,    -1,   211,    -1,   213,   214,   215,
     216,   217,   218,   219,   220,    -1,   222,    -1,   224,    -1,
      -1,   227,    -1,   229,   230,   231,   232,   233,   234,    -1,
      -1,   237,    -1,   239,    -1,    -1,   242,    -1,    -1,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,    -1,
     276,   277,   278,   279,   280,   281,    -1,   283,   284,    -1,
     286,    -1,   288,   289,   290,   291,   292,   293,    -1,   295,
     296,    -1,    -1,   299,   300,   301,    -1,    -1,   304,   305,
     306,    -1,   308,   309,    -1,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,    -1,    -1,
      -1,    -1,   328,   329,   330,    -1,   332,   333,   334,    -1,
     336,   337,   338,    -1,   340,   341,   342,   343,   344,   345,
      -1,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,    -1,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,    -1,   372,   373,    -1,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,    -1,    -1,   394,   395,
     396,   397,   398,   399,   400,   401,   402,    -1,    -1,   405,
     406,   407,   408,    -1,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,    -1,
      -1,   427,   428,    -1,   430,    -1,   432,    -1,   434,   435,
     436,   437,   438,    -1,   440,   441,   442,    -1,    -1,   445,
     446,   447,   448,   449,    -1,   451,   452,   453,   454,   455,
     456,   457,   458,    -1,    -1,   461,   462,   463,    -1,   465,
     466,   467,   468,    -1,   470,   471,   472,   473,   474,   475,
     476,   477,    -1,   479,    -1,   481,   482,   483,   484,   485,
     486,   487,    -1,    -1,   490,    -1,    -1,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,     3,    -1,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,
      -1,    46,    47,    48,    -1,    50,    51,    52,    53,    54,
      -1,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      -1,    -1,    67,    68,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    79,    -1,    -1,    -1,    83,    84,
      85,    86,    87,    88,    -1,    90,    91,    92,    -1,    94,
      95,    96,    97,    98,    99,    -1,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,    -1,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,   139,    -1,   141,   142,   143,    -1,
     145,   146,   147,    -1,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,    -1,   162,    -1,    -1,
     165,   166,   167,   168,    -1,   170,    -1,   172,    -1,    -1,
      -1,   176,   177,   178,    -1,   180,    -1,    -1,   183,    -1,
     185,   186,   187,   188,    -1,   190,   191,   192,   193,   194,
     195,   196,    -1,   198,   199,   200,   201,    -1,   203,   204,
     205,   206,   207,   208,   209,    -1,   211,    -1,   213,   214,
     215,   216,   217,   218,   219,   220,    -1,   222,    -1,   224,
      -1,    -1,   227,    -1,   229,   230,   231,   232,   233,   234,
      -1,    -1,   237,    -1,   239,    -1,    -1,   242,    -1,    -1,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
      -1,   276,   277,   278,   279,   280,   281,    -1,   283,   284,
      -1,   286,    -1,   288,   289,   290,   291,   292,   293,    -1,
     295,   296,    -1,    -1,   299,   300,   301,    -1,    -1,   304,
     305,   306,    -1,   308,   309,    -1,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,    -1,
      -1,    -1,    -1,   328,   329,   330,    -1,   332,   333,   334,
      -1,   336,   337,   338,    -1,   340,   341,   342,   343,   344,
     345,    -1,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,    -1,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,    -1,   372,   373,    -1,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,    -1,    -1,   394,
     395,   396,   397,   398,   399,   400,   401,   402,    -1,    -1,
     405,   406,   407,   408,    -1,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
      -1,    -1,   427,   428,    -1,   430,    -1,   432,    -1,   434,
     435,   436,   437,   438,    -1,   440,   441,   442,    -1,    -1,
     445,   446,   447,   448,   449,    -1,   451,   452,   453,   454,
     455,   456,   457,   458,    -1,    -1,   461,   462,   463,    -1,
     465,   466,   467,   468,    -1,   470,   471,   472,   473,   474,
     475,   476,   477,    -1,   479,    -1,   481,   482,   483,   484,
     485,   486,   487,    -1,    -1,   490,    -1,    -1,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,
      44,    -1,    46,    47,    48,    -1,    50,    51,    52,    53,
      54,    -1,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,    83,
      84,    85,    86,    87,    88,    -1,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    99,    -1,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,    -1,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,   139,    -1,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,    -1,   162,    -1,
      -1,   165,   166,   167,   168,    -1,   170,    -1,   172,    -1,
      -1,    -1,   176,   177,   178,    -1,   180,    -1,    -1,   183,
      -1,   185,   186,   187,   188,    -1,   190,   191,   192,   193,
     194,   195,   196,    -1,   198,   199,   200,   201,    -1,   203,
     204,   205,   206,   207,   208,   209,    -1,   211,    -1,   213,
     214,   215,   216,   217,   218,   219,   220,    -1,   222,    -1,
     224,    -1,    -1,   227,    -1,   229,   230,   231,   232,   233,
     234,    -1,    -1,   237,    -1,   239,    -1,    -1,   242,    -1,
      -1,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,    -1,   276,   277,   278,   279,   280,   281,    -1,   283,
     284,    -1,   286,    -1,   288,   289,   290,   291,   292,   293,
      -1,   295,   296,    -1,    -1,   299,   300,   301,    -1,    -1,
     304,   305,   306,    -1,   308,   309,    -1,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
      -1,    -1,    -1,    -1,   328,   329,   330,    -1,   332,   333,
     334,    -1,   336,   337,   338,    -1,   340,   341,   342,   343,
     344,   345,    -1,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,    -1,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,    -1,   372,   373,
      -1,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,    -1,    -1,
     394,   395,   396,   397,   398,   399,   400,   401,   402,    -1,
      -1,   405,   406,   407,   408,    -1,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,    -1,    -1,   427,   428,    -1,   430,    -1,   432,    -1,
     434,   435,   436,   437,   438,    -1,   440,   441,   442,    -1,
      -1,   445,   446,   447,   448,   449,    -1,   451,   452,   453,
     454,   455,   456,   457,   458,    -1,    -1,   461,   462,   463,
      -1,   465,   466,   467,   468,    -1,   470,   471,   472,   473,
     474,   475,   476,   477,    -1,   479,    -1,   481,   482,   483,
     484,   485,   486,   487,    -1,    -1,   490,    -1,    -1,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
       3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      43,    44,    -1,    46,    47,    48,    -1,    50,    51,    52,
      53,    54,    -1,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,
      83,    84,    85,    86,    87,    88,    -1,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    99,    -1,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,    -1,   118,    -1,   120,   121,   122,
     123,   124,   125,    -1,    -1,   128,   129,   130,   131,    -1,
      -1,   134,   135,   136,   137,   138,   139,    -1,   141,   142,
     143,    -1,   145,   146,   147,    -1,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,    -1,   162,
      -1,    -1,   165,   166,   167,   168,    -1,   170,    -1,   172,
      -1,    -1,    -1,   176,   177,   178,    -1,   180,    -1,    -1,
     183,    -1,   185,   186,   187,   188,    -1,   190,   191,   192,
     193,   194,   195,   196,    -1,   198,   199,   200,   201,    -1,
     203,   204,   205,   206,   207,   208,   209,    -1,   211,    -1,
     213,   214,   215,   216,   217,   218,   219,   220,    -1,   222,
      -1,   224,    -1,    -1,   227,    -1,   229,   230,   231,   232,
     233,   234,    -1,    -1,   237,    -1,   239,    -1,    -1,   242,
      -1,    -1,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,    -1,   276,   277,   278,   279,   280,   281,    -1,
     283,   284,    -1,   286,    -1,   288,   289,   290,   291,   292,
     293,    -1,   295,   296,    -1,    -1,   299,   300,   301,    -1,
      -1,   304,   305,   306,    -1,   308,   309,    -1,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,    -1,    -1,    -1,    -1,   328,   329,   330,    -1,   332,
     333,   334,    -1,   336,   337,   338,    -1,   340,   341,   342,
     343,   344,   345,    -1,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,    -1,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,    -1,   372,
     373,    -1,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,    -1,
      -1,   394,   395,   396,   397,   398,   399,   400,   401,   402,
      -1,    -1,   405,   406,   407,   408,    -1,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,    -1,    -1,   427,   428,    -1,   430,    -1,   432,
      -1,   434,   435,   436,   437,   438,    -1,   440,   441,   442,
      -1,    -1,   445,   446,   447,   448,   449,    -1,   451,   452,
     453,   454,   455,   456,   457,   458,    -1,    -1,   461,   462,
     463,    -1,   465,   466,   467,   468,    -1,   470,   471,   472,
     473,   474,   475,   476,   477,    -1,   479,    -1,   481,   482,
     483,   484,   485,   486,   487,    -1,    -1,   490,    -1,    -1,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    44,    -1,    46,    47,    48,    -1,    50,    51,
      52,    53,    54,    -1,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    -1,
      -1,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,    -1,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,   139,    -1,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,    -1,
     162,    -1,    -1,   165,   166,   167,   168,    -1,   170,    -1,
     172,    -1,    -1,    -1,   176,   177,   178,    -1,   180,    -1,
      -1,   183,    -1,   185,   186,   187,   188,    -1,   190,   191,
     192,   193,   194,   195,   196,    -1,   198,   199,   200,   201,
      -1,   203,   204,   205,   206,   207,   208,   209,    -1,   211,
      -1,   213,   214,   215,   216,   217,   218,   219,   220,    -1,
     222,    -1,   224,    -1,    -1,   227,    -1,   229,   230,   231,
     232,   233,   234,    -1,    -1,   237,    -1,   239,    -1,    -1,
     242,    -1,    -1,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,    -1,   276,   277,   278,   279,   280,   281,
      -1,   283,   284,    -1,   286,    -1,   288,   289,   290,   291,
     292,   293,    -1,   295,   296,    -1,    -1,   299,   300,   301,
      -1,    -1,   304,   305,   306,    -1,   308,   309,    -1,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,    -1,    -1,    -1,    -1,   328,   329,   330,    -1,
     332,   333,   334,    -1,   336,   337,   338,    -1,   340,   341,
     342,   343,   344,   345,    -1,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,    -1,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,    -1,
     372,   373,    -1,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
      -1,    -1,   394,   395,   396,   397,   398,   399,   400,   401,
     402,    -1,    -1,   405,   406,   407,   408,    -1,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,    -1,    -1,   427,   428,    -1,   430,    -1,
     432,    -1,   434,   435,   436,   437,   438,    -1,   440,   441,
     442,    -1,    -1,   445,   446,   447,   448,   449,    -1,   451,
     452,   453,   454,   455,   456,   457,   458,    -1,    -1,   461,
     462,   463,    -1,   465,   466,   467,   468,    -1,   470,   471,
     472,   473,   474,   475,   476,   477,    -1,   479,    -1,   481,
     482,   483,   484,   485,   486,   487,    -1,    -1,   490,    -1,
      -1,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,    50,
      51,    52,    53,    54,    -1,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      -1,    -1,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,    -1,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,   139,    -1,
     141,   142,   143,    -1,   145,   146,   147,    -1,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
      -1,   162,    -1,    -1,   165,   166,   167,   168,    -1,   170,
      -1,   172,    -1,    -1,    -1,   176,   177,   178,    -1,   180,
      -1,    -1,   183,    -1,   185,   186,   187,   188,    -1,   190,
     191,   192,   193,   194,   195,   196,    -1,   198,   199,   200,
     201,    -1,   203,   204,   205,   206,   207,   208,   209,    -1,
     211,    -1,   213,   214,   215,   216,   217,   218,   219,   220,
      -1,   222,    -1,   224,    -1,    -1,   227,    -1,   229,   230,
     231,   232,   233,   234,    -1,    -1,   237,    -1,   239,    -1,
      -1,   242,    -1,    -1,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,    -1,   276,   277,   278,   279,   280,
     281,    -1,   283,   284,    -1,   286,    -1,   288,   289,   290,
     291,   292,   293,    -1,   295,   296,    -1,    -1,   299,   300,
     301,    -1,    -1,   304,   305,   306,    -1,   308,   309,    -1,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,    -1,    -1,    -1,    -1,   328,   329,   330,
      -1,   332,   333,   334,    -1,   336,   337,   338,    -1,   340,
     341,   342,   343,   344,   345,    -1,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,    -1,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
      -1,   372,   373,    -1,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
     391,    -1,    -1,   394,   395,   396,   397,   398,   399,   400,
     401,   402,    -1,    -1,   405,   406,   407,   408,    -1,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,    -1,    -1,   427,   428,    -1,   430,
      -1,   432,    -1,   434,   435,   436,   437,   438,    -1,   440,
     441,   442,    -1,    -1,   445,   446,   447,   448,   449,    -1,
     451,   452,   453,   454,   455,   456,   457,   458,    -1,    -1,
     461,   462,   463,    -1,   465,   466,   467,   468,    -1,   470,
     471,   472,   473,   474,   475,   476,   477,    -1,   479,    -1,
     481,   482,   483,   484,   485,   486,   487,    -1,    -1,   490,
      -1,    -1,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,     3,    -1,     5,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,
      50,    51,    52,    53,    54,    -1,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    -1,    -1,    83,    84,    85,    86,    87,    88,    -1,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    99,
      -1,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,    -1,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,    -1,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,   139,
      -1,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,    -1,   162,    -1,    -1,   165,   166,   167,   168,    -1,
     170,    -1,   172,    -1,    -1,    -1,   176,   177,   178,    -1,
     180,    -1,    -1,   183,    -1,   185,   186,   187,   188,    -1,
     190,   191,   192,   193,   194,   195,   196,    -1,   198,   199,
     200,   201,    -1,   203,   204,   205,   206,   207,   208,   209,
      -1,   211,    -1,   213,   214,   215,   216,   217,   218,   219,
     220,    -1,   222,    -1,   224,    -1,    -1,   227,    -1,   229,
     230,   231,   232,   233,   234,    -1,    -1,   237,    -1,   239,
      -1,    -1,   242,    -1,    -1,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,    -1,   276,   277,   278,   279,
     280,   281,    -1,   283,   284,    -1,   286,    -1,   288,   289,
     290,   291,   292,   293,    -1,   295,   296,    -1,    -1,   299,
     300,   301,    -1,    -1,   304,   305,   306,    -1,   308,   309,
      -1,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,    -1,    -1,    -1,    -1,   328,   329,
     330,    -1,   332,   333,   334,    -1,   336,   337,   338,    -1,
     340,   341,   342,   343,   344,   345,    -1,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,    -1,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,    -1,   372,   373,    -1,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,    -1,    -1,   394,   395,   396,   397,   398,   399,
     400,   401,   402,    -1,    -1,   405,   406,   407,   408,    -1,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,    -1,    -1,   427,   428,    -1,
     430,    -1,   432,    -1,   434,   435,   436,   437,   438,    -1,
     440,   441,   442,    -1,    -1,   445,   446,   447,   448,   449,
      -1,   451,   452,   453,   454,   455,   456,   457,   458,    -1,
      -1,   461,   462,   463,    -1,   465,   466,   467,   468,    -1,
     470,   471,   472,   473,   474,   475,   476,   477,    -1,   479,
      -1,   481,   482,   483,   484,   485,   486,   487,    -1,    -1,
     490,    -1,    -1,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    37,    -1,
      -1,    40,    -1,    42,    43,    44,    -1,    46,    47,    48,
      49,    50,    51,    52,    -1,    54,    55,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    -1,    -1,    67,    68,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      -1,    -1,    81,    -1,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      99,    -1,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,    -1,   118,
      -1,   120,   121,   122,   123,   124,   125,    -1,    -1,   128,
     129,   130,   131,    -1,    -1,   134,   135,   136,   137,   138,
     139,    -1,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,   152,    -1,   154,   155,   156,   157,   158,
     159,    -1,    -1,   162,    -1,    -1,   165,   166,   167,   168,
      -1,   170,    -1,   172,   173,    -1,   175,   176,   177,   178,
     179,   180,    -1,    -1,   183,    -1,    -1,    -1,   187,   188,
      -1,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,   200,   201,    -1,   203,   204,   205,   206,   207,   208,
     209,    -1,   211,   212,    -1,   214,   215,   216,   217,   218,
     219,   220,    -1,   222,    -1,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,    -1,    -1,   237,   238,
     239,   240,    -1,   242,    -1,    -1,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,    -1,    -1,   283,   284,   285,   286,    -1,    -1,
     289,   290,   291,   292,   293,    -1,   295,   296,    -1,    -1,
     299,   300,   301,    -1,    -1,   304,   305,    -1,   307,   308,
     309,   310,    -1,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,    -1,    -1,    -1,    -1,   328,
     329,    -1,   331,   332,   333,    -1,    -1,   336,   337,   338,
      -1,   340,   341,   342,   343,   344,   345,    -1,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,    -1,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,    -1,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,   391,    -1,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,    -1,   404,   405,   406,   407,   408,
      -1,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,    -1,    -1,    -1,   427,   428,
      -1,   430,   431,   432,    -1,   434,   435,   436,   437,   438,
      -1,   440,   441,   442,    -1,    -1,   445,   446,    -1,   448,
      -1,    -1,   451,   452,   453,   454,   455,   456,   457,   458,
     459,    -1,   461,   462,   463,    -1,   465,   466,   467,   468,
      -1,   470,   471,   472,   473,   474,    -1,   476,   477,    -1,
     479,   480,   481,   482,   483,   484,   485,   486,   487,    -1,
      -1,   490,    -1,    -1,   493,   494,   495,   496,   497,   498,
       3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   510,   511,   512,   513,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      43,    44,    -1,    46,    47,    48,    -1,    50,    51,    52,
      53,    54,    -1,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,
      83,    84,    85,    86,    87,    88,    -1,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    99,    -1,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,    -1,   118,    -1,   120,   121,   122,
     123,   124,   125,    -1,    -1,   128,   129,   130,   131,    -1,
      -1,   134,   135,   136,   137,   138,   139,    -1,   141,   142,
     143,    -1,   145,   146,   147,    -1,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,    -1,   162,
      -1,    -1,   165,   166,   167,   168,    -1,   170,    -1,   172,
      -1,    -1,    -1,   176,   177,   178,    -1,   180,    -1,    -1,
     183,    -1,   185,   186,   187,   188,    -1,   190,   191,   192,
     193,   194,   195,   196,    -1,   198,   199,   200,   201,    -1,
     203,   204,   205,   206,   207,   208,   209,    -1,   211,    -1,
     213,   214,   215,   216,   217,   218,   219,   220,    -1,   222,
      -1,   224,    -1,    -1,   227,    -1,   229,   230,   231,   232,
     233,   234,    -1,    -1,   237,    -1,   239,    -1,    -1,   242,
      -1,    -1,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,    -1,   276,   277,   278,   279,   280,   281,    -1,
     283,   284,    -1,   286,    -1,   288,   289,   290,   291,   292,
     293,    -1,   295,   296,    -1,    -1,   299,   300,   301,    -1,
      -1,   304,   305,   306,    -1,   308,   309,    -1,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,    -1,    -1,    -1,    -1,   328,   329,   330,    -1,   332,
     333,   334,    -1,   336,   337,   338,    -1,   340,   341,   342,
     343,   344,   345,    -1,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,    -1,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,    -1,   372,
     373,    -1,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,    -1,
      -1,   394,   395,   396,   397,   398,   399,   400,   401,   402,
      -1,    -1,   405,   406,   407,   408,    -1,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,    -1,    -1,   427,   428,    -1,   430,    -1,   432,
      -1,   434,   435,   436,   437,   438,    -1,   440,   441,   442,
      -1,    -1,   445,   446,   447,   448,   449,    -1,   451,   452,
     453,   454,   455,   456,   457,   458,    -1,    -1,   461,   462,
     463,    -1,   465,   466,   467,   468,    -1,   470,   471,   472,
     473,   474,   475,   476,   477,    -1,   479,    -1,   481,   482,
     483,   484,   485,   486,   487,    -1,    -1,   490,    -1,    -1,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    44,    -1,    46,    47,    48,    -1,    50,    51,
      52,    53,    54,    -1,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    -1,
      -1,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,    -1,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,   139,    -1,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,    -1,
     162,    -1,    -1,   165,   166,   167,   168,    -1,   170,    -1,
     172,    -1,    -1,    -1,   176,   177,   178,    -1,   180,    -1,
      -1,   183,    -1,   185,   186,   187,   188,    -1,   190,   191,
     192,   193,   194,   195,   196,    -1,   198,   199,   200,   201,
      -1,   203,   204,   205,   206,   207,   208,   209,    -1,   211,
      -1,   213,   214,   215,   216,   217,   218,   219,   220,    -1,
     222,    -1,   224,    -1,    -1,   227,    -1,   229,   230,   231,
     232,   233,   234,    -1,    -1,   237,    -1,   239,    -1,    -1,
     242,    -1,    -1,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,    -1,   276,   277,   278,   279,   280,   281,
      -1,   283,   284,    -1,   286,    -1,   288,   289,   290,   291,
     292,   293,    -1,   295,   296,    -1,    -1,   299,   300,   301,
      -1,    -1,   304,   305,   306,    -1,   308,   309,    -1,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,    -1,    -1,    -1,    -1,   328,   329,   330,    -1,
     332,   333,   334,    -1,   336,   337,   338,    -1,   340,   341,
     342,   343,   344,   345,    -1,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,    -1,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,    -1,
     372,   373,    -1,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
      -1,    -1,   394,   395,   396,   397,   398,   399,   400,   401,
     402,    -1,    -1,   405,   406,   407,   408,    -1,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,    -1,    -1,   427,   428,    -1,   430,    -1,
     432,    -1,   434,   435,   436,   437,   438,    -1,   440,   441,
     442,    -1,    -1,   445,   446,   447,   448,   449,    -1,   451,
     452,   453,   454,   455,   456,   457,   458,    -1,    -1,   461,
     462,   463,    -1,   465,   466,   467,   468,    -1,   470,   471,
     472,   473,   474,   475,   476,   477,    -1,   479,    -1,   481,
     482,   483,   484,   485,   486,   487,    -1,    -1,   490,    -1,
      -1,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,    50,
      51,    52,    53,    54,    -1,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      -1,    -1,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,    -1,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,   139,    -1,
     141,   142,   143,    -1,   145,   146,   147,    -1,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
      -1,   162,    -1,    -1,   165,   166,   167,   168,    -1,   170,
      -1,   172,    -1,    -1,    -1,   176,   177,   178,    -1,   180,
      -1,    -1,   183,    -1,   185,   186,   187,   188,    -1,   190,
     191,   192,   193,   194,   195,   196,    -1,   198,   199,   200,
     201,    -1,   203,   204,   205,   206,   207,   208,   209,    -1,
     211,    -1,   213,   214,   215,   216,   217,   218,   219,   220,
      -1,   222,    -1,   224,    -1,    -1,   227,    -1,   229,   230,
     231,   232,   233,   234,    -1,    -1,   237,    -1,   239,    -1,
      -1,   242,    -1,    -1,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,    -1,   276,   277,   278,   279,   280,
     281,    -1,   283,   284,    -1,   286,    -1,   288,   289,   290,
     291,   292,   293,    -1,   295,   296,    -1,    -1,   299,   300,
     301,    -1,    -1,   304,   305,   306,    -1,   308,   309,    -1,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,    -1,    -1,    -1,    -1,   328,   329,   330,
      -1,   332,   333,   334,    -1,   336,   337,   338,    -1,   340,
     341,   342,   343,   344,   345,    -1,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,    -1,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
      -1,   372,   373,    -1,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
     391,    -1,    -1,   394,   395,   396,   397,   398,   399,   400,
     401,   402,    -1,    -1,   405,   406,   407,   408,    -1,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,    -1,    -1,   427,   428,    -1,   430,
      -1,   432,    -1,   434,   435,   436,   437,   438,    -1,   440,
     441,   442,    -1,    -1,   445,   446,   447,   448,   449,    -1,
     451,   452,   453,   454,   455,   456,   457,   458,    -1,    -1,
     461,   462,   463,    -1,   465,   466,   467,   468,    -1,   470,
     471,   472,   473,   474,   475,   476,   477,    -1,   479,    -1,
     481,   482,   483,   484,   485,   486,   487,    -1,    -1,   490,
      -1,    -1,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,
      50,    51,    52,    53,    54,    -1,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    -1,    -1,    83,    84,    85,    86,    87,    88,    -1,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    99,
      -1,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,    -1,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,    -1,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,   139,
      -1,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,    -1,   162,    -1,    -1,   165,   166,   167,   168,    -1,
     170,    -1,   172,    -1,    -1,    -1,   176,   177,   178,    -1,
     180,    -1,    -1,   183,    -1,   185,   186,   187,   188,    -1,
     190,   191,   192,   193,   194,   195,   196,    -1,   198,   199,
     200,   201,    -1,   203,   204,   205,   206,   207,   208,   209,
      -1,   211,    -1,   213,   214,   215,   216,   217,   218,   219,
     220,    -1,   222,    -1,   224,    -1,    -1,   227,    -1,   229,
     230,   231,   232,   233,   234,    -1,    -1,   237,    -1,   239,
      -1,    -1,   242,    -1,    -1,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,    -1,   276,   277,   278,   279,
     280,   281,    -1,   283,   284,    -1,   286,    -1,   288,   289,
     290,   291,   292,   293,    -1,   295,   296,    -1,    -1,   299,
     300,   301,    -1,    -1,   304,   305,   306,    -1,   308,   309,
      -1,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,    -1,    -1,    -1,    -1,   328,   329,
     330,    -1,   332,   333,   334,    -1,   336,   337,   338,    -1,
     340,   341,   342,   343,   344,   345,    -1,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,    -1,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,    -1,   372,   373,    -1,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,    -1,    -1,   394,   395,   396,   397,   398,   399,
     400,   401,   402,    -1,    -1,   405,   406,   407,   408,    -1,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,    -1,    -1,   427,   428,    -1,
     430,    -1,   432,    -1,   434,   435,   436,   437,   438,    -1,
     440,   441,   442,    -1,    -1,   445,   446,   447,   448,   449,
      -1,   451,   452,   453,   454,   455,   456,   457,   458,    -1,
      -1,   461,   462,   463,    -1,   465,   466,   467,   468,    -1,
     470,   471,   472,   473,   474,   475,   476,   477,    -1,   479,
      -1,   481,   482,   483,   484,   485,   486,   487,    -1,    -1,
     490,    -1,    -1,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,
      -1,    50,    51,    52,    53,    54,    -1,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    -1,    -1,    67,    68,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    -1,    -1,    -1,    83,    84,    85,    86,    87,    88,
      -1,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      99,    -1,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,    -1,   118,
      -1,   120,   121,   122,   123,   124,   125,    -1,    -1,   128,
     129,   130,   131,    -1,    -1,   134,   135,   136,   137,   138,
     139,    -1,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,    -1,   162,    -1,    -1,   165,   166,   167,   168,
      -1,   170,    -1,   172,    -1,    -1,    -1,   176,   177,   178,
      -1,   180,    -1,    -1,   183,    -1,   185,   186,   187,   188,
      -1,   190,   191,   192,   193,   194,   195,   196,    -1,   198,
     199,   200,   201,    -1,   203,   204,   205,   206,   207,   208,
     209,    -1,   211,    -1,   213,   214,   215,   216,   217,   218,
     219,   220,    -1,   222,    -1,   224,    -1,    -1,   227,    -1,
     229,   230,   231,   232,   233,   234,    -1,    -1,   237,    -1,
     239,    -1,    -1,   242,    -1,    -1,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,    -1,   276,   277,   278,
     279,   280,   281,    -1,   283,   284,    -1,   286,    -1,   288,
     289,   290,   291,   292,   293,    -1,   295,   296,    -1,    -1,
     299,   300,   301,    -1,    -1,   304,   305,   306,    -1,   308,
     309,    -1,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,    -1,    -1,    -1,    -1,   328,
     329,   330,    -1,   332,   333,   334,    -1,   336,   337,   338,
      -1,   340,   341,   342,   343,   344,   345,    -1,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,    -1,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,    -1,   372,   373,    -1,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,   391,    -1,    -1,   394,   395,   396,   397,   398,
     399,   400,   401,   402,    -1,    -1,   405,   406,   407,   408,
      -1,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,    -1,    -1,   427,   428,
      -1,   430,    -1,   432,    -1,   434,   435,   436,   437,   438,
      -1,   440,   441,   442,    -1,    -1,   445,   446,   447,   448,
     449,    -1,   451,   452,   453,   454,   455,   456,   457,   458,
      -1,    -1,   461,   462,   463,    -1,   465,   466,   467,   468,
      -1,   470,   471,   472,   473,   474,   475,   476,   477,    -1,
     479,    -1,   481,   482,   483,   484,   485,   486,   487,    -1,
      -1,   490,    -1,    -1,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,
      48,    -1,    50,    51,    52,    53,    54,    -1,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    -1,    -1,    83,    84,    85,    86,    87,
      88,    -1,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,    -1,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,    -1,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,   139,    -1,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,    -1,   162,    -1,    -1,   165,   166,   167,
     168,    -1,   170,    -1,   172,    -1,    -1,    -1,   176,   177,
     178,    -1,   180,    -1,    -1,   183,    -1,   185,   186,   187,
     188,    -1,   190,   191,   192,   193,   194,   195,   196,    -1,
     198,   199,   200,   201,    -1,   203,   204,   205,   206,   207,
     208,   209,    -1,   211,    -1,   213,   214,   215,   216,   217,
     218,   219,   220,    -1,   222,    -1,   224,    -1,    -1,   227,
      -1,   229,   230,   231,   232,   233,   234,    -1,    -1,   237,
      -1,   239,    -1,    -1,   242,    -1,    -1,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,    -1,   276,   277,
     278,   279,   280,   281,    -1,   283,   284,    -1,   286,    -1,
     288,   289,   290,   291,   292,   293,    -1,   295,   296,    -1,
      -1,   299,   300,   301,    -1,    -1,   304,   305,   306,    -1,
     308,   309,    -1,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,    -1,    -1,    -1,    -1,
     328,   329,   330,    -1,   332,   333,   334,    -1,   336,   337,
     338,    -1,   340,   341,   342,   343,   344,   345,    -1,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,    -1,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,    -1,   372,   373,    -1,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,    -1,    -1,   394,   395,   396,   397,
     398,   399,   400,   401,   402,    -1,    -1,   405,   406,   407,
     408,    -1,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,    -1,    -1,   427,
     428,    -1,   430,    -1,   432,    -1,   434,   435,   436,   437,
     438,    -1,   440,   441,   442,    -1,    -1,   445,   446,   447,
     448,   449,    -1,   451,   452,   453,   454,   455,   456,   457,
     458,    -1,    -1,   461,   462,   463,    -1,   465,   466,   467,
     468,    -1,   470,   471,   472,   473,   474,   475,   476,   477,
      -1,   479,    -1,   481,   482,   483,   484,   485,   486,   487,
      -1,    -1,   490,    -1,    -1,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    -1,    -1,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
      -1,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,    -1,   162,    -1,    -1,   165,   166,
     167,   168,    -1,   170,    -1,   172,    -1,    -1,    -1,   176,
     177,   178,    -1,   180,    -1,    -1,   183,    -1,   185,   186,
     187,   188,    -1,   190,   191,   192,   193,   194,   195,   196,
      -1,   198,   199,   200,   201,    -1,   203,   204,   205,   206,
     207,   208,   209,    -1,   211,    -1,   213,   214,   215,   216,
     217,   218,   219,   220,    -1,   222,    -1,   224,    -1,    -1,
     227,    -1,   229,   230,   231,   232,   233,   234,    -1,    -1,
     237,    -1,   239,    -1,    -1,   242,    -1,    -1,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,    -1,   276,
     277,   278,   279,   280,   281,    -1,   283,   284,    -1,   286,
      -1,   288,   289,   290,   291,   292,   293,    -1,   295,   296,
      -1,    -1,   299,   300,   301,    -1,    -1,   304,   305,   306,
      -1,   308,   309,    -1,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,    -1,    -1,    -1,
      -1,   328,   329,   330,    -1,   332,   333,   334,    -1,   336,
     337,   338,    -1,   340,   341,   342,   343,   344,   345,    -1,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
      -1,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,    -1,   372,   373,    -1,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,   391,    -1,    -1,   394,   395,   396,
     397,   398,   399,   400,   401,   402,    -1,    -1,   405,   406,
     407,   408,    -1,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,    -1,    -1,
     427,   428,    -1,   430,    -1,   432,    -1,   434,   435,   436,
     437,   438,    -1,   440,   441,   442,    -1,    -1,   445,   446,
     447,   448,   449,    -1,   451,   452,   453,   454,   455,   456,
     457,   458,    -1,    -1,   461,   462,   463,    -1,   465,   466,
     467,   468,    -1,   470,   471,   472,   473,   474,   475,   476,
     477,    -1,   479,    -1,   481,   482,   483,   484,   485,   486,
     487,    -1,    -1,   490,    -1,    -1,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    -1,    40,    -1,    -1,    43,    44,    -1,
      46,    47,    48,    -1,    50,    51,    52,    53,    54,    -1,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    -1,    -1,    83,    84,    85,
      86,    87,    88,    -1,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,    -1,   118,    -1,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,   139,    -1,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,    -1,   162,    -1,    -1,   165,
     166,   167,   168,    -1,   170,    -1,   172,    -1,    -1,    -1,
     176,   177,   178,    -1,   180,    -1,    -1,   183,    -1,   185,
     186,   187,   188,    -1,   190,   191,   192,   193,   194,   195,
     196,    -1,   198,   199,   200,   201,    -1,   203,   204,   205,
     206,   207,   208,   209,    -1,   211,    -1,   213,   214,   215,
     216,   217,   218,   219,   220,    -1,   222,    -1,   224,    -1,
      -1,   227,    -1,   229,   230,   231,   232,   233,   234,    -1,
      -1,   237,    -1,   239,    -1,    -1,   242,    -1,    -1,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,    -1,
     276,   277,   278,   279,   280,   281,    -1,   283,   284,    -1,
     286,    -1,   288,   289,   290,   291,   292,   293,    -1,   295,
     296,    -1,    -1,   299,   300,   301,    -1,    -1,   304,   305,
     306,    -1,   308,   309,    -1,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,    -1,    -1,
      -1,    -1,   328,   329,   330,    -1,   332,   333,   334,    -1,
     336,   337,   338,    -1,   340,   341,   342,   343,   344,   345,
      -1,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,    -1,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,    -1,   372,   373,    -1,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,    -1,    -1,   394,   395,
     396,   397,   398,    -1,   400,   401,   402,    -1,    -1,   405,
     406,   407,   408,    -1,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,    -1,
      -1,   427,   428,    -1,   430,    -1,   432,    -1,   434,   435,
     436,   437,   438,    -1,   440,   441,   442,    -1,    -1,   445,
     446,   447,   448,   449,    -1,   451,   452,   453,   454,   455,
     456,   457,   458,    -1,    -1,   461,   462,   463,    -1,   465,
     466,   467,   468,    -1,   470,   471,   472,   473,   474,   475,
     476,   477,    -1,   479,    -1,   481,   482,   483,   484,   485,
     486,   487,    -1,    -1,   490,    -1,    -1,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,
      -1,    46,    47,    48,    -1,    50,    51,    52,    53,    54,
      -1,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      -1,    -1,    67,    68,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    79,    -1,    -1,    -1,    83,    84,
      85,    86,    87,    88,    -1,    90,    91,    92,    -1,    94,
      95,    96,    97,    98,    99,    -1,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,    -1,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,   139,    -1,   141,   142,   143,    -1,
     145,   146,   147,    -1,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,    -1,   162,    -1,    -1,
     165,   166,   167,   168,    -1,   170,    -1,   172,    -1,    -1,
      -1,   176,   177,   178,    -1,   180,    -1,    -1,   183,    -1,
     185,   186,   187,   188,    -1,   190,   191,   192,   193,   194,
     195,   196,    -1,   198,   199,   200,   201,    -1,   203,   204,
     205,   206,   207,   208,   209,    -1,   211,    -1,   213,   214,
     215,   216,   217,   218,   219,   220,    -1,   222,    -1,   224,
      -1,    -1,   227,    -1,   229,   230,   231,   232,   233,   234,
      -1,    -1,   237,    -1,   239,    -1,    -1,   242,    -1,    -1,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
      -1,   276,   277,   278,   279,   280,   281,    -1,   283,   284,
      -1,   286,    -1,   288,   289,   290,   291,   292,   293,    -1,
     295,   296,    -1,    -1,   299,   300,   301,    -1,    -1,   304,
     305,   306,    -1,   308,   309,    -1,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,    -1,
      -1,    -1,    -1,   328,   329,   330,    -1,   332,   333,   334,
      -1,   336,   337,   338,    -1,   340,   341,   342,   343,   344,
     345,    -1,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,    -1,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,    -1,   372,   373,    -1,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,    -1,    -1,   394,
     395,   396,   397,   398,   399,   400,   401,   402,    -1,    -1,
     405,   406,   407,   408,    -1,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
      -1,    -1,   427,   428,    -1,   430,    -1,   432,    -1,   434,
     435,   436,   437,   438,    -1,   440,   441,   442,    -1,    -1,
     445,   446,   447,   448,   449,    -1,   451,   452,   453,   454,
     455,   456,   457,   458,    -1,    -1,   461,   462,   463,    -1,
     465,   466,   467,   468,    -1,   470,   471,   472,   473,   474,
     475,   476,   477,    -1,   479,    -1,   481,   482,   483,   484,
     485,   486,   487,    -1,    -1,   490,    -1,    -1,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,
      44,    -1,    46,    47,    48,    -1,    50,    51,    52,    53,
      54,    -1,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,    83,
      84,    85,    86,    87,    88,    -1,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    99,    -1,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,    -1,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,   139,    -1,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,    -1,   162,    -1,
      -1,   165,   166,   167,   168,    -1,   170,    -1,   172,    -1,
      -1,    -1,   176,   177,   178,    -1,   180,    -1,    -1,   183,
      -1,   185,   186,   187,   188,    -1,   190,   191,   192,   193,
     194,   195,   196,    -1,   198,   199,   200,   201,    -1,   203,
     204,   205,   206,   207,   208,   209,    -1,   211,    -1,   213,
     214,   215,   216,   217,   218,   219,   220,    -1,   222,    -1,
     224,    -1,    -1,   227,    -1,   229,   230,   231,   232,   233,
     234,    -1,    -1,   237,    -1,   239,    -1,    -1,   242,    -1,
      -1,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,    -1,   276,   277,   278,   279,   280,   281,    -1,   283,
     284,    -1,   286,    -1,   288,   289,   290,   291,   292,   293,
      -1,   295,   296,    -1,    -1,   299,   300,   301,    -1,    -1,
     304,   305,   306,    -1,   308,   309,    -1,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
      -1,    -1,    -1,    -1,   328,   329,   330,    -1,   332,   333,
     334,    -1,   336,   337,   338,    -1,   340,   341,   342,   343,
     344,   345,    -1,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,    -1,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,    -1,   372,   373,
      -1,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,    -1,    -1,
     394,   395,   396,   397,   398,   399,   400,   401,   402,    -1,
      -1,   405,   406,   407,   408,    -1,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,    -1,    -1,   427,   428,    -1,   430,    -1,   432,    -1,
     434,   435,   436,   437,   438,    -1,   440,   441,   442,    -1,
      -1,   445,   446,   447,   448,   449,    -1,   451,   452,   453,
     454,   455,   456,   457,   458,    -1,    -1,   461,   462,   463,
      -1,   465,   466,   467,   468,    -1,   470,   471,   472,   473,
     474,   475,   476,   477,    -1,   479,    -1,   481,   482,   483,
     484,   485,   486,   487,    -1,    -1,   490,    -1,    -1,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      43,    44,    -1,    46,    47,    48,    -1,    50,    51,    52,
      53,    54,    -1,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,
      83,    84,    85,    86,    87,    88,    -1,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    99,    -1,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,    -1,   118,    -1,   120,   121,   122,
     123,   124,   125,    -1,    -1,   128,   129,   130,   131,    -1,
      -1,   134,   135,   136,   137,   138,   139,    -1,   141,   142,
     143,    -1,   145,   146,   147,    -1,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,    -1,   162,
      -1,    -1,   165,   166,   167,   168,    -1,   170,    -1,   172,
      -1,    -1,    -1,   176,   177,   178,    -1,   180,    -1,    -1,
     183,    -1,   185,   186,   187,   188,    -1,   190,   191,   192,
     193,   194,   195,   196,    -1,   198,   199,   200,   201,    -1,
     203,   204,   205,   206,   207,   208,   209,    -1,   211,    -1,
     213,   214,   215,   216,   217,   218,   219,   220,    -1,   222,
      -1,   224,    -1,    -1,   227,    -1,   229,   230,   231,   232,
     233,   234,    -1,    -1,   237,    -1,   239,    -1,    -1,   242,
      -1,    -1,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,    -1,   276,   277,   278,   279,   280,   281,    -1,
     283,   284,    -1,   286,    -1,   288,   289,   290,   291,   292,
     293,    -1,   295,   296,    -1,    -1,   299,   300,   301,    -1,
      -1,   304,   305,   306,    -1,   308,   309,    -1,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,    -1,    -1,    -1,    -1,   328,   329,   330,    -1,   332,
     333,   334,    -1,   336,   337,   338,    -1,   340,   341,   342,
     343,   344,   345,    -1,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,    -1,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,    -1,   372,
     373,    -1,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,    -1,
      -1,   394,   395,   396,   397,   398,   399,   400,   401,   402,
      -1,    -1,   405,   406,   407,   408,    -1,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,    -1,    -1,   427,   428,    -1,   430,    -1,   432,
      -1,   434,   435,   436,   437,   438,    -1,   440,   441,   442,
      -1,    -1,   445,   446,   447,   448,   449,    -1,   451,   452,
     453,   454,   455,   456,   457,   458,    -1,    -1,   461,   462,
     463,    -1,   465,   466,   467,   468,    -1,   470,   471,   472,
     473,   474,   475,   476,   477,    -1,   479,    -1,   481,   482,
     483,   484,   485,   486,   487,    -1,    -1,   490,    -1,    -1,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    37,    -1,    -1,    -1,    -1,
      42,    43,    44,    -1,    46,    47,    48,    49,    50,    51,
      52,    -1,    54,    55,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    -1,    -1,    81,
      -1,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,    -1,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,   139,    -1,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
     152,    -1,   154,   155,   156,   157,   158,   159,    -1,    -1,
     162,    -1,    -1,   165,   166,   167,   168,    -1,   170,    -1,
     172,   173,    -1,   175,   176,   177,    -1,   179,   180,    -1,
      -1,   183,    -1,    -1,    -1,   187,   188,    -1,   190,   191,
     192,   193,   194,   195,   196,   197,   198,   199,   200,   201,
      -1,   203,   204,   205,   206,   207,   208,   209,    -1,   211,
     212,    -1,   214,   215,   216,   217,   218,   219,   220,    -1,
     222,    -1,   224,   225,   226,   227,   228,   229,   230,   231,
     232,   233,   234,    -1,    -1,   237,   238,   239,   240,    -1,
     242,    -1,    -1,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,    -1,
      -1,   283,   284,   285,   286,    -1,    -1,   289,   290,   291,
     292,   293,    -1,   295,   296,    -1,    -1,   299,   300,   301,
      -1,    -1,   304,   305,    -1,   307,   308,   309,   310,    -1,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,    -1,    -1,    -1,    -1,   328,   329,    -1,   331,
     332,   333,    -1,    -1,   336,   337,   338,    -1,   340,   341,
     342,   343,   344,   345,    -1,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,    -1,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,    -1,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
      -1,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,    -1,   404,   405,   406,   407,   408,    -1,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,    -1,    -1,    -1,   427,   428,    -1,   430,   431,
     432,    -1,   434,   435,   436,   437,   438,    -1,   440,   441,
     442,    -1,    -1,   445,   446,    -1,   448,    -1,    -1,   451,
     452,   453,   454,   455,   456,   457,   458,   459,    -1,   461,
     462,   463,    -1,   465,   466,   467,   468,    -1,   470,   471,
     472,   473,   474,    -1,   476,   477,    -1,   479,   480,   481,
     482,   483,   484,   485,   486,   487,    -1,    -1,   490,    -1,
      -1,   493,   494,   495,   496,   497,   498,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   510,   511,
     512,   513,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    37,    -1,    -1,    -1,    -1,    42,    43,    44,    -1,
      46,    47,    48,    49,    50,    51,    52,    -1,    54,    55,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    -1,    -1,    81,    -1,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,    -1,   118,    -1,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,   139,    -1,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,   152,    -1,   154,   155,
     156,   157,   158,   159,    -1,    -1,   162,    -1,    -1,   165,
     166,   167,   168,    -1,   170,    -1,   172,   173,    -1,   175,
     176,   177,    -1,   179,   180,    -1,    -1,   183,    -1,    -1,
      -1,   187,   188,    -1,   190,   191,   192,   193,   194,   195,
     196,   197,   198,   199,   200,   201,    -1,   203,   204,   205,
     206,   207,   208,   209,    -1,   211,   212,    -1,   214,   215,
     216,   217,   218,   219,   220,    -1,   222,    -1,   224,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,    -1,
      -1,   237,   238,   239,   240,    -1,   242,    -1,    -1,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,    -1,    -1,   283,   284,   285,
     286,    -1,    -1,   289,   290,   291,   292,   293,    -1,   295,
     296,    -1,    -1,   299,   300,   301,    -1,    -1,   304,   305,
      -1,   307,   308,   309,   310,    -1,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,    -1,    -1,
      -1,    -1,   328,   329,    -1,   331,   332,   333,    -1,    -1,
     336,   337,   338,    -1,   340,   341,   342,   343,   344,   345,
      -1,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,    -1,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,    -1,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,    -1,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,    -1,   404,   405,
     406,   407,   408,    -1,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,    -1,    -1,
      -1,   427,   428,    -1,   430,   431,   432,    -1,   434,   435,
     436,   437,   438,    -1,   440,   441,   442,    -1,    -1,   445,
     446,    -1,   448,    -1,    -1,   451,   452,   453,   454,   455,
     456,   457,   458,   459,    -1,   461,   462,   463,    -1,   465,
     466,   467,   468,    -1,   470,   471,   472,   473,   474,    -1,
     476,   477,    -1,   479,   480,   481,   482,   483,   484,   485,
     486,   487,    -1,    -1,   490,    -1,    -1,   493,   494,   495,
     496,   497,   498,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   510,   511,   512,   513,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    37,    -1,    -1,
      -1,    -1,    42,    43,    44,    -1,    46,    47,    48,    49,
      50,    51,    52,    -1,    54,    55,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    -1,
      -1,    81,    -1,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    99,
      -1,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,    -1,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,    -1,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,   139,
      -1,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,   152,    -1,   154,   155,   156,   157,   158,   159,
      -1,    -1,   162,    -1,    -1,   165,   166,   167,   168,    -1,
     170,    -1,   172,   173,    -1,   175,   176,   177,   178,   179,
     180,    -1,    -1,   183,    -1,    -1,    -1,   187,   188,    -1,
     190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
     200,   201,    -1,   203,   204,   205,   206,   207,   208,   209,
      -1,   211,   212,    -1,   214,   215,   216,   217,   218,   219,
     220,    -1,   222,    -1,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,    -1,    -1,   237,   238,   239,
     240,    -1,   242,    -1,    -1,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,    -1,    -1,   283,   284,   285,   286,    -1,    -1,   289,
     290,   291,   292,   293,    -1,   295,   296,    -1,    -1,   299,
     300,   301,    -1,    -1,   304,   305,    -1,   307,   308,   309,
     310,    -1,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,    -1,    -1,    -1,    -1,   328,   329,
      -1,   331,   332,   333,    -1,    -1,   336,   337,   338,    -1,
     340,   341,   342,   343,   344,   345,    -1,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,    -1,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,    -1,   372,   373,   374,   375,   376,   377,    -1,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,    -1,   393,   394,   395,   396,   397,   398,   399,
      -1,   401,   402,    -1,   404,   405,   406,   407,   408,    -1,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,    -1,    -1,    -1,   427,   428,    -1,
     430,   431,   432,    -1,   434,   435,   436,   437,   438,    -1,
     440,   441,   442,    -1,    -1,   445,   446,    -1,   448,    -1,
      -1,   451,   452,   453,   454,   455,   456,   457,   458,    -1,
      -1,   461,   462,   463,    -1,   465,   466,   467,   468,    -1,
     470,   471,   472,   473,   474,    -1,   476,   477,    -1,   479,
     480,   481,   482,   483,   484,   485,   486,   487,    -1,    -1,
     490,    -1,    -1,   493,   494,   495,   496,   497,   498,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     510,   511,   512,   513,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,
      44,    -1,    46,    47,    48,    -1,    50,    51,    52,    53,
      54,    -1,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,    83,
      84,    85,    86,    87,    88,    -1,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    99,    -1,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,    -1,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,   139,    -1,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,    -1,   162,    -1,
      -1,   165,   166,   167,   168,    -1,   170,    -1,   172,    -1,
      -1,    -1,   176,   177,   178,    -1,   180,    -1,    -1,   183,
      -1,   185,   186,    -1,   188,    -1,   190,   191,   192,   193,
     194,   195,   196,    -1,   198,   199,   200,   201,    -1,   203,
     204,   205,   206,   207,   208,   209,    -1,   211,    -1,   213,
     214,   215,   216,   217,   218,   219,   220,    -1,   222,    -1,
     224,    -1,    -1,   227,    -1,   229,   230,   231,   232,   233,
     234,    -1,    -1,   237,    -1,   239,    -1,    -1,   242,    -1,
      -1,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,    -1,   276,   277,   278,   279,   280,   281,    -1,   283,
     284,    -1,   286,    -1,   288,   289,   290,   291,   292,   293,
      -1,   295,   296,    -1,    -1,   299,   300,   301,    -1,    -1,
     304,   305,   306,    -1,   308,   309,    -1,   311,   312,   313,
     314,   315,   316,   317,    -1,   319,   320,   321,   322,   323,
      -1,    -1,    -1,    -1,   328,   329,   330,    -1,   332,   333,
     334,    -1,   336,   337,   338,    -1,   340,   341,   342,   343,
     344,   345,    -1,   347,   348,   349,    -1,   351,   352,   353,
     354,   355,   356,    -1,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,    -1,   372,   373,
      -1,   375,   376,   377,   378,    -1,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,    -1,    -1,
     394,   395,   396,   397,   398,   399,   400,   401,   402,    -1,
      -1,   405,   406,   407,   408,    -1,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,    -1,    -1,   427,   428,    -1,   430,    -1,   432,    -1,
     434,   435,   436,   437,   438,    -1,   440,   441,   442,    -1,
      -1,   445,   446,   447,   448,   449,    -1,   451,   452,   453,
     454,   455,   456,   457,   458,    -1,    -1,   461,   462,   463,
      -1,   465,   466,   467,   468,    -1,   470,   471,   472,   473,
     474,   475,   476,   477,    -1,   479,    -1,   481,   482,   483,
     484,   485,   486,   487,    -1,    -1,   490,    -1,    -1,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    37,    -1,    -1,    -1,    -1,    42,
      43,    44,    -1,    46,    47,    48,    49,    50,    51,    52,
      -1,    54,    55,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    -1,    -1,    81,    -1,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    99,    -1,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,    -1,   118,    -1,   120,   121,   122,
     123,   124,   125,    -1,    -1,   128,   129,   130,   131,    -1,
      -1,   134,   135,   136,   137,   138,   139,    -1,   141,   142,
     143,    -1,   145,   146,   147,    -1,   149,   150,   151,   152,
      -1,   154,   155,   156,   157,   158,   159,    -1,    -1,   162,
      -1,    -1,   165,   166,   167,   168,    -1,   170,    -1,   172,
     173,    -1,   175,   176,   177,    -1,   179,   180,    -1,    -1,
     183,    -1,    -1,    -1,   187,   188,    -1,   190,   191,   192,
     193,   194,   195,   196,   197,   198,   199,   200,   201,    -1,
     203,   204,   205,   206,   207,   208,   209,    -1,   211,   212,
      -1,   214,   215,   216,   217,   218,   219,   220,    -1,   222,
      -1,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,    -1,    -1,   237,   238,   239,   240,    -1,   242,
      -1,    -1,   245,   246,   247,   248,   249,   250,   251,    -1,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,    -1,    -1,
     283,   284,   285,   286,    -1,    -1,   289,   290,   291,   292,
     293,    -1,   295,   296,    -1,    -1,   299,   300,   301,    -1,
      -1,   304,   305,    -1,   307,   308,   309,   310,    -1,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,    -1,    -1,    -1,    -1,   328,   329,    -1,   331,   332,
     333,    -1,    -1,   336,   337,   338,    -1,   340,   341,   342,
     343,   344,   345,    -1,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,    -1,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,    -1,   372,
     373,   374,   375,   376,   377,    -1,   379,   380,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,    -1,
     393,   394,   395,   396,   397,   398,   399,    -1,   401,   402,
      -1,   404,   405,   406,   407,   408,    -1,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,    -1,
     423,    -1,    -1,    -1,   427,   428,    -1,   430,   431,   432,
      -1,   434,   435,   436,   437,   438,    -1,   440,   441,   442,
      -1,    -1,   445,   446,    -1,   448,    -1,    -1,   451,   452,
     453,   454,   455,   456,   457,   458,    -1,    -1,   461,   462,
     463,    -1,   465,   466,   467,   468,    -1,   470,   471,   472,
     473,   474,    -1,   476,   477,    -1,   479,   480,   481,   482,
     483,   484,   485,   486,   487,    -1,    22,   490,    -1,    -1,
     493,   494,   495,   496,   497,   498,    32,    -1,    34,    35,
      -1,    -1,    -1,    24,    -1,    -1,    -1,   510,   511,   512,
     513,    -1,    -1,    -1,    -1,    -1,    52,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    61,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    75,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      86,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      81,    -1,    98,    -1,   100,    -1,    -1,    -1,    22,    -1,
      -1,    -1,    -1,    -1,    -1,   111,    97,    -1,    32,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     126,   127,    -1,    -1,    -1,    -1,    -1,    -1,    52,    -1,
      -1,   137,    -1,    -1,    -1,    -1,    -1,    61,   144,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   152,    -1,    -1,    -1,
      -1,    75,    -1,    -1,    -1,    -1,   147,    -1,    -1,    -1,
      -1,    -1,    86,    -1,   170,    -1,   157,    -1,   174,    -1,
      -1,    -1,    -1,    -1,    98,    -1,   100,    -1,    -1,    -1,
     171,    -1,    -1,    -1,    -1,   176,    -1,   111,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   126,   127,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   217,    -1,   137,    -1,   206,    -1,    24,    -1,    -1,
     144,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   152,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   245,
      -1,    -1,    -1,    -1,    -1,    -1,   170,    -1,    -1,    -1,
     174,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     251,    -1,    -1,    -1,   255,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    81,    -1,    -1,   268,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      97,    -1,    -1,   217,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   324,   325,
     326,   245,    -1,    -1,    -1,    -1,   332,    -1,    -1,    -1,
     336,    -1,   323,    -1,    -1,    -1,    -1,    -1,   329,    -1,
     147,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     157,    -1,    -1,    -1,   345,    -1,    -1,    -1,    -1,    -1,
      -1,   367,    -1,    -1,   171,    -1,    -1,    -1,    -1,   176,
     376,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   392,    -1,    -1,   380,
      -1,    -1,   383,   399,    -1,    -1,    -1,   403,    -1,   206,
     324,   325,   326,   394,    -1,    -1,   397,   413,   332,    -1,
      -1,    -1,   336,    -1,    -1,    -1,    -1,    -1,    -1,   425,
      -1,    -1,    -1,   429,   415,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   429,    -1,
      -1,    -1,    -1,   367,   251,   451,   437,   438,   255,    -1,
      -1,    -1,   376,    -1,    -1,    -1,    -1,   448,   464,    -1,
      -1,   268,    -1,   454,   470,    -1,    -1,    -1,   392,   475,
      -1,    -1,    -1,    -1,   480,   399,    -1,    -1,    -1,   403,
      -1,    -1,    -1,    -1,    -1,    -1,   492,    -1,    -1,   413,
      -1,   482,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   425,    -1,    -1,    -1,   429,    -1,    -1,    -1,    -1,
     516,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   329,    -1,   530,    -1,    -1,   451,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   345,    -1,
     464,    -1,    -1,    -1,    -1,    -1,   470,    -1,    -1,    -1,
      -1,   475,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   492,    -1,
      -1,    -1,    -1,   380,    -1,    -1,   383,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   394,    -1,    -1,
     397,    -1,   516,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   530,    -1,   415,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   429,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   438,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   448,    -1,    -1,    -1,    -1,    -1,   454,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   482
};

/* YYSTOS[STATE-NUM] -- The symbol kind of the accessing symbol of
   state STATE-NUM.  */
static const yytype_int16 yystos[] =
{
       0,    22,    32,    34,    35,    47,    52,    61,    75,    84,
      86,    98,   100,   111,   126,   127,   128,   137,   144,   152,
     154,   155,   170,   174,   201,   245,   324,   325,   326,   332,
     336,   367,   376,   392,   399,   403,   413,   425,   429,   451,
     464,   467,   470,   475,   492,   516,   530,   542,   543,   544,
     545,   546,   553,   564,   565,   566,   569,   570,   572,   583,
     601,   649,   652,   661,   669,   672,   676,   678,   681,   682,
     693,   699,   701,   705,   712,   716,   717,   718,   725,   730,
     746,   747,   750,   751,   754,   756,   757,   758,   759,   761,
     763,   764,   768,   821,   822,   995,   998,   999,  1000,  1001,
    1006,  1009,  1015,  1016,  1017,  1021,   445,   495,   996,   206,
     383,   394,   429,   482,   108,   195,   567,   996,     3,    22,
      23,    24,    25,    26,    27,    28,    29,    31,    32,    33,
      42,    43,    44,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    59,    60,    61,    62,    63,
      64,    67,    68,    69,    70,    71,    72,    73,    75,    76,
      77,    78,    79,    81,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    94,    95,    96,    97,    98,    99,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   118,   120,   121,   122,
     123,   124,   125,   128,   129,   130,   131,   134,   135,   136,
     137,   138,   139,   141,   142,   143,   145,   146,   147,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   162,   165,   166,   167,   168,   170,   172,   173,   175,
     176,   177,   178,   179,   180,   183,   185,   186,   187,   188,
     190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
     200,   201,   203,   204,   205,   206,   207,   208,   209,   211,
     212,   213,   214,   215,   216,   217,   218,   219,   220,   222,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   237,   238,   239,   240,   242,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   283,   284,   285,   286,   288,   289,   290,
     291,   292,   293,   295,   296,   299,   300,   301,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   328,   329,
     330,   331,   332,   333,   334,   336,   337,   338,   340,   341,
     342,   343,   344,   345,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   404,   405,   406,   407,
     408,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   427,   428,   430,   431,
     432,   434,   435,   436,   437,   438,   440,   441,   442,   445,
     446,   447,   448,   449,   451,   452,   453,   454,   455,   456,
     457,   458,   461,   462,   463,   465,   466,   467,   468,   470,
     471,   472,   473,   474,   475,   476,   477,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   490,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   576,   686,
     687,   688,   901,   984,   988,     3,   178,   252,   422,   571,
     576,   686,   297,   996,    55,   174,   530,   596,   180,   246,
     302,   323,   383,   435,   437,   454,   460,   463,   647,   674,
     724,     5,    30,   336,   576,   577,   983,     3,    30,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    45,    49,
      53,    54,    55,    56,    57,    58,    65,    66,    71,    72,
      74,    79,    80,    81,    82,    83,    89,    93,   100,   101,
     108,   112,   115,   117,   119,   126,   127,   132,   133,   140,
     144,   148,   153,   160,   161,   163,   164,   167,   169,   171,
     173,   174,   175,   178,   179,   181,   182,   184,   185,   186,
     189,   197,   202,   210,   212,   213,   219,   220,   221,   222,
     223,   225,   226,   228,   235,   236,   238,   240,   241,   243,
     244,   252,   274,   275,   276,   281,   282,   285,   287,   288,
     290,   294,   297,   298,   302,   303,   306,   307,   310,   311,
     324,   325,   326,   327,   330,   331,   334,   335,   339,   346,
     352,   357,   371,   374,   378,   392,   393,   400,   403,   404,
     407,   409,   422,   424,   425,   426,   429,   431,   433,   439,
     441,   442,   443,   444,   447,   449,   450,   453,   459,   460,
     464,   469,   475,   476,   478,   480,   488,   489,   491,   492,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   582,   686,   690,   692,    24,    81,    97,   147,   157,
     171,   176,   206,   251,   255,   268,   329,   345,   380,   383,
     394,   397,   415,   429,   437,   438,   448,   454,   482,   674,
     694,   695,   698,   996,   983,   100,   137,   480,   530,   545,
     546,   553,   569,   570,   583,   601,   649,   652,   661,   669,
     676,   678,   681,   682,   693,   701,   708,   712,   718,   725,
     746,   750,   751,   754,   756,   995,   998,   999,  1001,  1006,
    1009,  1015,  1021,   108,    75,    66,    79,    81,   160,   235,
     288,   298,   311,   330,   335,   379,   424,   447,   449,   453,
     475,   530,   575,   576,   577,   757,   822,   824,   826,   836,
     843,   844,   901,   903,   904,   108,     5,   576,   578,   748,
     576,   983,    30,   180,   246,   398,   441,   445,   477,   576,
    1007,  1008,  1019,   996,    30,   132,   777,   778,   180,   246,
     383,   398,   441,   477,  1010,  1011,  1019,   996,   576,   756,
     768,  1020,   576,   843,   429,   774,   575,   175,   530,  1003,
     530,   355,   769,   770,   983,   769,   757,   758,  1015,     0,
     533,   480,   706,   122,   216,   466,   217,   148,   221,   303,
     459,   780,   781,   826,   826,   757,   759,   761,   536,    30,
     441,   445,   756,  1020,   195,   575,   983,   195,   575,   195,
     843,   195,   575,   282,   578,   351,   997,   528,   532,   579,
     580,   530,    82,   108,   176,   206,   251,   268,   383,   394,
     429,   454,   482,   574,   108,   756,   575,   435,   437,   435,
     437,   365,   195,   575,   575,   176,   181,   243,   244,   251,
     355,   394,   429,   433,   482,   659,   662,   390,   206,    30,
     983,   195,   582,   257,   448,   107,   429,   429,   482,   387,
     390,   195,   576,   696,   990,   195,   980,   983,   195,   983,
     530,   704,   302,   437,   708,     3,   475,   686,   690,   709,
     711,   712,   714,   715,   706,   576,   578,   571,   530,   530,
     169,   530,   757,   844,   530,   530,   575,   530,   530,   530,
     174,   530,   530,   530,   530,   757,   822,   826,   836,   523,
     579,    40,   576,   837,   838,   837,   392,   536,   760,    37,
      42,   101,   175,   212,   228,   238,   275,   324,   331,   374,
     393,   464,   840,   838,    40,   576,   837,   839,   516,   848,
     578,   519,   530,   530,   752,  1008,  1008,  1008,   513,   227,
    1008,   532,   297,     4,     6,     7,     8,     9,    10,    39,
      54,    56,    57,    65,    71,    72,    83,   112,   115,   117,
     136,   153,   161,   167,   185,   186,   219,   220,   222,   252,
     274,   276,   282,   287,   290,   299,   352,   378,   407,   441,
     442,   450,   476,   514,   521,   522,   523,   528,   530,   534,
     537,   538,   539,   576,   578,   757,   811,   860,   863,   866,
     867,   868,   870,   871,   872,   873,   875,   876,   892,   894,
     895,   896,   897,   898,   899,   900,   901,   902,   904,   906,
     921,   922,   933,   955,   962,   970,   971,   972,   984,   985,
     986,   969,   971,  1010,  1010,   578,  1010,   513,  1010,   174,
     443,   519,   997,   532,   579,   683,   843,     3,   173,   175,
     480,   712,  1002,  1004,   173,  1005,   892,   939,   940,   769,
     536,   530,   992,   531,   531,   531,   544,   575,   174,   302,
     733,   158,   683,   748,    30,   132,   775,   775,    59,   775,
     164,   169,   241,   294,   786,   788,   789,   814,   816,   817,
     818,   184,   297,   469,   297,   780,   781,   530,   430,  1018,
     513,   227,   153,    26,    32,   137,   301,   363,   367,   399,
     472,   558,   561,   562,   363,   153,    40,    60,   106,   205,
     256,   266,   279,   313,   363,   369,   394,   399,   413,   547,
     550,   561,   153,   363,   399,   561,   153,   363,   399,   561,
     153,    40,   568,   298,   497,   892,   963,   581,   582,   580,
       3,    30,    37,    42,    49,    55,    81,    83,    89,   101,
     132,   173,   175,   178,   179,   197,   212,   225,   226,   228,
     238,   240,   252,   275,   285,   307,   310,   331,   374,   393,
     404,   422,   431,   453,   478,   480,   531,   686,   691,   892,
     942,   943,   987,   993,   892,   429,   575,   576,   531,   530,
     636,   383,   647,   674,   282,   670,    40,   482,   195,   575,
     195,   575,   651,   195,   575,   195,   575,   268,   195,   576,
     673,    89,   721,   153,   496,    90,   129,   316,   436,   195,
     576,   153,   532,   991,    63,   370,   536,   697,   153,   536,
     697,   153,   297,   702,   703,   892,   993,   365,   531,   536,
       4,   161,   297,   450,   521,   522,   549,   552,   578,   707,
     709,   710,   713,   986,   708,   443,   530,   591,   595,   892,
     940,   530,     3,    68,    69,   109,   110,   113,   114,   192,
     193,   258,   259,   260,   261,   262,   263,   264,   265,   269,
     270,   347,   348,   388,   389,   486,   487,   510,   511,   578,
     878,   879,   880,   881,   882,   883,   884,   885,   886,   887,
     888,   889,   890,   945,   946,   838,   839,   892,   575,   892,
     947,   521,   522,   576,   893,   894,   922,   933,   949,   575,
     530,   892,   939,   950,   892,    58,   174,   236,   444,   892,
     940,   953,   892,   531,   577,   530,   431,   794,   795,   795,
     777,   778,   826,   223,   772,    37,   228,   393,   840,   228,
     307,   841,   826,   841,   228,   840,   530,   228,   841,   149,
     203,   828,   228,   795,   530,   577,   530,   795,   304,   892,
    1012,  1014,   942,     3,    37,    42,    49,    54,    55,    56,
      57,    71,    72,    81,    83,    89,   101,   112,   115,   167,
     173,   175,   179,   197,   212,   219,   220,   222,   225,   226,
     228,   238,   240,   252,   274,   275,   276,   285,   290,   307,
     310,   331,   352,   374,   378,   393,   400,   404,   407,   422,
     431,   441,   442,   453,   459,   476,   480,   686,   689,   854,
     856,   857,   859,   861,   863,   865,   867,   868,   869,   871,
     872,   875,   876,   944,   989,    40,   239,   576,   530,   528,
     757,   479,   874,   892,   959,   874,   874,   530,   530,   862,
     862,   334,   757,   530,   864,   534,    71,    72,   874,   892,
     862,   530,   530,   494,   516,   530,   877,   530,   877,   892,
     892,   892,    83,   149,   973,   974,   892,   940,   941,   757,
     892,   939,   577,   923,   924,   925,     9,   582,   532,   579,
     964,   579,   530,   578,   530,   530,   578,   986,     3,     8,
      11,    15,    16,    17,    18,    19,    20,    21,    36,    40,
      46,    53,    80,   179,   197,   202,   225,   226,   240,   282,
     285,   299,   302,   404,   514,   517,   518,   519,   521,   522,
     523,   524,   525,   526,   931,   932,   933,   935,   967,   493,
     907,   310,   892,   536,   772,   530,   578,   772,     3,   117,
     246,   549,   578,   876,  1013,   104,  1014,  1014,   576,    40,
     576,   531,   536,   706,   536,   531,   770,   980,   981,    40,
     992,   683,   196,   365,   223,   636,   399,   174,   481,   749,
     759,   759,    30,   782,   783,   892,    59,   759,   776,   166,
     278,   802,   230,   279,   351,   402,   466,     4,     9,    30,
     797,   892,   521,   522,   798,   799,   892,   894,   814,   815,
     789,   788,   786,   787,   169,   817,   292,   819,    59,   765,
     766,   767,   829,   893,   971,   971,   786,   814,   940,   239,
     575,    74,    82,    93,   171,   195,   339,   460,   576,   618,
     628,   643,    82,    93,   755,    93,   755,   530,   443,   530,
     616,   250,   463,   616,    93,   536,   443,   575,     3,   859,
     549,    59,   551,   549,   549,   106,   256,   266,    59,   443,
     492,   516,   548,   272,   383,   548,   550,   843,    93,   443,
     755,   383,   575,   443,   383,   567,   576,   591,   529,   540,
     942,   942,   943,   536,   780,   781,    13,    14,   225,   225,
     443,   443,   576,   635,   640,   492,   594,   575,   355,   394,
     429,   482,   659,   662,   390,   153,   100,   601,   661,   671,
     676,   718,  1021,   145,   856,   575,   282,   547,   677,   282,
     530,   636,    40,   282,   636,   282,   530,   653,   654,   655,
     656,   657,   658,   660,   195,   575,   282,   202,   675,   195,
     576,   630,   722,   582,   153,   174,   700,   696,   581,   532,
     990,   980,   983,   983,   990,   531,   536,    13,   708,   714,
       4,   986,     4,   986,   578,   582,   593,   600,    55,   102,
     123,   142,   146,   170,   173,   190,   287,   295,   318,   349,
     597,    40,   531,   892,   531,   174,   536,   531,   327,   948,
     531,   893,   893,    11,    15,    16,    19,    20,    21,   202,
     225,   299,   517,   518,   519,   521,   522,   523,   524,   525,
     526,   933,   893,   531,   536,   845,   846,   903,   169,   174,
     951,   952,   536,   531,    40,   953,   940,   953,   953,   174,
     531,    40,   837,   530,   981,     4,     9,   576,   790,   792,
     793,   971,   969,   180,   246,   429,   435,   437,   463,   575,
     773,   489,   849,   826,   228,   826,   297,   469,   842,   826,
     228,   971,   826,   289,   289,   530,   826,   577,   850,   851,
     530,   577,   850,   536,   531,   536,   532,   530,   859,   530,
     530,   532,    39,   858,   530,   878,   879,   880,   881,   882,
     883,   884,   885,   886,   887,   888,   889,   890,   891,   531,
     536,   862,   583,   682,   725,   730,   753,   756,   998,  1015,
     940,   941,   530,   488,   956,   957,   892,   941,   986,   892,
     926,   927,   928,   929,   874,   874,     8,    15,    16,    19,
      20,    21,   517,   518,   519,   521,   522,   523,   524,   525,
     526,   576,   931,   936,   531,   940,   441,   441,   986,   986,
     530,   530,   576,   365,   978,   169,   529,   531,   536,   540,
     536,   535,   523,   580,   940,   986,   892,   891,   891,   856,
     892,   892,   892,   892,   892,   892,   892,   892,     5,   582,
     994,   441,    45,   426,   968,   990,   892,   892,   530,   757,
     897,   954,   962,   132,   161,   282,   287,   292,   450,   461,
     892,   287,   530,   892,   443,    53,   179,   197,   202,   240,
     404,   892,   892,   892,   892,   892,   892,   892,   892,   892,
     892,    30,    38,   409,   930,   528,   532,   966,   184,   165,
     908,   378,   530,   922,   972,   174,   823,   942,   823,   530,
     578,   576,   575,  1002,   564,   575,   892,   536,   531,   255,
     282,   771,   469,   685,   575,   727,   530,   576,   732,   742,
     743,   745,   576,   578,   576,   578,    41,   126,   784,   536,
     469,   784,   272,   759,   378,   379,   521,   522,   799,   801,
     894,   402,   230,   298,   322,   322,   536,   525,     4,   800,
     986,   800,   378,   379,   801,   575,   979,   286,   406,   820,
     530,   981,   982,   536,   184,   469,   202,   184,   223,   815,
     787,   531,   363,   561,   530,   195,   628,   983,   230,   282,
     230,   469,   530,   621,   855,   856,   983,   576,   195,   983,
     195,   576,    26,   137,   399,   557,   560,   582,   612,   626,
     983,   582,   620,   639,   983,   558,   983,   363,   399,   547,
     561,   549,   990,   983,   549,   990,   983,   549,   363,   399,
     561,   983,   983,   983,   983,   363,   399,   561,   983,   983,
     578,   522,   892,   963,   780,   780,   780,   478,   943,   196,
     368,   779,   892,   892,   287,   573,   578,   287,   573,   576,
     344,   590,   531,   536,   295,   174,   443,   585,   670,   482,
     575,   575,   651,   575,   575,   268,   673,   575,   302,   647,
     530,   757,   530,   153,   153,   240,   576,   618,   628,   631,
     634,   644,   646,   492,   494,   623,   152,   756,   153,   492,
     723,   153,   531,   942,   536,   536,    40,   282,   321,   153,
       3,   530,   282,   297,   576,     3,   697,   581,   697,   297,
     697,   702,   892,   591,   252,   523,   528,   530,   549,   592,
     713,   898,   899,   900,   531,   536,    40,   589,   578,   589,
     282,   287,   349,   589,    59,   589,   856,   531,   892,   892,
     892,   951,   856,   893,   893,   893,   893,   893,   893,   132,
     282,   292,   893,   893,   893,   893,   893,   893,   893,   893,
     893,   893,   826,   531,   536,    40,   847,   892,   892,   952,
     951,   856,   531,   531,   531,   940,   856,   981,   531,   322,
     525,   322,   379,   525,   530,   530,   772,   435,   437,   435,
     437,   575,   774,   774,   774,   892,   184,   803,   842,   826,
     892,   530,   826,   169,   530,   577,   833,   842,   856,   531,
     536,   850,   531,  1012,     3,   944,    39,   858,   576,   853,
     853,     3,   528,   528,   986,   443,   443,   443,   443,   856,
     466,   531,   529,   940,   892,   140,   957,   958,   531,   531,
     531,   540,   536,   535,   532,   531,   531,   513,   513,   531,
     531,   892,   981,   530,   892,   975,   576,   905,   960,   961,
     892,   892,   923,   974,   531,   531,   531,   513,   893,   893,
     146,   940,   174,   132,   161,   287,   292,   450,   461,   530,
     146,   936,   892,   426,   968,   892,   954,   892,   443,   530,
     757,   892,   963,   581,   530,   530,   156,   909,   824,   825,
     849,   780,   849,   986,   891,   992,   992,   255,   530,   825,
     489,   684,    40,    59,   728,   738,   745,   964,   536,   823,
     519,   749,   749,   515,   785,   783,   299,   931,   934,   785,
       4,   986,   801,   298,   466,   798,   536,   249,   981,   765,
      59,   971,   530,   577,    59,   272,   443,   892,   282,   643,
     530,   153,   530,   621,   206,   640,   641,   602,    40,   178,
     611,   637,   602,    26,   137,   367,   369,   399,   554,   555,
     556,   562,   563,   153,   697,   153,   697,   612,   626,   612,
     531,   536,   578,   605,   519,   532,   531,   536,   443,   383,
      93,   443,   755,   383,   443,   443,   443,   383,   568,   540,
     529,   540,   779,   779,   779,   943,   289,   289,   531,   530,
     584,     3,   416,   417,   578,   599,   635,   590,   575,   677,
     530,    40,   636,   656,   658,   575,   675,   670,   365,   429,
     578,   679,   680,   640,   575,   575,   651,   575,   531,   536,
     295,   616,   295,   297,   615,   983,   492,   650,   575,   616,
      40,   575,   531,   654,   660,   657,   660,   429,   892,   153,
       5,   673,   600,   153,   575,   700,   990,   587,   598,   713,
     593,   578,   578,   287,   640,   523,   640,   578,   523,   640,
     578,   531,   531,   952,   174,   132,   292,   530,   531,   536,
     848,   845,   530,   531,   531,   531,   576,   790,   849,   774,
     774,   774,   774,   575,   575,   575,    59,   189,   812,   842,
     981,   530,   830,   831,   832,   895,   897,   981,   169,    80,
     852,   851,   531,   531,   528,   856,   531,   536,   531,   986,
     529,   986,   531,   879,   881,   882,   883,   882,   883,   883,
     531,   439,   892,   144,   892,   926,   936,   877,   877,   531,
     531,   892,   975,   976,   977,    40,   202,   536,   531,   978,
     891,   892,    36,    36,   892,   531,   892,   174,   530,   944,
     892,   531,   146,   893,   893,   146,   146,   892,   892,   529,
     540,   530,   965,   781,   489,   892,   309,   913,   536,   803,
     779,   803,   531,   753,   892,   371,   736,   576,   272,   330,
     117,   312,   530,   726,   756,   531,   536,   732,   684,   892,
     166,   234,   530,   785,   298,   575,   531,   982,   184,   757,
     758,   971,   982,   983,   983,   531,   153,   641,   628,   641,
     602,   630,   536,   531,   119,   210,   279,   282,   627,   530,
      33,    59,   648,   637,    74,    80,    93,   117,   119,   210,
     282,   287,   339,   357,   460,   469,   607,   608,   622,   178,
     117,   194,   282,   616,   548,   107,   117,   178,   282,   415,
     418,   550,   616,   399,   556,   454,   983,   576,   560,     3,
      37,    42,    49,    55,    81,    83,    89,   101,   173,   175,
     178,   179,   197,   212,   225,   226,   228,   238,   240,   252,
     275,   281,   285,   299,   307,   310,   331,   374,   393,   400,
     404,   422,   431,   453,   459,   480,   521,   522,   549,   578,
     603,   642,   686,   692,   856,   934,   987,   582,   639,   983,
     983,   983,   983,   983,   983,   983,   983,   983,   983,   591,
     963,   963,   531,   531,   531,   780,   107,   383,   532,   548,
     599,   530,   634,   756,   723,   321,   530,   647,   195,   575,
     531,   536,   531,   677,   530,    40,   625,   623,   631,    86,
     704,   107,   279,   636,   756,   656,   658,    40,    40,   757,
     758,   575,   297,   663,   675,   531,   630,   469,   720,   697,
     531,   536,   640,   893,   174,   530,   944,   838,   826,   850,
     531,   536,   531,   803,   575,   575,   575,   575,    30,   103,
     185,   377,   530,   804,   805,   806,   807,   808,   809,   810,
     892,   892,   491,   910,   531,   894,   937,   938,   202,   184,
     827,   831,   531,   833,   834,   835,   990,   858,   986,   858,
     576,   858,   529,   529,   892,   536,   531,   576,   892,   894,
     961,   892,   892,   892,   944,   531,   892,    36,    36,   892,
     892,   146,   531,   522,   963,   531,   942,   531,   892,   531,
     530,   576,   914,   812,   531,   812,   578,   531,   970,   475,
     428,   468,   737,   576,   731,   741,   297,   734,   519,   745,
     736,   936,    59,   531,   531,   474,   475,   762,   602,   628,
     531,   531,   492,   633,   120,   198,   208,   119,   471,   892,
     117,    40,   530,   990,   983,   893,   120,   198,   119,   287,
     230,   575,   633,    88,   648,   195,   287,   549,   892,   648,
     287,   521,   522,   552,   576,   856,   697,   697,     3,   252,
     422,   987,   991,   519,   443,   443,   529,   529,   779,   531,
     531,   576,   591,   469,   586,   588,   640,   531,   650,    40,
       5,   600,   429,   282,   530,   578,   723,   634,   152,   756,
     150,   204,   615,   122,   137,   338,   650,   107,   723,   492,
    1022,   429,   321,   163,   280,   429,   665,   308,   530,   297,
     576,   719,   530,   598,   893,   944,   531,   531,   531,     9,
     364,   796,   812,   530,   401,   530,   531,   536,   576,   911,
     912,   346,   813,   536,   531,   530,   577,    59,   531,   202,
     531,   834,   529,   856,   975,   529,   195,   531,   892,   892,
     892,   540,   529,   540,   531,   531,   576,   915,   910,   578,
     910,   536,   474,   964,   531,   536,    91,   736,   892,   531,
     982,   982,   357,   633,   530,   624,   602,   531,   194,   530,
     892,   282,   608,   633,   636,   983,    40,   153,   852,   991,
     525,   603,   983,   983,   531,   548,   124,   531,   623,   756,
     663,   531,   575,   153,    40,   531,   983,   650,    30,    85,
      94,   118,   194,   207,   415,   418,   619,   619,   379,   379,
      40,    64,    74,   246,   757,     5,   523,   530,   575,   575,
     530,   600,   575,   530,   576,   735,   744,   903,   531,   838,
     531,   530,   910,   940,   530,   940,   806,    40,   536,   892,
     469,   791,   894,   971,   981,   838,   530,   838,   892,   963,
     963,   318,   916,   813,   813,   756,   312,   756,   731,   297,
     530,   729,   575,   602,   582,   629,   632,   419,   484,   609,
     610,   530,   604,   892,   531,   254,   645,   194,   469,   559,
     525,   454,   591,   578,   723,   615,  1022,   308,   530,   575,
     756,   623,   704,   756,    74,   300,    74,   663,   974,   981,
     664,   665,   664,   628,   666,   667,   531,   720,   892,    80,
     739,   531,   536,   739,     9,   813,   531,   805,   531,   914,
     912,   381,   531,   971,   529,   529,   529,    59,   780,   791,
     791,   737,    93,   744,   133,   636,   519,   531,   536,   547,
     531,   279,   617,   175,   317,   405,   297,   613,   614,   638,
     604,   892,   454,    40,   530,   530,  1022,   615,   650,  1022,
     300,   300,   308,   531,   139,   531,   536,   530,   531,   990,
     740,   990,   723,   735,   740,   531,   791,   531,   793,   531,
     939,   187,   350,   379,   917,   474,   983,   531,   283,   466,
     645,   603,   632,   531,   610,   208,   122,   466,   297,   638,
     297,   613,   756,   666,   530,   575,   301,   668,   628,   744,
     739,   784,   849,   784,    53,   104,   456,   892,   918,   919,
     918,   918,   531,   756,   849,   399,   614,    63,   279,   370,
     399,   606,   606,  1022,   531,   666,   664,   534,   531,   740,
     785,   785,   919,   378,   168,   333,   168,   333,   149,   920,
     920,   920,   743,   602,    25,   117,   287,   668,   531,   925,
     723,   784,    36,   104,   184,   279,   440,   849,   668,   535,
     849,   785,   919,   378,   305
};

/* YYR1[RULE-NUM] -- Symbol kind of the left-hand side of rule RULE-NUM.  */
static const yytype_int16 yyr1[] =
{
       0,   541,   542,   543,   543,   544,   544,   544,   544,   544,
     544,   544,   544,   544,   544,   544,   544,   544,   544,   544,
     544,   544,   544,   544,   544,   544,   544,   544,   544,   544,
     544,   544,   544,   544,   544,   544,   544,   544,   544,   544,
     544,   544,   544,   544,   544,   544,   544,   544,   669,   669,
     669,   670,   670,   671,   671,   671,   671,   671,  1021,  1021,
    1021,  1021,  1021,  1022,  1022,  1022,  1022,   750,   750,   750,
     995,   995,   995,   995,   995,   995,   996,   996,   996,   997,
     997,   997,   751,   752,   752,   753,   753,   753,   753,   753,
     753,   999,   701,   701,   701,   702,   702,   703,   703,   704,
     704,  1015,  1015,  1015,  1015,  1015,  1015,  1015,  1015,  1016,
    1016,  1017,  1017,  1018,  1018,  1019,  1019,  1020,  1020,   718,
     718,   719,   720,   720,   721,   721,   722,   722,   723,   723,
     724,   724,   583,   583,   583,   584,   584,   584,   585,   585,
     586,   586,   587,   587,   588,   588,   589,   589,   590,   590,
     591,   591,   592,   592,   592,   592,   592,   592,   592,   592,
     593,   594,   594,   595,   595,   596,   596,   597,   597,   597,
     597,   597,   597,   597,   597,   597,   597,   597,   597,   597,
     597,   597,   597,   598,   599,   599,   599,   599,   599,   600,
     600,  1001,  1001,  1001,  1001,  1001,  1002,  1002,  1002,  1002,
    1002,  1003,  1003,  1004,  1004,  1005,  1005,   672,   672,   672,
     673,   673,   674,   674,   674,   675,   675,   546,   546,   547,
     547,   548,   548,   548,   549,   549,   549,   549,   550,   550,
     550,   550,   550,   550,   550,   550,   550,   550,   550,   550,
     550,   550,   551,   551,   552,   552,   552,  1000,   661,   661,
     661,   662,   662,   662,   662,   663,   663,   663,   664,   664,
     665,   665,   666,   666,   666,   667,   667,   668,   668,   572,
     572,   573,   573,   574,   574,   574,   574,   574,   574,   574,
     574,   574,   574,   574,   570,   570,   571,   571,   565,   565,
     566,   566,   566,   567,   567,   568,   568,   545,   545,   545,
     545,   545,   545,   652,   652,   652,   652,   652,   652,   653,
     654,   655,   655,   656,   656,   657,   658,   658,   659,   659,
     660,   660,  1009,  1009,  1009,  1009,  1009,  1010,  1010,  1010,
    1010,  1011,  1011,  1012,  1013,  1013,  1013,  1013,  1013,  1013,
    1013,  1014,  1014,   676,   676,   676,   677,   677,   564,   564,
     998,   553,   553,   553,   553,   553,   553,   553,   553,   554,
     554,   555,   555,   556,   556,   556,   556,   557,   557,   558,
     558,   558,   558,   558,   558,   558,   558,   558,   558,   558,
     558,   558,   558,   558,   558,   558,   558,   558,   558,   558,
     558,   558,   558,   558,   558,   558,   558,   558,   559,   559,
     560,   560,   560,   560,   561,   561,   562,   563,   563,   563,
     754,   754,   754,   754,   754,   754,   754,   754,   754,   754,
     754,   754,   754,   755,   755,   569,   575,   575,   576,   576,
     576,   577,   577,   578,   579,   579,   580,   581,   582,   582,
     582,   582,   649,   649,   649,   650,   650,   650,   651,   681,
     681,   681,   681,   601,   601,   601,   602,   602,   603,   603,
     603,   603,   603,   603,   604,   604,   605,   606,   606,   606,
     606,   606,   607,   607,   607,   607,   608,   608,   608,   608,
     608,   608,   608,   608,   609,   609,   610,   610,   611,   611,
     611,   612,   613,   614,   614,   614,   614,   614,   615,   615,
     615,   615,   616,   617,   617,   618,   618,   619,   619,   619,
     619,   619,   619,   619,   619,   620,   620,   621,   622,   622,
     622,   622,   623,   623,   623,   623,   624,   625,   625,   625,
     626,   627,   627,   627,   627,   627,   627,   628,   628,   629,
     629,   630,   631,   631,   631,   632,   632,   633,   633,   634,
     634,   634,   635,   636,   636,   637,   637,   638,   639,   639,
     639,   639,   640,   640,   641,   641,   642,   642,   642,   643,
     643,   643,   643,   643,   643,   644,   644,   645,   645,   645,
     645,   646,   647,   647,   647,   647,   647,   647,   647,   647,
     648,   648,   746,   746,   746,   746,   747,   747,   748,   748,
     749,   749,   749,   756,   756,   757,   757,   757,   758,   758,
     758,   758,   758,   758,   758,   758,   759,   759,   760,   760,
     761,   761,   761,   761,   761,   761,   761,   761,   761,   761,
     761,   761,   761,   761,   761,   761,   761,   761,   761,   762,
     762,   763,   763,   764,   764,   765,   765,   765,   766,   766,
     767,   767,   768,   768,   768,   769,   769,   770,   771,   771,
     771,   772,   772,   773,   773,   773,   773,   773,   773,   773,
     773,   773,   774,   774,   775,   775,   775,   776,   777,   777,
     778,   778,   779,   779,   779,   780,   780,   781,   781,   782,
     782,   783,   783,   784,   784,   784,   785,   785,   785,   786,
     786,   786,   786,   787,   787,   788,   788,   788,   788,   789,
     789,   790,   790,   790,   790,   790,   790,   791,   791,   792,
     792,   793,   793,   793,   793,   794,   795,   795,   796,   796,
     797,   797,   797,   797,   797,   798,   799,   799,   799,   800,
     800,   801,   801,   802,   802,   803,   803,   803,   804,   804,
     805,   805,   806,   806,   806,   806,   806,   807,   808,   809,
     810,   811,   811,   812,   812,   813,   813,   814,   814,   815,
     815,   816,   816,   817,   818,   818,   818,   818,   819,   819,
     820,   820,   820,   821,   821,   822,   822,   823,   823,   824,
     824,   825,   825,   826,   826,   826,   826,   826,   826,   826,
     826,   826,   826,   826,   826,   827,   827,   828,   828,   828,
     829,   829,   830,   830,   830,   830,   831,   831,   832,   832,
     833,   833,   834,   835,   835,   836,   836,   836,   836,   836,
     836,   836,   836,   836,   836,   836,   837,   837,   837,   837,
     838,   838,   839,   839,   839,   839,   839,   840,   840,   840,
     840,   840,   840,   841,   841,   842,   842,   843,   843,   843,
     843,   844,   844,   845,   846,   846,   847,   847,   848,   848,
     849,   849,   850,   850,   851,   852,   852,   853,   853,   854,
     854,   855,   855,   856,   856,   856,   856,   856,   856,   856,
     856,   856,   856,   857,   857,   858,   858,   858,   859,   859,
     859,   859,   859,   859,   859,   860,   860,   860,   860,   861,
     862,   862,   863,   863,   863,   863,   863,   863,   863,   863,
     863,   863,   863,   864,   864,   865,   865,   866,   866,   867,
     868,   869,   869,   870,   870,   871,   872,   873,   873,   873,
     873,   873,   873,   874,   874,   875,   875,   875,   875,   876,
     877,   877,   877,   878,   878,   879,   879,   880,   880,   881,
     881,   882,   882,   883,   883,   884,   884,   885,   885,   886,
     886,   887,   887,   888,   888,   889,   889,   890,   890,   891,
     891,   891,   891,   891,   891,   891,   891,   891,   891,   891,
     891,   891,   891,   891,   891,   891,   891,   891,   891,   891,
     892,   892,   892,   892,   892,   892,   892,   892,   892,   892,
     892,   892,   892,   892,   892,   892,   892,   892,   892,   892,
     892,   892,   892,   892,   892,   892,   892,   892,   892,   892,
     892,   892,   892,   892,   892,   892,   892,   892,   892,   892,
     892,   892,   892,   892,   892,   892,   892,   892,   892,   892,
     892,   892,   892,   892,   892,   892,   892,   892,   892,   892,
     892,   892,   892,   892,   892,   892,   892,   892,   892,   892,
     892,   893,   893,   893,   893,   893,   893,   893,   893,   893,
     893,   893,   893,   893,   893,   893,   893,   893,   893,   893,
     893,   893,   893,   893,   893,   893,   894,   894,   895,   895,
     895,   895,   895,   895,   896,   896,   896,   897,   897,   897,
     897,   897,   897,   897,   897,   897,   897,   897,   897,   898,
     899,   900,   901,   901,   901,   901,   901,   901,   902,   902,
     903,   903,   904,   904,   904,   904,   904,   904,   904,   904,
     904,   904,   904,   904,   904,   904,   905,   906,   906,   907,
     907,   908,   908,   908,   909,   909,   910,   910,   911,   911,
     912,   913,   913,   913,   914,   915,   915,   916,   916,   917,
     917,   917,   917,   918,   918,   919,   919,   919,   919,   919,
     920,   920,   920,   920,   920,   921,   921,   922,   922,   923,
     924,   924,   925,   925,   926,   927,   927,   928,   928,   929,
     929,   930,   930,   930,   931,   931,   932,   932,   932,   932,
     932,   932,   932,   932,   932,   932,   932,   932,   932,   932,
     933,   933,   934,   934,   935,   935,   935,   935,   935,   935,
     935,   935,   936,   936,   937,   937,   938,   938,   939,   939,
     940,   940,   941,   941,   942,   942,   943,   943,   943,   944,
     944,   945,   945,   946,   946,   946,   946,   946,   946,   946,
     946,   946,   946,   946,   946,   946,   946,   946,   947,   947,
     948,   949,   949,   950,   950,   950,   950,   950,   950,   951,
     952,   953,   953,   953,   954,   954,   954,   954,   955,   956,
     956,   957,   958,   958,   959,   959,   960,   960,   961,   962,
     962,   580,   580,   580,   580,   963,   963,   964,   964,   965,
     965,   965,   966,   966,   966,   966,   966,   967,   967,   968,
     968,   969,   969,   970,   970,   971,   971,   972,   972,   972,
     973,   973,   974,   974,   975,   976,   976,   977,   977,   978,
     978,   978,   979,   979,   980,   980,   981,   981,   982,   982,
     983,   984,   984,   985,   985,   985,   985,   985,   985,   985,
     985,   985,   985,   985,   985,   985,   985,   986,   987,   987,
     987,   988,   988,   988,   989,   989,   989,   990,   990,   991,
     991,   992,   992,   993,   994,   994,   716,   716,   717,   693,
     693,   693,   693,   693,   693,   694,   694,   694,   694,   694,
     694,   694,   694,   694,   694,   694,   694,   694,   694,   694,
     694,   694,   694,   694,   695,   695,   695,   695,   695,   695,
     696,   696,   697,   697,   697,   698,   698,   698,   678,   678,
     678,   679,   679,   680,   680,  1006,  1006,  1006,  1006,  1006,
    1007,  1007,  1008,  1008,  1008,   725,   726,   726,   726,   726,
     726,   727,   727,   728,   728,   728,   729,   729,   729,   730,
     730,   731,   732,   732,   733,   733,   733,   734,   734,   734,
     735,   735,   735,   736,   736,   737,   737,   738,   738,   739,
     739,   740,   740,   741,   741,   742,   742,   743,   743,   744,
     744,   745,   699,   699,   700,   700,   705,   705,   705,   705,
     706,   706,   707,   707,   707,   708,   708,   708,   708,   708,
     708,   708,   708,   708,   708,   708,   708,   708,   708,   708,
     708,   708,   708,   708,   708,   708,   708,   708,   708,   708,
     708,   708,   708,   708,   708,   708,   708,   709,   709,   709,
     710,   710,   711,   711,   712,   712,   713,   713,   713,   713,
     714,   715,   715,   682,   682,   683,   683,   683,   684,   684,
     685,   685,   686,   686,   686,   686,   686,   686,   686,   686,
     686,   686,   686,   686,   686,   686,   686,   686,   686,   686,
     686,   686,   686,   686,   686,   686,   686,   686,   686,   686,
     686,   686,   686,   686,   686,   686,   686,   686,   686,   686,
     686,   686,   686,   686,   686,   686,   686,   686,   686,   686,
     686,   686,   686,   686,   686,   686,   686,   686,   686,   686,
     686,   686,   686,   686,   686,   686,   686,   686,   686,   686,
     686,   686,   686,   686,   686,   686,   686,   686,   686,   686,
     686,   686,   686,   686,   686,   686,   686,   686,   686,   686,
     686,   686,   686,   686,   686,   686,   686,   686,   686,   686,
     686,   686,   686,   686,   686,   686,   686,   686,   686,   686,
     686,   686,   686,   686,   686,   686,   686,   686,   686,   686,
     686,   686,   686,   686,   686,   686,   686,   686,   686,   686,
     686,   686,   686,   686,   686,   686,   686,   686,   686,   686,
     686,   686,   686,   686,   686,   686,   686,   686,   686,   686,
     686,   686,   686,   686,   686,   686,   686,   686,   686,   686,
     686,   686,   686,   686,   686,   686,   686,   686,   686,   686,
     686,   686,   686,   686,   686,   686,   686,   686,   686,   686,
     686,   686,   686,   686,   686,   686,   686,   686,   686,   686,
     686,   686,   686,   686,   686,   686,   686,   686,   686,   686,
     686,   686,   686,   686,   686,   686,   686,   686,   686,   686,
     686,   686,   686,   686,   686,   686,   686,   686,   686,   686,
     686,   686,   686,   686,   686,   686,   686,   686,   686,   686,
     686,   686,   686,   686,   686,   686,   686,   686,   686,   686,
     686,   686,   686,   686,   686,   686,   686,   686,   686,   686,
     686,   686,   686,   686,   686,   686,   686,   686,   686,   686,
     686,   686,   686,   686,   686,   686,   686,   686,   686,   686,
     686,   686,   686,   686,   686,   686,   686,   686,   686,   686,
     686,   686,   686,   686,   686,   686,   686,   686,   686,   686,
     686,   686,   686,   686,   686,   686,   686,   686,   686,   686,
     686,   686,   686,   686,   686,   686,   686,   686,   686,   686,
     686,   686,   686,   686,   686,   686,   686,   686,   686,   686,
     686,   686,   686,   686,   686,   686,   686,   686,   686,   686,
     686,   686,   687,   687,   687,   687,   687,   687,   687,   687,
     687,   687,   687,   687,   687,   687,   687,   687,   687,   687,
     687,   687,   687,   687,   687,   687,   687,   687,   687,   687,
     687,   687,   687,   687,   687,   687,   687,   687,   687,   687,
     687,   687,   687,   687,   687,   687,   687,   687,   687,   687,
     687,   687,   687,   687,   687,   687,   688,   688,   688,   688,
     688,   688,   688,   688,   688,   688,   688,   688,   688,   688,
     688,   688,   688,   688,   688,   688,   688,   688,   688,   688,
     688,   688,   688,   688,   689,   689,   689,   689,   689,   689,
     689,   689,   689,   689,   689,   689,   689,   689,   689,   689,
     689,   689,   689,   689,   689,   689,   689,   689,   689,   689,
     689,   689,   689,   690,   690,   690,   690,   690,   690,   690,
     690,   690,   690,   690,   690,   690,   690,   690,   690,   690,
     690,   690,   690,   690,   690,   690,   690,   690,   690,   690,
     690,   690,   690,   690,   690,   690,   690,   690,   690,   690,
     690,   690,   690,   690,   690,   690,   690,   690,   690,   690,
     690,   690,   690,   690,   690,   690,   690,   690,   690,   690,
     690,   690,   690,   690,   690,   690,   690,   690,   690,   690,
     690,   690,   690,   690,   690,   690,   690,   690,   690,   690,
     690,   690,   690,   690,   691,   691,   691,   691,   691,   691,
     691,   691,   691,   691,   691,   691,   691,   691,   691,   691,
     691,   691,   691,   691,   691,   691,   691,   691,   691,   691,
     691,   691,   691,   691,   691,   691,   692,   692,   692,   692,
     692,   692,   692,   692,   692,   692,   692,   692,   692,   692,
     692,   692,   692,   692,   692,   692,   692,   692,   692,   692,
     692,   692,   692,   692,   692,   692,   692,   692,   692,   692,
     692,   692,   692,   692,   692,   692,   692,   692,   692,   692,
     692,   692,   692,   692,   692,   692,   692,   692,   692,   692,
     692,   692,   692,   692,   692,   692,   692,   692,   692,   692,
     692,   692,   692,   692,   692,   692,   692,   692,   692,   692,
     692,   692,   692,   692,   692,   692,   692
};

/* YYR2[RULE-NUM] -- Number of symbols on the right-hand side of rule RULE-NUM.  */
static const yytype_int8 yyr2[] =
{
       0,     2,     1,     3,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     0,     4,     7,
       6,     2,     0,     1,     1,     1,     1,     1,     9,    12,
      11,    12,    14,     3,     4,     4,     0,     2,     4,     5,
       2,     3,     3,     2,     2,     2,     1,     1,     0,     2,
       2,     0,     5,     3,     0,     1,     1,     1,     1,     1,
       1,     4,     3,     9,    12,     1,     3,     1,     3,     3,
       0,     2,     2,     2,     2,     3,     4,     3,     1,     1,
       1,     1,     1,     1,     0,     1,     3,     1,     3,    13,
      16,     1,     2,     0,     1,     0,     1,     0,     2,     0,
       1,     0,    11,     9,     7,     0,     3,     3,     1,     1,
       3,     0,     1,     3,     1,     0,     1,     0,     1,     0,
       1,     3,     1,     1,     1,     1,     3,     1,     1,     0,
       2,     2,     0,     2,     0,     1,     0,     1,     1,     1,
       3,     3,     1,     1,     3,     3,     3,     3,     3,     3,
       4,     3,     2,     1,     1,     1,     1,     3,     1,     1,
       3,     4,     6,     5,     4,     6,     1,     1,     1,     1,
       1,     1,     0,     1,     3,     1,     0,     8,    11,    10,
       0,     1,     0,     1,     1,     0,     2,     4,     6,     1,
       2,     1,     1,     0,     1,     2,     2,     1,     2,     2,
       1,     2,     3,     2,     2,     2,     2,     3,     3,     3,
       1,     3,     1,     0,     1,     2,     2,     2,    13,    16,
      15,     1,     1,     1,     1,     4,     2,     7,     1,     0,
       4,     3,     1,     2,     0,     1,     3,     4,     0,     6,
       6,     1,     1,     1,     1,     1,     1,     1,     2,     1,
       1,     1,     1,     1,     3,     2,     1,     0,     5,     8,
       2,     3,     5,     1,     0,     2,     0,     6,     8,     6,
       8,     6,     8,     5,     8,     7,     5,     8,     7,     4,
       4,     1,     3,     1,     1,     3,     1,     3,     1,     1,
       2,     3,     2,     3,     3,     3,     3,     1,     3,     3,
       2,     3,     3,     1,     1,     1,     3,     5,     1,     1,
       1,     1,     3,     5,     8,     7,     1,     0,     2,     4,
       8,     4,     6,     4,     6,     4,     6,     4,     6,     1,
       2,     3,     2,     1,     3,     2,     3,     1,     3,     2,
       5,     3,     6,     4,     6,     6,     6,     5,     5,     6,
       9,     4,     5,     7,     6,     4,     8,     4,     2,     4,
       3,     6,     4,     2,     2,     2,     2,     1,     2,     0,
       1,     2,     2,     2,     1,     3,     4,     2,     1,     0,
       6,     6,     8,     6,     8,     6,     8,     6,     8,     8,
      10,     8,    10,     1,     0,     2,     1,     2,     1,     1,
       1,     1,     1,     1,     1,     2,     2,     1,     1,     1,
       1,     1,     7,    10,     9,     2,     3,     0,     4,     2,
       3,     2,     3,     9,    12,    11,     0,     2,     1,     1,
       1,     1,     1,     1,     3,     0,     1,     2,     1,     1,
       2,     2,     3,     1,     1,     2,     2,     1,     2,     3,
       5,     3,     2,     5,     1,     1,     1,     0,     5,     7,
       5,     2,     3,     1,     1,     2,     2,     0,     3,     4,
       4,     0,     3,     2,     0,     3,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     3,     3,     1,     2,
       2,     2,     2,     2,     2,     0,     3,     3,     3,     0,
       1,     2,     1,     2,     2,     2,     2,     3,     4,     1,
       3,     1,     1,     1,     1,     3,     1,     2,     0,     1,
       2,     0,     1,     3,     0,     2,     0,     3,     3,     1,
       5,     3,     1,     3,     1,     2,     1,     4,     5,     5,
       6,     3,     7,     4,    11,     1,     3,     2,     2,     2,
       0,     3,     1,     1,     2,     2,     2,     2,     1,     0,
       1,     2,     2,     4,     6,     6,     0,     1,     1,     1,
       0,     2,     2,     1,     1,     3,     3,     3,     1,     2,
       4,     4,     2,     3,     5,     5,     1,     1,     3,     0,
      11,    11,    10,    12,     1,     2,     5,     4,     4,     4,
       4,     7,     5,     4,     7,     6,     9,     9,     4,     1,
       1,     1,     1,     1,     1,     1,     5,     1,     1,     3,
       1,     2,     2,     2,     3,     1,     3,     7,     1,     2,
       0,     2,     0,     3,     3,     4,     4,     4,     4,     3,
       2,     1,     1,     0,     1,     1,     0,     2,     1,     5,
       1,     0,     2,     2,     0,     1,     0,     3,     5,     1,
       3,     4,     3,     1,     1,     0,     2,     2,     0,     2,
       2,     1,     1,     1,     0,     2,     4,     5,     4,     2,
       3,     2,     2,     2,     2,     1,     2,     3,     0,     1,
       0,     5,     1,     4,     6,     2,     1,     0,     4,     0,
       1,     1,     2,     2,     2,     1,     1,     2,     2,     1,
       1,     1,     1,     1,     1,     3,     3,     0,     1,     3,
       1,     2,     1,     1,     1,     1,     1,     2,     4,     4,
       5,     1,     1,     2,     0,     2,     0,     1,     3,     1,
       0,     1,     2,     3,     2,     4,     2,     3,     2,     0,
       1,     2,     0,     4,     5,     1,     2,     2,     0,     1,
       3,     1,     2,     3,     3,     3,     3,     3,     3,     1,
       4,     9,     9,     7,     9,     3,     0,     2,     2,     0,
       5,     3,     0,     1,     1,     3,     5,     3,     1,     2,
       1,     3,     5,     1,     2,     3,     4,     5,     4,     5,
       4,     6,     5,     4,     5,     5,     5,     2,     4,     1,
       1,     0,     1,     4,     5,     4,     0,     2,     2,     2,
       1,     1,     1,     1,     0,     4,     2,     1,     2,     2,
       4,     2,     6,     2,     1,     3,     4,     0,     2,     0,
       2,     0,     1,     3,     3,     2,     0,     2,     4,     1,
       1,     1,     0,     2,     3,     5,     6,     2,     3,     1,
       5,     5,     5,     3,     3,     3,     4,     0,     1,     1,
       1,     1,     1,     2,     4,     1,     1,     1,     1,     2,
       3,     0,     1,     1,     1,     1,     1,     2,     2,     2,
       2,     2,     1,     3,     0,     1,     1,     1,     1,     5,
       2,     1,     1,     1,     1,     4,     1,     2,     2,     1,
       3,     3,     2,     1,     0,     5,     2,     5,     2,     1,
       3,     3,     0,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     3,     3,     3,     3,     3,     3,     3,     0,
       1,     3,     3,     5,     2,     2,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     2,     2,     3,     3,     2,     2,     3,     3,     5,
       4,     6,     3,     5,     4,     6,     4,     6,     5,     7,
       3,     2,     4,     3,     2,     3,     3,     3,     3,     4,
       3,     4,     3,     4,     5,     6,     6,     7,     6,     7,
       6,     7,     3,     4,     4,     6,     1,     5,     4,     3,
       5,     1,     3,     2,     2,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       2,     2,     5,     6,     6,     7,     1,     2,     1,     1,
       1,     2,     2,     4,     3,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     2,     4,     2,     2,     3,
       3,     4,     3,     6,     7,     9,     7,     7,     5,     1,
       1,     1,     5,     6,     6,     4,     4,     4,     4,     6,
       5,     5,     5,     4,     6,     4,     1,     7,     9,     5,
       0,     5,     4,     0,     1,     0,     2,     0,     1,     3,
       3,     2,     2,     0,     6,     1,     0,     3,     0,     3,
       3,     3,     0,     1,     4,     2,     2,     2,     2,     2,
       3,     2,     2,     3,     0,     4,     3,     1,     5,     3,
       1,     3,     1,     2,     3,     1,     3,     1,     2,     1,
       0,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     4,     1,     4,     1,     4,     1,     2,     1,     2,
       1,     2,     1,     3,     1,     3,     1,     2,     1,     3,
       1,     2,     1,     0,     1,     3,     1,     3,     3,     1,
       3,     3,     0,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     4,     3,
       2,     3,     0,     3,     3,     2,     2,     1,     0,     2,
       2,     3,     2,     1,     1,     3,     1,     1,     5,     1,
       2,     4,     2,     0,     1,     0,     1,     3,     1,     1,
       2,     3,     5,     7,     7,     1,     0,     0,     2,     0,
       2,     3,     3,     3,     5,     7,     7,     0,     2,     1,
       0,     1,     0,     1,     3,     1,     2,     3,     2,     1,
       4,     2,     1,     0,     3,     1,     3,     1,     2,     4,
       2,     0,     1,     3,     1,     3,     1,     2,     1,     3,
       1,     1,     2,     1,     1,     2,     1,     1,     2,     7,
       2,     5,     3,     3,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     2,     2,
       3,     3,     0,     1,     1,     1,     4,     6,     3,     6,
       4,     6,     4,     6,     8,     1,     1,     1,     1,     1,
       2,     1,     2,     1,     2,     1,     1,     1,     1,     3,
       3,     3,     3,     1,     2,     2,     1,     3,     1,     1,
       1,     3,     1,     1,     0,     1,     1,     1,     6,     8,
       5,     1,     0,     1,     3,     2,     3,     3,     3,     3,
       1,     1,     1,     2,     3,     9,     1,     4,     4,     7,
       2,     1,     3,     2,     2,     0,     4,     3,     0,     1,
       0,     2,     3,     5,     2,     2,     0,     8,     5,     0,
       5,     5,     7,     2,     0,     1,     1,     1,     3,     2,
       0,     1,     0,     1,     3,     1,     3,     1,     2,     1,
       3,     2,     5,     7,     0,     2,     2,     4,     3,     5,
       1,     0,     1,     1,     0,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     3,     1,     1,     1,     1,     1,     1,
       2,     1,     1,     7,     3,     1,     2,     3,     2,     0,
       2,     0,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1
};


enum { YYENOMEM = -2 };

#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (yychar = YYEMPTY)

#define YYACCEPT        goto yyacceptlab
#define YYABORT         goto yyabortlab
#define YYERROR         goto yyerrorlab
#define YYNOMEM         goto yyexhaustedlab


#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)                                    \
  do                                                              \
    if (yychar == YYEMPTY)                                        \
      {                                                           \
        yychar = (Token);                                         \
        yylval = (Value);                                         \
        YYPOPSTACK (yylen);                                       \
        yystate = *yyssp;                                         \
        goto yybackup;                                            \
      }                                                           \
    else                                                          \
      {                                                           \
        yyerror (&yylloc, yyscanner, YY_("syntax error: cannot back up")); \
        YYERROR;                                                  \
      }                                                           \
  while (0)

/* Backward compatibility with an undocumented macro.
   Use YYerror or YYUNDEF. */
#define YYERRCODE YYUNDEF

/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)                                \
    do                                                                  \
      if (N)                                                            \
        {                                                               \
          (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;        \
          (Current).first_column = YYRHSLOC (Rhs, 1).first_column;      \
          (Current).last_line    = YYRHSLOC (Rhs, N).last_line;         \
          (Current).last_column  = YYRHSLOC (Rhs, N).last_column;       \
        }                                                               \
      else                                                              \
        {                                                               \
          (Current).first_line   = (Current).last_line   =              \
            YYRHSLOC (Rhs, 0).last_line;                                \
          (Current).first_column = (Current).last_column =              \
            YYRHSLOC (Rhs, 0).last_column;                              \
        }                                                               \
    while (0)
#endif

#define YYRHSLOC(Rhs, K) ((Rhs)[K])


/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)                        \
do {                                            \
  if (yydebug)                                  \
    YYFPRINTF Args;                             \
} while (0)


/* YYLOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

# ifndef YYLOCATION_PRINT

#  if defined YY_LOCATION_PRINT

   /* Temporary convenience wrapper in case some people defined the
      undocumented and private YY_LOCATION_PRINT macros.  */
#   define YYLOCATION_PRINT(File, Loc)  YY_LOCATION_PRINT(File, *(Loc))

#  elif defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL

/* Print *YYLOCP on YYO.  Private, do not rely on its existence. */

YY_ATTRIBUTE_UNUSED
static int
yy_location_print_ (FILE *yyo, YYLTYPE const * const yylocp)
{
  int res = 0;
  int end_col = 0 != yylocp->last_column ? yylocp->last_column - 1 : 0;
  if (0 <= yylocp->first_line)
    {
      res += YYFPRINTF (yyo, "%d", yylocp->first_line);
      if (0 <= yylocp->first_column)
        res += YYFPRINTF (yyo, ".%d", yylocp->first_column);
    }
  if (0 <= yylocp->last_line)
    {
      if (yylocp->first_line < yylocp->last_line)
        {
          res += YYFPRINTF (yyo, "-%d", yylocp->last_line);
          if (0 <= end_col)
            res += YYFPRINTF (yyo, ".%d", end_col);
        }
      else if (0 <= end_col && yylocp->first_column < end_col)
        res += YYFPRINTF (yyo, "-%d", end_col);
    }
  return res;
}

#   define YYLOCATION_PRINT  yy_location_print_

    /* Temporary convenience wrapper in case some people defined the
       undocumented and private YY_LOCATION_PRINT macros.  */
#   define YY_LOCATION_PRINT(File, Loc)  YYLOCATION_PRINT(File, &(Loc))

#  else

#   define YYLOCATION_PRINT(File, Loc) ((void) 0)
    /* Temporary convenience wrapper in case some people defined the
       undocumented and private YY_LOCATION_PRINT macros.  */
#   define YY_LOCATION_PRINT  YYLOCATION_PRINT

#  endif
# endif /* !defined YYLOCATION_PRINT */


# define YY_SYMBOL_PRINT(Title, Kind, Value, Location)                    \
do {                                                                      \
  if (yydebug)                                                            \
    {                                                                     \
      YYFPRINTF (stderr, "%s ", Title);                                   \
      yy_symbol_print (stderr,                                            \
                  Kind, Value, Location, yyscanner); \
      YYFPRINTF (stderr, "\n");                                           \
    }                                                                     \
} while (0)


/*-----------------------------------.
| Print this symbol's value on YYO.  |
`-----------------------------------*/

static void
yy_symbol_value_print (FILE *yyo,
                       yysymbol_kind_t yykind, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, core_yyscan_t yyscanner)
{
  FILE *yyoutput = yyo;
  YY_USE (yyoutput);
  YY_USE (yylocationp);
  YY_USE (yyscanner);
  if (!yyvaluep)
    return;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YY_USE (yykind);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}


/*---------------------------.
| Print this symbol on YYO.  |
`---------------------------*/

static void
yy_symbol_print (FILE *yyo,
                 yysymbol_kind_t yykind, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, core_yyscan_t yyscanner)
{
  YYFPRINTF (yyo, "%s %s (",
             yykind < YYNTOKENS ? "token" : "nterm", yysymbol_name (yykind));

  YYLOCATION_PRINT (yyo, yylocationp);
  YYFPRINTF (yyo, ": ");
  yy_symbol_value_print (yyo, yykind, yyvaluep, yylocationp, yyscanner);
  YYFPRINTF (yyo, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

static void
yy_stack_print (yy_state_t *yybottom, yy_state_t *yytop)
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)                            \
do {                                                            \
  if (yydebug)                                                  \
    yy_stack_print ((Bottom), (Top));                           \
} while (0)


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

static void
yy_reduce_print (yy_state_t *yyssp, YYSTYPE *yyvsp, YYLTYPE *yylsp,
                 int yyrule, core_yyscan_t yyscanner)
{
  int yylno = yyrline[yyrule];
  int yynrhs = yyr2[yyrule];
  int yyi;
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %d):\n",
             yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr,
                       YY_ACCESSING_SYMBOL (+yyssp[yyi + 1 - yynrhs]),
                       &yyvsp[(yyi + 1) - (yynrhs)],
                       &(yylsp[(yyi + 1) - (yynrhs)]), yyscanner);
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)          \
do {                                    \
  if (yydebug)                          \
    yy_reduce_print (yyssp, yyvsp, yylsp, Rule, yyscanner); \
} while (0)

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args) ((void) 0)
# define YY_SYMBOL_PRINT(Title, Kind, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif






/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

static void
yydestruct (const char *yymsg,
            yysymbol_kind_t yykind, YYSTYPE *yyvaluep, YYLTYPE *yylocationp, core_yyscan_t yyscanner)
{
  YY_USE (yyvaluep);
  YY_USE (yylocationp);
  YY_USE (yyscanner);
  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yykind, yyvaluep, yylocationp);

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YY_USE (yykind);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}






/*----------.
| yyparse.  |
`----------*/

int
yyparse (core_yyscan_t yyscanner)
{
/* Lookahead token kind.  */
int yychar;


/* The semantic value of the lookahead symbol.  */
/* Default value used for initialization, for pacifying older GCCs
   or non-GCC compilers.  */
YY_INITIAL_VALUE (static YYSTYPE yyval_default;)
YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);

/* Location data for the lookahead symbol.  */
static YYLTYPE yyloc_default
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
  = { 1, 1, 1, 1 }
# endif
;
YYLTYPE yylloc = yyloc_default;

    /* Number of syntax errors so far.  */
    int yynerrs = 0; (void)yynerrs;

    yy_state_fast_t yystate = 0;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus = 0;

    /* Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* Their size.  */
    YYPTRDIFF_T yystacksize = YYINITDEPTH;

    /* The state stack: array, bottom, top.  */
    yy_state_t yyssa[YYINITDEPTH];
    yy_state_t *yyss = yyssa;
    yy_state_t *yyssp = yyss;

    /* The semantic value stack: array, bottom, top.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs = yyvsa;
    YYSTYPE *yyvsp = yyvs;

    /* The location stack: array, bottom, top.  */
    YYLTYPE yylsa[YYINITDEPTH];
    YYLTYPE *yyls = yylsa;
    YYLTYPE *yylsp = yyls;

  int yyn;
  /* The return value of yyparse.  */
  int yyresult;
  /* Lookahead symbol kind.  */
  yysymbol_kind_t yytoken = YYSYMBOL_YYEMPTY;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
  YYLTYPE yyloc;

  /* The locations where the error started and ended.  */
  YYLTYPE yyerror_range[3];



#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N), yylsp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yychar = YYEMPTY; /* Cause a token to be read.  */

  yylsp[0] = yylloc;
  goto yysetstate;


/*------------------------------------------------------------.
| yynewstate -- push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;


/*--------------------------------------------------------------------.
| yysetstate -- set current state (the top of the stack) to yystate.  |
`--------------------------------------------------------------------*/
yysetstate:
  YYDPRINTF ((stderr, "Entering state %d\n", yystate));
  YY_ASSERT (0 <= yystate && yystate < YYNSTATES);
  YY_IGNORE_USELESS_CAST_BEGIN
  *yyssp = YY_CAST (yy_state_t, yystate);
  YY_IGNORE_USELESS_CAST_END
  YY_STACK_PRINT (yyss, yyssp);

  if (yyss + yystacksize - 1 <= yyssp)
#if !defined yyoverflow && !defined YYSTACK_RELOCATE
    YYNOMEM;
#else
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYPTRDIFF_T yysize = yyssp - yyss + 1;

# if defined yyoverflow
      {
        /* Give user a chance to reallocate the stack.  Use copies of
           these so that the &'s don't force the real ones into
           memory.  */
        yy_state_t *yyss1 = yyss;
        YYSTYPE *yyvs1 = yyvs;
        YYLTYPE *yyls1 = yyls;

        /* Each stack pointer address is followed by the size of the
           data in use in that stack, in bytes.  This used to be a
           conditional around just the two extra args, but that might
           be undefined if yyoverflow is a macro.  */
        yyoverflow (YY_("memory exhausted"),
                    &yyss1, yysize * YYSIZEOF (*yyssp),
                    &yyvs1, yysize * YYSIZEOF (*yyvsp),
                    &yyls1, yysize * YYSIZEOF (*yylsp),
                    &yystacksize);
        yyss = yyss1;
        yyvs = yyvs1;
        yyls = yyls1;
      }
# else /* defined YYSTACK_RELOCATE */
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
        YYNOMEM;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
        yystacksize = YYMAXDEPTH;

      {
        yy_state_t *yyss1 = yyss;
        union yyalloc *yyptr =
          YY_CAST (union yyalloc *,
                   YYSTACK_ALLOC (YY_CAST (YYSIZE_T, YYSTACK_BYTES (yystacksize))));
        if (! yyptr)
          YYNOMEM;
        YYSTACK_RELOCATE (yyss_alloc, yyss);
        YYSTACK_RELOCATE (yyvs_alloc, yyvs);
        YYSTACK_RELOCATE (yyls_alloc, yyls);
#  undef YYSTACK_RELOCATE
        if (yyss1 != yyssa)
          YYSTACK_FREE (yyss1);
      }
# endif

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
      yylsp = yyls + yysize - 1;

      YY_IGNORE_USELESS_CAST_BEGIN
      YYDPRINTF ((stderr, "Stack size increased to %ld\n",
                  YY_CAST (long, yystacksize)));
      YY_IGNORE_USELESS_CAST_END

      if (yyss + yystacksize - 1 <= yyssp)
        YYABORT;
    }
#endif /* !defined yyoverflow && !defined YYSTACK_RELOCATE */


  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;


/*-----------.
| yybackup.  |
`-----------*/
yybackup:
  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default (yyn))
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either empty, or end-of-input, or a valid lookahead.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token\n"));
      yychar = yylex (&yylval, &yylloc, yyscanner);
    }

  if (yychar <= YYEOF)
    {
      yychar = YYEOF;
      yytoken = YYSYMBOL_YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else if (yychar == YYerror)
    {
      /* The scanner already issued an error message, process directly
         to error recovery.  But do not keep the error token as
         lookahead, it is too special and may lead us to an endless
         loop in error recovery. */
      yychar = YYUNDEF;
      yytoken = YYSYMBOL_YYerror;
      yyerror_range[1] = yylloc;
      goto yyerrlab1;
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);
  yystate = yyn;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END
  *++yylsp = yylloc;

  /* Discard the shifted token.  */
  yychar = YYEMPTY;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     '$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

  /* Default location. */
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
  yyerror_range[1] = yyloc;
  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
  case 2: /* stmtblock: stmtmulti  */
#line 516 "third_party/libpg_query/grammar/grammar.y"
                        {
				pg_yyget_extra(yyscanner)->parsetree = (yyvsp[0].list);
			}
#line 19525 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 3: /* stmtmulti: stmtmulti ';' stmt  */
#line 532 "third_party/libpg_query/grammar/grammar.y"
                                {
					if ((yyvsp[-2].list) != NIL)
					{
						/* update length of previous stmt */
						updateRawStmtEnd(llast_node(PGRawStmt, (yyvsp[-2].list)), (yylsp[-1]));
					}
					if ((yyvsp[0].node) != NULL)
						(yyval.list) = lappend((yyvsp[-2].list), makeRawStmt((yyvsp[0].node), (yylsp[-1]) + 1));
					else
						(yyval.list) = (yyvsp[-2].list);
				}
#line 19541 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 4: /* stmtmulti: stmt  */
#line 544 "third_party/libpg_query/grammar/grammar.y"
                                {
					if ((yyvsp[0].node) != NULL)
						(yyval.list) = list_make1(makeRawStmt((yyvsp[0].node), 0));
					else
						(yyval.list) = NIL;
				}
#line 19552 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 47: /* stmt: %empty  */
#line 595 "third_party/libpg_query/grammar/grammar.y"
        { (yyval.node) = NULL; }
#line 19558 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 48: /* CreateSchemaStmt: CREATE_P SCHEMA qualified_name OptSchemaEltList  */
#line 8 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
					if ((yyvsp[-1].range)->catalogname) {
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA too many dots: expected \"catalog.schema\" or \"schema\""),
								 parser_errposition((yylsp[-1]))));
					}
					if ((yyvsp[-1].range)->schemaname) {
						n->catalogname = (yyvsp[-1].range)->schemaname;
						n->schemaname = (yyvsp[-1].range)->relname;
					} else {
						n->schemaname = (yyvsp[-1].range)->relname;
					}
					n->schemaElts = (yyvsp[0].list);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 19581 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 49: /* CreateSchemaStmt: CREATE_P SCHEMA IF_P NOT EXISTS qualified_name OptSchemaEltList  */
#line 27 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
					if ((yyvsp[-1].range)->catalogname) {
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA too many dots: expected \"catalog.schema\" or \"schema\""),
								 parser_errposition((yylsp[-1]))));
					}
					if ((yyvsp[-1].range)->schemaname) {
						n->catalogname = (yyvsp[-1].range)->schemaname;
						n->schemaname = (yyvsp[-1].range)->relname;
					} else {
						n->schemaname = (yyvsp[-1].range)->relname;
					}
					if ((yyvsp[0].list) != NIL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA IF NOT EXISTS cannot include schema elements"),
								 parser_errposition((yylsp[0]))));
					n->schemaElts = (yyvsp[0].list);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 19609 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 50: /* CreateSchemaStmt: CREATE_P OR REPLACE SCHEMA qualified_name OptSchemaEltList  */
#line 51 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
					if ((yyvsp[-1].range)->catalogname) {
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA too many dots: expected \"catalog.schema\" or \"schema\""),
								 parser_errposition((yylsp[-1]))));
					}
					if ((yyvsp[-1].range)->schemaname) {
						n->catalogname = (yyvsp[-1].range)->schemaname;
						n->schemaname = (yyvsp[-1].range)->relname;
					} else {
						n->schemaname = (yyvsp[-1].range)->relname;
					}
					n->schemaElts = (yyvsp[0].list);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 19632 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 51: /* OptSchemaEltList: OptSchemaEltList schema_stmt  */
#line 74 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					if ((yyloc) < 0)			/* see comments for YYLLOC_DEFAULT */
						(yyloc) = (yylsp[0]);
					(yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node));
				}
#line 19642 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 52: /* OptSchemaEltList: %empty  */
#line 80 "third_party/libpg_query/grammar/statements/create_schema.y"
                                { (yyval.list) = NIL; }
#line 19648 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 58: /* ViewStmt: CREATE_P OptTemp VIEW qualified_name opt_column_list opt_reloptions AS SelectStmt opt_check_option  */
#line 10 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-5].range);
					n->view->relpersistence = (yyvsp[-7].ival);
					n->aliases = (yyvsp[-4].list);
					n->query = (yyvsp[-1].node);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				}
#line 19664 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 59: /* ViewStmt: CREATE_P OptTemp VIEW IF_P NOT EXISTS qualified_name opt_column_list opt_reloptions AS SelectStmt opt_check_option  */
#line 23 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-5].range);
					n->view->relpersistence = (yyvsp[-10].ival);
					n->aliases = (yyvsp[-4].list);
					n->query = (yyvsp[-1].node);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				}
#line 19680 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 60: /* ViewStmt: CREATE_P OR REPLACE OptTemp VIEW qualified_name opt_column_list opt_reloptions AS SelectStmt opt_check_option  */
#line 36 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-5].range);
					n->view->relpersistence = (yyvsp[-7].ival);
					n->aliases = (yyvsp[-4].list);
					n->query = (yyvsp[-1].node);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				}
#line 19696 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 61: /* ViewStmt: CREATE_P OptTemp RECURSIVE VIEW qualified_name '(' columnList ')' opt_reloptions AS SelectStmt opt_check_option  */
#line 49 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-7].range);
					n->view->relpersistence = (yyvsp[-10].ival);
					n->aliases = (yyvsp[-5].list);
					n->query = makeRecursiveViewSelect(n->view->relname, n->aliases, (yyvsp[-1].node));
					n->onconflict = PG_ERROR_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					if (n->withCheckOption != PG_NO_CHECK_OPTION)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("WITH CHECK OPTION not supported on recursive views"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) n;
				}
#line 19717 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 62: /* ViewStmt: CREATE_P OR REPLACE OptTemp RECURSIVE VIEW qualified_name '(' columnList ')' opt_reloptions AS SelectStmt opt_check_option  */
#line 67 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-7].range);
					n->view->relpersistence = (yyvsp[-10].ival);
					n->aliases = (yyvsp[-5].list);
					n->query = makeRecursiveViewSelect(n->view->relname, n->aliases, (yyvsp[-1].node));
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					if (n->withCheckOption != PG_NO_CHECK_OPTION)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("WITH CHECK OPTION not supported on recursive views"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) n;
				}
#line 19738 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 63: /* opt_check_option: WITH CHECK_P OPTION  */
#line 87 "third_party/libpg_query/grammar/statements/view.y"
                                                                { (yyval.viewcheckoption) = CASCADED_CHECK_OPTION; }
#line 19744 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 64: /* opt_check_option: WITH CASCADED CHECK_P OPTION  */
#line 88 "third_party/libpg_query/grammar/statements/view.y"
                                                { (yyval.viewcheckoption) = CASCADED_CHECK_OPTION; }
#line 19750 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 65: /* opt_check_option: WITH LOCAL CHECK_P OPTION  */
#line 89 "third_party/libpg_query/grammar/statements/view.y"
                                                        { (yyval.viewcheckoption) = PG_LOCAL_CHECK_OPTION; }
#line 19756 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 66: /* opt_check_option: %empty  */
#line 90 "third_party/libpg_query/grammar/statements/view.y"
                                                                { (yyval.viewcheckoption) = PG_NO_CHECK_OPTION; }
#line 19762 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 67: /* PragmaStmt: PRAGMA_P ColId  */
#line 8 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_NOTHING;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 19773 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 68: /* PragmaStmt: PRAGMA_P ColId '=' var_list  */
#line 15 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_ASSIGNMENT;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 19785 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 69: /* PragmaStmt: PRAGMA_P ColId '(' func_arg_list ')'  */
#line 23 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_CALL;
					n->name = (yyvsp[-3].str);
					n->args = (yyvsp[-1].list);
					(yyval.node) = (PGNode *)n;
				}
#line 19797 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 70: /* TransactionStmt: ABORT_P opt_transaction  */
#line 3 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_ROLLBACK;
					n->options = NIL;
					n->transaction_type = PG_TRANS_TYPE_DEFAULT;
					(yyval.node) = (PGNode *)n;
				}
#line 19809 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 71: /* TransactionStmt: BEGIN_P opt_transaction opt_transaction_type  */
#line 11 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_BEGIN;
					n->transaction_type = (yyvsp[0].transactiontype);
					(yyval.node) = (PGNode *)n;
				}
#line 19820 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 72: /* TransactionStmt: START opt_transaction opt_transaction_type  */
#line 18 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_START;
					n->transaction_type = (yyvsp[0].transactiontype);
					(yyval.node) = (PGNode *)n;
				}
#line 19831 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 73: /* TransactionStmt: COMMIT opt_transaction  */
#line 25 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_COMMIT;
					n->options = NIL;
					n->transaction_type = PG_TRANS_TYPE_DEFAULT;
					(yyval.node) = (PGNode *)n;
				}
#line 19843 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 74: /* TransactionStmt: END_P opt_transaction  */
#line 33 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_COMMIT;
					n->options = NIL;
					n->transaction_type = PG_TRANS_TYPE_DEFAULT;
					(yyval.node) = (PGNode *)n;
				}
#line 19855 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 75: /* TransactionStmt: ROLLBACK opt_transaction  */
#line 41 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_ROLLBACK;
					n->options = NIL;
					n->transaction_type = PG_TRANS_TYPE_DEFAULT;
					(yyval.node) = (PGNode *)n;
				}
#line 19867 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 76: /* opt_transaction: WORK  */
#line 51 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                {}
#line 19873 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 77: /* opt_transaction: TRANSACTION  */
#line 52 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                        {}
#line 19879 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 78: /* opt_transaction: %empty  */
#line 53 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                                {}
#line 19885 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 79: /* opt_transaction_type: READ_P ONLY  */
#line 57 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                        { (yyval.transactiontype) = PG_TRANS_TYPE_READ_ONLY; }
#line 19891 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 80: /* opt_transaction_type: READ_P WRITE_P  */
#line 58 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                        { (yyval.transactiontype) = PG_TRANS_TYPE_READ_WRITE; }
#line 19897 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 81: /* opt_transaction_type: %empty  */
#line 59 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                                { (yyval.transactiontype) = PG_TRANS_TYPE_DEFAULT; }
#line 19903 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 82: /* PrepareStmt: PREPARE name prep_type_clause AS PreparableStmt  */
#line 8 "third_party/libpg_query/grammar/statements/prepare.y"
                                {
					PGPrepareStmt *n = makeNode(PGPrepareStmt);
					n->name = (yyvsp[-3].str);
					n->argtypes = (yyvsp[-2].list);
					n->query = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 19915 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 83: /* prep_type_clause: '(' type_list ')'  */
#line 18 "third_party/libpg_query/grammar/statements/prepare.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 19921 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 84: /* prep_type_clause: %empty  */
#line 19 "third_party/libpg_query/grammar/statements/prepare.y"
                                                                        { (yyval.list) = NIL; }
#line 19927 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 91: /* UpdateExtensionsStmt: opt_with_clause UPDATE EXTENSIONS opt_column_list  */
#line 8 "third_party/libpg_query/grammar/statements/update_extensions.y"
                                {
					PGUpdateExtensionsStmt *n = makeNode(PGUpdateExtensionsStmt);
					n->extensions = (yyvsp[0].list);

					if ((yyvsp[-3].with)) {
                          ereport(ERROR,
                                  (errcode(PG_ERRCODE_SYNTAX_ERROR),
                                   errmsg("Providing a with clause with an UPDATE EXTENSIONS statement is not allowed"),
                                   parser_errposition((yylsp[-3]))));
                          break;
                    }

					(yyval.node) = (PGNode *)n;
				}
#line 19946 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 92: /* ExecuteStmt: EXECUTE name execute_param_clause  */
#line 8 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-1].str);
					n->params = (yyvsp[0].list);
					(yyval.node) = (PGNode *) n;
				}
#line 19957 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 93: /* ExecuteStmt: CREATE_P OptTemp TABLE create_as_target AS EXECUTE name execute_param_clause opt_with_data  */
#line 16 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-2].str);
					n->params = (yyvsp[-1].list);
					ctas->query = (PGNode *) n;
					ctas->into = (yyvsp[-5].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_ERROR_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-5].into)->rel->relpersistence = (yyvsp[-7].ival);
					(yyvsp[-5].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 19977 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 94: /* ExecuteStmt: CREATE_P OptTemp TABLE IF_P NOT EXISTS create_as_target AS EXECUTE name execute_param_clause opt_with_data  */
#line 33 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-2].str);
					n->params = (yyvsp[-1].list);
					ctas->query = (PGNode *) n;
					ctas->into = (yyvsp[-5].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_IGNORE_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-5].into)->rel->relpersistence = (yyvsp[-10].ival);
					(yyvsp[-5].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 19997 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 95: /* execute_param_expr: a_expr  */
#line 52 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 20005 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 96: /* execute_param_expr: param_name COLON_EQUALS a_expr  */
#line 56 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
					na->name = (yyvsp[-2].str);
					na->arg = (PGExpr *) (yyvsp[0].node);
					na->argnumber = -1;		/* until determined */
					na->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) na;
				}
#line 20018 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 97: /* execute_param_list: execute_param_expr  */
#line 66 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 20026 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 98: /* execute_param_list: execute_param_list ',' execute_param_expr  */
#line 70 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 20034 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 99: /* execute_param_clause: '(' execute_param_list ')'  */
#line 75 "third_party/libpg_query/grammar/statements/execute.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 20040 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 100: /* execute_param_clause: %empty  */
#line 76 "third_party/libpg_query/grammar/statements/execute.y"
                                                                                        { (yyval.list) = NIL; }
#line 20046 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 101: /* VariableShowStmt: show_or_describe SelectStmt  */
#line 3 "third_party/libpg_query/grammar/statements/variable_show.y"
                                                    {
				PGVariableShowSelectStmt *n = makeNode(PGVariableShowSelectStmt);
				n->stmt = (yyvsp[0].node);
				n->name = (char*) "select";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 20058 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 102: /* VariableShowStmt: SUMMARIZE SelectStmt  */
#line 10 "third_party/libpg_query/grammar/statements/variable_show.y"
                                        {
				PGVariableShowSelectStmt *n = makeNode(PGVariableShowSelectStmt);
				n->stmt = (yyvsp[0].node);
				n->name = (char*) "select";
				n->is_summary = 1;
				(yyval.node) = (PGNode *) n;
			}
#line 20070 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 103: /* VariableShowStmt: SUMMARIZE table_id  */
#line 18 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (yyvsp[0].str);
				n->is_summary = 1;
				(yyval.node) = (PGNode *) n;
			}
#line 20081 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 104: /* VariableShowStmt: show_or_describe table_id  */
#line 25 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (yyvsp[0].str);
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 20092 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 105: /* VariableShowStmt: show_or_describe TIME ZONE  */
#line 32 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "timezone";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 20103 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 106: /* VariableShowStmt: show_or_describe TRANSACTION ISOLATION LEVEL  */
#line 39 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "transaction_isolation";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 20114 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 107: /* VariableShowStmt: show_or_describe ALL opt_tables  */
#line 46 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "__show_tables_expanded";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 20125 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 108: /* VariableShowStmt: show_or_describe  */
#line 53 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "__show_tables_expanded";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 20136 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 115: /* var_name: ColId  */
#line 67 "third_party/libpg_query/grammar/statements/variable_show.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 20142 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 116: /* var_name: var_name '.' ColId  */
#line 69 "third_party/libpg_query/grammar/statements/variable_show.y"
                                { (yyval.str) = psprintf("%s.%s", (yyvsp[-2].str), (yyvsp[0].str)); }
#line 20148 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 117: /* table_id: ColId  */
#line 72 "third_party/libpg_query/grammar/statements/variable_show.y"
                                                                                { (yyval.str) = psprintf("\"%s\"", (yyvsp[0].str)); }
#line 20154 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 118: /* table_id: table_id '.' ColId  */
#line 74 "third_party/libpg_query/grammar/statements/variable_show.y"
                                { (yyval.str) = psprintf("%s.\"%s\"", (yyvsp[-2].str), (yyvsp[0].str)); }
#line 20160 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 119: /* IndexStmt: CREATE_P opt_unique INDEX opt_concurrently opt_index_name ON qualified_name access_method_clause '(' index_params ')' opt_reloptions where_clause  */
#line 11 "third_party/libpg_query/grammar/statements/index.y"
                                {
					PGIndexStmt *n = makeNode(PGIndexStmt);
					n->unique = (yyvsp[-11].boolean);
					n->concurrent = (yyvsp[-9].boolean);
					n->idxname = (yyvsp[-8].str);
					n->relation = (yyvsp[-6].range);
					n->accessMethod = (yyvsp[-5].str);
					n->indexParams = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->whereClause = (yyvsp[0].node);
					n->excludeOpNames = NIL;
					n->idxcomment = NULL;
					n->indexOid = InvalidOid;
					n->oldNode = InvalidOid;
					n->primary = false;
					n->isconstraint = false;
					n->deferrable = false;
					n->initdeferred = false;
					n->transformed = false;
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 20187 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 120: /* IndexStmt: CREATE_P opt_unique INDEX opt_concurrently IF_P NOT EXISTS index_name ON qualified_name access_method_clause '(' index_params ')' opt_reloptions where_clause  */
#line 36 "third_party/libpg_query/grammar/statements/index.y"
                                {
					PGIndexStmt *n = makeNode(PGIndexStmt);
					n->unique = (yyvsp[-14].boolean);
					n->concurrent = (yyvsp[-12].boolean);
					n->idxname = (yyvsp[-8].str);
					n->relation = (yyvsp[-6].range);
					n->accessMethod = (yyvsp[-5].str);
					n->indexParams = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->whereClause = (yyvsp[0].node);
					n->excludeOpNames = NIL;
					n->idxcomment = NULL;
					n->indexOid = InvalidOid;
					n->oldNode = InvalidOid;
					n->primary = false;
					n->isconstraint = false;
					n->deferrable = false;
					n->initdeferred = false;
					n->transformed = false;
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 20214 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 121: /* access_method: ColId  */
#line 62 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 20220 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 122: /* access_method_clause: USING access_method  */
#line 66 "third_party/libpg_query/grammar/statements/index.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 20226 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 123: /* access_method_clause: %empty  */
#line 67 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (char*) DEFAULT_INDEX_TYPE; }
#line 20232 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 124: /* opt_concurrently: CONCURRENTLY  */
#line 72 "third_party/libpg_query/grammar/statements/index.y"
                                                                                        { (yyval.boolean) = true; }
#line 20238 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 125: /* opt_concurrently: %empty  */
#line 73 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = false; }
#line 20244 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 126: /* opt_index_name: index_name  */
#line 78 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 20250 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 127: /* opt_index_name: %empty  */
#line 79 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = NULL; }
#line 20256 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 128: /* opt_reloptions: WITH reloptions  */
#line 83 "third_party/libpg_query/grammar/statements/index.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 20262 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 129: /* opt_reloptions: %empty  */
#line 84 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.list) = NIL; }
#line 20268 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 130: /* opt_unique: UNIQUE  */
#line 89 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = true; }
#line 20274 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 131: /* opt_unique: %empty  */
#line 90 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = false; }
#line 20280 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 132: /* CopyStmt: COPY opt_binary qualified_name opt_column_list opt_oids copy_from opt_program copy_file_name copy_delimiter opt_with copy_options  */
#line 3 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					PGCopyStmt *n = makeNode(PGCopyStmt);
					n->relation = (yyvsp[-8].range);
					n->query = NULL;
					n->attlist = (yyvsp[-7].list);
					n->is_from = (yyvsp[-5].boolean);
					n->is_program = (yyvsp[-4].boolean);
					n->filename = (yyvsp[-3].str);

					if (n->is_program && n->filename == NULL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("STDIN/STDOUT not allowed with PROGRAM"),
								 parser_errposition((yylsp[-3]))));

					n->options = NIL;
					/* Concatenate user-supplied flags */
					if ((yyvsp[-9].defelt))
						n->options = lappend(n->options, (yyvsp[-9].defelt));
					if ((yyvsp[-6].defelt))
						n->options = lappend(n->options, (yyvsp[-6].defelt));
					if ((yyvsp[-2].defelt))
						n->options = lappend(n->options, (yyvsp[-2].defelt));
					if ((yyvsp[0].list))
						n->options = list_concat(n->options, (yyvsp[0].list));
					(yyval.node) = (PGNode *)n;
				}
#line 20312 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 133: /* CopyStmt: COPY '(' SelectStmt ')' TO opt_program copy_file_name opt_with copy_options  */
#line 31 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					PGCopyStmt *n = makeNode(PGCopyStmt);
					n->relation = NULL;
					n->query = (yyvsp[-6].node);
					n->attlist = NIL;
					n->is_from = false;
					n->is_program = (yyvsp[-3].boolean);
					n->filename = (yyvsp[-2].str);
					n->options = (yyvsp[0].list);

					if (n->is_program && n->filename == NULL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("STDIN/STDOUT not allowed with PROGRAM"),
								 parser_errposition((yylsp[-4]))));

					(yyval.node) = (PGNode *)n;
				}
#line 20335 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 134: /* CopyStmt: COPY FROM DATABASE ColId TO ColId copy_database_flag  */
#line 50 "third_party/libpg_query/grammar/statements/copy.y"
                {
				PGCopyDatabaseStmt *n = makeNode(PGCopyDatabaseStmt);
				n->from_database = (yyvsp[-3].str);
				n->to_database = (yyvsp[-1].str);
				n->copy_database_flag = (yyvsp[0].conststr);
				(yyval.node) = (PGNode *)n;
			}
#line 20347 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 135: /* copy_database_flag: %empty  */
#line 61 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                        { (yyval.conststr) = NULL; }
#line 20353 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 136: /* copy_database_flag: '(' SCHEMA ')'  */
#line 62 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.conststr) = "schema"; }
#line 20359 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 137: /* copy_database_flag: '(' DATA_P ')'  */
#line 63 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.conststr) = "data"; }
#line 20365 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 138: /* copy_from: FROM  */
#line 67 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = true; }
#line 20371 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 139: /* copy_from: TO  */
#line 68 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = false; }
#line 20377 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 140: /* copy_delimiter: opt_using DELIMITERS Sconst  */
#line 74 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("delimiter", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-1]));
				}
#line 20385 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 141: /* copy_delimiter: %empty  */
#line 77 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 20391 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 142: /* copy_generic_opt_arg_list: copy_generic_opt_arg_list_item  */
#line 83 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 20399 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 143: /* copy_generic_opt_arg_list: copy_generic_opt_arg_list ',' copy_generic_opt_arg_list_item  */
#line 87 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 20407 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 144: /* opt_using: USING  */
#line 94 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 20413 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 145: /* opt_using: %empty  */
#line 95 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 20419 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 146: /* opt_as: AS  */
#line 99 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 20425 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 147: /* opt_as: %empty  */
#line 100 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        {}
#line 20431 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 148: /* opt_program: PROGRAM  */
#line 105 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = true; }
#line 20437 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 149: /* opt_program: %empty  */
#line 106 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        { (yyval.boolean) = false; }
#line 20443 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 150: /* copy_options: copy_opt_list  */
#line 110 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 20449 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 151: /* copy_options: '(' copy_generic_opt_list ')'  */
#line 111 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 20455 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 152: /* copy_generic_opt_arg: opt_boolean_or_string  */
#line 116 "third_party/libpg_query/grammar/statements/copy.y"
                                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 20461 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 153: /* copy_generic_opt_arg: NumericOnly  */
#line 117 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = (PGNode *) (yyvsp[0].value); }
#line 20467 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 154: /* copy_generic_opt_arg: list_expr  */
#line 118 "third_party/libpg_query/grammar/statements/copy.y"
                                                        { (yyval.node) = (PGNode *) (yyvsp[0].node); }
#line 20473 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 155: /* copy_generic_opt_arg: '*'  */
#line 119 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.node) = (PGNode *) makeNode(PGAStar); }
#line 20479 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 156: /* copy_generic_opt_arg: '(' copy_generic_opt_arg_list ')'  */
#line 120 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = (PGNode *) (yyvsp[-1].list); }
#line 20485 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 157: /* copy_generic_opt_arg: struct_expr  */
#line 121 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = (PGNode *) (yyvsp[0].node); }
#line 20491 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 158: /* copy_generic_opt_arg: map_expr  */
#line 122 "third_party/libpg_query/grammar/statements/copy.y"
                                                                            { (yyval.node) = (PGNode *) (yyvsp[0].node); }
#line 20497 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 159: /* copy_generic_opt_arg: %empty  */
#line 123 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = NULL; }
#line 20503 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 160: /* copy_generic_opt_elem: ColLabel copy_generic_opt_arg  */
#line 129 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 20511 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 161: /* opt_oids: WITH OIDS  */
#line 137 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("oids", (PGNode *)makeInteger(true), (yylsp[-1]));
				}
#line 20519 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 162: /* opt_oids: %empty  */
#line 140 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 20525 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 163: /* copy_opt_list: copy_opt_list copy_opt_item  */
#line 145 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 20531 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 164: /* copy_opt_list: %empty  */
#line 146 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        { (yyval.list) = NIL; }
#line 20537 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 165: /* opt_binary: BINARY  */
#line 152 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("binary"), (yylsp[0]));
				}
#line 20545 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 166: /* opt_binary: %empty  */
#line 155 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 20551 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 167: /* copy_opt_item: BINARY  */
#line 161 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("binary"), (yylsp[0]));
				}
#line 20559 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 168: /* copy_opt_item: OIDS  */
#line 165 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("oids", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 20567 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 169: /* copy_opt_item: FREEZE  */
#line 169 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("freeze", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 20575 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 170: /* copy_opt_item: DELIMITER opt_as Sconst  */
#line 173 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("delimiter", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 20583 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 171: /* copy_opt_item: NULL_P opt_as Sconst  */
#line 177 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("null", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 20591 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 172: /* copy_opt_item: CSV  */
#line 181 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("csv"), (yylsp[0]));
				}
#line 20599 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 173: /* copy_opt_item: HEADER_P  */
#line 185 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("header", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 20607 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 174: /* copy_opt_item: QUOTE opt_as Sconst  */
#line 189 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("quote", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 20615 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 175: /* copy_opt_item: ESCAPE opt_as Sconst  */
#line 193 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("escape", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 20623 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 176: /* copy_opt_item: FORCE QUOTE columnList  */
#line 197 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_quote", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 20631 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 177: /* copy_opt_item: FORCE QUOTE '*'  */
#line 201 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_quote", (PGNode *)makeNode(PGAStar), (yylsp[-2]));
				}
#line 20639 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 178: /* copy_opt_item: PARTITION BY columnList  */
#line 205 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("partition_by", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 20647 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 179: /* copy_opt_item: PARTITION BY '*'  */
#line 209 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("partition_by", (PGNode *)makeNode(PGAStar), (yylsp[-2]));
				}
#line 20655 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 180: /* copy_opt_item: FORCE NOT NULL_P columnList  */
#line 213 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_not_null", (PGNode *)(yyvsp[0].list), (yylsp[-3]));
				}
#line 20663 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 181: /* copy_opt_item: FORCE NULL_P columnList  */
#line 217 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_null", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 20671 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 182: /* copy_opt_item: ENCODING Sconst  */
#line 221 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("encoding", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-1]));
				}
#line 20679 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 183: /* copy_generic_opt_arg_list_item: opt_boolean_or_string  */
#line 228 "third_party/libpg_query/grammar/statements/copy.y"
                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 20685 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 184: /* copy_file_name: Sconst  */
#line 233 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 20691 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 185: /* copy_file_name: STDIN  */
#line 234 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = NULL; }
#line 20697 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 186: /* copy_file_name: STDOUT  */
#line 235 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = NULL; }
#line 20703 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 187: /* copy_file_name: IDENT '.' ColId  */
#line 236 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        { (yyval.str) = psprintf("%s.%s", (yyvsp[-2].str), (yyvsp[0].str)); }
#line 20709 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 188: /* copy_file_name: IDENT  */
#line 237 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 20715 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 189: /* copy_generic_opt_list: copy_generic_opt_elem  */
#line 244 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 20723 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 190: /* copy_generic_opt_list: copy_generic_opt_list ',' copy_generic_opt_elem  */
#line 248 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 20731 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 191: /* VacuumStmt: VACUUM opt_full opt_freeze opt_verbose  */
#line 9 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-1].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[0].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 20749 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 192: /* VacuumStmt: VACUUM opt_full opt_freeze opt_verbose qualified_name opt_name_list  */
#line 23 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM;
					if ((yyvsp[-4].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-3].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = (yyvsp[-1].range);
					n->va_cols = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 20767 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 193: /* VacuumStmt: VACUUM opt_full opt_freeze opt_verbose AnalyzeStmt  */
#line 37 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = (PGVacuumStmt *) (yyvsp[0].node);
					n->options |= PG_VACOPT_VACUUM;
					if ((yyvsp[-3].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[-1].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					(yyval.node) = (PGNode *)n;
				}
#line 20783 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 194: /* VacuumStmt: VACUUM '(' vacuum_option_list ')'  */
#line 49 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM | (yyvsp[-1].ival);
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *) n;
				}
#line 20795 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 195: /* VacuumStmt: VACUUM '(' vacuum_option_list ')' qualified_name opt_name_list  */
#line 57 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM | (yyvsp[-3].ival);
					n->relation = (yyvsp[-1].range);
					n->va_cols = (yyvsp[0].list);
					if (n->va_cols != NIL)	/* implies analyze */
						n->options |= PG_VACOPT_ANALYZE;
					(yyval.node) = (PGNode *) n;
				}
#line 20809 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 196: /* vacuum_option_elem: analyze_keyword  */
#line 70 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                { (yyval.ival) = PG_VACOPT_ANALYZE; }
#line 20815 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 197: /* vacuum_option_elem: VERBOSE  */
#line 71 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                        { (yyval.ival) = PG_VACOPT_VERBOSE; }
#line 20821 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 198: /* vacuum_option_elem: FREEZE  */
#line 72 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                        { (yyval.ival) = PG_VACOPT_FREEZE; }
#line 20827 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 199: /* vacuum_option_elem: FULL  */
#line 73 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                        { (yyval.ival) = PG_VACOPT_FULL; }
#line 20833 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 200: /* vacuum_option_elem: IDENT  */
#line 75 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					if (strcmp((yyvsp[0].str), "disable_page_skipping") == 0)
						(yyval.ival) = PG_VACOPT_DISABLE_PAGE_SKIPPING;
					else
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
							 errmsg("unrecognized VACUUM option \"%s\"", (yyvsp[0].str)),
									 parser_errposition((yylsp[0]))));
				}
#line 20847 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 201: /* opt_full: FULL  */
#line 87 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                        { (yyval.boolean) = true; }
#line 20853 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 202: /* opt_full: %empty  */
#line 88 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                                { (yyval.boolean) = false; }
#line 20859 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 203: /* vacuum_option_list: vacuum_option_elem  */
#line 93 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                                        { (yyval.ival) = (yyvsp[0].ival); }
#line 20865 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 204: /* vacuum_option_list: vacuum_option_list ',' vacuum_option_elem  */
#line 94 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) | (yyvsp[0].ival); }
#line 20871 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 205: /* opt_freeze: FREEZE  */
#line 98 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                        { (yyval.boolean) = true; }
#line 20877 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 206: /* opt_freeze: %empty  */
#line 99 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                                { (yyval.boolean) = false; }
#line 20883 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 207: /* CreateSecretStmt: CREATE_P opt_persist SECRET opt_secret_name opt_storage_specifier '(' copy_generic_opt_list ')'  */
#line 8 "third_party/libpg_query/grammar/statements/create_secret.y"
                                {
					PGCreateSecretStmt *n = makeNode(PGCreateSecretStmt);
					n->persist_type = (yyvsp[-6].str);
					n->secret_name = (yyvsp[-4].str);
					n->secret_storage = (yyvsp[-3].str);
					n->options = (yyvsp[-1].list);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 20897 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 208: /* CreateSecretStmt: CREATE_P opt_persist SECRET IF_P NOT EXISTS opt_secret_name opt_storage_specifier '(' copy_generic_opt_list ')'  */
#line 18 "third_party/libpg_query/grammar/statements/create_secret.y"
                                {
					PGCreateSecretStmt *n = makeNode(PGCreateSecretStmt);
					n->persist_type = (yyvsp[-9].str);
					n->secret_name = (yyvsp[-4].str);
					n->secret_storage = (yyvsp[-3].str);
					n->options = (yyvsp[-1].list);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 20911 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 209: /* CreateSecretStmt: CREATE_P OR REPLACE opt_persist SECRET opt_secret_name opt_storage_specifier '(' copy_generic_opt_list ')'  */
#line 28 "third_party/libpg_query/grammar/statements/create_secret.y"
                                {
					PGCreateSecretStmt *n = makeNode(PGCreateSecretStmt);
					n->persist_type = (yyvsp[-6].str);
					n->secret_name = (yyvsp[-4].str);
					n->secret_storage = (yyvsp[-3].str);
					n->options = (yyvsp[-1].list);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 20925 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 210: /* opt_secret_name: %empty  */
#line 40 "third_party/libpg_query/grammar/statements/create_secret.y"
                    { (yyval.str) = NULL; }
#line 20931 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 211: /* opt_secret_name: ColId  */
#line 41 "third_party/libpg_query/grammar/statements/create_secret.y"
                { (yyval.str) = (yyvsp[0].str); }
#line 20937 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 212: /* opt_persist: %empty  */
#line 45 "third_party/libpg_query/grammar/statements/create_secret.y"
                                                    { (yyval.str) = pstrdup("default"); }
#line 20943 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 213: /* opt_persist: TEMPORARY  */
#line 46 "third_party/libpg_query/grammar/statements/create_secret.y"
                                                    { (yyval.str) = pstrdup("temporary"); }
#line 20949 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 214: /* opt_persist: PERSISTENT  */
#line 47 "third_party/libpg_query/grammar/statements/create_secret.y"
                                                    { (yyval.str) = pstrdup("persistent"); }
#line 20955 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 215: /* opt_storage_specifier: %empty  */
#line 51 "third_party/libpg_query/grammar/statements/create_secret.y"
                                                    { (yyval.str) = pstrdup(""); }
#line 20961 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 216: /* opt_storage_specifier: IN_P IDENT  */
#line 52 "third_party/libpg_query/grammar/statements/create_secret.y"
                                                    { (yyval.str) = (yyvsp[0].str); }
#line 20967 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 217: /* AlterSeqStmt: ALTER SEQUENCE qualified_name SeqOptList  */
#line 10 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					PGAlterSeqStmt *n = makeNode(PGAlterSeqStmt);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 20979 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 218: /* AlterSeqStmt: ALTER SEQUENCE IF_P EXISTS qualified_name SeqOptList  */
#line 18 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					PGAlterSeqStmt *n = makeNode(PGAlterSeqStmt);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 20991 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 219: /* SeqOptList: SeqOptElem  */
#line 29 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 20997 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 220: /* SeqOptList: SeqOptList SeqOptElem  */
#line 30 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 21003 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 221: /* opt_with: WITH  */
#line 34 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        {}
#line 21009 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 222: /* opt_with: WITH_LA  */
#line 35 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                                {}
#line 21015 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 223: /* opt_with: %empty  */
#line 36 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                                {}
#line 21021 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 224: /* NumericOnly: FCONST  */
#line 41 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.value) = makeFloat((yyvsp[0].str)); }
#line 21027 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 225: /* NumericOnly: '+' FCONST  */
#line 42 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.value) = makeFloat((yyvsp[0].str)); }
#line 21033 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 226: /* NumericOnly: '-' FCONST  */
#line 44 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.value) = makeFloat((yyvsp[0].str));
					doNegateFloat((yyval.value));
				}
#line 21042 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 227: /* NumericOnly: SignedIconst  */
#line 48 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.value) = makeInteger((yyvsp[0].ival)); }
#line 21048 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 228: /* SeqOptElem: AS SimpleTypename  */
#line 53 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("as", (PGNode *)(yyvsp[0].typnam), (yylsp[-1]));
				}
#line 21056 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 229: /* SeqOptElem: CACHE NumericOnly  */
#line 57 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cache", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 21064 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 230: /* SeqOptElem: CYCLE  */
#line 61 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cycle", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 21072 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 231: /* SeqOptElem: NO CYCLE  */
#line 65 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cycle", (PGNode *)makeInteger(false), (yylsp[-1]));
				}
#line 21080 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 232: /* SeqOptElem: INCREMENT opt_by NumericOnly  */
#line 69 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("increment", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 21088 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 233: /* SeqOptElem: MAXVALUE NumericOnly  */
#line 73 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("maxvalue", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 21096 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 234: /* SeqOptElem: MINVALUE NumericOnly  */
#line 77 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("minvalue", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 21104 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 235: /* SeqOptElem: NO MAXVALUE  */
#line 81 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("maxvalue", NULL, (yylsp[-1]));
				}
#line 21112 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 236: /* SeqOptElem: NO MINVALUE  */
#line 85 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("minvalue", NULL, (yylsp[-1]));
				}
#line 21120 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 237: /* SeqOptElem: OWNED BY any_name  */
#line 89 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("owned_by", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 21128 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 238: /* SeqOptElem: SEQUENCE NAME_P any_name  */
#line 93 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					/* not documented, only used by pg_dump */
					(yyval.defelt) = makeDefElem("sequence_name", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 21137 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 239: /* SeqOptElem: START opt_with NumericOnly  */
#line 98 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("start", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 21145 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 240: /* SeqOptElem: RESTART  */
#line 102 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("restart", NULL, (yylsp[0]));
				}
#line 21153 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 241: /* SeqOptElem: RESTART opt_with NumericOnly  */
#line 106 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("restart", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 21161 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 242: /* opt_by: BY  */
#line 112 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                {}
#line 21167 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 243: /* opt_by: %empty  */
#line 113 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                        {}
#line 21173 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 244: /* SignedIconst: Iconst  */
#line 117 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 21179 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 245: /* SignedIconst: '+' Iconst  */
#line 118 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.ival) = + (yyvsp[0].ival); }
#line 21185 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 246: /* SignedIconst: '-' Iconst  */
#line 119 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.ival) = - (yyvsp[0].ival); }
#line 21191 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 247: /* UseStmt: USE_P qualified_name  */
#line 3 "third_party/libpg_query/grammar/statements/use.y"
                                {
					PGUseStmt *n = makeNode(PGUseStmt);
					n->name = (yyvsp[0].range);
					(yyval.node) = (PGNode *) n;
				}
#line 21201 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 248: /* CreateModelStmt: CREATE_P OptTemp model_type_value MODEL qualified_name PATH SCONST model_on OUTPUT '(' with_result_col_list ')' opt_option  */
#line 9 "third_party/libpg_query/grammar/statements/create_model.y"
                                {
					PGCreateModelStmt *n = makeNode(PGCreateModelStmt);
					(yyvsp[-8].range)->relpersistence = (yyvsp[-11].ival);
					n->model = (yyvsp[-8].range);
					n->model_type = (yyvsp[-10].ival);
					n->model_path = (yyvsp[-6].str);
					n->model_on = (yyvsp[-5].node);
					n->result_set = (yyvsp[-2].list);
					n->options = (yyvsp[0].list);
					n->ownerId = InvalidOid;
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 21219 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 249: /* CreateModelStmt: CREATE_P OptTemp model_type_value MODEL IF_P NOT EXISTS qualified_name PATH SCONST model_on OUTPUT '(' with_result_col_list ')' opt_option  */
#line 23 "third_party/libpg_query/grammar/statements/create_model.y"
                                {
					PGCreateModelStmt *n = makeNode(PGCreateModelStmt);
					(yyvsp[-8].range)->relpersistence = (yyvsp[-14].ival);
					n->model = (yyvsp[-8].range);
					n->model_type = (yyvsp[-13].ival);
					n->model_path = (yyvsp[-6].str);
					n->model_on = (yyvsp[-5].node);
					n->result_set = (yyvsp[-2].list);
					n->options = (yyvsp[0].list);
					n->ownerId = InvalidOid;
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 21237 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 250: /* CreateModelStmt: CREATE_P OR REPLACE OptTemp model_type_value MODEL qualified_name PATH SCONST model_on OUTPUT '(' with_result_col_list ')' opt_option  */
#line 37 "third_party/libpg_query/grammar/statements/create_model.y"
                                {
					PGCreateModelStmt *n = makeNode(PGCreateModelStmt);
					(yyvsp[-8].range)->relpersistence = (yyvsp[-11].ival);
					n->model = (yyvsp[-8].range);
					n->model_type = (yyvsp[-10].ival);
					n->model_path = (yyvsp[-6].str);
					n->model_on = (yyvsp[-5].node);
					n->result_set = (yyvsp[-2].list);
					n->options = (yyvsp[0].list);
					n->ownerId = InvalidOid;
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 21255 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 251: /* model_type_value: TABULAR  */
#line 53 "third_party/libpg_query/grammar/statements/create_model.y"
                                                                                        { (yyval.ival) = 0; }
#line 21261 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 252: /* model_type_value: LLM  */
#line 54 "third_party/libpg_query/grammar/statements/create_model.y"
                                                                                        { (yyval.ival) = 1; }
#line 21267 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 253: /* model_type_value: GNN  */
#line 55 "third_party/libpg_query/grammar/statements/create_model.y"
                                                                                        { (yyval.ival) = 2; }
#line 21273 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 254: /* model_type_value: LLM_API  */
#line 56 "third_party/libpg_query/grammar/statements/create_model.y"
                                                                                        { (yyval.ival) = 3; }
#line 21279 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 255: /* model_on: ON TABLE qualified_name opt_feat_col_list  */
#line 61 "third_party/libpg_query/grammar/statements/create_model.y"
                                {
					PGModelOn *n = makeNode(PGModelOn);
					n->rel_name = (yyvsp[-1].range);
					n->rel_feat = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 21290 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 256: /* model_on: ON feat_col_list  */
#line 68 "third_party/libpg_query/grammar/statements/create_model.y"
                                {
					PGModelOn *n = makeNode(PGModelOn);
					n->rel_feat = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 21300 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 257: /* model_on: ON NODES qualified_name opt_feat_col_list EDGES qualified_name opt_feat_col_list  */
#line 74 "third_party/libpg_query/grammar/statements/create_model.y"
                                {
					PGModelOn *n = makeNode(PGModelOn);
					n->rel_name = (yyvsp[-4].range);
					n->rel_feat = (yyvsp[-3].node);
					n->opt_name = (yyvsp[-1].range);
					n->opt_feat = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 21313 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 258: /* opt_feat_col_list: feat_col_list  */
#line 85 "third_party/libpg_query/grammar/statements/create_model.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 21319 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 259: /* opt_feat_col_list: %empty  */
#line 86 "third_party/libpg_query/grammar/statements/create_model.y"
                                                                                { (yyval.node) = NULL; }
#line 21325 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 260: /* feat_col_list: FEATURES '(' name_list_opt_comma ')'  */
#line 91 "third_party/libpg_query/grammar/statements/create_model.y"
                                {
					PGPredictFeatExpr *n = makeNode(PGPredictFeatExpr);
					n->input_set = (yyvsp[-1].list);
					(yyval.node) = (PGNode *) n;
				}
#line 21335 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 261: /* feat_col_list: FEATURES '*' opt_except_list  */
#line 97 "third_party/libpg_query/grammar/statements/create_model.y"
                                {
					PGPredictFeatExpr *n = makeNode(PGPredictFeatExpr);
					n->exclude_set = (yyvsp[0].list);
					(yyval.node) = (PGNode *) n;
				}
#line 21345 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 262: /* with_result_col_list: result_col_list  */
#line 105 "third_party/libpg_query/grammar/statements/create_model.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 21351 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 263: /* with_result_col_list: result_col_list ','  */
#line 106 "third_party/libpg_query/grammar/statements/create_model.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 21357 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 264: /* with_result_col_list: %empty  */
#line 107 "third_party/libpg_query/grammar/statements/create_model.y"
                                                                                        { (yyval.list) = NIL; }
#line 21363 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 265: /* result_col_list: columnDef  */
#line 112 "third_party/libpg_query/grammar/statements/create_model.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 21371 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 266: /* result_col_list: result_col_list ',' columnDef  */
#line 116 "third_party/libpg_query/grammar/statements/create_model.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 21379 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 267: /* opt_option: OPTIONS '{' dict_arguments_opt_comma '}'  */
#line 123 "third_party/libpg_query/grammar/statements/create_model.y"
                            { 
					(yyval.list) = (yyvsp[-1].list); 
				}
#line 21387 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 268: /* opt_option: %empty  */
#line 126 "third_party/libpg_query/grammar/statements/create_model.y"
                                                                        { (yyval.list) = NIL; }
#line 21393 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 269: /* CommentOnStmt: COMMENT ON comment_on_type_any_name qualified_name IS comment_value  */
#line 8 "third_party/libpg_query/grammar/statements/comment_on.y"
                                {
					PGCommentOnStmt *n = makeNode(PGCommentOnStmt);
					n->object_type = (yyvsp[-3].objtype);
					n->name = (yyvsp[-2].range);
					n->value = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 21405 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 270: /* CommentOnStmt: COMMENT ON COLUMN a_expr IS comment_value  */
#line 16 "third_party/libpg_query/grammar/statements/comment_on.y"
                {
                    PGCommentOnStmt *n = makeNode(PGCommentOnStmt);
                    n->object_type = PG_OBJECT_COLUMN;
                    n->column_expr = (yyvsp[-2].node);
                    n->value = (yyvsp[0].node);
                    (yyval.node) = (PGNode *)n;
                }
#line 21417 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 271: /* comment_value: Sconst  */
#line 26 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                { (yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0])); }
#line 21423 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 272: /* comment_value: NULL_P  */
#line 27 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                            { (yyval.node) = makeNullAConst((yylsp[0])); }
#line 21429 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 273: /* comment_on_type_any_name: TABLE  */
#line 30 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TABLE; }
#line 21435 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 274: /* comment_on_type_any_name: SEQUENCE  */
#line 31 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_SEQUENCE; }
#line 21441 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 275: /* comment_on_type_any_name: MODEL  */
#line 32 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_MODEL; }
#line 21447 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 276: /* comment_on_type_any_name: FUNCTION  */
#line 33 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FUNCTION; }
#line 21453 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 277: /* comment_on_type_any_name: MACRO  */
#line 34 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FUNCTION; }
#line 21459 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 278: /* comment_on_type_any_name: MACRO TABLE  */
#line 35 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                { (yyval.objtype) = PG_OBJECT_TABLE_MACRO; }
#line 21465 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 279: /* comment_on_type_any_name: VIEW  */
#line 36 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_VIEW; }
#line 21471 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 280: /* comment_on_type_any_name: DATABASE  */
#line 37 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_DATABASE; }
#line 21477 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 281: /* comment_on_type_any_name: INDEX  */
#line 38 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_INDEX; }
#line 21483 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 282: /* comment_on_type_any_name: SCHEMA  */
#line 39 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_SCHEMA; }
#line 21489 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 283: /* comment_on_type_any_name: TYPE_P  */
#line 40 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TYPE; }
#line 21495 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 284: /* CheckPointStmt: FORCE CHECKPOINT opt_col_id  */
#line 6 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                {
					PGCheckPointStmt *n = makeNode(PGCheckPointStmt);
					n->force = true;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 21506 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 285: /* CheckPointStmt: CHECKPOINT opt_col_id  */
#line 13 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                {
					PGCheckPointStmt *n = makeNode(PGCheckPointStmt);
					n->force = false;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 21517 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 286: /* opt_col_id: ColId  */
#line 22 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                                        { (yyval.str) = (yyvsp[0].str); }
#line 21523 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 287: /* opt_col_id: %empty  */
#line 23 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                                { (yyval.str) = NULL; }
#line 21529 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 288: /* AttachStmt: ATTACH opt_database Sconst opt_database_alias copy_options  */
#line 8 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					PGAttachStmt *n = makeNode(PGAttachStmt);
					n->path = (yyvsp[-2].str);
					n->name = (yyvsp[-1].str);
					n->options = (yyvsp[0].list);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 21542 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 289: /* AttachStmt: ATTACH IF_P NOT EXISTS opt_database Sconst opt_database_alias copy_options  */
#line 17 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					PGAttachStmt *n = makeNode(PGAttachStmt);
					n->path = (yyvsp[-2].str);
					n->name = (yyvsp[-1].str);
					n->options = (yyvsp[0].list);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 21555 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 290: /* DetachStmt: DETACH ColLabel  */
#line 29 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					PGDetachStmt *n = makeNode(PGDetachStmt);
					n->missing_ok = false;
					n->db_name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 21566 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 291: /* DetachStmt: DETACH DATABASE ColLabel  */
#line 36 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					PGDetachStmt *n = makeNode(PGDetachStmt);
					n->missing_ok = false;
					n->db_name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 21577 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 292: /* DetachStmt: DETACH DATABASE IF_P EXISTS ColLabel  */
#line 43 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					PGDetachStmt *n = makeNode(PGDetachStmt);
					n->missing_ok = true;
					n->db_name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 21588 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 293: /* opt_database: DATABASE  */
#line 51 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                {}
#line 21594 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 294: /* opt_database: %empty  */
#line 52 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                                {}
#line 21600 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 295: /* opt_database_alias: AS ColId  */
#line 56 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 21606 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 296: /* opt_database_alias: %empty  */
#line 57 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                                        { (yyval.str) = NULL; }
#line 21612 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 297: /* AlterObjectSchemaStmt: ALTER TABLE relation_expr SET SCHEMA name  */
#line 8 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21625 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 298: /* AlterObjectSchemaStmt: ALTER TABLE IF_P EXISTS relation_expr SET SCHEMA name  */
#line 17 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21638 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 299: /* AlterObjectSchemaStmt: ALTER SEQUENCE qualified_name SET SCHEMA name  */
#line 26 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21651 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 300: /* AlterObjectSchemaStmt: ALTER SEQUENCE IF_P EXISTS qualified_name SET SCHEMA name  */
#line 35 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21664 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 301: /* AlterObjectSchemaStmt: ALTER VIEW qualified_name SET SCHEMA name  */
#line 44 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21677 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 302: /* AlterObjectSchemaStmt: ALTER VIEW IF_P EXISTS qualified_name SET SCHEMA name  */
#line 53 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21690 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 303: /* CreateFunctionStmt: CREATE_P OptTemp macro_alias qualified_name table_macro_list  */
#line 9 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-1].range)->relpersistence = (yyvsp[-3].ival);
				n->name = (yyvsp[-1].range);
				n->functions = (yyvsp[0].list);
				n->onconflict = PG_ERROR_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
			}
#line 21703 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 304: /* CreateFunctionStmt: CREATE_P OptTemp macro_alias IF_P NOT EXISTS qualified_name table_macro_list  */
#line 19 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-1].range)->relpersistence = (yyvsp[-6].ival);
				n->name = (yyvsp[-1].range);
				n->functions = (yyvsp[0].list);
				n->onconflict = PG_IGNORE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;

			}
#line 21717 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 305: /* CreateFunctionStmt: CREATE_P OR REPLACE OptTemp macro_alias qualified_name table_macro_list  */
#line 30 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-1].range)->relpersistence = (yyvsp[-3].ival);
				n->name = (yyvsp[-1].range);
				n->functions = (yyvsp[0].list);
				n->onconflict = PG_REPLACE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
			}
#line 21730 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 306: /* CreateFunctionStmt: CREATE_P OptTemp macro_alias qualified_name macro_definition_list  */
#line 40 "third_party/libpg_query/grammar/statements/create_function.y"
             {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-1].range)->relpersistence = (yyvsp[-3].ival);
				n->name = (yyvsp[-1].range);
				n->functions = (yyvsp[0].list);
				n->onconflict = PG_ERROR_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
             }
#line 21743 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 307: /* CreateFunctionStmt: CREATE_P OptTemp macro_alias IF_P NOT EXISTS qualified_name macro_definition_list  */
#line 50 "third_party/libpg_query/grammar/statements/create_function.y"
                         {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-1].range)->relpersistence = (yyvsp[-6].ival);
				n->name = (yyvsp[-1].range);
				n->functions = (yyvsp[0].list);
				n->onconflict = PG_IGNORE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
			 }
#line 21756 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 308: /* CreateFunctionStmt: CREATE_P OR REPLACE OptTemp macro_alias qualified_name macro_definition_list  */
#line 60 "third_party/libpg_query/grammar/statements/create_function.y"
                         {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-1].range)->relpersistence = (yyvsp[-3].ival);
				n->name = (yyvsp[-1].range);
				n->functions = (yyvsp[0].list);
				n->onconflict = PG_REPLACE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
			 }
#line 21769 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 309: /* table_macro_definition: param_list AS TABLE select_no_parens  */
#line 72 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				PGFunctionDefinition *n = makeNode(PGFunctionDefinition);
				n->params = (yyvsp[-3].list);
				n->query = (yyvsp[0].node);
				(yyval.node) = (PGNode *)n;
			}
#line 21780 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 310: /* table_macro_definition_parens: param_list AS TABLE select_with_parens  */
#line 82 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				PGFunctionDefinition *n = makeNode(PGFunctionDefinition);
				n->params = (yyvsp[-3].list);
				n->query = (yyvsp[0].node);
				(yyval.node) = (PGNode *)n;
			}
#line 21791 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 311: /* table_macro_list_internal: table_macro_definition_parens  */
#line 92 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				(yyval.list) = list_make1((yyvsp[0].node));
			}
#line 21799 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 312: /* table_macro_list_internal: table_macro_list_internal ',' table_macro_definition_parens  */
#line 96 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
			}
#line 21807 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 313: /* table_macro_list: table_macro_definition  */
#line 103 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				(yyval.list) = list_make1((yyvsp[0].node));
			}
#line 21815 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 315: /* macro_definition: param_list AS a_expr  */
#line 111 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				PGFunctionDefinition *n = makeNode(PGFunctionDefinition);
				n->params = (yyvsp[-2].list);
				n->function = (yyvsp[0].node);
				(yyval.node) = (PGNode *)n;
			}
#line 21826 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 316: /* macro_definition_list: macro_definition  */
#line 120 "third_party/libpg_query/grammar/statements/create_function.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 21834 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 317: /* macro_definition_list: macro_definition_list ',' macro_definition  */
#line 124 "third_party/libpg_query/grammar/statements/create_function.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 21842 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 320: /* param_list: '(' ')'  */
#line 136 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				(yyval.list) = NIL;
			}
#line 21850 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 321: /* param_list: '(' func_arg_list ')'  */
#line 140 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				(yyval.list) = (yyvsp[-1].list);
			}
#line 21858 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 322: /* VariableSetStmt: SET set_rest  */
#line 11 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_DEFAULT;
					(yyval.node) = (PGNode *) n;
				}
#line 21868 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 323: /* VariableSetStmt: SET LOCAL set_rest  */
#line 17 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_LOCAL;
					(yyval.node) = (PGNode *) n;
				}
#line 21878 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 324: /* VariableSetStmt: SET SESSION set_rest  */
#line 23 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_SESSION;
					(yyval.node) = (PGNode *) n;
				}
#line 21888 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 325: /* VariableSetStmt: SET GLOBAL set_rest  */
#line 29 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_GLOBAL;
					(yyval.node) = (PGNode *) n;
				}
#line 21898 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 326: /* VariableSetStmt: SET VARIABLE_P set_rest  */
#line 35 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_VARIABLE;
					(yyval.node) = (PGNode *) n;
				}
#line 21908 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 327: /* set_rest: generic_set  */
#line 44 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                {(yyval.vsetstmt) = (yyvsp[0].vsetstmt);}
#line 21914 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 328: /* set_rest: var_name FROM CURRENT_P  */
#line 46 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_CURRENT;
					n->name = (yyvsp[-2].str);
					(yyval.vsetstmt) = n;
				}
#line 21925 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 329: /* set_rest: TIME ZONE zone_value  */
#line 54 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (char*) "timezone";
					if ((yyvsp[0].node) != NULL)
						n->args = list_make1((yyvsp[0].node));
					else
						n->kind = VAR_SET_DEFAULT;
					(yyval.vsetstmt) = n;
				}
#line 21940 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 330: /* set_rest: SCHEMA Sconst  */
#line 65 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (char*) "search_path";
					n->args = list_make1(makeStringConst((yyvsp[0].str), (yylsp[0])));
					(yyval.vsetstmt) = n;
				}
#line 21952 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 331: /* generic_set: var_name TO var_list  */
#line 77 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.vsetstmt) = n;
				}
#line 21964 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 332: /* generic_set: var_name '=' var_list  */
#line 85 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.vsetstmt) = n;
				}
#line 21976 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 333: /* var_value: a_expr  */
#line 96 "third_party/libpg_query/grammar/statements/variable_set.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 21982 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 334: /* zone_value: Sconst  */
#line 102 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					(yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 21990 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 335: /* zone_value: IDENT  */
#line 106 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					(yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 21998 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 336: /* zone_value: ConstInterval Sconst opt_interval  */
#line 110 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGTypeName *t = (yyvsp[-2].typnam);
					if ((yyvsp[0].list) != NIL)
					{
						PGAConst *n = (PGAConst *) linitial((yyvsp[0].list));
						if ((n->val.val.ival & ~(INTERVAL_MASK(HOUR) | INTERVAL_MASK(MINUTE))) != 0)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("time zone interval must be HOUR or HOUR TO MINUTE"),
									 parser_errposition((yylsp[0]))));
					}
					t->typmods = (yyvsp[0].list);
					(yyval.node) = makeStringConstCast((yyvsp[-1].str), (yylsp[-1]), t);
				}
#line 22017 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 337: /* zone_value: ConstInterval '(' Iconst ')' Sconst  */
#line 125 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGTypeName *t = (yyvsp[-4].typnam);
					t->typmods = list_make2(makeIntConst(INTERVAL_FULL_RANGE, -1),
											makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 22028 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 338: /* zone_value: NumericOnly  */
#line 131 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                        { (yyval.node) = makeAConst((yyvsp[0].value), (yylsp[0])); }
#line 22034 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 339: /* zone_value: DEFAULT  */
#line 132 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                                { (yyval.node) = NULL; }
#line 22040 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 340: /* zone_value: LOCAL  */
#line 133 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                                { (yyval.node) = NULL; }
#line 22046 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 341: /* var_list: var_value  */
#line 137 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 22052 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 342: /* var_list: var_list ',' var_value  */
#line 138 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 22058 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 343: /* CreateSeqStmt: CREATE_P OptTemp SEQUENCE qualified_name OptSeqOptList  */
#line 10 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                {
					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
					(yyvsp[-1].range)->relpersistence = (yyvsp[-3].ival);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->ownerId = InvalidOid;
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 22072 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 344: /* CreateSeqStmt: CREATE_P OptTemp SEQUENCE IF_P NOT EXISTS qualified_name OptSeqOptList  */
#line 20 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                {
					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
					(yyvsp[-1].range)->relpersistence = (yyvsp[-6].ival);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->ownerId = InvalidOid;
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 22086 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 345: /* CreateSeqStmt: CREATE_P OR REPLACE OptTemp SEQUENCE qualified_name OptSeqOptList  */
#line 30 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                {
					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
					(yyvsp[-1].range)->relpersistence = (yyvsp[-3].ival);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->ownerId = InvalidOid;
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 22100 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 346: /* OptSeqOptList: SeqOptList  */
#line 42 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 22106 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 347: /* OptSeqOptList: %empty  */
#line 43 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                                                                                { (yyval.list) = NIL; }
#line 22112 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 348: /* AnalyzeStmt: analyze_keyword opt_verbose  */
#line 10 "third_party/libpg_query/grammar/statements/analyze.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_ANALYZE;
					if ((yyvsp[0].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 22126 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 349: /* AnalyzeStmt: analyze_keyword opt_verbose qualified_name opt_name_list  */
#line 20 "third_party/libpg_query/grammar/statements/analyze.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_ANALYZE;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = (yyvsp[-1].range);
					n->va_cols = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 22140 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 350: /* UpdateStmt: opt_with_clause UPDATE relation_expr_opt_alias SET set_clause_list_opt_comma from_clause where_or_current_clause returning_clause  */
#line 12 "third_party/libpg_query/grammar/statements/update.y"
                                {
					PGUpdateStmt *n = makeNode(PGUpdateStmt);
					n->relation = (yyvsp[-5].range);
					n->targetList = (yyvsp[-3].list);
					n->fromClause = (yyvsp[-2].list);
					n->whereClause = (yyvsp[-1].node);
					n->returningList = (yyvsp[0].list);
					n->withClause = (yyvsp[-7].with);
					(yyval.node) = (PGNode *)n;
				}
#line 22155 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 351: /* AlterTableStmt: ALTER TABLE relation_expr alter_table_cmds  */
#line 10 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_TABLE;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22168 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 352: /* AlterTableStmt: ALTER TABLE IF_P EXISTS relation_expr alter_table_cmds  */
#line 19 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_TABLE;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 22181 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 353: /* AlterTableStmt: ALTER INDEX qualified_name alter_table_cmds  */
#line 28 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_INDEX;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22194 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 354: /* AlterTableStmt: ALTER INDEX IF_P EXISTS qualified_name alter_table_cmds  */
#line 37 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_INDEX;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 22207 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 355: /* AlterTableStmt: ALTER SEQUENCE qualified_name alter_table_cmds  */
#line 46 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_SEQUENCE;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22220 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 356: /* AlterTableStmt: ALTER SEQUENCE IF_P EXISTS qualified_name alter_table_cmds  */
#line 55 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_SEQUENCE;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 22233 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 357: /* AlterTableStmt: ALTER VIEW qualified_name alter_table_cmds  */
#line 64 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_VIEW;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22246 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 358: /* AlterTableStmt: ALTER VIEW IF_P EXISTS qualified_name alter_table_cmds  */
#line 73 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_VIEW;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 22259 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 359: /* alter_identity_column_option_list: alter_identity_column_option  */
#line 86 "third_party/libpg_query/grammar/statements/alter_table.y"
                                { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 22265 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 360: /* alter_identity_column_option_list: alter_identity_column_option_list alter_identity_column_option  */
#line 88 "third_party/libpg_query/grammar/statements/alter_table.y"
                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 22271 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 361: /* alter_column_default: SET DEFAULT a_expr  */
#line 93 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 22277 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 362: /* alter_column_default: DROP DEFAULT  */
#line 94 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = NULL; }
#line 22283 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 363: /* alter_identity_column_option: RESTART  */
#line 100 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("restart", NULL, (yylsp[0]));
				}
#line 22291 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 364: /* alter_identity_column_option: RESTART opt_with NumericOnly  */
#line 104 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("restart", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 22299 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 365: /* alter_identity_column_option: SET SeqOptElem  */
#line 108 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					if (strcmp((yyvsp[0].defelt)->defname, "as") == 0 ||
						strcmp((yyvsp[0].defelt)->defname, "restart") == 0 ||
						strcmp((yyvsp[0].defelt)->defname, "owned_by") == 0)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("sequence option \"%s\" not supported here", (yyvsp[0].defelt)->defname),
								 parser_errposition((yylsp[0]))));
					(yyval.defelt) = (yyvsp[0].defelt);
				}
#line 22314 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 366: /* alter_identity_column_option: SET GENERATED generated_when  */
#line 119 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("generated", (PGNode *) makeInteger((yyvsp[0].ival)), (yylsp[-2]));
				}
#line 22322 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 367: /* alter_generic_option_list: alter_generic_option_elem  */
#line 127 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 22330 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 368: /* alter_generic_option_list: alter_generic_option_list ',' alter_generic_option_elem  */
#line 131 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 22338 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 369: /* alter_table_cmd: ADD_P columnDef  */
#line 140 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22350 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 370: /* alter_table_cmd: ADD_P IF_P NOT EXISTS columnDef  */
#line 149 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 22362 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 371: /* alter_table_cmd: ADD_P COLUMN columnDef  */
#line 158 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22374 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 372: /* alter_table_cmd: ADD_P COLUMN IF_P NOT EXISTS columnDef  */
#line 167 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 22386 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 373: /* alter_table_cmd: ALTER opt_column ColId alter_column_default  */
#line 176 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ColumnDefault;
					n->name = (yyvsp[-1].str);
					n->def = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 22398 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 374: /* alter_table_cmd: ALTER opt_column ColId DROP NOT NULL_P  */
#line 185 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropNotNull;
					n->name = (yyvsp[-3].str);
					(yyval.node) = (PGNode *)n;
				}
#line 22409 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 375: /* alter_table_cmd: ALTER opt_column ColId SET NOT NULL_P  */
#line 193 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetNotNull;
					n->name = (yyvsp[-3].str);
					(yyval.node) = (PGNode *)n;
				}
#line 22420 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 376: /* alter_table_cmd: ALTER opt_column ColId SET STATISTICS SignedIconst  */
#line 201 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetStatistics;
					n->name = (yyvsp[-3].str);
					n->def = (PGNode *) makeInteger((yyvsp[0].ival));
					(yyval.node) = (PGNode *)n;
				}
#line 22432 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 377: /* alter_table_cmd: ALTER opt_column ColId SET reloptions  */
#line 210 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetOptions;
					n->name = (yyvsp[-2].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 22444 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 378: /* alter_table_cmd: ALTER opt_column ColId RESET reloptions  */
#line 219 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ResetOptions;
					n->name = (yyvsp[-2].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 22456 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 379: /* alter_table_cmd: ALTER opt_column ColId SET STORAGE ColId  */
#line 228 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetStorage;
					n->name = (yyvsp[-3].str);
					n->def = (PGNode *) makeString((yyvsp[0].str));
					(yyval.node) = (PGNode *)n;
				}
#line 22468 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 380: /* alter_table_cmd: ALTER opt_column ColId ADD_P GENERATED generated_when AS IDENTITY_P OptParenthesizedSeqOptList  */
#line 237 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGConstraint *c = makeNode(PGConstraint);

					c->contype = PG_CONSTR_IDENTITY;
					c->generated_when = (yyvsp[-3].ival);
					c->options = (yyvsp[0].list);
					c->location = (yylsp[-4]);

					n->subtype = PG_AT_AddIdentity;
					n->name = (yyvsp[-6].str);
					n->def = (PGNode *) c;

					(yyval.node) = (PGNode *)n;
				}
#line 22488 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 381: /* alter_table_cmd: ALTER opt_column ColId alter_identity_column_option_list  */
#line 254 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetIdentity;
					n->name = (yyvsp[-1].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 22500 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 382: /* alter_table_cmd: ALTER opt_column ColId DROP IDENTITY_P  */
#line 263 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = AT_DropIdentity;
					n->name = (yyvsp[-2].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22512 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 383: /* alter_table_cmd: ALTER opt_column ColId DROP IDENTITY_P IF_P EXISTS  */
#line 272 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = AT_DropIdentity;
					n->name = (yyvsp[-4].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 22524 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 384: /* alter_table_cmd: DROP opt_column IF_P EXISTS ColId opt_drop_behavior  */
#line 281 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropColumn;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 22537 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 385: /* alter_table_cmd: DROP opt_column ColId opt_drop_behavior  */
#line 291 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropColumn;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22550 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 386: /* alter_table_cmd: ALTER opt_column ColId opt_set_data TYPE_P Typename opt_collate_clause alter_using  */
#line 304 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGColumnDef *def = makeNode(PGColumnDef);
					n->subtype = PG_AT_AlterColumnType;
					n->name = (yyvsp[-5].str);
					n->def = (PGNode *) def;
					/* We only use these fields of the PGColumnDef node */
					def->typeName = (yyvsp[-2].typnam);
					def->collClause = (PGCollateClause *) (yyvsp[-1].node);
					def->raw_default = (yyvsp[0].node);
					def->location = (yylsp[-5]);
					(yyval.node) = (PGNode *)n;
				}
#line 22568 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 387: /* alter_table_cmd: ALTER opt_column ColId alter_generic_options  */
#line 319 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AlterColumnGenericOptions;
					n->name = (yyvsp[-1].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 22580 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 388: /* alter_table_cmd: ADD_P TableConstraint  */
#line 328 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddConstraint;
					n->def = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 22591 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 389: /* alter_table_cmd: ALTER CONSTRAINT name ConstraintAttributeSpec  */
#line 336 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGConstraint *c = makeNode(PGConstraint);
					n->subtype = PG_AT_AlterConstraint;
					n->def = (PGNode *) c;
					c->contype = PG_CONSTR_FOREIGN; /* others not supported, yet */
					c->conname = (yyvsp[-1].str);
					processCASbits((yyvsp[0].ival), (yylsp[0]), "ALTER CONSTRAINT statement",
									&c->deferrable,
									&c->initdeferred,
									NULL, NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 22609 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 390: /* alter_table_cmd: VALIDATE CONSTRAINT name  */
#line 351 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ValidateConstraint;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 22620 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 391: /* alter_table_cmd: DROP CONSTRAINT IF_P EXISTS name opt_drop_behavior  */
#line 359 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropConstraint;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 22633 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 392: /* alter_table_cmd: DROP CONSTRAINT name opt_drop_behavior  */
#line 369 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropConstraint;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22646 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 393: /* alter_table_cmd: SET LOGGED  */
#line 379 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetLogged;
					(yyval.node) = (PGNode *)n;
				}
#line 22656 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 394: /* alter_table_cmd: SET UNLOGGED  */
#line 386 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetUnLogged;
					(yyval.node) = (PGNode *)n;
				}
#line 22666 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 395: /* alter_table_cmd: SET reloptions  */
#line 393 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetRelOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 22677 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 396: /* alter_table_cmd: RESET reloptions  */
#line 401 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ResetRelOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 22688 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 397: /* alter_table_cmd: alter_generic_options  */
#line 408 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_GenericOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *) n;
				}
#line 22699 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 398: /* alter_using: USING a_expr  */
#line 418 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 22705 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 399: /* alter_using: %empty  */
#line 419 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = NULL; }
#line 22711 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 400: /* alter_generic_option_elem: generic_option_elem  */
#line 425 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
				}
#line 22719 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 401: /* alter_generic_option_elem: SET generic_option_elem  */
#line 429 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
					(yyval.defelt)->defaction = PG_DEFELEM_SET;
				}
#line 22728 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 402: /* alter_generic_option_elem: ADD_P generic_option_elem  */
#line 434 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
					(yyval.defelt)->defaction = PG_DEFELEM_ADD;
				}
#line 22737 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 403: /* alter_generic_option_elem: DROP generic_option_name  */
#line 439 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElemExtended(NULL, (yyvsp[0].str), NULL, DEFELEM_DROP, (yylsp[0]));
				}
#line 22745 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 404: /* alter_table_cmds: alter_table_cmd  */
#line 446 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 22751 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 405: /* alter_table_cmds: alter_table_cmds ',' alter_table_cmd  */
#line 447 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 22757 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 406: /* alter_generic_options: OPTIONS '(' alter_generic_option_list ')'  */
#line 452 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 22763 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 407: /* opt_set_data: SET DATA_P  */
#line 456 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                { (yyval.ival) = 1; }
#line 22769 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 408: /* opt_set_data: SET  */
#line 457 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                                { (yyval.ival) = 0; }
#line 22775 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 409: /* opt_set_data: %empty  */
#line 458 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                                { (yyval.ival) = 0; }
#line 22781 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 410: /* RenameStmt: ALTER SCHEMA name RENAME TO name  */
#line 7 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SCHEMA;
					n->subname = (yyvsp[-3].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22794 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 411: /* RenameStmt: ALTER TABLE relation_expr RENAME TO name  */
#line 16 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22808 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 412: /* RenameStmt: ALTER TABLE IF_P EXISTS relation_expr RENAME TO name  */
#line 26 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 22822 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 413: /* RenameStmt: ALTER SEQUENCE qualified_name RENAME TO name  */
#line 36 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22836 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 414: /* RenameStmt: ALTER SEQUENCE IF_P EXISTS qualified_name RENAME TO name  */
#line 46 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 22850 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 415: /* RenameStmt: ALTER VIEW qualified_name RENAME TO name  */
#line 56 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22864 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 416: /* RenameStmt: ALTER VIEW IF_P EXISTS qualified_name RENAME TO name  */
#line 66 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 22878 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 417: /* RenameStmt: ALTER INDEX qualified_name RENAME TO name  */
#line 76 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_INDEX;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22892 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 418: /* RenameStmt: ALTER INDEX IF_P EXISTS qualified_name RENAME TO name  */
#line 86 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_INDEX;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 22906 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 419: /* RenameStmt: ALTER TABLE relation_expr RENAME opt_column name TO name  */
#line 96 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_COLUMN;
					n->relationType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22921 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 420: /* RenameStmt: ALTER TABLE IF_P EXISTS relation_expr RENAME opt_column name TO name  */
#line 107 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_COLUMN;
					n->relationType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 22936 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 421: /* RenameStmt: ALTER TABLE relation_expr RENAME CONSTRAINT name TO name  */
#line 118 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABCONSTRAINT;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22950 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 422: /* RenameStmt: ALTER TABLE IF_P EXISTS relation_expr RENAME CONSTRAINT name TO name  */
#line 128 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABCONSTRAINT;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 22964 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 423: /* opt_column: COLUMN  */
#line 140 "third_party/libpg_query/grammar/statements/rename.y"
                                                                                        { (yyval.ival) = COLUMN; }
#line 22970 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 424: /* opt_column: %empty  */
#line 141 "third_party/libpg_query/grammar/statements/rename.y"
                                                                                                { (yyval.ival) = 0; }
#line 22976 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 425: /* CallStmt: CALL_P func_application  */
#line 7 "third_party/libpg_query/grammar/statements/call.y"
                                {
					PGCallStmt *n = makeNode(PGCallStmt);
					n->func = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 22986 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 426: /* qualified_name: ColIdOrString  */
#line 10 "third_party/libpg_query/grammar/statements/common.y"
                                {
					(yyval.range) = makeRangeVar(NULL, (yyvsp[0].str), (yylsp[0]));
				}
#line 22994 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 427: /* qualified_name: ColId indirection  */
#line 14 "third_party/libpg_query/grammar/statements/common.y"
                                {
					check_qualified_name((yyvsp[0].list), yyscanner);
					(yyval.range) = makeRangeVar(NULL, NULL, (yylsp[-1]));
					switch (list_length((yyvsp[0].list)))
					{
						case 1:
							(yyval.range)->catalogname = NULL;
							(yyval.range)->schemaname = (yyvsp[-1].str);
							(yyval.range)->relname = strVal(linitial((yyvsp[0].list)));
							break;
						case 2:
							(yyval.range)->catalogname = (yyvsp[-1].str);
							(yyval.range)->schemaname = strVal(linitial((yyvsp[0].list)));
							(yyval.range)->relname = strVal(lsecond((yyvsp[0].list)));
							break;
						case 3:
						default:
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("improper qualified name (too many dotted names): %s",
											NameListToString(lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)))),
									 parser_errposition((yylsp[-1]))));
							break;
					}
				}
#line 23024 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 428: /* ColId: IDENT  */
#line 44 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 23030 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 429: /* ColId: unreserved_keyword  */
#line 45 "third_party/libpg_query/grammar/statements/common.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 23036 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 430: /* ColId: col_name_keyword  */
#line 46 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 23042 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 431: /* ColIdOrString: ColId  */
#line 50 "third_party/libpg_query/grammar/statements/common.y"
                                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 23048 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 432: /* ColIdOrString: SCONST  */
#line 51 "third_party/libpg_query/grammar/statements/common.y"
                                                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 23054 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 433: /* Sconst: SCONST  */
#line 55 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 23060 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 434: /* indirection: indirection_el  */
#line 59 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 23066 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 435: /* indirection: indirection indirection_el  */
#line 60 "third_party/libpg_query/grammar/statements/common.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 23072 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 436: /* indirection_el: '.' attr_name  */
#line 65 "third_party/libpg_query/grammar/statements/common.y"
                                {
					(yyval.node) = (PGNode *) makeString((yyvsp[0].str));
				}
#line 23080 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 437: /* attr_name: ColLabel  */
#line 70 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 23086 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 438: /* ColLabel: IDENT  */
#line 75 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 23092 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 439: /* ColLabel: other_keyword  */
#line 76 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 23098 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 440: /* ColLabel: unreserved_keyword  */
#line 77 "third_party/libpg_query/grammar/statements/common.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 23104 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 441: /* ColLabel: reserved_keyword  */
#line 78 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 23110 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 442: /* CreateAsStmt: CREATE_P OptTemp TABLE create_as_target AS SelectStmt opt_with_data  */
#line 12 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_ERROR_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-5].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 23127 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 443: /* CreateAsStmt: CREATE_P OptTemp TABLE IF_P NOT EXISTS create_as_target AS SelectStmt opt_with_data  */
#line 25 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_IGNORE_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-8].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 23144 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 444: /* CreateAsStmt: CREATE_P OR REPLACE OptTemp TABLE create_as_target AS SelectStmt opt_with_data  */
#line 38 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_REPLACE_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-5].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 23161 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 445: /* opt_with_data: WITH DATA_P  */
#line 54 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                                { (yyval.boolean) = true; }
#line 23167 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 446: /* opt_with_data: WITH NO DATA_P  */
#line 55 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                        { (yyval.boolean) = false; }
#line 23173 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 447: /* opt_with_data: %empty  */
#line 56 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                                { (yyval.boolean) = true; }
#line 23179 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 448: /* create_as_target: qualified_name opt_column_list OptWith OnCommitOption  */
#line 62 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					(yyval.into) = makeNode(PGIntoClause);
					(yyval.into)->rel = (yyvsp[-3].range);
					(yyval.into)->colNames = (yyvsp[-2].list);
					(yyval.into)->options = (yyvsp[-1].list);
					(yyval.into)->onCommit = (yyvsp[0].oncommit);
					(yyval.into)->viewQuery = NULL;
					(yyval.into)->skipData = false;		/* might get changed later */
				}
#line 23193 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 449: /* DeallocateStmt: DEALLOCATE name  */
#line 8 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = (yyvsp[0].str);
						(yyval.node) = (PGNode *) n;
					}
#line 23203 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 450: /* DeallocateStmt: DEALLOCATE PREPARE name  */
#line 14 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = (yyvsp[0].str);
						(yyval.node) = (PGNode *) n;
					}
#line 23213 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 451: /* DeallocateStmt: DEALLOCATE ALL  */
#line 20 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = NULL;
						(yyval.node) = (PGNode *) n;
					}
#line 23223 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 452: /* DeallocateStmt: DEALLOCATE PREPARE ALL  */
#line 26 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = NULL;
						(yyval.node) = (PGNode *) n;
					}
#line 23233 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 453: /* CreateStmt: CREATE_P OptTemp TABLE qualified_name '(' OptTableElementList ')' OptWith OnCommitOption  */
#line 9 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-7].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 23250 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 454: /* CreateStmt: CREATE_P OptTemp TABLE IF_P NOT EXISTS qualified_name '(' OptTableElementList ')' OptWith OnCommitOption  */
#line 24 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-10].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 23267 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 455: /* CreateStmt: CREATE_P OR REPLACE OptTemp TABLE qualified_name '(' OptTableElementList ')' OptWith OnCommitOption  */
#line 39 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-7].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 23284 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 456: /* ConstraintAttributeSpec: %empty  */
#line 56 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = 0; }
#line 23290 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 457: /* ConstraintAttributeSpec: ConstraintAttributeSpec ConstraintAttributeElem  */
#line 58 "third_party/libpg_query/grammar/statements/create.y"
                                {
					/*
					 * We must complain about conflicting options.
					 * We could, but choose not to, complain about redundant
					 * options (ie, where $2's bit is already set in $1).
					 */
					int		newspec = (yyvsp[-1].ival) | (yyvsp[0].ival);

					/* special message for this case */
					if ((newspec & (CAS_NOT_DEFERRABLE | CAS_INITIALLY_DEFERRED)) == (CAS_NOT_DEFERRABLE | CAS_INITIALLY_DEFERRED))
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("constraint declared INITIALLY DEFERRED must be DEFERRABLE"),
								 parser_errposition((yylsp[0]))));
					/* generic message for other conflicts */
					if ((newspec & (CAS_NOT_DEFERRABLE | CAS_DEFERRABLE)) == (CAS_NOT_DEFERRABLE | CAS_DEFERRABLE) ||
						(newspec & (CAS_INITIALLY_IMMEDIATE | CAS_INITIALLY_DEFERRED)) == (CAS_INITIALLY_IMMEDIATE | CAS_INITIALLY_DEFERRED))
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("conflicting constraint properties"),
								 parser_errposition((yylsp[0]))));
					(yyval.ival) = newspec;
				}
#line 23318 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 458: /* def_arg: func_type  */
#line 84 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].typnam); }
#line 23324 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 459: /* def_arg: reserved_keyword  */
#line 85 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)makeString(pstrdup((yyvsp[0].keyword))); }
#line 23330 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 460: /* def_arg: qual_all_Op  */
#line 86 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].list); }
#line 23336 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 461: /* def_arg: NumericOnly  */
#line 87 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].value); }
#line 23342 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 462: /* def_arg: Sconst  */
#line 88 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (PGNode *)makeString((yyvsp[0].str)); }
#line 23348 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 463: /* def_arg: NONE  */
#line 89 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (PGNode *)makeString(pstrdup((yyvsp[0].keyword))); }
#line 23354 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 464: /* OptParenthesizedSeqOptList: '(' SeqOptList ')'  */
#line 93 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 23360 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 465: /* OptParenthesizedSeqOptList: %empty  */
#line 94 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 23366 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 466: /* generic_option_arg: Sconst  */
#line 99 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 23372 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 467: /* key_action: NO ACTION  */
#line 104 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_NOACTION; }
#line 23378 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 468: /* key_action: RESTRICT  */
#line 105 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_RESTRICT; }
#line 23384 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 469: /* key_action: CASCADE  */
#line 106 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_CASCADE; }
#line 23390 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 470: /* key_action: SET NULL_P  */
#line 107 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_FKCONSTR_ACTION_SETNULL; }
#line 23396 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 471: /* key_action: SET DEFAULT  */
#line 108 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_FKCONSTR_ACTION_SETDEFAULT; }
#line 23402 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 472: /* ColConstraint: CONSTRAINT name ColConstraintElem  */
#line 114 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = castNode(PGConstraint, (yyvsp[0].node));
					n->conname = (yyvsp[-1].str);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) n;
				}
#line 23413 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 473: /* ColConstraint: ColConstraintElem  */
#line 120 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 23419 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 474: /* ColConstraint: ConstraintAttr  */
#line 121 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 23425 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 475: /* ColConstraint: COLLATE any_name  */
#line 123 "third_party/libpg_query/grammar/statements/create.y"
                                {
					/*
					 * Note: the PGCollateClause is momentarily included in
					 * the list built by ColQualList, but we split it out
					 * again in SplitColQualList.
					 */
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = NULL;
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 23442 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 476: /* ColConstraintElem: NOT NULL_P  */
#line 140 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_NOTNULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 23453 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 477: /* ColConstraintElem: NULL_P  */
#line 147 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 23464 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 478: /* ColConstraintElem: UNIQUE opt_definition  */
#line 154 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-1]);
					n->keys = NULL;
					n->options = (yyvsp[0].list);
					n->indexname = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 23478 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 479: /* ColConstraintElem: PRIMARY KEY opt_definition  */
#line 164 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-2]);
					n->keys = NULL;
					n->options = (yyvsp[0].list);
					n->indexname = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 23492 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 480: /* ColConstraintElem: CHECK_P '(' a_expr ')' opt_no_inherit  */
#line 174 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_CHECK;
					n->location = (yylsp[-4]);
					n->is_no_inherit = (yyvsp[0].boolean);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					n->skip_validation = false;
					n->initially_valid = true;
					(yyval.node) = (PGNode *)n;
				}
#line 23508 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 481: /* ColConstraintElem: USING COMPRESSION name  */
#line 186 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_COMPRESSION;
					n->location = (yylsp[-2]);
					n->compression_name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 23520 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 482: /* ColConstraintElem: DEFAULT b_expr  */
#line 194 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_DEFAULT;
					n->location = (yylsp[-1]);
					n->raw_expr = (yyvsp[0].node);
					n->cooked_expr = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 23533 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 483: /* ColConstraintElem: REFERENCES qualified_name opt_column_list key_match key_actions  */
#line 203 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_FOREIGN;
					n->location = (yylsp[-4]);
					n->pktable			= (yyvsp[-3].range);
					n->fk_attrs			= NIL;
					n->pk_attrs			= (yyvsp[-2].list);
					n->fk_matchtype		= (yyvsp[-1].ival);
					n->fk_upd_action	= (char) ((yyvsp[0].ival) >> 8);
					n->fk_del_action	= (char) ((yyvsp[0].ival) & 0xFF);
					n->skip_validation  = false;
					n->initially_valid  = true;
					(yyval.node) = (PGNode *)n;
				}
#line 23552 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 484: /* GeneratedColumnType: VIRTUAL  */
#line 220 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.constr) = PG_CONSTR_GENERATED_VIRTUAL; }
#line 23558 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 485: /* GeneratedColumnType: STORED  */
#line 221 "third_party/libpg_query/grammar/statements/create.y"
                                 { (yyval.constr) = PG_CONSTR_GENERATED_STORED; }
#line 23564 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 486: /* opt_GeneratedColumnType: GeneratedColumnType  */
#line 225 "third_party/libpg_query/grammar/statements/create.y"
                                            { (yyval.constr) = (yyvsp[0].constr); }
#line 23570 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 487: /* opt_GeneratedColumnType: %empty  */
#line 226 "third_party/libpg_query/grammar/statements/create.y"
                                      { (yyval.constr) = PG_CONSTR_GENERATED_VIRTUAL; }
#line 23576 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 488: /* GeneratedConstraintElem: GENERATED generated_when AS IDENTITY_P OptParenthesizedSeqOptList  */
#line 231 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_IDENTITY;
					n->generated_when = (yyvsp[-3].ival);
					n->options = (yyvsp[0].list);
					n->location = (yylsp[-4]);
					(yyval.node) = (PGNode *)n;
				}
#line 23589 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 489: /* GeneratedConstraintElem: GENERATED generated_when AS '(' a_expr ')' opt_GeneratedColumnType  */
#line 240 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = (yyvsp[0].constr);
					n->generated_when = (yyvsp[-5].ival);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					n->location = (yylsp[-6]);

					/*
					 * Can't do this in the grammar because of shift/reduce
					 * conflicts.  (IDENTITY allows both ALWAYS and BY
					 * DEFAULT, but generated columns only allow ALWAYS.)  We
					 * can also give a more useful error message and location.
					 */
					if ((yyvsp[-5].ival) != PG_ATTRIBUTE_IDENTITY_ALWAYS)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("for a generated column, GENERATED ALWAYS must be specified"),
								 parser_errposition((yylsp[-5]))));

					(yyval.node) = (PGNode *)n;
				}
#line 23616 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 490: /* GeneratedConstraintElem: AS '(' a_expr ')' opt_GeneratedColumnType  */
#line 263 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = (yyvsp[0].constr);
					n->generated_when = PG_ATTRIBUTE_IDENTITY_ALWAYS;
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					n->location = (yylsp[-4]);
					(yyval.node) = (PGNode *)n;
				}
#line 23630 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 491: /* generic_option_elem: generic_option_name generic_option_arg  */
#line 277 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 23638 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 492: /* key_update: ON UPDATE key_action  */
#line 283 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 23644 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 493: /* key_actions: key_update  */
#line 289 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[0].ival) << 8) | (PG_FKCONSTR_ACTION_NOACTION & 0xFF); }
#line 23650 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 494: /* key_actions: key_delete  */
#line 291 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = (PG_FKCONSTR_ACTION_NOACTION << 8) | ((yyvsp[0].ival) & 0xFF); }
#line 23656 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 495: /* key_actions: key_update key_delete  */
#line 293 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[-1].ival) << 8) | ((yyvsp[0].ival) & 0xFF); }
#line 23662 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 496: /* key_actions: key_delete key_update  */
#line 295 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[0].ival) << 8) | ((yyvsp[-1].ival) & 0xFF); }
#line 23668 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 497: /* key_actions: %empty  */
#line 297 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = (PG_FKCONSTR_ACTION_NOACTION << 8) | (PG_FKCONSTR_ACTION_NOACTION & 0xFF); }
#line 23674 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 498: /* OnCommitOption: ON COMMIT DROP  */
#line 300 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.oncommit) = ONCOMMIT_DROP; }
#line 23680 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 499: /* OnCommitOption: ON COMMIT DELETE_P ROWS  */
#line 301 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.oncommit) = PG_ONCOMMIT_DELETE_ROWS; }
#line 23686 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 500: /* OnCommitOption: ON COMMIT PRESERVE ROWS  */
#line 302 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.oncommit) = PG_ONCOMMIT_PRESERVE_ROWS; }
#line 23692 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 501: /* OnCommitOption: %empty  */
#line 303 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.oncommit) = PG_ONCOMMIT_NOOP; }
#line 23698 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 502: /* reloptions: '(' reloption_list ')'  */
#line 308 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 23704 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 503: /* opt_no_inherit: NO INHERIT  */
#line 312 "third_party/libpg_query/grammar/statements/create.y"
                                                                                {  (yyval.boolean) = true; }
#line 23710 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 504: /* opt_no_inherit: %empty  */
#line 313 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        {  (yyval.boolean) = false; }
#line 23716 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 505: /* TableConstraint: CONSTRAINT name ConstraintElem  */
#line 319 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = castNode(PGConstraint, (yyvsp[0].node));
					n->conname = (yyvsp[-1].str);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) n;
				}
#line 23727 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 506: /* TableConstraint: ConstraintElem  */
#line 325 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 23733 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 507: /* TableLikeOption: COMMENTS  */
#line 330 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_COMMENTS; }
#line 23739 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 508: /* TableLikeOption: CONSTRAINTS  */
#line 331 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_CONSTRAINTS; }
#line 23745 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 509: /* TableLikeOption: DEFAULTS  */
#line 332 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_DEFAULTS; }
#line 23751 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 510: /* TableLikeOption: IDENTITY_P  */
#line 333 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_IDENTITY; }
#line 23757 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 511: /* TableLikeOption: INDEXES  */
#line 334 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_INDEXES; }
#line 23763 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 512: /* TableLikeOption: STATISTICS  */
#line 335 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_STATISTICS; }
#line 23769 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 513: /* TableLikeOption: STORAGE  */
#line 336 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_STORAGE; }
#line 23775 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 514: /* TableLikeOption: ALL  */
#line 337 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_ALL; }
#line 23781 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 515: /* reloption_list: reloption_elem  */
#line 343 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 23787 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 516: /* reloption_list: reloption_list ',' reloption_elem  */
#line 344 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt)); }
#line 23793 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 517: /* ExistingIndex: USING INDEX index_name  */
#line 348 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 23799 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 518: /* ConstraintAttr: DEFERRABLE  */
#line 354 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_DEFERRABLE;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 23810 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 519: /* ConstraintAttr: NOT DEFERRABLE  */
#line 361 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_NOT_DEFERRABLE;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 23821 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 520: /* ConstraintAttr: INITIALLY DEFERRED  */
#line 368 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_DEFERRED;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 23832 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 521: /* ConstraintAttr: INITIALLY IMMEDIATE  */
#line 375 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_IMMEDIATE;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 23843 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 522: /* OptWith: WITH reloptions  */
#line 386 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.list) = (yyvsp[0].list); }
#line 23849 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 523: /* OptWith: WITH OIDS  */
#line 387 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = list_make1(makeDefElem("oids", (PGNode *) makeInteger(true), (yylsp[-1]))); }
#line 23855 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 524: /* OptWith: WITHOUT OIDS  */
#line 388 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.list) = list_make1(makeDefElem("oids", (PGNode *) makeInteger(false), (yylsp[-1]))); }
#line 23861 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 525: /* OptWith: %empty  */
#line 389 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = NIL; }
#line 23867 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 526: /* definition: '(' def_list ')'  */
#line 393 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 23873 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 527: /* TableLikeOptionList: TableLikeOptionList INCLUDING TableLikeOption  */
#line 398 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) | (yyvsp[0].ival); }
#line 23879 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 528: /* TableLikeOptionList: TableLikeOptionList EXCLUDING TableLikeOption  */
#line 399 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) & ~(yyvsp[0].ival); }
#line 23885 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 529: /* TableLikeOptionList: %empty  */
#line 400 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.ival) = 0; }
#line 23891 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 530: /* generic_option_name: ColLabel  */
#line 405 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 23897 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 531: /* ConstraintAttributeElem: NOT DEFERRABLE  */
#line 410 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_NOT_DEFERRABLE; }
#line 23903 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 532: /* ConstraintAttributeElem: DEFERRABLE  */
#line 411 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_DEFERRABLE; }
#line 23909 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 533: /* ConstraintAttributeElem: INITIALLY IMMEDIATE  */
#line 412 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = CAS_INITIALLY_IMMEDIATE; }
#line 23915 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 534: /* ConstraintAttributeElem: INITIALLY DEFERRED  */
#line 413 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = CAS_INITIALLY_DEFERRED; }
#line 23921 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 535: /* ConstraintAttributeElem: NOT VALID  */
#line 414 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = CAS_NOT_VALID; }
#line 23927 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 536: /* ConstraintAttributeElem: NO INHERIT  */
#line 415 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_NO_INHERIT; }
#line 23933 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 537: /* columnDef: ColId Typename ColQualList  */
#line 421 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->category = COL_STANDARD;
					n->colname = (yyvsp[-2].str);
					n->typeName = (yyvsp[-1].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collOid = InvalidOid;
					SplitColQualList((yyvsp[0].list), &n->constraints, &n->collClause,
									 yyscanner);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
			}
#line 23956 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 538: /* columnDef: ColId opt_Typename GeneratedConstraintElem ColQualList  */
#line 441 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->category = COL_GENERATED;
					n->colname = (yyvsp[-3].str);
					n->typeName = (yyvsp[-2].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collOid = InvalidOid;
					// merge the constraints with the generated column constraint
					auto constraints = (yyvsp[0].list);
					if (constraints) {
					    constraints = lappend(constraints, (yyvsp[-1].node));
					} else {
					    constraints = list_make1((yyvsp[-1].node));
					}
					SplitColQualList(constraints, &n->constraints, &n->collClause,
									 yyscanner);
					n->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)n;
			}
#line 23986 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 539: /* def_list: def_elem  */
#line 469 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 23992 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 540: /* def_list: def_list ',' def_elem  */
#line 470 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt)); }
#line 23998 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 541: /* index_name: ColId  */
#line 474 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 24004 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 542: /* TableElement: columnDef  */
#line 478 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 24010 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 543: /* TableElement: TableLikeClause  */
#line 479 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 24016 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 544: /* TableElement: TableConstraint  */
#line 480 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 24022 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 545: /* def_elem: ColLabel '=' def_arg  */
#line 485 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-2].str), (PGNode *) (yyvsp[0].node), (yylsp[-2]));
				}
#line 24030 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 546: /* def_elem: ColLabel  */
#line 489 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[0].str), NULL, (yylsp[0]));
				}
#line 24038 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 547: /* opt_definition: WITH definition  */
#line 496 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 24044 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 548: /* opt_definition: %empty  */
#line 497 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 24050 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 549: /* OptTableElementList: TableElementList  */
#line 502 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 24056 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 550: /* OptTableElementList: TableElementList ','  */
#line 503 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 24062 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 551: /* OptTableElementList: %empty  */
#line 504 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = NIL; }
#line 24068 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 552: /* columnElem: ColId  */
#line 509 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.node) = (PGNode *) makeString((yyvsp[0].str));
				}
#line 24076 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 553: /* opt_column_list: '(' columnList ')'  */
#line 516 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 24082 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 554: /* opt_column_list: %empty  */
#line 517 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 24088 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 555: /* ColQualList: ColQualList ColConstraint  */
#line 522 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 24094 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 556: /* ColQualList: %empty  */
#line 523 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 24100 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 557: /* key_delete: ON DELETE_P key_action  */
#line 527 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 24106 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 558: /* reloption_elem: ColLabel '=' def_arg  */
#line 533 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-2].str), (PGNode *) (yyvsp[0].node), (yylsp[-2]));
				}
#line 24114 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 559: /* reloption_elem: ColLabel  */
#line 537 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[0].str), NULL, (yylsp[0]));
				}
#line 24122 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 560: /* reloption_elem: ColLabel '.' ColLabel '=' def_arg  */
#line 541 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElemExtended((yyvsp[-4].str), (yyvsp[-2].str), (PGNode *) (yyvsp[0].node),
											 PG_DEFELEM_UNSPEC, (yylsp[-4]));
				}
#line 24131 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 561: /* reloption_elem: ColLabel '.' ColLabel  */
#line 546 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElemExtended((yyvsp[-2].str), (yyvsp[0].str), NULL, PG_DEFELEM_UNSPEC, (yylsp[-2]));
				}
#line 24139 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 562: /* columnList: columnElem  */
#line 553 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 24145 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 563: /* columnList: columnList ',' columnElem  */
#line 554 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 24151 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 564: /* columnList_opt_comma: columnList  */
#line 558 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 24157 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 565: /* columnList_opt_comma: columnList ','  */
#line 559 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 24163 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 566: /* func_type: Typename  */
#line 563 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 24169 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 567: /* func_type: type_function_name attrs '%' TYPE_P  */
#line 565 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.typnam) = makeTypeNameFromNameList(lcons(makeString((yyvsp[-3].str)), (yyvsp[-2].list)));
					(yyval.typnam)->pct_type = true;
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 24179 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 568: /* func_type: SETOF type_function_name attrs '%' TYPE_P  */
#line 571 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.typnam) = makeTypeNameFromNameList(lcons(makeString((yyvsp[-3].str)), (yyvsp[-2].list)));
					(yyval.typnam)->pct_type = true;
					(yyval.typnam)->setof = true;
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 24190 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 569: /* ConstraintElem: CHECK_P '(' a_expr ')' ConstraintAttributeSpec  */
#line 582 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_CHECK;
					n->location = (yylsp[-4]);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "CHECK",
								   NULL, NULL, &n->skip_validation,
								   &n->is_no_inherit, yyscanner);
					n->initially_valid = !n->skip_validation;
					(yyval.node) = (PGNode *)n;
				}
#line 24207 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 570: /* ConstraintElem: UNIQUE '(' columnList_opt_comma ')' opt_definition ConstraintAttributeSpec  */
#line 596 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-5]);
					n->keys = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->indexname = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "UNIQUE",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 24224 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 571: /* ConstraintElem: UNIQUE ExistingIndex ConstraintAttributeSpec  */
#line 609 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-2]);
					n->keys = NIL;
					n->options = NIL;
					n->indexname = (yyvsp[-1].str);
					n->indexspace = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "UNIQUE",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 24242 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 572: /* ConstraintElem: PRIMARY KEY '(' columnList_opt_comma ')' opt_definition ConstraintAttributeSpec  */
#line 624 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-6]);
					n->keys = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->indexname = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "PRIMARY KEY",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 24259 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 573: /* ConstraintElem: PRIMARY KEY ExistingIndex ConstraintAttributeSpec  */
#line 637 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-3]);
					n->keys = NIL;
					n->options = NIL;
					n->indexname = (yyvsp[-1].str);
					n->indexspace = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "PRIMARY KEY",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 24277 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 574: /* ConstraintElem: FOREIGN KEY '(' columnList_opt_comma ')' REFERENCES qualified_name opt_column_list key_match key_actions ConstraintAttributeSpec  */
#line 652 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_FOREIGN;
					n->location = (yylsp[-10]);
					n->pktable			= (yyvsp[-4].range);
					n->fk_attrs			= (yyvsp[-7].list);
					n->pk_attrs			= (yyvsp[-3].list);
					n->fk_matchtype		= (yyvsp[-2].ival);
					n->fk_upd_action	= (char) ((yyvsp[-1].ival) >> 8);
					n->fk_del_action	= (char) ((yyvsp[-1].ival) & 0xFF);
					processCASbits((yyvsp[0].ival), (yylsp[0]), "FOREIGN KEY",
								   &n->deferrable, &n->initdeferred,
								   &n->skip_validation, NULL,
								   yyscanner);
					n->initially_valid = !n->skip_validation;
					(yyval.node) = (PGNode *)n;
				}
#line 24299 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 575: /* TableElementList: TableElement  */
#line 674 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 24307 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 576: /* TableElementList: TableElementList ',' TableElement  */
#line 678 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 24315 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 577: /* key_match: MATCH FULL  */
#line 685 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_FULL;
			}
#line 24323 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 578: /* key_match: MATCH PARTIAL  */
#line 689 "third_party/libpg_query/grammar/statements/create.y"
                        {
				ereport(ERROR,
						(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
						 errmsg("MATCH PARTIAL not yet implemented"),
						 parser_errposition((yylsp[-1]))));
				(yyval.ival) = PG_FKCONSTR_MATCH_PARTIAL;
			}
#line 24335 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 579: /* key_match: MATCH SIMPLE  */
#line 697 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_SIMPLE;
			}
#line 24343 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 580: /* key_match: %empty  */
#line 701 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_SIMPLE;
			}
#line 24351 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 581: /* TableLikeClause: LIKE qualified_name TableLikeOptionList  */
#line 709 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGTableLikeClause *n = makeNode(PGTableLikeClause);
					n->relation = (yyvsp[-1].range);
					n->options = (yyvsp[0].ival);
					(yyval.node) = (PGNode *)n;
				}
#line 24362 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 582: /* OptTemp: TEMPORARY  */
#line 718 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 24368 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 583: /* OptTemp: TEMP  */
#line 719 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 24374 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 584: /* OptTemp: LOCAL TEMPORARY  */
#line 720 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 24380 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 585: /* OptTemp: LOCAL TEMP  */
#line 721 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 24386 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 586: /* OptTemp: GLOBAL TEMPORARY  */
#line 723 "third_party/libpg_query/grammar/statements/create.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-1]))));
					(yyval.ival) = PG_RELPERSISTENCE_TEMP;
				}
#line 24397 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 587: /* OptTemp: GLOBAL TEMP  */
#line 730 "third_party/libpg_query/grammar/statements/create.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-1]))));
					(yyval.ival) = PG_RELPERSISTENCE_TEMP;
				}
#line 24408 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 588: /* OptTemp: UNLOGGED  */
#line 736 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_RELPERSISTENCE_UNLOGGED; }
#line 24414 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 589: /* OptTemp: %empty  */
#line 737 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = RELPERSISTENCE_PERMANENT; }
#line 24420 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 590: /* generated_when: ALWAYS  */
#line 742 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = PG_ATTRIBUTE_IDENTITY_ALWAYS; }
#line 24426 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 591: /* generated_when: BY DEFAULT  */
#line 743 "third_party/libpg_query/grammar/statements/create.y"
                                        { (yyval.ival) = ATTRIBUTE_IDENTITY_BY_DEFAULT; }
#line 24432 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 592: /* LoadStmt: LOAD file_name  */
#line 8 "third_party/libpg_query/grammar/statements/load.y"
                                {
					PGLoadStmt *n = makeNode(PGLoadStmt);
					n->filename = (yyvsp[0].str);
					n->repository = NULL;
					n->repo_is_alias = false;
					n->version = NULL;
					n->load_type = PG_LOAD_TYPE_LOAD;
					(yyval.node) = (PGNode *)n;
				}
#line 24446 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 593: /* LoadStmt: opt_force INSTALL file_name opt_ext_version  */
#line 17 "third_party/libpg_query/grammar/statements/load.y"
                                                                            {
                    PGLoadStmt *n = makeNode(PGLoadStmt);
                    n->filename = (yyvsp[-1].str);
                    n->repository = NULL;
                    n->repo_is_alias = false;
                    n->version = (yyvsp[0].str);
                    n->load_type = (yyvsp[-3].loadinstalltype);
                    (yyval.node) = (PGNode *)n;
				}
#line 24460 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 594: /* LoadStmt: opt_force INSTALL file_name FROM ColId opt_ext_version  */
#line 26 "third_party/libpg_query/grammar/statements/load.y"
                                                                                       {
                    PGLoadStmt *n = makeNode(PGLoadStmt);
                    n->repository = (yyvsp[-1].str);
                    n->repo_is_alias = true;
                    n->filename = (yyvsp[-3].str);
                    n->version = (yyvsp[0].str);
                    n->load_type = (yyvsp[-5].loadinstalltype);
                    (yyval.node) = (PGNode *)n;
				}
#line 24474 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 595: /* LoadStmt: opt_force INSTALL file_name FROM Sconst opt_ext_version  */
#line 35 "third_party/libpg_query/grammar/statements/load.y"
                                                                                        {
                    PGLoadStmt *n = makeNode(PGLoadStmt);
                    n->filename = (yyvsp[-3].str);
                    n->repository = (yyvsp[-1].str);
                    n->repo_is_alias = false;
                    n->version = (yyvsp[0].str);
                    n->load_type = (yyvsp[-5].loadinstalltype);
                    (yyval.node) = (PGNode *)n;
				}
#line 24488 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 596: /* opt_force: %empty  */
#line 46 "third_party/libpg_query/grammar/statements/load.y"
                                                                                { (yyval.loadinstalltype) = PG_LOAD_TYPE_INSTALL; }
#line 24494 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 597: /* opt_force: FORCE  */
#line 47 "third_party/libpg_query/grammar/statements/load.y"
                                                { (yyval.loadinstalltype) = PG_LOAD_TYPE_FORCE_INSTALL; }
#line 24500 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 598: /* file_name: Sconst  */
#line 49 "third_party/libpg_query/grammar/statements/load.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 24506 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 599: /* file_name: ColId  */
#line 50 "third_party/libpg_query/grammar/statements/load.y"
                                                { (yyval.str) = (yyvsp[0].str); }
#line 24512 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 600: /* opt_ext_version: %empty  */
#line 53 "third_party/libpg_query/grammar/statements/load.y"
                                                { (yyval.str) = NULL; }
#line 24518 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 601: /* opt_ext_version: VERSION_P Sconst  */
#line 54 "third_party/libpg_query/grammar/statements/load.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 24524 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 602: /* opt_ext_version: VERSION_P ColId  */
#line 55 "third_party/libpg_query/grammar/statements/load.y"
                                                { (yyval.str) = (yyvsp[0].str); }
#line 24530 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 605: /* select_with_parens: '(' select_no_parens ')'  */
#line 52 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 24536 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 606: /* select_with_parens: '(' select_with_parens ')'  */
#line 53 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.node) = (yyvsp[-1].node); }
#line 24542 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 607: /* select_with_parens: '(' VariableShowStmt ')'  */
#line 55 "third_party/libpg_query/grammar/statements/select.y"
                    {
		    	(yyval.node) = (yyvsp[-1].node);
			}
#line 24550 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 608: /* select_no_parens: simple_select  */
#line 72 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 24556 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 609: /* select_no_parens: select_clause sort_clause  */
#line 74 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-1].node), (yyvsp[0].list), NIL,
										NULL, NULL, NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-1].node);
				}
#line 24567 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 610: /* select_no_parens: select_clause opt_sort_clause for_locking_clause opt_select_limit  */
#line 81 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[-1].list),
										(PGNode*) list_nth((yyvsp[0].list), 0), (PGNode*) list_nth((yyvsp[0].list), 1),
										NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 24579 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 611: /* select_no_parens: select_clause opt_sort_clause select_limit opt_for_locking_clause  */
#line 89 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[0].list),
										(PGNode*) list_nth((yyvsp[-1].list), 0), (PGNode*) list_nth((yyvsp[-1].list), 1),
										NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 24591 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 612: /* select_no_parens: with_clause select_clause  */
#line 97 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[0].node), NULL, NIL,
										NULL, NULL,
										(yyvsp[-1].with),
										yyscanner);
					(yyval.node) = (yyvsp[0].node);
				}
#line 24603 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 613: /* select_no_parens: with_clause select_clause sort_clause  */
#line 105 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-1].node), (yyvsp[0].list), NIL,
										NULL, NULL,
										(yyvsp[-2].with),
										yyscanner);
					(yyval.node) = (yyvsp[-1].node);
				}
#line 24615 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 614: /* select_no_parens: with_clause select_clause opt_sort_clause for_locking_clause opt_select_limit  */
#line 113 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[-1].list),
										(PGNode*) list_nth((yyvsp[0].list), 0), (PGNode*) list_nth((yyvsp[0].list), 1),
										(yyvsp[-4].with),
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 24627 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 615: /* select_no_parens: with_clause select_clause opt_sort_clause select_limit opt_for_locking_clause  */
#line 121 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[0].list),
										(PGNode*) list_nth((yyvsp[-1].list), 0), (PGNode*) list_nth((yyvsp[-1].list), 1),
										(yyvsp[-4].with),
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 24639 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 616: /* select_clause: simple_select  */
#line 131 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 24645 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 617: /* select_clause: select_with_parens  */
#line 132 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 24651 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 618: /* opt_select: SELECT opt_all_clause opt_target_list_opt_comma  */
#line 160 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.list) = (yyvsp[0].list);
			}
#line 24659 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 619: /* opt_select: %empty  */
#line 164 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGAStar *star = makeNode(PGAStar);
				(yyval.list) = list_make1(star);
			}
#line 24668 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 620: /* simple_select: SELECT opt_all_clause opt_target_list_opt_comma into_clause from_clause where_clause group_clause having_clause window_clause qualify_clause sample_clause  */
#line 175 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->targetList = (yyvsp[-8].list);
					n->intoClause = (yyvsp[-7].into);
					n->fromClause = (yyvsp[-6].list);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 24686 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 621: /* simple_select: SELECT distinct_clause target_list_opt_comma into_clause from_clause where_clause group_clause having_clause window_clause qualify_clause sample_clause  */
#line 191 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->distinctClause = (yyvsp[-9].list);
					n->targetList = (yyvsp[-8].list);
					n->intoClause = (yyvsp[-7].into);
					n->fromClause = (yyvsp[-6].list);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 24705 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 622: /* simple_select: FROM from_list opt_select into_clause where_clause group_clause having_clause window_clause qualify_clause sample_clause  */
#line 208 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->targetList = (yyvsp[-7].list);
					n->fromClause = (yyvsp[-8].list);
					n->intoClause = (yyvsp[-6].into);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 24723 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 623: /* simple_select: FROM from_list SELECT distinct_clause target_list_opt_comma into_clause where_clause group_clause having_clause window_clause qualify_clause sample_clause  */
#line 225 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->targetList = (yyvsp[-7].list);
					n->distinctClause = (yyvsp[-8].list);
					n->fromClause = (yyvsp[-10].list);
					n->intoClause = (yyvsp[-6].into);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 24742 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 624: /* simple_select: values_clause_opt_comma  */
#line 239 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 24748 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 625: /* simple_select: TABLE relation_expr  */
#line 241 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* same as SELECT * FROM relation_expr */
					PGColumnRef *cr = makeNode(PGColumnRef);
					PGResTarget *rt = makeNode(PGResTarget);
					PGSelectStmt *n = makeNode(PGSelectStmt);

					cr->fields = list_make1(makeNode(PGAStar));
					cr->location = -1;

					rt->name = NULL;
					rt->indirection = NIL;
					rt->val = (PGNode *)cr;
					rt->location = -1;

					n->targetList = list_make1(rt);
					n->fromClause = list_make1((yyvsp[0].range));
					(yyval.node) = (PGNode *)n;
				}
#line 24771 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 626: /* simple_select: select_clause UNION all_or_distinct by_name select_clause  */
#line 260 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_UNION_BY_NAME, (yyvsp[-2].boolean), (yyvsp[-4].node), (yyvsp[0].node));
				}
#line 24779 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 627: /* simple_select: select_clause UNION all_or_distinct select_clause  */
#line 264 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_UNION, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 24787 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 628: /* simple_select: select_clause INTERSECT all_or_distinct select_clause  */
#line 268 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_INTERSECT, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 24795 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 629: /* simple_select: select_clause EXCEPT all_or_distinct select_clause  */
#line 272 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_EXCEPT, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 24803 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 630: /* simple_select: pivot_keyword table_ref USING target_list_opt_comma  */
#line 276 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-2].node);
					n->aggrs = (yyvsp[0].list);
					n->location = (yylsp[-3]);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 24817 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 631: /* simple_select: pivot_keyword table_ref USING target_list_opt_comma GROUP_P BY name_list_opt_comma_opt_bracket  */
#line 286 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-5].node);
					n->aggrs = (yyvsp[-3].list);
					n->groups = (yyvsp[0].list);
					n->location = (yylsp[-6]);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 24832 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 632: /* simple_select: pivot_keyword table_ref GROUP_P BY name_list_opt_comma_opt_bracket  */
#line 297 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-3].node);
					n->groups = (yyvsp[0].list);
					n->location = (yylsp[-4]);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 24846 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 633: /* simple_select: pivot_keyword table_ref ON pivot_column_list  */
#line 307 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-2].node);
					n->columns = (yyvsp[0].list);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 24859 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 634: /* simple_select: pivot_keyword table_ref ON pivot_column_list GROUP_P BY name_list_opt_comma_opt_bracket  */
#line 316 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-5].node);
					n->columns = (yyvsp[-3].list);
					n->groups = (yyvsp[0].list);
					n->location = (yylsp[-6]);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 24874 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 635: /* simple_select: pivot_keyword table_ref ON pivot_column_list USING target_list_opt_comma  */
#line 327 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-4].node);
					n->columns = (yyvsp[-2].list);
					n->aggrs = (yyvsp[0].list);
					n->location = (yylsp[-5]);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 24889 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 636: /* simple_select: pivot_keyword table_ref ON pivot_column_list USING target_list_opt_comma GROUP_P BY name_list_opt_comma_opt_bracket  */
#line 338 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-7].node);
					n->columns = (yyvsp[-5].list);
					n->aggrs = (yyvsp[-3].list);
					n->groups = (yyvsp[0].list);
					n->location = (yylsp[-8]);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 24905 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 637: /* simple_select: unpivot_keyword table_ref ON target_list_opt_comma INTO NAME_P name value_or_values name_list_opt_comma_opt_bracket  */
#line 350 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-7].node);
					n->unpivots = (yyvsp[0].list);
					n->location = (yylsp[-8]);
					PGPivot *piv = makeNode(PGPivot);
					piv->unpivot_columns = list_make1(makeString((yyvsp[-2].str)));
					piv->pivot_value = (yyvsp[-5].list);
					n->columns = list_make1(piv);

					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 24924 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 638: /* simple_select: unpivot_keyword table_ref ON target_list_opt_comma  */
#line 365 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-2].node);
					n->unpivots = list_make1(makeString("value"));
					n->location = (yylsp[-3]);
					PGPivot *piv = makeNode(PGPivot);
					piv->unpivot_columns = list_make1(makeString("name"));
					piv->pivot_value = (yyvsp[0].list);
					n->columns = list_make1(piv);

					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 24943 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 645: /* pivot_column_entry: b_expr  */
#line 395 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGPivot *n = makeNode(PGPivot);
				n->pivot_columns = list_make1((yyvsp[0].node));
				(yyval.node) = (PGNode *) n;
			}
#line 24953 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 646: /* pivot_column_entry: b_expr IN_P '(' select_no_parens ')'  */
#line 401 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGPivot *n = makeNode(PGPivot);
				n->pivot_columns = list_make1((yyvsp[-4].node));
				n->subquery = (yyvsp[-1].node);
				(yyval.node) = (PGNode *) n;
			}
#line 24964 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 647: /* pivot_column_entry: single_pivot_value  */
#line 407 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 24970 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 648: /* pivot_column_list_internal: pivot_column_entry  */
#line 411 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 24976 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 649: /* pivot_column_list_internal: pivot_column_list_internal ',' pivot_column_entry  */
#line 412 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 24982 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 650: /* pivot_column_list: pivot_column_list_internal  */
#line 416 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 24988 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 651: /* pivot_column_list: pivot_column_list_internal ','  */
#line 417 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 24994 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 652: /* with_clause: WITH cte_list  */
#line 432 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = false;
				(yyval.with)->location = (yylsp[-1]);
			}
#line 25005 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 653: /* with_clause: WITH_LA cte_list  */
#line 439 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = false;
				(yyval.with)->location = (yylsp[-1]);
			}
#line 25016 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 654: /* with_clause: WITH RECURSIVE cte_list  */
#line 446 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = true;
				(yyval.with)->location = (yylsp[-2]);
			}
#line 25027 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 655: /* cte_list: common_table_expr  */
#line 455 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 25033 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 656: /* cte_list: cte_list ',' common_table_expr  */
#line 456 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 25039 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 657: /* common_table_expr: name opt_name_list AS opt_materialized '(' PreparableStmt ')'  */
#line 460 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGCommonTableExpr *n = makeNode(PGCommonTableExpr);
				n->ctename = (yyvsp[-6].str);
				n->aliascolnames = (yyvsp[-5].list);
				n->ctematerialized = (yyvsp[-3].ctematerialize);
				n->ctequery = (yyvsp[-1].node);
				n->location = (yylsp[-6]);
				(yyval.node) = (PGNode *) n;
			}
#line 25053 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 658: /* opt_materialized: MATERIALIZED  */
#line 472 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.ctematerialize) = PGCTEMaterializeAlways; }
#line 25059 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 659: /* opt_materialized: NOT MATERIALIZED  */
#line 473 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.ctematerialize) = PGCTEMaterializeNever; }
#line 25065 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 660: /* opt_materialized: %empty  */
#line 474 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ctematerialize) = PGCTEMaterializeDefault; }
#line 25071 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 661: /* into_clause: INTO OptTempTableName  */
#line 479 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.into) = makeNode(PGIntoClause);
					(yyval.into)->rel = (yyvsp[0].range);
					(yyval.into)->colNames = NIL;
					(yyval.into)->options = NIL;
					(yyval.into)->onCommit = PG_ONCOMMIT_NOOP;
					(yyval.into)->viewQuery = NULL;
					(yyval.into)->skipData = false;
				}
#line 25085 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 662: /* into_clause: %empty  */
#line 489 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.into) = NULL; }
#line 25091 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 663: /* OptTempTableName: TEMPORARY opt_table qualified_name  */
#line 498 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 25100 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 664: /* OptTempTableName: TEMP opt_table qualified_name  */
#line 503 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 25109 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 665: /* OptTempTableName: LOCAL TEMPORARY opt_table qualified_name  */
#line 508 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 25118 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 666: /* OptTempTableName: LOCAL TEMP opt_table qualified_name  */
#line 513 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 25127 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 667: /* OptTempTableName: GLOBAL TEMPORARY opt_table qualified_name  */
#line 518 "third_party/libpg_query/grammar/statements/select.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-3]))));
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 25139 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 668: /* OptTempTableName: GLOBAL TEMP opt_table qualified_name  */
#line 526 "third_party/libpg_query/grammar/statements/select.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-3]))));
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 25151 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 669: /* OptTempTableName: UNLOGGED opt_table qualified_name  */
#line 534 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_UNLOGGED;
				}
#line 25160 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 670: /* OptTempTableName: TABLE qualified_name  */
#line 539 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = RELPERSISTENCE_PERMANENT;
				}
#line 25169 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 671: /* OptTempTableName: qualified_name  */
#line 544 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = RELPERSISTENCE_PERMANENT;
				}
#line 25178 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 672: /* opt_table: TABLE  */
#line 550 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        {}
#line 25184 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 673: /* opt_table: %empty  */
#line 551 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                {}
#line 25190 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 674: /* all_or_distinct: ALL  */
#line 555 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.boolean) = true; }
#line 25196 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 675: /* all_or_distinct: DISTINCT  */
#line 556 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 25202 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 676: /* all_or_distinct: %empty  */
#line 557 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 25208 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 677: /* by_name: BY NAME_P  */
#line 561 "third_party/libpg_query/grammar/statements/select.y"
                                                          { }
#line 25214 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 678: /* distinct_clause: DISTINCT  */
#line 568 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1(NIL); }
#line 25220 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 679: /* distinct_clause: DISTINCT ON '(' expr_list_opt_comma ')'  */
#line 569 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 25226 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 680: /* opt_all_clause: ALL  */
#line 573 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = NIL;}
#line 25232 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 681: /* opt_all_clause: %empty  */
#line 574 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 25238 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 682: /* opt_ignore_nulls: IGNORE_P NULLS_P  */
#line 578 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ignorenulls) = PG_IGNORE_NULLS;}
#line 25244 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 683: /* opt_ignore_nulls: RESPECT_P NULLS_P  */
#line 579 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ignorenulls) = PG_RESPECT_NULLS;}
#line 25250 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 684: /* opt_ignore_nulls: %empty  */
#line 580 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.ignorenulls) = PG_DEFAULT_NULLS; }
#line 25256 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 685: /* opt_sort_clause: sort_clause  */
#line 584 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list);}
#line 25262 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 686: /* opt_sort_clause: %empty  */
#line 585 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 25268 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 687: /* sort_clause: ORDER BY sortby_list  */
#line 589 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 25274 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 688: /* sort_clause: ORDER BY ALL opt_asc_desc opt_nulls_order  */
#line 591 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSortBy *sort = makeNode(PGSortBy);
					PGAStar *star = makeNode(PGAStar);
					star->columns = true;
					star->location = (yylsp[-2]);
					sort->node = (PGNode *) star;
					sort->sortby_dir = (yyvsp[-1].sortorder);
					sort->sortby_nulls = (yyvsp[0].nullorder);
					sort->useOp = NIL;
					sort->location = -1;		/* no operator */
					(yyval.list) = list_make1(sort);
				}
#line 25291 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 689: /* sortby_list: sortby  */
#line 606 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].sortby)); }
#line 25297 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 690: /* sortby_list: sortby_list ',' sortby  */
#line 607 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].sortby)); }
#line 25303 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 691: /* sortby: a_expr USING qual_all_Op opt_nulls_order  */
#line 611 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.sortby) = makeNode(PGSortBy);
					(yyval.sortby)->node = (yyvsp[-3].node);
					(yyval.sortby)->sortby_dir = SORTBY_USING;
					(yyval.sortby)->sortby_nulls = (yyvsp[0].nullorder);
					(yyval.sortby)->useOp = (yyvsp[-1].list);
					(yyval.sortby)->location = (yylsp[-1]);
				}
#line 25316 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 692: /* sortby: a_expr opt_asc_desc opt_nulls_order  */
#line 620 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.sortby) = makeNode(PGSortBy);
					(yyval.sortby)->node = (yyvsp[-2].node);
					(yyval.sortby)->sortby_dir = (yyvsp[-1].sortorder);
					(yyval.sortby)->sortby_nulls = (yyvsp[0].nullorder);
					(yyval.sortby)->useOp = NIL;
					(yyval.sortby)->location = -1;		/* no operator */
				}
#line 25329 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 693: /* opt_asc_desc: ASC_P  */
#line 630 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.sortorder) = PG_SORTBY_ASC; }
#line 25335 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 694: /* opt_asc_desc: DESC_P  */
#line 631 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.sortorder) = PG_SORTBY_DESC; }
#line 25341 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 695: /* opt_asc_desc: %empty  */
#line 632 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.sortorder) = PG_SORTBY_DEFAULT; }
#line 25347 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 696: /* opt_nulls_order: NULLS_LA FIRST_P  */
#line 635 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.nullorder) = PG_SORTBY_NULLS_FIRST; }
#line 25353 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 697: /* opt_nulls_order: NULLS_LA LAST_P  */
#line 636 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.nullorder) = PG_SORTBY_NULLS_LAST; }
#line 25359 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 698: /* opt_nulls_order: %empty  */
#line 637 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.nullorder) = PG_SORTBY_NULLS_DEFAULT; }
#line 25365 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 699: /* select_limit: limit_clause offset_clause  */
#line 641 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = list_make2((yyvsp[0].node), (yyvsp[-1].node)); }
#line 25371 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 700: /* select_limit: offset_clause limit_clause  */
#line 642 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].node)); }
#line 25377 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 701: /* select_limit: limit_clause  */
#line 643 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make2(NULL, (yyvsp[0].node)); }
#line 25383 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 702: /* select_limit: offset_clause  */
#line 644 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make2((yyvsp[0].node), NULL); }
#line 25389 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 703: /* opt_select_limit: select_limit  */
#line 648 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 25395 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 704: /* opt_select_limit: %empty  */
#line 649 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make2(NULL,NULL); }
#line 25401 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 705: /* limit_clause: LIMIT select_limit_value  */
#line 654 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 25407 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 706: /* limit_clause: LIMIT select_limit_value ',' select_offset_value  */
#line 656 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* Disabled because it was too confusing, bjm 2002-02-18 */
					ereport(ERROR,
							(errcode(PG_ERRCODE_SYNTAX_ERROR),
							 errmsg("LIMIT #,# syntax is not supported"),
							 errhint("Use separate LIMIT and OFFSET clauses."),
							 parser_errposition((yylsp[-3]))));
				}
#line 25420 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 707: /* limit_clause: FETCH first_or_next select_fetch_first_value row_or_rows ONLY  */
#line 672 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[-2].node); }
#line 25426 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 708: /* limit_clause: FETCH first_or_next row_or_rows ONLY  */
#line 674 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeIntConst(1, -1); }
#line 25432 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 709: /* offset_clause: OFFSET select_offset_value  */
#line 679 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 25438 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 710: /* offset_clause: OFFSET select_fetch_first_value row_or_rows  */
#line 682 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[-1].node); }
#line 25444 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 711: /* sample_count: FCONST '%'  */
#line 690 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeFloat((yyvsp[-1].str)), true);
		}
#line 25452 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 712: /* sample_count: ICONST '%'  */
#line 694 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[-1].ival)), true);
		}
#line 25460 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 713: /* sample_count: FCONST PERCENT  */
#line 698 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeFloat((yyvsp[-1].str)), true);
		}
#line 25468 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 714: /* sample_count: ICONST PERCENT  */
#line 702 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[-1].ival)), true);
		}
#line 25476 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 715: /* sample_count: ICONST  */
#line 706 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[0].ival)), false);
		}
#line 25484 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 716: /* sample_count: ICONST ROWS  */
#line 710 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[-1].ival)), false);
		}
#line 25492 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 717: /* sample_clause: USING SAMPLE tablesample_entry  */
#line 717 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 25500 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 718: /* sample_clause: %empty  */
#line 721 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = NULL; }
#line 25506 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 719: /* opt_sample_func: ColId  */
#line 728 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 25512 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 720: /* opt_sample_func: %empty  */
#line 729 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.str) = NULL; }
#line 25518 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 721: /* tablesample_entry: opt_sample_func '(' sample_count ')' opt_repeatable_clause  */
#line 734 "third_party/libpg_query/grammar/statements/select.y"
                                {
					int seed = (yyvsp[0].ival);
					(yyval.node) = makeSampleOptions((yyvsp[-2].node), (yyvsp[-4].str), &seed, (yylsp[-4]));
				}
#line 25527 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 722: /* tablesample_entry: sample_count  */
#line 739 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleOptions((yyvsp[0].node), NULL, NULL, (yylsp[0]));
		}
#line 25535 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 723: /* tablesample_entry: sample_count '(' ColId ')'  */
#line 743 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleOptions((yyvsp[-3].node), (yyvsp[-1].str), NULL, (yylsp[-3]));
		}
#line 25543 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 724: /* tablesample_entry: sample_count '(' ColId ',' ICONST ')'  */
#line 747 "third_party/libpg_query/grammar/statements/select.y"
                {
			int seed = (yyvsp[-1].ival);
			(yyval.node) = makeSampleOptions((yyvsp[-5].node), (yyvsp[-3].str), &seed, (yylsp[-5]));
		}
#line 25552 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 725: /* tablesample_clause: TABLESAMPLE tablesample_entry  */
#line 755 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 25560 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 726: /* opt_tablesample_clause: tablesample_clause  */
#line 761 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 25566 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 727: /* opt_tablesample_clause: %empty  */
#line 762 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.node) = NULL; }
#line 25572 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 728: /* opt_repeatable_clause: REPEATABLE '(' ICONST ')'  */
#line 767 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.ival) = (yyvsp[-1].ival); }
#line 25578 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 729: /* opt_repeatable_clause: %empty  */
#line 768 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.ival) = -1; }
#line 25584 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 730: /* select_limit_value: a_expr  */
#line 772 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 25590 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 731: /* select_limit_value: ALL  */
#line 774 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* LIMIT ALL is represented as a NULL constant */
					(yyval.node) = makeNullAConst((yylsp[0]));
				}
#line 25599 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 732: /* select_limit_value: a_expr '%'  */
#line 779 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeLimitPercent((yyvsp[-1].node)); }
#line 25605 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 733: /* select_limit_value: FCONST PERCENT  */
#line 781 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeLimitPercent(makeFloatConst((yyvsp[-1].str),(yylsp[-1]))); }
#line 25611 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 734: /* select_limit_value: ICONST PERCENT  */
#line 783 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeLimitPercent(makeIntConst((yyvsp[-1].ival),(yylsp[-1]))); }
#line 25617 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 735: /* select_offset_value: a_expr  */
#line 787 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 25623 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 736: /* select_fetch_first_value: c_expr  */
#line 807 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 25629 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 737: /* select_fetch_first_value: '+' I_or_F_const  */
#line 809 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 25635 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 738: /* select_fetch_first_value: '-' I_or_F_const  */
#line 811 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 25641 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 739: /* I_or_F_const: Iconst  */
#line 815 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = makeIntConst((yyvsp[0].ival),(yylsp[0])); }
#line 25647 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 740: /* I_or_F_const: FCONST  */
#line 816 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = makeFloatConst((yyvsp[0].str),(yylsp[0])); }
#line 25653 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 741: /* row_or_rows: ROW  */
#line 820 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ival) = 0; }
#line 25659 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 742: /* row_or_rows: ROWS  */
#line 821 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.ival) = 0; }
#line 25665 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 743: /* first_or_next: FIRST_P  */
#line 824 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.ival) = 0; }
#line 25671 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 744: /* first_or_next: NEXT  */
#line 825 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.ival) = 0; }
#line 25677 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 745: /* group_clause: GROUP_P BY group_by_list_opt_comma  */
#line 850 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 25683 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 746: /* group_clause: GROUP_P BY ALL  */
#line 852 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNode *node = (PGNode *) makeGroupingSet(GROUPING_SET_ALL, NIL, (yylsp[0]));
					(yyval.list) = list_make1(node);
				}
#line 25692 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 747: /* group_clause: %empty  */
#line 856 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 25698 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 748: /* group_by_list: group_by_item  */
#line 860 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 25704 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 749: /* group_by_list: group_by_list ',' group_by_item  */
#line 861 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list),(yyvsp[0].node)); }
#line 25710 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 750: /* group_by_list_opt_comma: group_by_list  */
#line 865 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 25716 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 751: /* group_by_list_opt_comma: group_by_list ','  */
#line 866 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 25722 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 752: /* group_by_item: a_expr  */
#line 870 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 25728 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 753: /* group_by_item: empty_grouping_set  */
#line 871 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 25734 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 754: /* group_by_item: cube_clause  */
#line 872 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 25740 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 755: /* group_by_item: rollup_clause  */
#line 873 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 25746 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 756: /* group_by_item: grouping_sets_clause  */
#line 874 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 25752 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 757: /* empty_grouping_set: '(' ')'  */
#line 879 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_EMPTY, NIL, (yylsp[-1]));
				}
#line 25760 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 758: /* rollup_clause: ROLLUP '(' expr_list_opt_comma ')'  */
#line 892 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_ROLLUP, (yyvsp[-1].list), (yylsp[-3]));
				}
#line 25768 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 759: /* cube_clause: CUBE '(' expr_list_opt_comma ')'  */
#line 899 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_CUBE, (yyvsp[-1].list), (yylsp[-3]));
				}
#line 25776 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 760: /* grouping_sets_clause: GROUPING SETS '(' group_by_list_opt_comma ')'  */
#line 906 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_SETS, (yyvsp[-1].list), (yylsp[-4]));
				}
#line 25784 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 761: /* grouping_or_grouping_id: GROUPING  */
#line 912 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = NULL; }
#line 25790 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 762: /* grouping_or_grouping_id: GROUPING_ID  */
#line 913 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = NULL; }
#line 25796 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 763: /* having_clause: HAVING a_expr  */
#line 917 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 25802 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 764: /* having_clause: %empty  */
#line 918 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 25808 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 765: /* qualify_clause: QUALIFY a_expr  */
#line 922 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 25814 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 766: /* qualify_clause: %empty  */
#line 923 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 25820 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 767: /* for_locking_clause: for_locking_items  */
#line 927 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 25826 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 768: /* for_locking_clause: FOR READ_P ONLY  */
#line 928 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 25832 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 769: /* opt_for_locking_clause: for_locking_clause  */
#line 932 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 25838 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 770: /* opt_for_locking_clause: %empty  */
#line 933 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 25844 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 771: /* for_locking_items: for_locking_item  */
#line 937 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 25850 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 772: /* for_locking_items: for_locking_items for_locking_item  */
#line 938 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 25856 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 773: /* for_locking_item: for_locking_strength locked_rels_list opt_nowait_or_skip  */
#line 943 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGLockingClause *n = makeNode(PGLockingClause);
					n->lockedRels = (yyvsp[-1].list);
					n->strength = (yyvsp[-2].lockstrength);
					n->waitPolicy = (yyvsp[0].lockwaitpolicy);
					(yyval.node) = (PGNode *) n;
				}
#line 25868 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 774: /* for_locking_strength: FOR UPDATE  */
#line 953 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.lockstrength) = LCS_FORUPDATE; }
#line 25874 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 775: /* for_locking_strength: FOR NO KEY UPDATE  */
#line 954 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.lockstrength) = PG_LCS_FORNOKEYUPDATE; }
#line 25880 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 776: /* for_locking_strength: FOR SHARE  */
#line 955 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockstrength) = PG_LCS_FORSHARE; }
#line 25886 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 777: /* for_locking_strength: FOR KEY SHARE  */
#line 956 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockstrength) = PG_LCS_FORKEYSHARE; }
#line 25892 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 778: /* locked_rels_list: OF qualified_name_list  */
#line 960 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 25898 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 779: /* locked_rels_list: %empty  */
#line 961 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 25904 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 780: /* opt_nowait_or_skip: NOWAIT  */
#line 966 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockwaitpolicy) = LockWaitError; }
#line 25910 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 781: /* opt_nowait_or_skip: SKIP LOCKED  */
#line 967 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.lockwaitpolicy) = PGLockWaitSkip; }
#line 25916 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 782: /* opt_nowait_or_skip: %empty  */
#line 968 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockwaitpolicy) = PGLockWaitBlock; }
#line 25922 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 783: /* values_clause: VALUES '(' expr_list_opt_comma ')'  */
#line 978 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->valuesLists = list_make1((yyvsp[-1].list));
					(yyval.node) = (PGNode *) n;
				}
#line 25932 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 784: /* values_clause: values_clause ',' '(' expr_list_opt_comma ')'  */
#line 984 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = (PGSelectStmt *) (yyvsp[-4].node);
					n->valuesLists = lappend(n->valuesLists, (yyvsp[-1].list));
					(yyval.node) = (PGNode *) n;
				}
#line 25942 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 785: /* values_clause_opt_comma: values_clause  */
#line 992 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 25948 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 786: /* values_clause_opt_comma: values_clause ','  */
#line 993 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 25954 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 787: /* from_clause: FROM from_list_opt_comma  */
#line 1006 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 25960 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 788: /* from_clause: %empty  */
#line 1007 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 25966 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 789: /* from_list: table_ref  */
#line 1011 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 25972 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 790: /* from_list: from_list ',' table_ref  */
#line 1012 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 25978 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 791: /* from_list_opt_comma: from_list  */
#line 1016 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 25984 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 792: /* from_list_opt_comma: from_list ','  */
#line 1017 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 25990 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 793: /* table_ref: relation_expr opt_alias_clause opt_tablesample_clause  */
#line 1024 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyvsp[-2].range)->alias = (yyvsp[-1].alias);
					(yyvsp[-2].range)->sample = (yyvsp[0].node);
					(yyval.node) = (PGNode *) (yyvsp[-2].range);
				}
#line 26000 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 794: /* table_ref: func_table func_alias_clause opt_tablesample_clause  */
#line 1030 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = (PGRangeFunction *) (yyvsp[-2].node);
					n->alias = (PGAlias*) linitial((yyvsp[-1].list));
					n->coldeflist = (PGList*) lsecond((yyvsp[-1].list));
					n->sample = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 26012 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 795: /* table_ref: values_clause_opt_comma alias_clause opt_tablesample_clause  */
#line 1038 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGRangeSubselect *n = makeNode(PGRangeSubselect);
				n->lateral = false;
				n->subquery = (yyvsp[-2].node);
				n->alias = (yyvsp[-1].alias);
				n->sample = (yyvsp[0].node);
				(yyval.node) = (PGNode *) n;
			}
#line 26025 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 796: /* table_ref: LATERAL_P func_table func_alias_clause  */
#line 1047 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = (PGRangeFunction *) (yyvsp[-1].node);
					n->lateral = true;
					n->alias = (PGAlias*) linitial((yyvsp[0].list));
					n->coldeflist = (PGList*) lsecond((yyvsp[0].list));
					(yyval.node) = (PGNode *) n;
				}
#line 26037 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 797: /* table_ref: select_with_parens opt_alias_clause opt_tablesample_clause  */
#line 1055 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeSubselect *n = makeNode(PGRangeSubselect);
					n->lateral = false;
					n->subquery = (yyvsp[-2].node);
					n->alias = (yyvsp[-1].alias);
					n->sample = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 26050 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 798: /* table_ref: LATERAL_P select_with_parens opt_alias_clause  */
#line 1064 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeSubselect *n = makeNode(PGRangeSubselect);
					n->lateral = true;
					n->subquery = (yyvsp[-1].node);
					n->alias = (yyvsp[0].alias);
					n->sample = NULL;
					(yyval.node) = (PGNode *) n;
				}
#line 26063 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 799: /* table_ref: joined_table  */
#line 1073 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) (yyvsp[0].jexpr);
				}
#line 26071 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 800: /* table_ref: '(' joined_table ')' alias_clause  */
#line 1077 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyvsp[-2].jexpr)->alias = (yyvsp[0].alias);
					(yyval.node) = (PGNode *) (yyvsp[-2].jexpr);
				}
#line 26080 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 801: /* table_ref: table_ref PIVOT '(' target_list_opt_comma FOR pivot_value_list opt_pivot_group_by ')' opt_alias_clause  */
#line 1082 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGPivotExpr *n = makeNode(PGPivotExpr);
					n->source = (yyvsp[-8].node);
					n->aggrs = (yyvsp[-5].list);
					n->pivots = (yyvsp[-3].list);
					n->groups = (yyvsp[-2].list);
					n->alias = (yyvsp[0].alias);
					n->location = (yylsp[-7]);
					(yyval.node) = (PGNode *) n;
				}
#line 26095 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 802: /* table_ref: table_ref UNPIVOT opt_include_nulls '(' unpivot_header FOR unpivot_value_list ')' opt_alias_clause  */
#line 1093 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGPivotExpr *n = makeNode(PGPivotExpr);
					n->source = (yyvsp[-8].node);
					n->include_nulls = (yyvsp[-6].boolean);
					n->unpivots = (yyvsp[-4].list);
					n->pivots = (yyvsp[-2].list);
					n->alias = (yyvsp[0].alias);
					n->location = (yylsp[-7]);
					(yyval.node) = (PGNode *) n;
				}
#line 26110 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 803: /* table_ref: PREDICT '(' qualified_name ',' table_ref ')' opt_alias_clause  */
#line 1104 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGPredictExpr *n = makeNode(PGPredictExpr);
					n->source = (yyvsp[-2].node);
					n->model_name = (yyvsp[-4].range);
					n->alias = (yyvsp[0].alias);
					(yyval.node) = (PGNode *) n;
				}
#line 26122 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 804: /* table_ref: PREDICT '(' qualified_name ',' table_ref ',' table_ref ')' opt_alias_clause  */
#line 1112 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGPredictExpr *n = makeNode(PGPredictExpr);
					n->source = (yyvsp[-4].node);
					n->model_name = (yyvsp[-6].range);
					n->opt_source = (yyvsp[-2].node);
					n->has_opt = 1;
					n->alias = (yyvsp[0].alias);
					(yyval.node) = (PGNode *) n;
				}
#line 26136 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 805: /* opt_pivot_group_by: GROUP_P BY name_list_opt_comma  */
#line 1124 "third_party/libpg_query/grammar/statements/select.y"
                                                { (yyval.list) = (yyvsp[0].list); }
#line 26142 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 806: /* opt_pivot_group_by: %empty  */
#line 1125 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = NULL; }
#line 26148 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 807: /* opt_include_nulls: INCLUDE_P NULLS_P  */
#line 1128 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.boolean) = true; }
#line 26154 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 808: /* opt_include_nulls: EXCLUDE NULLS_P  */
#line 1129 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.boolean) = false; }
#line 26160 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 809: /* opt_include_nulls: %empty  */
#line 1130 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.boolean) = false; }
#line 26166 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 810: /* single_pivot_value: b_expr IN_P '(' target_list_opt_comma ')'  */
#line 1134 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->pivot_columns = list_make1((yyvsp[-4].node));
			n->pivot_value = (yyvsp[-1].list);
			(yyval.node) = (PGNode *) n;
		}
#line 26177 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 811: /* single_pivot_value: b_expr IN_P ColIdOrString  */
#line 1142 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->pivot_columns = list_make1((yyvsp[-2].node));
			n->pivot_enum = (yyvsp[0].str);
			(yyval.node) = (PGNode *) n;
		}
#line 26188 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 813: /* pivot_header: d_expr  */
#line 1151 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 26194 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 814: /* pivot_header: indirection_expr  */
#line 1152 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 26200 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 815: /* pivot_header: '(' c_expr_list_opt_comma ')'  */
#line 1153 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 26206 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 816: /* pivot_value: pivot_header IN_P '(' target_list_opt_comma ')'  */
#line 1157 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->pivot_columns = (yyvsp[-4].list);
			n->pivot_value = (yyvsp[-1].list);
			(yyval.node) = (PGNode *) n;
		}
#line 26217 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 817: /* pivot_value: pivot_header IN_P ColIdOrString  */
#line 1165 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->pivot_columns = (yyvsp[-2].list);
			n->pivot_enum = (yyvsp[0].str);
			(yyval.node) = (PGNode *) n;
		}
#line 26228 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 818: /* pivot_value_list: pivot_value  */
#line 1174 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 26236 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 819: /* pivot_value_list: pivot_value_list pivot_value  */
#line 1178 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node));
				}
#line 26244 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 820: /* unpivot_header: ColIdOrString  */
#line 1184 "third_party/libpg_query/grammar/statements/select.y"
                                                          { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 26250 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 821: /* unpivot_header: '(' name_list_opt_comma ')'  */
#line 1185 "third_party/libpg_query/grammar/statements/select.y"
                                              { (yyval.list) = (yyvsp[-1].list); }
#line 26256 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 822: /* unpivot_value: unpivot_header IN_P '(' target_list_opt_comma ')'  */
#line 1190 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->unpivot_columns = (yyvsp[-4].list);
			n->pivot_value = (yyvsp[-1].list);
			(yyval.node) = (PGNode *) n;
		}
#line 26267 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 823: /* unpivot_value_list: unpivot_value  */
#line 1199 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 26275 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 824: /* unpivot_value_list: unpivot_value_list unpivot_value  */
#line 1203 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node));
				}
#line 26283 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 825: /* joined_table: '(' joined_table ')'  */
#line 1228 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.jexpr) = (yyvsp[-1].jexpr);
				}
#line 26291 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 826: /* joined_table: table_ref CROSS JOIN table_ref  */
#line 1232 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* CROSS JOIN is same as unqualified inner join */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->joinreftype = PG_JOIN_REGULAR;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL;
					n->quals = NULL;
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 26308 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 827: /* joined_table: table_ref join_type JOIN table_ref join_qual  */
#line 1245 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = (yyvsp[-3].jtype);
					n->joinreftype = PG_JOIN_REGULAR;
					n->larg = (yyvsp[-4].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-3]);
					(yyval.jexpr) = n;
				}
#line 26326 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 828: /* joined_table: table_ref JOIN table_ref join_qual  */
#line 1259 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* letting join_type reduce to empty doesn't work */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->joinreftype = PG_JOIN_REGULAR;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 26345 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 829: /* joined_table: table_ref NATURAL join_type JOIN table_ref  */
#line 1274 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = (yyvsp[-2].jtype);
					n->joinreftype = PG_JOIN_NATURAL;
					n->larg = (yyvsp[-4].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL; /* figure out which columns later... */
					n->quals = NULL; /* fill later */
					n->location = (yylsp[-3]);
					(yyval.jexpr) = n;
				}
#line 26361 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 830: /* joined_table: table_ref NATURAL JOIN table_ref  */
#line 1286 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* letting join_type reduce to empty doesn't work */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->joinreftype = PG_JOIN_NATURAL;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL; /* figure out which columns later... */
					n->quals = NULL; /* fill later */
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 26378 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 831: /* joined_table: table_ref ASOF join_type JOIN table_ref join_qual  */
#line 1299 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = (yyvsp[-3].jtype);
					n->joinreftype = PG_JOIN_ASOF;
					n->larg = (yyvsp[-5].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-4]);
					(yyval.jexpr) = n;
				}
#line 26396 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 832: /* joined_table: table_ref ASOF JOIN table_ref join_qual  */
#line 1313 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->joinreftype = PG_JOIN_ASOF;
					n->larg = (yyvsp[-4].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-3]);
					(yyval.jexpr) = n;
				}
#line 26414 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 833: /* joined_table: table_ref POSITIONAL JOIN table_ref  */
#line 1327 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* POSITIONAL JOIN is a coordinated scan */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_POSITION;
					n->joinreftype = PG_JOIN_REGULAR;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL;
					n->quals = NULL;
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 26431 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 834: /* joined_table: table_ref ANTI JOIN table_ref join_qual  */
#line 1340 "third_party/libpg_query/grammar/statements/select.y"
                {
                    /* ANTI JOIN is a filter */
                    PGJoinExpr *n = makeNode(PGJoinExpr);
                    n->jointype = PG_JOIN_ANTI;
                    n->joinreftype = PG_JOIN_REGULAR;
                    n->larg = (yyvsp[-4].node);
                    n->rarg = (yyvsp[-1].node);
                    if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
                        n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
                    else
                        n->quals = (yyvsp[0].node); /* ON clause */
                    n->location = (yylsp[-3]);
                    (yyval.jexpr) = n;
                }
#line 26450 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 835: /* joined_table: table_ref SEMI JOIN table_ref join_qual  */
#line 1355 "third_party/libpg_query/grammar/statements/select.y"
               {
                   /* SEMI JOIN is also a filter */
                   PGJoinExpr *n = makeNode(PGJoinExpr);
                   n->jointype = PG_JOIN_SEMI;
                   n->joinreftype = PG_JOIN_REGULAR;
                   n->larg = (yyvsp[-4].node);
                   n->rarg = (yyvsp[-1].node);
                   if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
                       n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
                   else
                       n->quals = (yyvsp[0].node); /* ON clause */
                   n->location = (yylsp[-3]);
                   n->location = (yylsp[-3]);
                   (yyval.jexpr) = n;
               }
#line 26470 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 836: /* alias_clause: AS ColIdOrString '(' name_list_opt_comma ')'  */
#line 1374 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[-3].str);
					(yyval.alias)->colnames = (yyvsp[-1].list);
				}
#line 26480 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 837: /* alias_clause: AS ColIdOrString  */
#line 1380 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[0].str);
				}
#line 26489 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 838: /* alias_clause: ColId '(' name_list_opt_comma ')'  */
#line 1385 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[-3].str);
					(yyval.alias)->colnames = (yyvsp[-1].list);
				}
#line 26499 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 839: /* alias_clause: ColId  */
#line 1391 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[0].str);
				}
#line 26508 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 840: /* opt_alias_clause: alias_clause  */
#line 1397 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.alias) = (yyvsp[0].alias); }
#line 26514 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 841: /* opt_alias_clause: %empty  */
#line 1398 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.alias) = NULL; }
#line 26520 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 842: /* func_alias_clause: alias_clause  */
#line 1407 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2((yyvsp[0].alias), NIL);
				}
#line 26528 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 843: /* func_alias_clause: AS '(' TableFuncElementList ')'  */
#line 1411 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(NULL, (yyvsp[-1].list));
				}
#line 26536 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 844: /* func_alias_clause: AS ColIdOrString '(' TableFuncElementList ')'  */
#line 1415 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAlias *a = makeNode(PGAlias);
					a->aliasname = (yyvsp[-3].str);
					(yyval.list) = list_make2(a, (yyvsp[-1].list));
				}
#line 26546 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 845: /* func_alias_clause: ColId '(' TableFuncElementList ')'  */
#line 1421 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAlias *a = makeNode(PGAlias);
					a->aliasname = (yyvsp[-3].str);
					(yyval.list) = list_make2(a, (yyvsp[-1].list));
				}
#line 26556 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 846: /* func_alias_clause: %empty  */
#line 1427 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(NULL, NIL);
				}
#line 26564 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 847: /* join_type: FULL join_outer  */
#line 1432 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.jtype) = PG_JOIN_FULL; }
#line 26570 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 848: /* join_type: LEFT join_outer  */
#line 1433 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_LEFT; }
#line 26576 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 849: /* join_type: RIGHT join_outer  */
#line 1434 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_RIGHT; }
#line 26582 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 850: /* join_type: SEMI  */
#line 1435 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_SEMI; }
#line 26588 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 851: /* join_type: ANTI  */
#line 1436 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_ANTI; }
#line 26594 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 852: /* join_type: INNER_P  */
#line 1437 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.jtype) = PG_JOIN_INNER; }
#line 26600 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 853: /* join_outer: OUTER_P  */
#line 1441 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = NULL; }
#line 26606 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 854: /* join_outer: %empty  */
#line 1442 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 26612 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 855: /* join_qual: USING '(' name_list_opt_comma ')'  */
#line 1454 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (PGNode *) (yyvsp[-1].list); }
#line 26618 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 856: /* join_qual: ON a_expr  */
#line 1455 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 26624 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 857: /* relation_expr: qualified_name  */
#line 1461 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* inheritance query, implicitly */
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->inh = true;
					(yyval.range)->alias = NULL;
				}
#line 26635 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 858: /* relation_expr: qualified_name '*'  */
#line 1468 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* inheritance query, explicitly */
					(yyval.range) = (yyvsp[-1].range);
					(yyval.range)->inh = true;
					(yyval.range)->alias = NULL;
				}
#line 26646 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 859: /* relation_expr: ONLY qualified_name  */
#line 1475 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* no inheritance */
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->inh = false;
					(yyval.range)->alias = NULL;
				}
#line 26657 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 860: /* relation_expr: ONLY '(' qualified_name ')'  */
#line 1482 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* no inheritance, SQL99-style syntax */
					(yyval.range) = (yyvsp[-1].range);
					(yyval.range)->inh = false;
					(yyval.range)->alias = NULL;
				}
#line 26668 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 861: /* func_table: func_expr_windowless opt_ordinality  */
#line 1514 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = makeNode(PGRangeFunction);
					n->lateral = false;
					n->ordinality = (yyvsp[0].boolean);
					n->is_rowsfrom = false;
					n->functions = list_make1(list_make2((yyvsp[-1].node), NIL));
					n->sample = NULL;
					/* alias and coldeflist are set by table_ref production */
					(yyval.node) = (PGNode *) n;
				}
#line 26683 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 862: /* func_table: ROWS FROM '(' rowsfrom_list ')' opt_ordinality  */
#line 1525 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = makeNode(PGRangeFunction);
					n->lateral = false;
					n->ordinality = (yyvsp[0].boolean);
					n->is_rowsfrom = true;
					n->functions = (yyvsp[-2].list);
					n->sample = NULL;
					/* alias and coldeflist are set by table_ref production */
					(yyval.node) = (PGNode *) n;
				}
#line 26698 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 863: /* rowsfrom_item: func_expr_windowless opt_col_def_list  */
#line 1538 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].list)); }
#line 26704 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 864: /* rowsfrom_list: rowsfrom_item  */
#line 1542 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 26710 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 865: /* rowsfrom_list: rowsfrom_list ',' rowsfrom_item  */
#line 1543 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 26716 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 866: /* opt_col_def_list: AS '(' TableFuncElementList ')'  */
#line 1546 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 26722 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 867: /* opt_col_def_list: %empty  */
#line 1547 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 26728 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 868: /* opt_ordinality: WITH_LA ORDINALITY  */
#line 1550 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.boolean) = true; }
#line 26734 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 869: /* opt_ordinality: %empty  */
#line 1551 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 26740 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 870: /* where_clause: WHERE a_expr  */
#line 1556 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 26746 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 871: /* where_clause: %empty  */
#line 1557 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 26752 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 872: /* TableFuncElementList: TableFuncElement  */
#line 1563 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 26760 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 873: /* TableFuncElementList: TableFuncElementList ',' TableFuncElement  */
#line 1567 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 26768 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 874: /* TableFuncElement: ColIdOrString Typename opt_collate_clause  */
#line 1573 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->colname = (yyvsp[-2].str);
					n->typeName = (yyvsp[-1].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collClause = (PGCollateClause *) (yyvsp[0].node);
					n->collOid = InvalidOid;
					n->constraints = NIL;
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 26790 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 875: /* opt_collate_clause: COLLATE any_name  */
#line 1594 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = NULL;
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 26802 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 876: /* opt_collate_clause: %empty  */
#line 1601 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = NULL; }
#line 26808 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 877: /* colid_type_list: ColId Typename  */
#line 1614 "third_party/libpg_query/grammar/statements/select.y"
                             {
             (yyval.list) = list_make1(list_make2(makeString((yyvsp[-1].str)), (yyvsp[0].typnam)));
            }
#line 26816 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 878: /* colid_type_list: colid_type_list ',' ColId Typename  */
#line 1617 "third_party/libpg_query/grammar/statements/select.y"
                                                 {
             (yyval.list) = lappend((yyvsp[-3].list), list_make2(makeString((yyvsp[-1].str)), (yyvsp[0].typnam)));
            }
#line 26824 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 881: /* opt_Typename: Typename  */
#line 1624 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 26830 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 882: /* opt_Typename: %empty  */
#line 1625 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.typnam) = NULL; }
#line 26836 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 883: /* Typename: SimpleTypename opt_array_bounds  */
#line 1628 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = (yyvsp[0].list);
				}
#line 26845 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 884: /* Typename: SETOF SimpleTypename opt_array_bounds  */
#line 1633 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = (yyvsp[0].list);
					(yyval.typnam)->setof = true;
				}
#line 26855 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 885: /* Typename: SimpleTypename ARRAY '[' Iconst ']'  */
#line 1640 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-4].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger((yyvsp[-1].ival)));
				}
#line 26864 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 886: /* Typename: SETOF SimpleTypename ARRAY '[' Iconst ']'  */
#line 1645 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-4].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger((yyvsp[-1].ival)));
					(yyval.typnam)->setof = true;
				}
#line 26874 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 887: /* Typename: SimpleTypename ARRAY  */
#line 1651 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger(-1));
				}
#line 26883 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 888: /* Typename: SETOF SimpleTypename ARRAY  */
#line 1656 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger(-1));
					(yyval.typnam)->setof = true;
				}
#line 26893 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 889: /* Typename: qualified_typename  */
#line 1662 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = makeTypeNameFromNameList((yyvsp[0].list));
				}
#line 26901 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 890: /* Typename: RowOrStruct '(' colid_type_list ')' opt_array_bounds  */
#line 1666 "third_party/libpg_query/grammar/statements/select.y"
                                {
				   (yyval.typnam) = SystemTypeName("struct");
				   (yyval.typnam)->arrayBounds = (yyvsp[0].list);
				   (yyval.typnam)->typmods = (yyvsp[-2].list);
				   (yyval.typnam)->location = (yylsp[-4]);
               }
#line 26912 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 891: /* Typename: MAP '(' type_list ')' opt_array_bounds  */
#line 1673 "third_party/libpg_query/grammar/statements/select.y"
                {
				   (yyval.typnam) = SystemTypeName("map");
				   (yyval.typnam)->arrayBounds = (yyvsp[0].list);
				   (yyval.typnam)->typmods = (yyvsp[-2].list);
				   (yyval.typnam)->location = (yylsp[-4]);
				}
#line 26923 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 892: /* Typename: UNION '(' colid_type_list ')' opt_array_bounds  */
#line 1680 "third_party/libpg_query/grammar/statements/select.y"
                                {
				   (yyval.typnam) = SystemTypeName("union");
				   (yyval.typnam)->arrayBounds = (yyvsp[0].list);
				   (yyval.typnam)->typmods = (yyvsp[-2].list);
				   (yyval.typnam)->location = (yylsp[-4]);
				}
#line 26934 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 893: /* qualified_typename: IDENT '.' IDENT  */
#line 1689 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = list_make2(makeString((yyvsp[-2].str)), makeString((yyvsp[0].str))); }
#line 26940 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 894: /* qualified_typename: qualified_typename '.' IDENT  */
#line 1690 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str))); }
#line 26946 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 895: /* opt_array_bounds: opt_array_bounds '[' ']'  */
#line 1695 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = lappend((yyvsp[-2].list), makeInteger(-1)); }
#line 26952 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 896: /* opt_array_bounds: opt_array_bounds '[' Iconst ']'  */
#line 1697 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = lappend((yyvsp[-3].list), makeInteger((yyvsp[-1].ival))); }
#line 26958 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 897: /* opt_array_bounds: %empty  */
#line 1699 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = NIL; }
#line 26964 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 898: /* SimpleTypename: GenericType  */
#line 1703 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 26970 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 899: /* SimpleTypename: Numeric  */
#line 1704 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 26976 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 900: /* SimpleTypename: Bit  */
#line 1705 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 26982 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 901: /* SimpleTypename: Character  */
#line 1706 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 26988 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 902: /* SimpleTypename: ConstDatetime  */
#line 1707 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 26994 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 903: /* SimpleTypename: ConstInterval opt_interval  */
#line 1709 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->typmods = (yyvsp[0].list);
				}
#line 27003 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 904: /* SimpleTypename: ConstInterval '(' Iconst ')'  */
#line 1714 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-3].typnam);
					(yyval.typnam)->typmods = list_make2(makeIntConst(INTERVAL_FULL_RANGE, -1),
											 makeIntConst((yyvsp[-1].ival), (yylsp[-1])));
				}
#line 27013 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 905: /* ConstTypename: Numeric  */
#line 1733 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 27019 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 906: /* ConstTypename: ConstBit  */
#line 1734 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 27025 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 907: /* ConstTypename: ConstCharacter  */
#line 1735 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 27031 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 908: /* ConstTypename: ConstDatetime  */
#line 1736 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 27037 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 909: /* GenericType: type_name_token opt_type_modifiers  */
#line 1748 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = makeTypeName((yyvsp[-1].str));
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 27047 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 910: /* opt_type_modifiers: '(' opt_expr_list_opt_comma ')'  */
#line 1761 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 27053 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 911: /* opt_type_modifiers: %empty  */
#line 1762 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 27059 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 912: /* Numeric: INT_P  */
#line 1769 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 27068 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 913: /* Numeric: INTEGER  */
#line 1774 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 27077 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 914: /* Numeric: SMALLINT  */
#line 1779 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int2");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 27086 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 915: /* Numeric: BIGINT  */
#line 1784 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int8");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 27095 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 916: /* Numeric: REAL  */
#line 1789 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 27104 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 917: /* Numeric: FLOAT_P opt_float  */
#line 1794 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 27113 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 918: /* Numeric: DOUBLE_P PRECISION  */
#line 1799 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float8");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 27122 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 919: /* Numeric: DECIMAL_P opt_type_modifiers  */
#line 1804 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 27132 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 920: /* Numeric: DEC opt_type_modifiers  */
#line 1810 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 27142 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 921: /* Numeric: NUMERIC opt_type_modifiers  */
#line 1816 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 27152 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 922: /* Numeric: BOOLEAN_P  */
#line 1822 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("bool");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 27161 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 923: /* opt_float: '(' Iconst ')'  */
#line 1829 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Check FLOAT() precision limits assuming IEEE floating
					 * types - thomas 1997-09-18
					 */
					if ((yyvsp[-1].ival) < 1)
						ereport(ERROR,
								(errcode(PG_ERRCODE_INVALID_PARAMETER_VALUE),
								 errmsg("precision for type float must be at least 1 bit"),
								 parser_errposition((yylsp[-1]))));
					else if ((yyvsp[-1].ival) <= 24)
						(yyval.typnam) = SystemTypeName("float4");
					else if ((yyvsp[-1].ival) <= 53)
						(yyval.typnam) = SystemTypeName("float8");
					else
						ereport(ERROR,
								(errcode(PG_ERRCODE_INVALID_PARAMETER_VALUE),
								 errmsg("precision for type float must be less than 54 bits"),
								 parser_errposition((yylsp[-1]))));
				}
#line 27186 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 924: /* opt_float: %empty  */
#line 1850 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float4");
				}
#line 27194 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 925: /* Bit: BitWithLength  */
#line 1860 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 27202 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 926: /* Bit: BitWithoutLength  */
#line 1864 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 27210 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 927: /* ConstBit: BitWithLength  */
#line 1872 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 27218 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 928: /* ConstBit: BitWithoutLength  */
#line 1876 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->typmods = NIL;
				}
#line 27227 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 929: /* BitWithLength: BIT opt_varying '(' expr_list_opt_comma ')'  */
#line 1884 "third_party/libpg_query/grammar/statements/select.y"
                                {
					const char *typname;

					typname = (yyvsp[-3].boolean) ? "varbit" : "bit";
					(yyval.typnam) = SystemTypeName(typname);
					(yyval.typnam)->typmods = (yyvsp[-1].list);
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 27240 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 930: /* BitWithoutLength: BIT opt_varying  */
#line 1896 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* bit defaults to bit(1), varbit to no limit */
					if ((yyvsp[0].boolean))
					{
						(yyval.typnam) = SystemTypeName("varbit");
					}
					else
					{
						(yyval.typnam) = SystemTypeName("bit");
						(yyval.typnam)->typmods = list_make1(makeIntConst(1, -1));
					}
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 27258 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 931: /* Character: CharacterWithLength  */
#line 1917 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 27266 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 932: /* Character: CharacterWithoutLength  */
#line 1921 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 27274 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 933: /* ConstCharacter: CharacterWithLength  */
#line 1927 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 27282 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 934: /* ConstCharacter: CharacterWithoutLength  */
#line 1931 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* Length was not specified so allow to be unrestricted.
					 * This handles problems with fixed-length (bpchar) strings
					 * which in column definitions must default to a length
					 * of one, but should not be constrained if the length
					 * was not specified.
					 */
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->typmods = NIL;
				}
#line 27297 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 935: /* CharacterWithLength: character '(' Iconst ')'  */
#line 1944 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName((yyvsp[-3].conststr));
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-1].ival), (yylsp[-1])));
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 27307 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 936: /* CharacterWithoutLength: character  */
#line 1952 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName((yyvsp[0].conststr));
					/* char defaults to char(1), varchar to no limit */
					if (strcmp((yyvsp[0].conststr), "bpchar") == 0)
						(yyval.typnam)->typmods = list_make1(makeIntConst(1, -1));
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 27319 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 937: /* character: CHARACTER opt_varying  */
#line 1962 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 27325 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 938: /* character: CHAR_P opt_varying  */
#line 1964 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 27331 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 939: /* character: VARCHAR  */
#line 1966 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = "varchar"; }
#line 27337 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 940: /* character: NATIONAL CHARACTER opt_varying  */
#line 1968 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 27343 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 941: /* character: NATIONAL CHAR_P opt_varying  */
#line 1970 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 27349 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 942: /* character: NCHAR opt_varying  */
#line 1972 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 27355 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 943: /* opt_varying: VARYING  */
#line 1976 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = true; }
#line 27361 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 944: /* opt_varying: %empty  */
#line 1977 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 27367 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 945: /* ConstDatetime: TIMESTAMP '(' Iconst ')' opt_timezone  */
#line 1985 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timestamptz");
					else
						(yyval.typnam) = SystemTypeName("timestamp");
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 27380 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 946: /* ConstDatetime: TIMESTAMP opt_timezone  */
#line 1994 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timestamptz");
					else
						(yyval.typnam) = SystemTypeName("timestamp");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 27392 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 947: /* ConstDatetime: TIME '(' Iconst ')' opt_timezone  */
#line 2002 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timetz");
					else
						(yyval.typnam) = SystemTypeName("time");
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 27405 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 948: /* ConstDatetime: TIME opt_timezone  */
#line 2011 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timetz");
					else
						(yyval.typnam) = SystemTypeName("time");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 27417 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 949: /* ConstInterval: INTERVAL  */
#line 2022 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("interval");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 27426 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 950: /* opt_timezone: WITH_LA TIME ZONE  */
#line 2029 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = true; }
#line 27432 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 951: /* opt_timezone: WITHOUT TIME ZONE  */
#line 2030 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = false; }
#line 27438 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 952: /* opt_timezone: %empty  */
#line 2031 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 27444 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 979: /* opt_interval: year_keyword  */
#line 2075 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(YEAR), (yylsp[0]))); }
#line 27450 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 980: /* opt_interval: month_keyword  */
#line 2077 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MONTH), (yylsp[0]))); }
#line 27456 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 981: /* opt_interval: day_keyword  */
#line 2079 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY), (yylsp[0]))); }
#line 27462 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 982: /* opt_interval: hour_keyword  */
#line 2081 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR), (yylsp[0]))); }
#line 27468 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 983: /* opt_interval: minute_keyword  */
#line 2083 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MINUTE), (yylsp[0]))); }
#line 27474 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 984: /* opt_interval: second_keyword  */
#line 2085 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(SECOND), (yylsp[0]))); }
#line 27480 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 985: /* opt_interval: millisecond_keyword  */
#line 2087 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MILLISECOND), (yylsp[0]))); }
#line 27486 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 986: /* opt_interval: microsecond_keyword  */
#line 2089 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MICROSECOND), (yylsp[0]))); }
#line 27492 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 987: /* opt_interval: week_keyword  */
#line 2091 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(WEEK), (yylsp[0]))); }
#line 27498 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 988: /* opt_interval: quarter_keyword  */
#line 2093 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(QUARTER), (yylsp[0]))); }
#line 27504 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 989: /* opt_interval: decade_keyword  */
#line 2095 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DECADE), (yylsp[0]))); }
#line 27510 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 990: /* opt_interval: century_keyword  */
#line 2097 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(CENTURY), (yylsp[0]))); }
#line 27516 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 991: /* opt_interval: millennium_keyword  */
#line 2099 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MILLENNIUM), (yylsp[0]))); }
#line 27522 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 992: /* opt_interval: year_keyword TO month_keyword  */
#line 2101 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(YEAR) |
												 INTERVAL_MASK(MONTH), (yylsp[-2])));
				}
#line 27531 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 993: /* opt_interval: day_keyword TO hour_keyword  */
#line 2106 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR), (yylsp[-2])));
				}
#line 27540 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 994: /* opt_interval: day_keyword TO minute_keyword  */
#line 2111 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE), (yylsp[-2])));
				}
#line 27550 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 995: /* opt_interval: day_keyword TO second_keyword  */
#line 2117 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 27561 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 996: /* opt_interval: hour_keyword TO minute_keyword  */
#line 2124 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE), (yylsp[-2])));
				}
#line 27570 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 997: /* opt_interval: hour_keyword TO second_keyword  */
#line 2129 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 27580 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 998: /* opt_interval: minute_keyword TO second_keyword  */
#line 2135 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 27589 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 999: /* opt_interval: %empty  */
#line 2140 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = NIL; }
#line 27595 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1000: /* a_expr: c_expr  */
#line 2171 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 27601 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1001: /* a_expr: a_expr TYPECAST Typename  */
#line 2174 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.node) = makeTypeCast((yyvsp[-2].node), (yyvsp[0].typnam), 0, (yylsp[-1])); }
#line 27607 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1002: /* a_expr: a_expr COLLATE any_name  */
#line 2176 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = (yyvsp[-2].node);
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 27619 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1003: /* a_expr: a_expr AT TIME ZONE a_expr  */
#line 2184 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("timezone"),
											   list_make2((yyvsp[0].node), (yyvsp[-4].node)),
											   (yylsp[-3]));
				}
#line 27629 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1004: /* a_expr: '+' a_expr  */
#line 2199 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 27635 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1005: /* a_expr: '-' a_expr  */
#line 2201 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 27641 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1006: /* a_expr: a_expr '+' a_expr  */
#line 2203 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27647 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1007: /* a_expr: a_expr '-' a_expr  */
#line 2205 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27653 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1008: /* a_expr: a_expr '*' a_expr  */
#line 2207 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "*", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27659 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1009: /* a_expr: a_expr '/' a_expr  */
#line 2209 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "/", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27665 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1010: /* a_expr: a_expr INTEGER_DIVISION a_expr  */
#line 2211 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "//", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27671 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1011: /* a_expr: a_expr '%' a_expr  */
#line 2213 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "%", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27677 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1012: /* a_expr: a_expr '^' a_expr  */
#line 2215 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "^", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27683 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1013: /* a_expr: a_expr POWER_OF a_expr  */
#line 2217 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "**", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27689 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1014: /* a_expr: a_expr '<' a_expr  */
#line 2219 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27695 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1015: /* a_expr: a_expr '>' a_expr  */
#line 2221 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27701 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1016: /* a_expr: a_expr '=' a_expr  */
#line 2223 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27707 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1017: /* a_expr: a_expr LESS_EQUALS a_expr  */
#line 2225 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27713 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1018: /* a_expr: a_expr GREATER_EQUALS a_expr  */
#line 2227 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27719 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1019: /* a_expr: a_expr NOT_EQUALS a_expr  */
#line 2229 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27725 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1020: /* a_expr: a_expr qual_Op a_expr  */
#line 2232 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27731 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1021: /* a_expr: qual_Op a_expr  */
#line 2234 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 27737 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1022: /* a_expr: a_expr qual_Op  */
#line 2236 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[0].list), (yyvsp[-1].node), NULL, (yylsp[0])); }
#line 27743 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1023: /* a_expr: a_expr AND a_expr  */
#line 2239 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeAndExpr((yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27749 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1024: /* a_expr: a_expr OR a_expr  */
#line 2241 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeOrExpr((yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27755 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1025: /* a_expr: NOT a_expr  */
#line 2243 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeNotExpr((yyvsp[0].node), (yylsp[-1])); }
#line 27761 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1026: /* a_expr: NOT_LA a_expr  */
#line 2245 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeNotExpr((yyvsp[0].node), (yylsp[-1])); }
#line 27767 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1027: /* a_expr: a_expr GLOB a_expr  */
#line 2247 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_GLOB, "~~~",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 27776 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1028: /* a_expr: a_expr LIKE a_expr  */
#line 2252 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "~~",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 27785 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1029: /* a_expr: a_expr LIKE a_expr ESCAPE a_expr  */
#line 2257 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("like_escape"),
											   list_make3((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) n;
				}
#line 27796 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1030: /* a_expr: a_expr NOT_LA LIKE a_expr  */
#line 2264 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "!~~",
												   (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
				}
#line 27805 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1031: /* a_expr: a_expr NOT_LA LIKE a_expr ESCAPE a_expr  */
#line 2269 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("not_like_escape"),
											   list_make3((yyvsp[-5].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) n;
				}
#line 27816 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1032: /* a_expr: a_expr ILIKE a_expr  */
#line 2276 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "~~*",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 27825 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1033: /* a_expr: a_expr ILIKE a_expr ESCAPE a_expr  */
#line 2281 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("ilike_escape"),
											   list_make3((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) n;
				}
#line 27836 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1034: /* a_expr: a_expr NOT_LA ILIKE a_expr  */
#line 2288 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "!~~*",
												   (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
				}
#line 27845 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1035: /* a_expr: a_expr NOT_LA ILIKE a_expr ESCAPE a_expr  */
#line 2293 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("not_ilike_escape"),
											   list_make3((yyvsp[-5].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) n;
				}
#line 27856 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1036: /* a_expr: a_expr SIMILAR TO a_expr  */
#line 2301 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[0].node), makeNullAConst(-1)),
											   (yylsp[-2]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
												   (yyvsp[-3].node), (PGNode *) n, (yylsp[-2]));
				}
#line 27868 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1037: /* a_expr: a_expr SIMILAR TO a_expr ESCAPE a_expr  */
#line 2309 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
												   (yyvsp[-5].node), (PGNode *) n, (yylsp[-4]));
				}
#line 27880 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1038: /* a_expr: a_expr NOT_LA SIMILAR TO a_expr  */
#line 2317 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[0].node), makeNullAConst(-1)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
												   (yyvsp[-4].node), (PGNode *) n, (yylsp[-3]));
				}
#line 27892 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1039: /* a_expr: a_expr NOT_LA SIMILAR TO a_expr ESCAPE a_expr  */
#line 2325 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-5]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
												   (yyvsp[-6].node), (PGNode *) n, (yylsp[-5]));
				}
#line 27904 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1040: /* a_expr: a_expr IS NULL_P  */
#line 2343 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-2].node);
					n->nulltesttype = PG_IS_NULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 27916 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1041: /* a_expr: a_expr ISNULL  */
#line 2351 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-1].node);
					n->nulltesttype = PG_IS_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 27928 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1042: /* a_expr: a_expr IS NOT NULL_P  */
#line 2359 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-3].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 27940 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1043: /* a_expr: a_expr NOT NULL_P  */
#line 2367 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-2].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 27952 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1044: /* a_expr: a_expr NOTNULL  */
#line 2375 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-1].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 27964 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1045: /* a_expr: a_expr LAMBDA_ARROW a_expr  */
#line 2383 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGLambdaFunction *n = makeNode(PGLambdaFunction);
				n->lhs = (yyvsp[-2].node);
				n->rhs = (yyvsp[0].node);
				n->location = (yylsp[-1]);
				(yyval.node) = (PGNode *) n;
			}
#line 27976 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1046: /* a_expr: a_expr DOUBLE_ARROW a_expr  */
#line 2391 "third_party/libpg_query/grammar/statements/select.y"
                        {
							(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "->>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
			}
#line 27984 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1047: /* a_expr: row OVERLAPS row  */
#line 2395 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if (list_length((yyvsp[-2].list)) != 2)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("wrong number of parameters on left side of OVERLAPS expression"),
								 parser_errposition((yylsp[-2]))));
					if (list_length((yyvsp[0].list)) != 2)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("wrong number of parameters on right side of OVERLAPS expression"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("overlaps"),
											   list_concat((yyvsp[-2].list), (yyvsp[0].list)),
											   (yylsp[-1]));
				}
#line 28004 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1048: /* a_expr: a_expr IS TRUE_P  */
#line 2411 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = PG_IS_TRUE;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 28016 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1049: /* a_expr: a_expr IS NOT TRUE_P  */
#line 2419 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_TRUE;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 28028 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1050: /* a_expr: a_expr IS FALSE_P  */
#line 2427 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = IS_FALSE;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 28040 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1051: /* a_expr: a_expr IS NOT FALSE_P  */
#line 2435 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_FALSE;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 28052 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1052: /* a_expr: a_expr IS UNKNOWN  */
#line 2443 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = IS_UNKNOWN;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 28064 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1053: /* a_expr: a_expr IS NOT UNKNOWN  */
#line 2451 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_UNKNOWN;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 28076 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1054: /* a_expr: a_expr IS DISTINCT FROM a_expr  */
#line 2459 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_DISTINCT, "=", (yyvsp[-4].node), (yyvsp[0].node), (yylsp[-3]));
				}
#line 28084 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1055: /* a_expr: a_expr IS NOT DISTINCT FROM a_expr  */
#line 2463 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_DISTINCT, "=", (yyvsp[-5].node), (yyvsp[0].node), (yylsp[-4]));
				}
#line 28092 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1056: /* a_expr: a_expr IS OF '(' type_list ')'  */
#line 2467 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "=", (yyvsp[-5].node), (PGNode *) (yyvsp[-1].list), (yylsp[-4]));
				}
#line 28100 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1057: /* a_expr: a_expr IS NOT OF '(' type_list ')'  */
#line 2471 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "<>", (yyvsp[-6].node), (PGNode *) (yyvsp[-1].list), (yylsp[-5]));
				}
#line 28108 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1058: /* a_expr: a_expr BETWEEN opt_asymmetric b_expr AND a_expr  */
#line 2475 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN,
												   "BETWEEN",
												   (yyvsp[-5].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-4]));
				}
#line 28120 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1059: /* a_expr: a_expr NOT_LA BETWEEN opt_asymmetric b_expr AND a_expr  */
#line 2483 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN,
												   "NOT BETWEEN",
												   (yyvsp[-6].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-5]));
				}
#line 28132 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1060: /* a_expr: a_expr BETWEEN SYMMETRIC b_expr AND a_expr  */
#line 2491 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN_SYM,
												   "BETWEEN SYMMETRIC",
												   (yyvsp[-5].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-4]));
				}
#line 28144 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1061: /* a_expr: a_expr NOT_LA BETWEEN SYMMETRIC b_expr AND a_expr  */
#line 2499 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN_SYM,
												   "NOT BETWEEN SYMMETRIC",
												   (yyvsp[-6].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-5]));
				}
#line 28156 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1062: /* a_expr: a_expr IN_P in_expr  */
#line 2507 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* in_expr returns a PGSubLink or a list of a_exprs */
					if (IsA((yyvsp[0].node), PGSubLink))
					{
						/* generate foo = ANY (subquery) */
						PGSubLink *n = (PGSubLink *) (yyvsp[0].node);
						n->subLinkType = PG_ANY_SUBLINK;
						n->subLinkId = 0;
						n->testexpr = (yyvsp[-2].node);
						n->operName = NIL;		/* show it's IN not = ANY */
						n->location = (yylsp[-1]);
						(yyval.node) = (PGNode *)n;
					}
					else
					{
						/* generate scalar IN expression */
						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
					}
				}
#line 28180 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1063: /* a_expr: a_expr NOT_LA IN_P in_expr  */
#line 2527 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* in_expr returns a PGSubLink or a list of a_exprs */
					if (IsA((yyvsp[0].node), PGSubLink))
					{
						/* generate NOT (foo = ANY (subquery)) */
						/* Make an = ANY node */
						PGSubLink *n = (PGSubLink *) (yyvsp[0].node);
						n->subLinkType = PG_ANY_SUBLINK;
						n->subLinkId = 0;
						n->testexpr = (yyvsp[-3].node);
						n->operName = NIL;		/* show it's IN not = ANY */
						n->location = (yylsp[-2]);
						/* Stick a NOT on top; must have same parse location */
						(yyval.node) = makeNotExpr((PGNode *) n, (yylsp[-2]));
					}
					else
					{
						/* generate scalar NOT IN expression */
						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "<>", (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
					}
				}
#line 28206 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1064: /* a_expr: a_expr subquery_Op sub_type select_with_parens  */
#line 2549 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = (yyvsp[-1].subquerytype);
					n->subLinkId = 0;
					n->testexpr = (yyvsp[-3].node);
					n->operName = (yyvsp[-2].list);
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 28221 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1065: /* a_expr: a_expr subquery_Op sub_type '(' a_expr ')'  */
#line 2560 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[-3].subquerytype) == PG_ANY_SUBLINK)
						(yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP_ANY, (yyvsp[-4].list), (yyvsp[-5].node), (yyvsp[-1].node), (yylsp[-4]));
					else
						(yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP_ALL, (yyvsp[-4].list), (yyvsp[-5].node), (yyvsp[-1].node), (yylsp[-4]));
				}
#line 28232 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1066: /* a_expr: DEFAULT  */
#line 2567 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * The SQL spec only allows DEFAULT in "contextually typed
					 * expressions", but for us, it's easier to allow it in
					 * any a_expr and then throw error during parse analysis
					 * if it's in an inappropriate context.  This way also
					 * lets us say something smarter than "syntax error".
					 */
					PGSetToDefault *n = makeNode(PGSetToDefault);
					/* parse analysis will fill in the rest */
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 28250 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1067: /* a_expr: '*' COLUMNS '(' a_expr ')'  */
#line 2581 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAStar *star = makeNode(PGAStar);
					star->expr = (yyvsp[-1].node);
					star->columns = true;
					star->unpacked = true;
					star->location = (yylsp[-4]);
					(yyval.node) = (PGNode *) star;
				}
#line 28263 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1068: /* a_expr: COLUMNS '(' a_expr ')'  */
#line 2590 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAStar *star = makeNode(PGAStar);
					star->expr = (yyvsp[-1].node);
					star->columns = true;
					star->location = (yylsp[-3]);
					(yyval.node) = (PGNode *) star;
				}
#line 28275 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1069: /* a_expr: '*' opt_except_list opt_replace_list  */
#line 2598 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAStar *star = makeNode(PGAStar);
					star->except_list = (yyvsp[-1].list);
					star->replace_list = (yyvsp[0].list);
					star->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) star;
				}
#line 28287 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1070: /* a_expr: ColId '.' '*' opt_except_list opt_replace_list  */
#line 2606 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAStar *star = makeNode(PGAStar);
					star->relation = (yyvsp[-4].str);
					star->except_list = (yyvsp[-1].list);
					star->replace_list = (yyvsp[0].list);
					star->location = (yylsp[-4]);
					(yyval.node) = (PGNode *) star;
				}
#line 28300 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1071: /* b_expr: c_expr  */
#line 2626 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 28306 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1072: /* b_expr: b_expr TYPECAST Typename  */
#line 2628 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeTypeCast((yyvsp[-2].node), (yyvsp[0].typnam), 0, (yylsp[-1])); }
#line 28312 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1073: /* b_expr: '+' b_expr  */
#line 2630 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 28318 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1074: /* b_expr: '-' b_expr  */
#line 2632 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 28324 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1075: /* b_expr: b_expr '+' b_expr  */
#line 2634 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28330 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1076: /* b_expr: b_expr '-' b_expr  */
#line 2636 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28336 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1077: /* b_expr: b_expr '*' b_expr  */
#line 2638 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "*", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28342 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1078: /* b_expr: b_expr '/' b_expr  */
#line 2640 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "/", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28348 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1079: /* b_expr: b_expr INTEGER_DIVISION b_expr  */
#line 2642 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "//", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28354 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1080: /* b_expr: b_expr '%' b_expr  */
#line 2644 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "%", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28360 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1081: /* b_expr: b_expr '^' b_expr  */
#line 2646 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "^", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28366 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1082: /* b_expr: b_expr POWER_OF b_expr  */
#line 2648 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "**", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28372 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1083: /* b_expr: b_expr '<' b_expr  */
#line 2650 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28378 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1084: /* b_expr: b_expr '>' b_expr  */
#line 2652 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28384 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1085: /* b_expr: b_expr '=' b_expr  */
#line 2654 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28390 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1086: /* b_expr: b_expr LESS_EQUALS b_expr  */
#line 2656 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28396 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1087: /* b_expr: b_expr GREATER_EQUALS b_expr  */
#line 2658 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28402 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1088: /* b_expr: b_expr NOT_EQUALS b_expr  */
#line 2660 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28408 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1089: /* b_expr: b_expr qual_Op b_expr  */
#line 2662 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28414 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1090: /* b_expr: qual_Op b_expr  */
#line 2664 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 28420 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1091: /* b_expr: b_expr qual_Op  */
#line 2666 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[0].list), (yyvsp[-1].node), NULL, (yylsp[0])); }
#line 28426 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1092: /* b_expr: b_expr IS DISTINCT FROM b_expr  */
#line 2668 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_DISTINCT, "=", (yyvsp[-4].node), (yyvsp[0].node), (yylsp[-3]));
				}
#line 28434 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1093: /* b_expr: b_expr IS NOT DISTINCT FROM b_expr  */
#line 2672 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_DISTINCT, "=", (yyvsp[-5].node), (yyvsp[0].node), (yylsp[-4]));
				}
#line 28442 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1094: /* b_expr: b_expr IS OF '(' type_list ')'  */
#line 2676 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "=", (yyvsp[-5].node), (PGNode *) (yyvsp[-1].list), (yylsp[-4]));
				}
#line 28450 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1095: /* b_expr: b_expr IS NOT OF '(' type_list ')'  */
#line 2680 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "<>", (yyvsp[-6].node), (PGNode *) (yyvsp[-1].list), (yylsp[-5]));
				}
#line 28458 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1097: /* c_expr: indirection_expr_or_a_expr opt_extended_indirection  */
#line 2695 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].list))
					{
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = (PGNode *) (yyvsp[-1].node);
						n->indirection = check_indirection((yyvsp[0].list), yyscanner);
						(yyval.node) = (PGNode *) n;
					}
					else
						(yyval.node) = (PGNode *) (yyvsp[-1].node);
				}
#line 28474 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1098: /* d_expr: columnref_opt_indirection  */
#line 2708 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 28480 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1099: /* d_expr: AexprConst  */
#line 2709 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 28486 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1100: /* d_expr: select_with_parens  */
#line 2711 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_EXPR_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 28501 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1101: /* d_expr: select_with_parens indirection  */
#line 2722 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Because the select_with_parens nonterminal is designed
					 * to "eat" as many levels of parens as possible, the
					 * '(' a_expr ')' opt_indirection production above will
					 * fail to match a sub-SELECT with indirection decoration;
					 * the sub-SELECT won't be regarded as an a_expr as long
					 * as there are parens around it.  To support applying
					 * subscripting or field selection to a sub-SELECT result,
					 * we need this redundant-looking production.
					 */
					PGSubLink *n = makeNode(PGSubLink);
					PGAIndirection *a = makeNode(PGAIndirection);
					n->subLinkType = PG_EXPR_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[-1].node);
					n->location = (yylsp[-1]);
					a->arg = (PGNode *)n;
					a->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.node) = (PGNode *)a;
				}
#line 28529 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1102: /* d_expr: EXISTS select_with_parens  */
#line 2746 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_EXISTS_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 28544 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1103: /* d_expr: grouping_or_grouping_id '(' expr_list_opt_comma ')'  */
#line 2757 "third_party/libpg_query/grammar/statements/select.y"
                          {
				  PGGroupingFunc *g = makeNode(PGGroupingFunc);
				  g->args = (yyvsp[-1].list);
				  g->location = (yylsp[-3]);
				  (yyval.node) = (PGNode *)g;
			  }
#line 28555 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1104: /* indirection_expr_or_a_expr: '(' a_expr ')'  */
#line 2767 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[-1].node);
				}
#line 28563 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1105: /* indirection_expr_or_a_expr: indirection_expr  */
#line 2771 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 28571 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1106: /* indirection_expr_or_a_expr: row  */
#line 2774 "third_party/libpg_query/grammar/statements/select.y"
                              {
				PGFuncCall *n = makeFuncCall(SystemFuncName("row"), (yyvsp[0].list), (yylsp[0]));
				(yyval.node) = (PGNode *) n;
			}
#line 28580 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1107: /* indirection_expr: '?'  */
#line 2782 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeParamRef(0, (yylsp[0]));
				}
#line 28588 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1108: /* indirection_expr: PARAM  */
#line 2786 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGParamRef *p = makeNode(PGParamRef);
					p->number = (yyvsp[0].ival);
					p->location = (yylsp[0]);
					(yyval.node) = (PGNode *) p;
				}
#line 28599 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1109: /* indirection_expr: struct_expr  */
#line 2793 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 28607 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1110: /* indirection_expr: map_expr  */
#line 2797 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 28615 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1111: /* indirection_expr: func_expr  */
#line 2801 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 28623 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1112: /* indirection_expr: case_expr  */
#line 2805 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 28629 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1113: /* indirection_expr: list_expr  */
#line 2806 "third_party/libpg_query/grammar/statements/select.y"
                                     {
                (yyval.node) = (yyvsp[0].node);
			}
#line 28637 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1114: /* indirection_expr: list_comprehension  */
#line 2809 "third_party/libpg_query/grammar/statements/select.y"
                                             {
				(yyval.node) = (yyvsp[0].node);
			}
#line 28645 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1115: /* indirection_expr: ARRAY select_with_parens  */
#line 2813 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_ARRAY_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NULL;
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 28660 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1116: /* indirection_expr: ARRAY '[' opt_expr_list_opt_comma ']'  */
#line 2823 "third_party/libpg_query/grammar/statements/select.y"
                                                                {
				PGList *func_name = list_make1(makeString("construct_array"));
				PGFuncCall *n = makeFuncCall(func_name, (yyvsp[-1].list), (yylsp[-3]));
				(yyval.node) = (PGNode *) n;
			}
#line 28670 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1117: /* indirection_expr: '#' ICONST  */
#line 2829 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGPositionalReference *n = makeNode(PGPositionalReference);
					n->position = (yyvsp[0].ival);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 28681 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1118: /* indirection_expr: '$' ColLabel  */
#line 2836 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeNamedParamRef((yyvsp[0].str), (yylsp[-1]));
				}
#line 28689 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1119: /* list_expr: '[' opt_expr_list_opt_comma ']'  */
#line 2841 "third_party/libpg_query/grammar/statements/select.y"
                                            {
                PGFuncCall *n = makeFuncCall(SystemFuncName("list_value"), (yyvsp[-1].list), (yylsp[-1]));
                (yyval.node) = (PGNode *) n;
            }
#line 28698 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1120: /* struct_expr: '{' dict_arguments_opt_comma '}'  */
#line 2848 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *f = makeFuncCall(SystemFuncName("struct_pack"), (yyvsp[-1].list), (yylsp[-1]));
					(yyval.node) = (PGNode *) f;
				}
#line 28707 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1121: /* map_expr: MAP '{' opt_map_arguments_opt_comma '}'  */
#line 2855 "third_party/libpg_query/grammar/statements/select.y"
                {
                    PGList *key_list = NULL;
                    PGList *value_list = NULL;
                    PGListCell *lc;
                    PGList *entry_list = (yyvsp[-1].list);
                    foreach(lc, entry_list)
                    {
                        PGList *l = (PGList *) lc->data.ptr_value;
                        key_list = lappend(key_list, (PGNode *) l->head->data.ptr_value);
                        value_list = lappend(value_list, (PGNode *) l->tail->data.ptr_value);
                    }
                    PGNode *keys   = (PGNode *) makeFuncCall(SystemFuncName("list_value"), key_list, (yylsp[-1]));
                    PGNode *values = (PGNode *) makeFuncCall(SystemFuncName("list_value"), value_list, (yylsp[-1]));
                    PGFuncCall *f = makeFuncCall(SystemFuncName("map"), list_make2(keys, values), (yylsp[-1]));
                    (yyval.node) = (PGNode *) f;
                }
#line 28728 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1122: /* func_application: func_name '(' ')'  */
#line 2875 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall((yyvsp[-2].list), NIL, (yylsp[-2]));
				}
#line 28736 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1123: /* func_application: func_name '(' func_arg_list opt_sort_clause opt_ignore_nulls ')'  */
#line 2879 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-5].list), (yyvsp[-3].list), (yylsp[-5]));
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].ignorenulls);
					(yyval.node) = (PGNode *)n;
				}
#line 28747 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1124: /* func_application: func_name '(' VARIADIC func_arg_expr opt_sort_clause opt_ignore_nulls ')'  */
#line 2886 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-6].list), list_make1((yyvsp[-3].node)), (yylsp[-6]));
					n->func_variadic = true;
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].ignorenulls);
					(yyval.node) = (PGNode *)n;
				}
#line 28759 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1125: /* func_application: func_name '(' func_arg_list ',' VARIADIC func_arg_expr opt_sort_clause opt_ignore_nulls ')'  */
#line 2894 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-8].list), lappend((yyvsp[-6].list), (yyvsp[-3].node)), (yylsp[-8]));
					n->func_variadic = true;
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].ignorenulls);
					(yyval.node) = (PGNode *)n;
				}
#line 28771 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1126: /* func_application: func_name '(' ALL func_arg_list opt_sort_clause opt_ignore_nulls ')'  */
#line 2902 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-6].list), (yyvsp[-3].list), (yylsp[-6]));
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].ignorenulls);
					/* Ideally we'd mark the PGFuncCall node to indicate
					 * "must be an aggregate", but there's no provision
					 * for that in PGFuncCall at the moment.
					 */
					(yyval.node) = (PGNode *)n;
				}
#line 28786 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1127: /* func_application: func_name '(' DISTINCT func_arg_list opt_sort_clause opt_ignore_nulls ')'  */
#line 2913 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-6].list), (yyvsp[-3].list), (yylsp[-6]));
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].ignorenulls);
					n->agg_distinct = true;
					(yyval.node) = (PGNode *)n;
				}
#line 28798 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1128: /* func_expr: func_application within_group_clause filter_clause export_clause over_clause  */
#line 2933 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = (PGFuncCall *) (yyvsp[-4].node);
					/*
					 * The order clause for WITHIN GROUP and the one for
					 * plain-aggregate ORDER BY share a field, so we have to
					 * check here that at most one is present.  We also check
					 * for DISTINCT and VARIADIC here to give a better error
					 * location.  Other consistency checks are deferred to
					 * parse analysis.
					 */
					if ((yyvsp[-3].list) != NIL)
					{
						if (n->agg_order != NIL)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use multiple ORDER BY clauses with WITHIN GROUP"),
									 parser_errposition((yylsp[-3]))));
						if (n->agg_distinct)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use DISTINCT with WITHIN GROUP"),
									 parser_errposition((yylsp[-3]))));
						if (n->func_variadic)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use VARIADIC with WITHIN GROUP"),
									 parser_errposition((yylsp[-3]))));
						n->agg_order = (yyvsp[-3].list);
						n->agg_within_group = true;
					}
					n->agg_filter = (yyvsp[-2].node);
					n->export_state = (yyvsp[-1].boolean);
					n->over = (yyvsp[0].windef);
					(yyval.node) = (PGNode *) n;
				}
#line 28838 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1129: /* func_expr: func_expr_common_subexpr  */
#line 2969 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 28844 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1130: /* func_expr_windowless: func_application  */
#line 2979 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 28850 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1131: /* func_expr_windowless: func_expr_common_subexpr  */
#line 2980 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 28856 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1132: /* func_expr_common_subexpr: COLLATION FOR '(' a_expr ')'  */
#line 2988 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("pg_collation_for"),
											   list_make1((yyvsp[-1].node)),
											   (yylsp[-4]));
				}
#line 28866 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1133: /* func_expr_common_subexpr: CAST '(' a_expr AS Typename ')'  */
#line 2994 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeTypeCast((yyvsp[-3].node), (yyvsp[-1].typnam), 0, (yylsp[-5])); }
#line 28872 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1134: /* func_expr_common_subexpr: TRY_CAST '(' a_expr AS Typename ')'  */
#line 2996 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeTypeCast((yyvsp[-3].node), (yyvsp[-1].typnam), 1, (yylsp[-5])); }
#line 28878 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1135: /* func_expr_common_subexpr: EXTRACT '(' extract_list ')'  */
#line 2998 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("date_part"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 28886 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1136: /* func_expr_common_subexpr: OVERLAY '(' overlay_list ')'  */
#line 3002 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* overlay(A PLACING B FROM C FOR D) is converted to
					 * overlay(A, B, C, D)
					 * overlay(A PLACING B FROM C) is converted to
					 * overlay(A, B, C)
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("overlay"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 28899 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1137: /* func_expr_common_subexpr: POSITION '(' position_list ')'  */
#line 3011 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* position(A in B) is converted to position_inverse(A, B) */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("__internal_position_operator"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 28908 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1138: /* func_expr_common_subexpr: SUBSTRING '(' substr_list ')'  */
#line 3016 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* substring(A from B for C) is converted to
					 * substring(A, B, C) - thomas 2000-11-28
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("substring"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 28919 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1139: /* func_expr_common_subexpr: TREAT '(' a_expr AS Typename ')'  */
#line 3023 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* TREAT(expr AS target) converts expr of a particular type to target,
					 * which is defined to be a subtype of the original expression.
					 * In SQL99, this is intended for use with structured UDTs,
					 * but let's make this a generally useful form allowing stronger
					 * coercions than are handled by implicit casting.
					 *
					 * Convert SystemTypeName() to SystemFuncName() even though
					 * at the moment they result in the same thing.
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName(((PGValue *)llast((yyvsp[-1].typnam)->names))->val.str),
												list_make1((yyvsp[-3].node)),
												(yylsp[-5]));
				}
#line 28938 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1140: /* func_expr_common_subexpr: TRIM '(' BOTH trim_list ')'  */
#line 3038 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* various trim expressions are defined in SQL
					 * - thomas 1997-07-19
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("trim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 28949 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1141: /* func_expr_common_subexpr: TRIM '(' LEADING trim_list ')'  */
#line 3045 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("ltrim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 28957 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1142: /* func_expr_common_subexpr: TRIM '(' TRAILING trim_list ')'  */
#line 3049 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("rtrim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 28965 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1143: /* func_expr_common_subexpr: TRIM '(' trim_list ')'  */
#line 3053 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("trim"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 28973 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1144: /* func_expr_common_subexpr: NULLIF '(' a_expr ',' a_expr ')'  */
#line 3057 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NULLIF, "=", (yyvsp[-3].node), (yyvsp[-1].node), (yylsp[-5]));
				}
#line 28981 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1145: /* func_expr_common_subexpr: COALESCE '(' expr_list_opt_comma ')'  */
#line 3061 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCoalesceExpr *c = makeNode(PGCoalesceExpr);
					c->args = (yyvsp[-1].list);
					c->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)c;
				}
#line 28992 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1146: /* list_comprehension_lhs: columnrefList  */
#line 3071 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGFuncCall *n = makeFuncCall(SystemFuncName("row"), (yyvsp[0].list), (yylsp[0]));
			(yyval.node) = (PGNode *) n;
		}
#line 29001 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1147: /* list_comprehension: '[' a_expr FOR list_comprehension_lhs IN_P a_expr ']'  */
#line 3079 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGLambdaFunction *lambda = makeNode(PGLambdaFunction);
					lambda->lhs = (yyvsp[-3].node);
					lambda->rhs = (yyvsp[-5].node);
					lambda->location = (yylsp[-6]);
					PGFuncCall *n = makeFuncCall(SystemFuncName("list_apply"), list_make2((yyvsp[-1].node), lambda), (yylsp[-6]));
					(yyval.node) = (PGNode *) n;
				}
#line 29014 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1148: /* list_comprehension: '[' a_expr FOR list_comprehension_lhs IN_P c_expr IF_P a_expr ']'  */
#line 3088 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGLambdaFunction *lambda = makeNode(PGLambdaFunction);
					lambda->lhs = (yyvsp[-5].node);
					lambda->rhs = (yyvsp[-7].node);
					lambda->location = (yylsp[-8]);

					PGLambdaFunction *lambda_filter = makeNode(PGLambdaFunction);
					lambda_filter->lhs = (yyvsp[-5].node);
					lambda_filter->rhs = (yyvsp[-1].node);
					lambda_filter->location = (yylsp[-1]);
					PGFuncCall *filter = makeFuncCall(SystemFuncName("list_filter"), list_make2((yyvsp[-3].node), lambda_filter), (yylsp[-8]));
					PGFuncCall *n = makeFuncCall(SystemFuncName("list_apply"), list_make2(filter, lambda), (yylsp[-8]));
					(yyval.node) = (PGNode *) n;
				}
#line 29033 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1149: /* within_group_clause: WITHIN GROUP_P '(' sort_clause ')'  */
#line 3109 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 29039 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1150: /* within_group_clause: %empty  */
#line 3110 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 29045 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1151: /* filter_clause: FILTER '(' WHERE a_expr ')'  */
#line 3114 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 29051 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1152: /* filter_clause: FILTER '(' a_expr ')'  */
#line 3115 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 29057 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1153: /* filter_clause: %empty  */
#line 3116 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 29063 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1154: /* export_clause: EXPORT_STATE  */
#line 3120 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.boolean) = true; }
#line 29069 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1155: /* export_clause: %empty  */
#line 3121 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 29075 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1156: /* window_clause: WINDOW window_definition_list  */
#line 3128 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 29081 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1157: /* window_clause: %empty  */
#line 3129 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 29087 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1158: /* window_definition_list: window_definition  */
#line 3133 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].windef)); }
#line 29093 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1159: /* window_definition_list: window_definition_list ',' window_definition  */
#line 3135 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].windef)); }
#line 29099 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1160: /* window_definition: ColId AS window_specification  */
#line 3140 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);
					n->name = (yyvsp[-2].str);
					(yyval.windef) = n;
				}
#line 29109 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1161: /* over_clause: OVER window_specification  */
#line 3148 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.windef) = (yyvsp[0].windef); }
#line 29115 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1162: /* over_clause: OVER ColId  */
#line 3150 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->name = (yyvsp[0].str);
					n->refname = NULL;
					n->partitionClause = NIL;
					n->orderClause = NIL;
					n->frameOptions = FRAMEOPTION_DEFAULTS;
					n->startOffset = NULL;
					n->endOffset = NULL;
					n->location = (yylsp[0]);
					(yyval.windef) = n;
				}
#line 29132 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1163: /* over_clause: %empty  */
#line 3163 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.windef) = NULL; }
#line 29138 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1164: /* window_specification: '(' opt_existing_window_name opt_partition_clause opt_sort_clause opt_frame_clause ')'  */
#line 3168 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->name = NULL;
					n->refname = (yyvsp[-4].str);
					n->partitionClause = (yyvsp[-3].list);
					n->orderClause = (yyvsp[-2].list);
					/* copy relevant fields of opt_frame_clause */
					n->frameOptions = (yyvsp[-1].windef)->frameOptions;
					n->startOffset = (yyvsp[-1].windef)->startOffset;
					n->endOffset = (yyvsp[-1].windef)->endOffset;
					n->location = (yylsp[-5]);
					(yyval.windef) = n;
				}
#line 29156 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1165: /* opt_existing_window_name: ColId  */
#line 3193 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 29162 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1166: /* opt_existing_window_name: %empty  */
#line 3194 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = NULL; }
#line 29168 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1167: /* opt_partition_clause: PARTITION BY expr_list  */
#line 3197 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = (yyvsp[0].list); }
#line 29174 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1168: /* opt_partition_clause: %empty  */
#line 3198 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 29180 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1169: /* opt_frame_clause: RANGE frame_extent opt_window_exclusion_clause  */
#line 3207 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[-1].windef);

					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_RANGE;
					n->frameOptions |= (yyvsp[0].ival);
					(yyval.windef) = n;
				}
#line 29192 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1170: /* opt_frame_clause: ROWS frame_extent opt_window_exclusion_clause  */
#line 3215 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[-1].windef);

					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_ROWS;
					n->frameOptions |= (yyvsp[0].ival);
					(yyval.windef) = n;
				}
#line 29204 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1171: /* opt_frame_clause: GROUPS frame_extent opt_window_exclusion_clause  */
#line 3223 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[-1].windef);

					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_GROUPS;
					n->frameOptions |= (yyvsp[0].ival);
					(yyval.windef) = n;
				}
#line 29216 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1172: /* opt_frame_clause: %empty  */
#line 3231 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);

					n->frameOptions = FRAMEOPTION_DEFAULTS;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 29229 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1173: /* frame_extent: frame_bound  */
#line 3242 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);

					/* reject invalid cases */
					if (n->frameOptions & FRAMEOPTION_START_UNBOUNDED_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame start cannot be UNBOUNDED FOLLOWING"),
								 parser_errposition((yylsp[0]))));
					if (n->frameOptions & FRAMEOPTION_START_OFFSET_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from following row cannot end with current row"),
								 parser_errposition((yylsp[0]))));
					n->frameOptions |= FRAMEOPTION_END_CURRENT_ROW;
					(yyval.windef) = n;
				}
#line 29251 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1174: /* frame_extent: BETWEEN frame_bound AND frame_bound  */
#line 3260 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n1 = (yyvsp[-2].windef);
					PGWindowDef *n2 = (yyvsp[0].windef);

					/* form merged options */
					int		frameOptions = n1->frameOptions;
					/* shift converts START_ options to END_ options */
					frameOptions |= n2->frameOptions << 1;
					frameOptions |= FRAMEOPTION_BETWEEN;
					/* reject invalid cases */
					if (frameOptions & FRAMEOPTION_START_UNBOUNDED_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame start cannot be UNBOUNDED FOLLOWING"),
								 parser_errposition((yylsp[-2]))));
					if (frameOptions & FRAMEOPTION_END_UNBOUNDED_PRECEDING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame end cannot be UNBOUNDED PRECEDING"),
								 parser_errposition((yylsp[0]))));
					if ((frameOptions & FRAMEOPTION_START_CURRENT_ROW) &&
						(frameOptions & FRAMEOPTION_END_OFFSET_PRECEDING))
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from current row cannot have preceding rows"),
								 parser_errposition((yylsp[0]))));
					if ((frameOptions & FRAMEOPTION_START_OFFSET_FOLLOWING) &&
						(frameOptions & (FRAMEOPTION_END_OFFSET_PRECEDING |
										 FRAMEOPTION_END_CURRENT_ROW)))
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from following row cannot have preceding rows"),
								 parser_errposition((yylsp[0]))));
					n1->frameOptions = frameOptions;
					n1->endOffset = n2->startOffset;
					(yyval.windef) = n1;
				}
#line 29293 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1175: /* frame_bound: UNBOUNDED PRECEDING  */
#line 3306 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);

					n->frameOptions = FRAMEOPTION_START_UNBOUNDED_PRECEDING;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 29306 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1176: /* frame_bound: UNBOUNDED FOLLOWING  */
#line 3315 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);

					n->frameOptions = FRAMEOPTION_START_UNBOUNDED_FOLLOWING;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 29319 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1177: /* frame_bound: CURRENT_P ROW  */
#line 3324 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);

					n->frameOptions = FRAMEOPTION_START_CURRENT_ROW;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 29332 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1178: /* frame_bound: a_expr PRECEDING  */
#line 3333 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);

					n->frameOptions = FRAMEOPTION_START_OFFSET_PRECEDING;
					n->startOffset = (yyvsp[-1].node);
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 29345 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1179: /* frame_bound: a_expr FOLLOWING  */
#line 3342 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);

					n->frameOptions = FRAMEOPTION_START_OFFSET_FOLLOWING;
					n->startOffset = (yyvsp[-1].node);
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 29358 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1180: /* opt_window_exclusion_clause: EXCLUDE CURRENT_P ROW  */
#line 3353 "third_party/libpg_query/grammar/statements/select.y"
                                                { (yyval.ival) = FRAMEOPTION_EXCLUDE_CURRENT_ROW; }
#line 29364 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1181: /* opt_window_exclusion_clause: EXCLUDE GROUP_P  */
#line 3354 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.ival) = FRAMEOPTION_EXCLUDE_GROUP; }
#line 29370 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1182: /* opt_window_exclusion_clause: EXCLUDE TIES  */
#line 3355 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.ival) = FRAMEOPTION_EXCLUDE_TIES; }
#line 29376 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1183: /* opt_window_exclusion_clause: EXCLUDE NO OTHERS  */
#line 3356 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.ival) = 0; }
#line 29382 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1184: /* opt_window_exclusion_clause: %empty  */
#line 3357 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.ival) = 0; }
#line 29388 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1185: /* qualified_row: ROW '(' expr_list_opt_comma ')'  */
#line 3371 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 29394 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1186: /* qualified_row: ROW '(' ')'  */
#line 3372 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 29400 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1187: /* row: qualified_row  */
#line 3375 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list);}
#line 29406 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1188: /* row: '(' expr_list ',' a_expr ')'  */
#line 3376 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-3].list), (yyvsp[-1].node)); }
#line 29412 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1189: /* dict_arg: ColIdOrString ':' a_expr  */
#line 3380 "third_party/libpg_query/grammar/statements/select.y"
                                                                                {
		PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
		na->name = (yyvsp[-2].str);
		na->arg = (PGExpr *) (yyvsp[0].node);
		na->argnumber = -1;
		na->location = (yylsp[-2]);
		(yyval.node) = (PGNode *) na;
	}
#line 29425 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1190: /* dict_arguments: dict_arg  */
#line 3390 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 29431 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1191: /* dict_arguments: dict_arguments ',' dict_arg  */
#line 3391 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 29437 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1192: /* dict_arguments_opt_comma: dict_arguments  */
#line 3395 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 29443 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1193: /* dict_arguments_opt_comma: dict_arguments ','  */
#line 3396 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 29449 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1194: /* map_arg: a_expr ':' a_expr  */
#line 3401 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.list) = list_make2((yyvsp[-2].node), (yyvsp[0].node));
			}
#line 29457 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1195: /* map_arguments: map_arg  */
#line 3407 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 29463 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1196: /* map_arguments: map_arguments ',' map_arg  */
#line 3408 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 29469 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1197: /* map_arguments_opt_comma: map_arguments  */
#line 3413 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 29475 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1198: /* map_arguments_opt_comma: map_arguments ','  */
#line 3414 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 29481 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1199: /* opt_map_arguments_opt_comma: map_arguments_opt_comma  */
#line 3419 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 29487 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1200: /* opt_map_arguments_opt_comma: %empty  */
#line 3420 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NULL; }
#line 29493 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1201: /* sub_type: ANY  */
#line 3423 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ANY_SUBLINK; }
#line 29499 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1202: /* sub_type: SOME  */
#line 3424 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ANY_SUBLINK; }
#line 29505 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1203: /* sub_type: ALL  */
#line 3425 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ALL_SUBLINK; }
#line 29511 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1204: /* all_Op: Op  */
#line 3428 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 29517 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1205: /* all_Op: MathOp  */
#line 3429 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) (yyvsp[0].conststr); }
#line 29523 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1206: /* MathOp: '+'  */
#line 3432 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "+"; }
#line 29529 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1207: /* MathOp: '-'  */
#line 3433 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "-"; }
#line 29535 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1208: /* MathOp: '*'  */
#line 3434 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "*"; }
#line 29541 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1209: /* MathOp: '/'  */
#line 3435 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "/"; }
#line 29547 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1210: /* MathOp: INTEGER_DIVISION  */
#line 3436 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "//"; }
#line 29553 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1211: /* MathOp: '%'  */
#line 3437 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "%"; }
#line 29559 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1212: /* MathOp: '^'  */
#line 3438 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "^"; }
#line 29565 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1213: /* MathOp: POWER_OF  */
#line 3439 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "**"; }
#line 29571 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1214: /* MathOp: '<'  */
#line 3440 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "<"; }
#line 29577 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1215: /* MathOp: '>'  */
#line 3441 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = ">"; }
#line 29583 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1216: /* MathOp: '='  */
#line 3442 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "="; }
#line 29589 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1217: /* MathOp: LESS_EQUALS  */
#line 3443 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "<="; }
#line 29595 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1218: /* MathOp: GREATER_EQUALS  */
#line 3444 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = ">="; }
#line 29601 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1219: /* MathOp: NOT_EQUALS  */
#line 3445 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "<>"; }
#line 29607 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1220: /* qual_Op: Op  */
#line 3449 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 29613 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1221: /* qual_Op: OPERATOR '(' any_operator ')'  */
#line 3451 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 29619 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1222: /* qual_all_Op: all_Op  */
#line 3456 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 29625 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1223: /* qual_all_Op: OPERATOR '(' any_operator ')'  */
#line 3458 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 29631 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1224: /* subquery_Op: all_Op  */
#line 3463 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 29637 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1225: /* subquery_Op: OPERATOR '(' any_operator ')'  */
#line 3465 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 29643 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1226: /* subquery_Op: LIKE  */
#line 3467 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~")); }
#line 29649 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1227: /* subquery_Op: NOT_LA LIKE  */
#line 3469 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~")); }
#line 29655 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1228: /* subquery_Op: GLOB  */
#line 3471 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~~")); }
#line 29661 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1229: /* subquery_Op: NOT_LA GLOB  */
#line 3473 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~~")); }
#line 29667 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1230: /* subquery_Op: ILIKE  */
#line 3475 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~*")); }
#line 29673 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1231: /* subquery_Op: NOT_LA ILIKE  */
#line 3477 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~*")); }
#line 29679 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1232: /* any_operator: all_Op  */
#line 3491 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 29685 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1233: /* any_operator: ColId '.' any_operator  */
#line 3493 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lcons(makeString((yyvsp[-2].str)), (yyvsp[0].list)); }
#line 29691 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1234: /* c_expr_list: c_expr  */
#line 3498 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 29699 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1235: /* c_expr_list: c_expr_list ',' c_expr  */
#line 3502 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 29707 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1236: /* c_expr_list_opt_comma: c_expr_list  */
#line 3509 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 29715 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1237: /* c_expr_list_opt_comma: c_expr_list ','  */
#line 3514 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[-1].list);
				}
#line 29723 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1238: /* expr_list: a_expr  */
#line 3520 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 29731 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1239: /* expr_list: expr_list ',' a_expr  */
#line 3524 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 29739 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1240: /* expr_list_opt_comma: expr_list  */
#line 3531 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 29747 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1241: /* expr_list_opt_comma: expr_list ','  */
#line 3536 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[-1].list);
				}
#line 29755 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1242: /* opt_expr_list_opt_comma: expr_list_opt_comma  */
#line 3543 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 29763 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1243: /* opt_expr_list_opt_comma: %empty  */
#line 3547 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = NULL;
				}
#line 29771 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1244: /* func_arg_list: func_arg_expr  */
#line 3556 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 29779 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1245: /* func_arg_list: func_arg_list ',' func_arg_expr  */
#line 3560 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 29787 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1246: /* func_arg_expr: a_expr  */
#line 3566 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 29795 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1247: /* func_arg_expr: param_name COLON_EQUALS a_expr  */
#line 3570 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
					na->name = (yyvsp[-2].str);
					na->arg = (PGExpr *) (yyvsp[0].node);
					na->argnumber = -1;		/* until determined */
					na->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) na;
				}
#line 29808 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1248: /* func_arg_expr: param_name EQUALS_GREATER a_expr  */
#line 3579 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
					na->name = (yyvsp[-2].str);
					na->arg = (PGExpr *) (yyvsp[0].node);
					na->argnumber = -1;		/* until determined */
					na->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) na;
				}
#line 29821 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1249: /* type_list: Typename  */
#line 3589 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].typnam)); }
#line 29827 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1250: /* type_list: type_list ',' Typename  */
#line 3590 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].typnam)); }
#line 29833 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1251: /* extract_list: extract_arg FROM a_expr  */
#line 3595 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(makeStringConst((yyvsp[-2].str), (yylsp[-2])), (yyvsp[0].node));
				}
#line 29841 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1252: /* extract_list: %empty  */
#line 3598 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 29847 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1253: /* extract_arg: IDENT  */
#line 3605 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 29853 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1254: /* extract_arg: year_keyword  */
#line 3606 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "year"; }
#line 29859 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1255: /* extract_arg: month_keyword  */
#line 3607 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "month"; }
#line 29865 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1256: /* extract_arg: day_keyword  */
#line 3608 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "day"; }
#line 29871 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1257: /* extract_arg: hour_keyword  */
#line 3609 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "hour"; }
#line 29877 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1258: /* extract_arg: minute_keyword  */
#line 3610 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "minute"; }
#line 29883 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1259: /* extract_arg: second_keyword  */
#line 3611 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "second"; }
#line 29889 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1260: /* extract_arg: millisecond_keyword  */
#line 3612 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) "millisecond"; }
#line 29895 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1261: /* extract_arg: microsecond_keyword  */
#line 3613 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) "microsecond"; }
#line 29901 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1262: /* extract_arg: week_keyword  */
#line 3614 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "week"; }
#line 29907 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1263: /* extract_arg: quarter_keyword  */
#line 3615 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "quarter"; }
#line 29913 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1264: /* extract_arg: decade_keyword  */
#line 3616 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "decade"; }
#line 29919 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1265: /* extract_arg: century_keyword  */
#line 3617 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "century"; }
#line 29925 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1266: /* extract_arg: millennium_keyword  */
#line 3618 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) "millennium"; }
#line 29931 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1267: /* extract_arg: Sconst  */
#line 3619 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 29937 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1268: /* overlay_list: a_expr overlay_placing substr_from substr_for  */
#line 3630 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make4((yyvsp[-3].node), (yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 29945 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1269: /* overlay_list: a_expr overlay_placing substr_from  */
#line 3634 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 29953 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1270: /* overlay_placing: PLACING a_expr  */
#line 3641 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 29959 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1271: /* position_list: b_expr IN_P b_expr  */
#line 3647 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make2((yyvsp[-2].node), (yyvsp[0].node)); }
#line 29965 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1272: /* position_list: %empty  */
#line 3648 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 29971 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1273: /* substr_list: a_expr substr_from substr_for  */
#line 3665 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 29979 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1274: /* substr_list: a_expr substr_for substr_from  */
#line 3669 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* not legal per SQL99, but might as well allow it */
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[0].node), (yyvsp[-1].node));
				}
#line 29988 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1275: /* substr_list: a_expr substr_from  */
#line 3674 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].node));
				}
#line 29996 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1276: /* substr_list: a_expr substr_for  */
#line 3678 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Since there are no cases where this syntax allows
					 * a textual FOR value, we forcibly cast the argument
					 * to int4.  The possible matches in pg_proc are
					 * substring(text,int4) and substring(text,text),
					 * and we don't want the parser to choose the latter,
					 * which it is likely to do if the second argument
					 * is unknown or doesn't have an implicit cast to int4.
					 */
					(yyval.list) = list_make3((yyvsp[-1].node), makeIntConst(1, -1),
									makeTypeCast((yyvsp[0].node),
												 SystemTypeName("int4"), 0, -1));
				}
#line 30015 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1277: /* substr_list: expr_list  */
#line 3693 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 30023 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1278: /* substr_list: %empty  */
#line 3697 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = NIL; }
#line 30029 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1279: /* substr_from: FROM a_expr  */
#line 3701 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 30035 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1280: /* substr_for: FOR a_expr  */
#line 3704 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 30041 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1281: /* trim_list: a_expr FROM expr_list_opt_comma  */
#line 3707 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[0].list), (yyvsp[-2].node)); }
#line 30047 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1282: /* trim_list: FROM expr_list_opt_comma  */
#line 3708 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 30053 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1283: /* trim_list: expr_list_opt_comma  */
#line 3709 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 30059 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1284: /* in_expr: select_with_parens  */
#line 3713 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subselect = (yyvsp[0].node);
					/* other fields will be filled later */
					(yyval.node) = (PGNode *)n;
				}
#line 30070 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1285: /* in_expr: '(' expr_list_opt_comma ')'  */
#line 3719 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (PGNode *)(yyvsp[-1].list); }
#line 30076 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1287: /* in_expr: indirection_expr  */
#line 3721 "third_party/libpg_query/grammar/statements/select.y"
                                           { (yyval.node) = (PGNode *)(yyvsp[0].node); }
#line 30082 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1288: /* case_expr: CASE case_arg when_clause_list case_default END_P  */
#line 3732 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCaseExpr *c = makeNode(PGCaseExpr);
					c->casetype = InvalidOid; /* not analyzed yet */
					c->arg = (PGExpr *) (yyvsp[-3].node);
					c->args = (yyvsp[-2].list);
					c->defresult = (PGExpr *) (yyvsp[-1].node);
					c->location = (yylsp[-4]);
					(yyval.node) = (PGNode *)c;
				}
#line 30096 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1289: /* when_clause_list: when_clause  */
#line 3745 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 30102 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1290: /* when_clause_list: when_clause_list when_clause  */
#line 3746 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 30108 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1291: /* when_clause: WHEN a_expr THEN a_expr  */
#line 3751 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCaseWhen *w = makeNode(PGCaseWhen);
					w->expr = (PGExpr *) (yyvsp[-2].node);
					w->result = (PGExpr *) (yyvsp[0].node);
					w->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)w;
				}
#line 30120 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1292: /* case_default: ELSE a_expr  */
#line 3761 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 30126 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1293: /* case_default: %empty  */
#line 3762 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 30132 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1294: /* case_arg: a_expr  */
#line 3765 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 30138 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1295: /* case_arg: %empty  */
#line 3766 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 30144 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1296: /* columnrefList: columnref  */
#line 3770 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 30150 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1297: /* columnrefList: columnrefList ',' columnref  */
#line 3771 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 30156 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1298: /* columnref: ColId  */
#line 3775 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeColumnRef((yyvsp[0].str), NIL, (yylsp[0]), yyscanner);
		}
#line 30164 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1299: /* columnref_opt_indirection: ColId  */
#line 3781 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeColumnRef((yyvsp[0].str), NIL, (yylsp[0]), yyscanner);
				}
#line 30172 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1300: /* columnref_opt_indirection: ColId indirection  */
#line 3785 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeColumnRef((yyvsp[-1].str), (yyvsp[0].list), (yylsp[-1]), yyscanner);
				}
#line 30180 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1301: /* indirection_el: '[' a_expr ']'  */
#line 3792 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = false;
					ai->lidx = NULL;
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 30192 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1302: /* indirection_el: '[' opt_slice_bound ':' opt_slice_bound ']'  */
#line 3800 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-3].node);
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 30204 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1303: /* indirection_el: '[' opt_slice_bound ':' opt_slice_bound ':' opt_slice_bound ']'  */
#line 3807 "third_party/libpg_query/grammar/statements/select.y"
                                                                                          {
				    	PGAIndices *ai = makeNode(PGAIndices);
				    	ai->is_slice = true;
				    	ai->lidx = (yyvsp[-5].node);
				    	ai->uidx = (yyvsp[-3].node);
				    	ai->step = (yyvsp[-1].node);
				    	(yyval.node) = (PGNode *) ai;
				}
#line 30217 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1304: /* indirection_el: '[' opt_slice_bound ':' '-' ':' opt_slice_bound ']'  */
#line 3815 "third_party/libpg_query/grammar/statements/select.y"
                                                                              {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-5].node);
					ai->step = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 30229 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1305: /* opt_slice_bound: a_expr  */
#line 3825 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 30235 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1306: /* opt_slice_bound: %empty  */
#line 3826 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 30241 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1307: /* opt_indirection: %empty  */
#line 3831 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 30247 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1308: /* opt_indirection: opt_indirection indirection_el  */
#line 3832 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 30253 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1309: /* opt_func_arguments: %empty  */
#line 3836 "third_party/libpg_query/grammar/statements/select.y"
                                                { (yyval.list) = NULL; }
#line 30259 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1310: /* opt_func_arguments: '(' ')'  */
#line 3837 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = list_make1(NULL); }
#line 30265 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1311: /* opt_func_arguments: '(' func_arg_list ')'  */
#line 3838 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 30271 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1312: /* extended_indirection_el: '.' attr_name opt_func_arguments  */
#line 3843 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].list)) {
						PGFuncCall *n = makeFuncCall(list_make1(makeString((yyvsp[-1].str))), (yyvsp[0].list)->head->data.ptr_value ? (yyvsp[0].list) : NULL, (yylsp[-1]));
						(yyval.node) = (PGNode *) n;
					} else {
						(yyval.node) = (PGNode *) makeString((yyvsp[-1].str));
					}
				}
#line 30284 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1313: /* extended_indirection_el: '[' a_expr ']'  */
#line 3852 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = false;
					ai->lidx = NULL;
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 30296 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1314: /* extended_indirection_el: '[' opt_slice_bound ':' opt_slice_bound ']'  */
#line 3860 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-3].node);
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 30308 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1315: /* extended_indirection_el: '[' opt_slice_bound ':' opt_slice_bound ':' opt_slice_bound ']'  */
#line 3867 "third_party/libpg_query/grammar/statements/select.y"
                                                                                          {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-5].node);
					ai->uidx = (yyvsp[-3].node);
					ai->step = (yyvsp[-1].node);
                 			(yyval.node) = (PGNode *) ai;
                		}
#line 30321 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1316: /* extended_indirection_el: '[' opt_slice_bound ':' '-' ':' opt_slice_bound ']'  */
#line 3876 "third_party/libpg_query/grammar/statements/select.y"
                                                                              {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-5].node);
					ai->step = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 30333 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1317: /* opt_extended_indirection: %empty  */
#line 3891 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                                { (yyval.list) = NIL; }
#line 30339 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1318: /* opt_extended_indirection: opt_extended_indirection extended_indirection_el  */
#line 3892 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 30345 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1321: /* opt_target_list_opt_comma: target_list_opt_comma  */
#line 3908 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 30351 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1322: /* opt_target_list_opt_comma: %empty  */
#line 3909 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 30357 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1323: /* target_list: target_el  */
#line 3913 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 30363 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1324: /* target_list: target_list ',' target_el  */
#line 3914 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].target)); }
#line 30369 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1325: /* target_list_opt_comma: target_list  */
#line 3918 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 30375 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1326: /* target_list_opt_comma: target_list ','  */
#line 3919 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 30381 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1327: /* target_el: a_expr AS ColLabelOrString  */
#line 3923 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[0].str);
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[-2].node);
					(yyval.target)->location = (yylsp[-2]);
				}
#line 30393 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1328: /* target_el: a_expr IDENT  */
#line 3939 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[0].str);
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[-1].node);
					(yyval.target)->location = (yylsp[-1]);
				}
#line 30405 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1329: /* target_el: a_expr  */
#line 3947 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = NULL;
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[0].node);
					(yyval.target)->location = (yylsp[0]);
				}
#line 30417 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1330: /* except_list: EXCLUDE '(' name_list_opt_comma ')'  */
#line 3956 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 30423 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1331: /* except_list: EXCLUDE ColId  */
#line 3957 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 30429 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1332: /* opt_except_list: except_list  */
#line 3960 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 30435 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1333: /* opt_except_list: %empty  */
#line 3961 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NULL; }
#line 30441 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1334: /* replace_list_el: a_expr AS ColId  */
#line 3964 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = list_make2((yyvsp[-2].node), makeString((yyvsp[0].str))); }
#line 30447 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1335: /* replace_list: replace_list_el  */
#line 3968 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 30453 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1336: /* replace_list: replace_list ',' replace_list_el  */
#line 3969 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 30459 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1337: /* replace_list_opt_comma: replace_list  */
#line 3973 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 30465 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1338: /* replace_list_opt_comma: replace_list ','  */
#line 3974 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 30471 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1339: /* opt_replace_list: REPLACE '(' replace_list_opt_comma ')'  */
#line 3977 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 30477 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1340: /* opt_replace_list: REPLACE replace_list_el  */
#line 3978 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 30483 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1341: /* opt_replace_list: %empty  */
#line 3979 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NULL; }
#line 30489 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1342: /* qualified_name_list: qualified_name  */
#line 3989 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].range)); }
#line 30495 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1343: /* qualified_name_list: qualified_name_list ',' qualified_name  */
#line 3990 "third_party/libpg_query/grammar/statements/select.y"
                                                                 { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].range)); }
#line 30501 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1344: /* name_list: name  */
#line 3995 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 30507 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1345: /* name_list: name_list ',' name  */
#line 3997 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str))); }
#line 30513 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1346: /* name_list_opt_comma: name_list  */
#line 4002 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 30519 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1347: /* name_list_opt_comma: name_list ','  */
#line 4003 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 30525 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1348: /* name_list_opt_comma_opt_bracket: name_list_opt_comma  */
#line 4007 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 30531 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1349: /* name_list_opt_comma_opt_bracket: '(' name_list_opt_comma ')'  */
#line 4008 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 30537 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1350: /* name: ColIdOrString  */
#line 4011 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 30543 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1351: /* func_name: function_name_token  */
#line 4023 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 30549 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1352: /* func_name: ColId indirection  */
#line 4026 "third_party/libpg_query/grammar/statements/select.y"
                                        {
						(yyval.list) = check_func_name(lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)),
											 yyscanner);
					}
#line 30558 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1353: /* AexprConst: Iconst  */
#line 4037 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntConst((yyvsp[0].ival), (yylsp[0]));
				}
#line 30566 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1354: /* AexprConst: FCONST  */
#line 4041 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeFloatConst((yyvsp[0].str), (yylsp[0]));
				}
#line 30574 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1355: /* AexprConst: Sconst opt_indirection  */
#line 4045 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].list))
					{
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = makeStringConst((yyvsp[-1].str), (yylsp[-1]));
						n->indirection = check_indirection((yyvsp[0].list), yyscanner);
						(yyval.node) = (PGNode *) n;
					}
					else
						(yyval.node) = makeStringConst((yyvsp[-1].str), (yylsp[-1]));
				}
#line 30590 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1356: /* AexprConst: BCONST  */
#line 4057 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBitStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 30598 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1357: /* AexprConst: XCONST  */
#line 4061 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* This is a bit constant per SQL99:
					 * Without Feature F511, "BIT data type",
					 * a <general literal> shall not be a
					 * <bit string literal> or a <hex string literal>.
					 */
					(yyval.node) = makeBitStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 30611 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1358: /* AexprConst: func_name Sconst  */
#line 4070 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* generic type 'literal' syntax */
					PGTypeName *t = makeTypeNameFromNameList((yyvsp[-1].list));
					t->location = (yylsp[-1]);
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 30622 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1359: /* AexprConst: func_name '(' func_arg_list opt_sort_clause opt_ignore_nulls ')' Sconst  */
#line 4077 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* generic syntax with a type modifier */
					PGTypeName *t = makeTypeNameFromNameList((yyvsp[-6].list));
					PGListCell *lc;

					/*
					 * We must use func_arg_list and opt_sort_clause in the
					 * production to avoid reduce/reduce conflicts, but we
					 * don't actually wish to allow PGNamedArgExpr in this
					 * context, ORDER BY, nor IGNORE NULLS.
					 */
					foreach(lc, (yyvsp[-4].list))
					{
						PGNamedArgExpr *arg = (PGNamedArgExpr *) lfirst(lc);

						if (IsA(arg, PGNamedArgExpr))
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have parameter name"),
									 parser_errposition(arg->location)));
					}
					if ((yyvsp[-3].list) != NIL)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have ORDER BY"),
									 parser_errposition((yylsp[-3]))));
					if ((yyvsp[-2].ignorenulls) != false)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have IGNORE NULLS"),
									 parser_errposition((yylsp[-2]))));


					t->typmods = (yyvsp[-4].list);
					t->location = (yylsp[-6]);
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 30664 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1360: /* AexprConst: ConstTypename Sconst  */
#line 4115 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), (yyvsp[-1].typnam));
				}
#line 30672 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1361: /* AexprConst: ConstInterval '(' a_expr ')' opt_interval  */
#line 4119 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntervalNode((yyvsp[-2].node), (yylsp[-2]), (yyvsp[0].list));
				}
#line 30680 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1362: /* AexprConst: ConstInterval Iconst opt_interval  */
#line 4123 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntervalNode((yyvsp[-1].ival), (yylsp[-1]), (yyvsp[0].list));
				}
#line 30688 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1363: /* AexprConst: ConstInterval Sconst opt_interval  */
#line 4127 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntervalNode((yyvsp[-1].str), (yylsp[-1]), (yyvsp[0].list));
				}
#line 30696 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1364: /* AexprConst: TRUE_P  */
#line 4131 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBoolAConst(true, (yylsp[0]));
				}
#line 30704 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1365: /* AexprConst: FALSE_P  */
#line 4135 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBoolAConst(false, (yylsp[0]));
				}
#line 30712 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1366: /* AexprConst: NULL_P  */
#line 4139 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeNullAConst((yylsp[0]));
				}
#line 30720 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1367: /* Iconst: ICONST  */
#line 4144 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ival) = (yyvsp[0].ival); }
#line 30726 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1368: /* type_function_name: IDENT  */
#line 4161 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 30732 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1369: /* type_function_name: unreserved_keyword  */
#line 4162 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 30738 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1370: /* type_function_name: type_func_name_keyword  */
#line 4163 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 30744 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1371: /* function_name_token: IDENT  */
#line 4166 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 30750 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1372: /* function_name_token: unreserved_keyword  */
#line 4167 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 30756 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1373: /* function_name_token: func_name_keyword  */
#line 4168 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 30762 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1374: /* type_name_token: IDENT  */
#line 4171 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 30768 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1375: /* type_name_token: unreserved_keyword  */
#line 4172 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 30774 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1376: /* type_name_token: type_name_keyword  */
#line 4173 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 30780 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1377: /* any_name: ColId  */
#line 4176 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 30786 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1378: /* any_name: ColId attrs  */
#line 4177 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)); }
#line 30792 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1379: /* attrs: '.' attr_name  */
#line 4181 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 30798 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1380: /* attrs: attrs '.' attr_name  */
#line 4183 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str))); }
#line 30804 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1381: /* opt_name_list: '(' name_list_opt_comma ')'  */
#line 4187 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 30810 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1382: /* opt_name_list: %empty  */
#line 4188 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 30816 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1384: /* ColLabelOrString: ColLabel  */
#line 4195 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 30822 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1385: /* ColLabelOrString: SCONST  */
#line 4196 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 30828 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1386: /* ExportStmt: EXPORT_P DATABASE Sconst copy_options  */
#line 8 "third_party/libpg_query/grammar/statements/export.y"
                                {
					PGExportStmt *n = makeNode(PGExportStmt);
					n->database = NULL;
					n->filename = (yyvsp[-1].str);
					n->options = NIL;
					if ((yyvsp[0].list)) {
						n->options = list_concat(n->options, (yyvsp[0].list));
					}
					(yyval.node) = (PGNode *)n;
				}
#line 30843 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1387: /* ExportStmt: EXPORT_P DATABASE ColId TO Sconst copy_options  */
#line 20 "third_party/libpg_query/grammar/statements/export.y"
                                {
					PGExportStmt *n = makeNode(PGExportStmt);
					n->database = (yyvsp[-3].str);
					n->filename = (yyvsp[-1].str);
					n->options = NIL;
					if ((yyvsp[0].list)) {
						n->options = list_concat(n->options, (yyvsp[0].list));
					}
					(yyval.node) = (PGNode *)n;
				}
#line 30858 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1388: /* ImportStmt: IMPORT_P DATABASE Sconst  */
#line 34 "third_party/libpg_query/grammar/statements/export.y"
                                {
					PGImportStmt *n = makeNode(PGImportStmt);
					n->filename = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 30868 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1389: /* DropStmt: DROP drop_type_any_name IF_P EXISTS any_name_list opt_drop_behavior  */
#line 10 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->missing_ok = true;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 30882 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1390: /* DropStmt: DROP drop_type_any_name any_name_list opt_drop_behavior  */
#line 20 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-2].objtype);
					n->missing_ok = false;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 30896 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1391: /* DropStmt: DROP drop_type_name IF_P EXISTS name_list opt_drop_behavior  */
#line 30 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->missing_ok = true;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 30910 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1392: /* DropStmt: DROP drop_type_name name_list opt_drop_behavior  */
#line 40 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-2].objtype);
					n->missing_ok = false;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 30924 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1393: /* DropStmt: DROP drop_type_name_on_any_name name ON any_name opt_drop_behavior  */
#line 50 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->objects = list_make1(lappend((yyvsp[-1].list), makeString((yyvsp[-3].str))));
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 30938 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1394: /* DropStmt: DROP drop_type_name_on_any_name IF_P EXISTS name ON any_name opt_drop_behavior  */
#line 60 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-6].objtype);
					n->objects = list_make1(lappend((yyvsp[-1].list), makeString((yyvsp[-3].str))));
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 30952 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1395: /* drop_type_any_name: TABLE  */
#line 73 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TABLE; }
#line 30958 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1396: /* drop_type_any_name: SEQUENCE  */
#line 74 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_SEQUENCE; }
#line 30964 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1397: /* drop_type_any_name: MODEL  */
#line 75 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_MODEL; }
#line 30970 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1398: /* drop_type_any_name: FUNCTION  */
#line 76 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FUNCTION; }
#line 30976 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1399: /* drop_type_any_name: MACRO  */
#line 77 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FUNCTION; }
#line 30982 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1400: /* drop_type_any_name: MACRO TABLE  */
#line 78 "third_party/libpg_query/grammar/statements/drop.y"
                                                                { (yyval.objtype) = PG_OBJECT_TABLE_MACRO; }
#line 30988 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1401: /* drop_type_any_name: VIEW  */
#line 79 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_VIEW; }
#line 30994 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1402: /* drop_type_any_name: MATERIALIZED VIEW  */
#line 80 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_MATVIEW; }
#line 31000 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1403: /* drop_type_any_name: INDEX  */
#line 81 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_INDEX; }
#line 31006 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1404: /* drop_type_any_name: FOREIGN TABLE  */
#line 82 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_FOREIGN_TABLE; }
#line 31012 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1405: /* drop_type_any_name: COLLATION  */
#line 83 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_COLLATION; }
#line 31018 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1406: /* drop_type_any_name: CONVERSION_P  */
#line 84 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_CONVERSION; }
#line 31024 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1407: /* drop_type_any_name: SCHEMA  */
#line 85 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_SCHEMA; }
#line 31030 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1408: /* drop_type_any_name: STATISTICS  */
#line 86 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_STATISTIC_EXT; }
#line 31036 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1409: /* drop_type_any_name: TEXT_P SEARCH PARSER  */
#line 87 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSPARSER; }
#line 31042 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1410: /* drop_type_any_name: TEXT_P SEARCH DICTIONARY  */
#line 88 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSDICTIONARY; }
#line 31048 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1411: /* drop_type_any_name: TEXT_P SEARCH TEMPLATE  */
#line 89 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSTEMPLATE; }
#line 31054 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1412: /* drop_type_any_name: TEXT_P SEARCH CONFIGURATION  */
#line 90 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.objtype) = PG_OBJECT_TSCONFIGURATION; }
#line 31060 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1413: /* drop_type_any_name: TYPE_P  */
#line 91 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TYPE; }
#line 31066 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1414: /* drop_type_name: ACCESS METHOD  */
#line 96 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_ACCESS_METHOD; }
#line 31072 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1415: /* drop_type_name: EVENT TRIGGER  */
#line 97 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_EVENT_TRIGGER; }
#line 31078 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1416: /* drop_type_name: EXTENSION  */
#line 98 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_EXTENSION; }
#line 31084 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1417: /* drop_type_name: FOREIGN DATA_P WRAPPER  */
#line 99 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_FDW; }
#line 31090 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1418: /* drop_type_name: PUBLICATION  */
#line 100 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_PUBLICATION; }
#line 31096 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1419: /* drop_type_name: SERVER  */
#line 101 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FOREIGN_SERVER; }
#line 31102 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1420: /* any_name_list: any_name  */
#line 106 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 31108 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1421: /* any_name_list: any_name_list ',' any_name  */
#line 107 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 31114 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1422: /* opt_drop_behavior: CASCADE  */
#line 112 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.dbehavior) = PG_DROP_CASCADE; }
#line 31120 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1423: /* opt_drop_behavior: RESTRICT  */
#line 113 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.dbehavior) = PG_DROP_RESTRICT; }
#line 31126 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1424: /* opt_drop_behavior: %empty  */
#line 114 "third_party/libpg_query/grammar/statements/drop.y"
                                                                { (yyval.dbehavior) = PG_DROP_RESTRICT; /* default */ }
#line 31132 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1425: /* drop_type_name_on_any_name: POLICY  */
#line 119 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_POLICY; }
#line 31138 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1426: /* drop_type_name_on_any_name: RULE  */
#line 120 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_RULE; }
#line 31144 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1427: /* drop_type_name_on_any_name: TRIGGER  */
#line 121 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TRIGGER; }
#line 31150 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1428: /* CreateTypeStmt: CREATE_P TYPE_P qualified_name AS ENUM_P select_with_parens  */
#line 8 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					PGCreateTypeStmt *n = makeNode(PGCreateTypeStmt);
					n->typeName = (yyvsp[-3].range);
					n->kind = PG_NEWTYPE_ENUM;
					n->query = (yyvsp[0].node);
					n->vals = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 31163 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1429: /* CreateTypeStmt: CREATE_P TYPE_P qualified_name AS ENUM_P '(' opt_enum_val_list ')'  */
#line 17 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					PGCreateTypeStmt *n = makeNode(PGCreateTypeStmt);
					n->typeName = (yyvsp[-5].range);
					n->kind = PG_NEWTYPE_ENUM;
					n->vals = (yyvsp[-1].list);
					n->query = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 31176 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1430: /* CreateTypeStmt: CREATE_P TYPE_P qualified_name AS Typename  */
#line 26 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					PGCreateTypeStmt *n = makeNode(PGCreateTypeStmt);
					n->typeName = (yyvsp[-2].range);
					n->query = NULL;
					auto name = std::string(reinterpret_cast<PGValue *>((yyvsp[0].typnam)->names->tail->data.ptr_value)->val.str);
					if (name == "enum") {
						n->kind = PG_NEWTYPE_ENUM;
						n->vals = (yyvsp[0].typnam)->typmods;
					} else {
						n->kind = PG_NEWTYPE_ALIAS;
						n->ofType = (yyvsp[0].typnam);
					}
					(yyval.node) = (PGNode *)n;
				}
#line 31195 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1431: /* opt_enum_val_list: enum_val_list  */
#line 46 "third_party/libpg_query/grammar/statements/create_type.y"
                                      { (yyval.list) = (yyvsp[0].list);}
#line 31201 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1432: /* opt_enum_val_list: %empty  */
#line 47 "third_party/libpg_query/grammar/statements/create_type.y"
                                                        {(yyval.list) = NIL;}
#line 31207 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1433: /* enum_val_list: Sconst  */
#line 51 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					(yyval.list) = list_make1(makeStringConst((yyvsp[0].str), (yylsp[0])));
				}
#line 31215 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1434: /* enum_val_list: enum_val_list ',' Sconst  */
#line 55 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), makeStringConst((yyvsp[0].str), (yylsp[0])));
				}
#line 31223 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1435: /* VariableResetStmt: RESET reset_rest  */
#line 3 "third_party/libpg_query/grammar/statements/variable_reset.y"
                        {
				(yyvsp[0].vsetstmt)->scope = VAR_SET_SCOPE_DEFAULT;
				(yyval.node) = (PGNode *) (yyvsp[0].vsetstmt);
			}
#line 31232 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1436: /* VariableResetStmt: RESET LOCAL reset_rest  */
#line 8 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					(yyvsp[0].vsetstmt)->scope = VAR_SET_SCOPE_LOCAL;
					(yyval.node) = (PGNode *) (yyvsp[0].vsetstmt);
				}
#line 31241 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1437: /* VariableResetStmt: RESET SESSION reset_rest  */
#line 13 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					(yyvsp[0].vsetstmt)->scope = VAR_SET_SCOPE_SESSION;
					(yyval.node) = (PGNode *) (yyvsp[0].vsetstmt);
				}
#line 31250 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1438: /* VariableResetStmt: RESET GLOBAL reset_rest  */
#line 18 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					(yyvsp[0].vsetstmt)->scope = VAR_SET_SCOPE_GLOBAL;
					(yyval.node) = (PGNode *) (yyvsp[0].vsetstmt);
				}
#line 31259 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1439: /* VariableResetStmt: RESET VARIABLE_P reset_rest  */
#line 23 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					(yyvsp[0].vsetstmt)->scope = VAR_SET_SCOPE_VARIABLE;
					(yyval.node) = (PGNode *) (yyvsp[0].vsetstmt);
				}
#line 31268 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1440: /* generic_reset: var_name  */
#line 32 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (yyvsp[0].str);
					(yyval.vsetstmt) = n;
				}
#line 31279 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1441: /* generic_reset: ALL  */
#line 39 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET_ALL;
					(yyval.vsetstmt) = n;
				}
#line 31289 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1442: /* reset_rest: generic_reset  */
#line 48 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                                                                        { (yyval.vsetstmt) = (yyvsp[0].vsetstmt); }
#line 31295 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1443: /* reset_rest: TIME ZONE  */
#line 50 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (char*) "timezone";
					(yyval.vsetstmt) = n;
				}
#line 31306 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1444: /* reset_rest: TRANSACTION ISOLATION LEVEL  */
#line 57 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (char*) "transaction_isolation";
					(yyval.vsetstmt) = n;
				}
#line 31317 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1445: /* InsertStmt: opt_with_clause INSERT opt_or_action INTO insert_target opt_by_name_or_position insert_rest opt_on_conflict returning_clause  */
#line 11 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].istmt)->relation = (yyvsp[-4].range);
					(yyvsp[-2].istmt)->onConflictAlias = (yyvsp[-6].onconflictshorthand);
					(yyvsp[-2].istmt)->onConflictClause = (yyvsp[-1].onconflict);
					(yyvsp[-2].istmt)->returningList = (yyvsp[0].list);
					(yyvsp[-2].istmt)->withClause = (yyvsp[-8].with);
					(yyvsp[-2].istmt)->insert_column_order = (yyvsp[-3].bynameorposition);
					(yyval.node) = (PGNode *) (yyvsp[-2].istmt);
				}
#line 31331 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1446: /* insert_rest: SelectStmt  */
#line 24 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 31341 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1447: /* insert_rest: OVERRIDING override_kind VALUE_P SelectStmt  */
#line 30 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->override = (yyvsp[-2].override);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 31352 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1448: /* insert_rest: '(' insert_column_list ')' SelectStmt  */
#line 37 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = (yyvsp[-2].list);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 31362 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1449: /* insert_rest: '(' insert_column_list ')' OVERRIDING override_kind VALUE_P SelectStmt  */
#line 43 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = (yyvsp[-5].list);
					(yyval.istmt)->override = (yyvsp[-2].override);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 31373 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1450: /* insert_rest: DEFAULT VALUES  */
#line 50 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->selectStmt = NULL;
				}
#line 31383 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1451: /* insert_target: qualified_name  */
#line 60 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.range) = (yyvsp[0].range);
				}
#line 31391 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1452: /* insert_target: qualified_name AS ColId  */
#line 64 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].range)->alias = makeAlias((yyvsp[0].str), NIL);
					(yyval.range) = (yyvsp[-2].range);
				}
#line 31400 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1453: /* opt_by_name_or_position: BY NAME_P  */
#line 71 "third_party/libpg_query/grammar/statements/insert.y"
                                                        { (yyval.bynameorposition) = PG_INSERT_BY_NAME; }
#line 31406 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1454: /* opt_by_name_or_position: BY POSITION  */
#line 72 "third_party/libpg_query/grammar/statements/insert.y"
                                                { (yyval.bynameorposition) = PG_INSERT_BY_POSITION; }
#line 31412 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1455: /* opt_by_name_or_position: %empty  */
#line 73 "third_party/libpg_query/grammar/statements/insert.y"
                                                { (yyval.bynameorposition) = PG_INSERT_BY_POSITION; }
#line 31418 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1456: /* opt_conf_expr: '(' index_params ')' where_clause  */
#line 78 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = makeNode(PGInferClause);
					(yyval.infer)->indexElems = (yyvsp[-2].list);
					(yyval.infer)->whereClause = (yyvsp[0].node);
					(yyval.infer)->conname = NULL;
					(yyval.infer)->location = (yylsp[-3]);
				}
#line 31430 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1457: /* opt_conf_expr: ON CONSTRAINT name  */
#line 87 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = makeNode(PGInferClause);
					(yyval.infer)->indexElems = NIL;
					(yyval.infer)->whereClause = NULL;
					(yyval.infer)->conname = (yyvsp[0].str);
					(yyval.infer)->location = (yylsp[-2]);
				}
#line 31442 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1458: /* opt_conf_expr: %empty  */
#line 95 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = NULL;
				}
#line 31450 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1459: /* opt_with_clause: with_clause  */
#line 102 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.with) = (yyvsp[0].with); }
#line 31456 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1460: /* opt_with_clause: %empty  */
#line 103 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.with) = NULL; }
#line 31462 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1461: /* insert_column_item: ColId opt_indirection  */
#line 109 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[-1].str);
					(yyval.target)->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.target)->val = NULL;
					(yyval.target)->location = (yylsp[-1]);
				}
#line 31474 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1462: /* set_clause: set_target '=' a_expr  */
#line 121 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].target)->val = (PGNode *) (yyvsp[0].node);
					(yyval.list) = list_make1((yyvsp[-2].target));
				}
#line 31483 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1463: /* set_clause: '(' set_target_list ')' '=' a_expr  */
#line 126 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					int ncolumns = list_length((yyvsp[-3].list));
					int i = 1;
					PGListCell *col_cell;

					/* Create a PGMultiAssignRef source for each target */
					foreach(col_cell, (yyvsp[-3].list))
					{
						PGResTarget *res_col = (PGResTarget *) lfirst(col_cell);
						PGMultiAssignRef *r = makeNode(PGMultiAssignRef);

						r->source = (PGNode *) (yyvsp[0].node);
						r->colno = i;
						r->ncolumns = ncolumns;
						res_col->val = (PGNode *) r;
						i++;
					}

					(yyval.list) = (yyvsp[-3].list);
				}
#line 31508 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1464: /* opt_or_action: OR REPLACE  */
#line 151 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflictshorthand) = PG_ONCONFLICT_ALIAS_REPLACE;
				}
#line 31516 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1465: /* opt_or_action: OR IGNORE_P  */
#line 156 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflictshorthand) = PG_ONCONFLICT_ALIAS_IGNORE;
				}
#line 31524 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1466: /* opt_or_action: %empty  */
#line 160 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflictshorthand) = PG_ONCONFLICT_ALIAS_NONE;
				}
#line 31532 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1467: /* opt_on_conflict: ON CONFLICT opt_conf_expr DO UPDATE SET set_clause_list_opt_comma where_clause  */
#line 167 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = makeNode(PGOnConflictClause);
					(yyval.onconflict)->action = PG_ONCONFLICT_UPDATE;
					(yyval.onconflict)->infer = (yyvsp[-5].infer);
					(yyval.onconflict)->targetList = (yyvsp[-1].list);
					(yyval.onconflict)->whereClause = (yyvsp[0].node);
					(yyval.onconflict)->location = (yylsp[-7]);
				}
#line 31545 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1468: /* opt_on_conflict: ON CONFLICT opt_conf_expr DO NOTHING  */
#line 177 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = makeNode(PGOnConflictClause);
					(yyval.onconflict)->action = PG_ONCONFLICT_NOTHING;
					(yyval.onconflict)->infer = (yyvsp[-2].infer);
					(yyval.onconflict)->targetList = NIL;
					(yyval.onconflict)->whereClause = NULL;
					(yyval.onconflict)->location = (yylsp[-4]);
				}
#line 31558 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1469: /* opt_on_conflict: %empty  */
#line 186 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = NULL;
				}
#line 31566 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1470: /* index_elem: ColId opt_collate opt_class opt_asc_desc opt_nulls_order  */
#line 193 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = (yyvsp[-4].str);
					(yyval.ielem)->expr = NULL;
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 31581 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1471: /* index_elem: func_expr_windowless opt_collate opt_class opt_asc_desc opt_nulls_order  */
#line 204 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = NULL;
					(yyval.ielem)->expr = (yyvsp[-4].node);
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 31596 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1472: /* index_elem: '(' a_expr ')' opt_collate opt_class opt_asc_desc opt_nulls_order  */
#line 215 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = NULL;
					(yyval.ielem)->expr = (yyvsp[-5].node);
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 31611 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1473: /* returning_clause: RETURNING target_list  */
#line 229 "third_party/libpg_query/grammar/statements/insert.y"
                                                        { (yyval.list) = (yyvsp[0].list); }
#line 31617 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1474: /* returning_clause: %empty  */
#line 230 "third_party/libpg_query/grammar/statements/insert.y"
                                                                { (yyval.list) = NIL; }
#line 31623 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1475: /* override_kind: USER  */
#line 236 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.override) = PG_OVERRIDING_USER_VALUE; }
#line 31629 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1476: /* override_kind: SYSTEM_P  */
#line 237 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.override) = OVERRIDING_SYSTEM_VALUE; }
#line 31635 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1477: /* set_target_list: set_target  */
#line 242 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 31641 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1478: /* set_target_list: set_target_list ',' set_target  */
#line 243 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list),(yyvsp[0].target)); }
#line 31647 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1479: /* opt_collate: COLLATE any_name  */
#line 249 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 31653 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1480: /* opt_collate: %empty  */
#line 250 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = NIL; }
#line 31659 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1481: /* opt_class: any_name  */
#line 254 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 31665 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1482: /* opt_class: %empty  */
#line 255 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = NIL; }
#line 31671 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1483: /* insert_column_list: insert_column_item  */
#line 261 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 31677 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1484: /* insert_column_list: insert_column_list ',' insert_column_item  */
#line 263 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].target)); }
#line 31683 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1485: /* set_clause_list: set_clause  */
#line 268 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 31689 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1486: /* set_clause_list: set_clause_list ',' set_clause  */
#line 269 "third_party/libpg_query/grammar/statements/insert.y"
                                                                { (yyval.list) = list_concat((yyvsp[-2].list),(yyvsp[0].list)); }
#line 31695 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1487: /* set_clause_list_opt_comma: set_clause_list  */
#line 273 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 31701 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1488: /* set_clause_list_opt_comma: set_clause_list ','  */
#line 274 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 31707 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1489: /* index_params: index_elem  */
#line 277 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].ielem)); }
#line 31713 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1490: /* index_params: index_params ',' index_elem  */
#line 278 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].ielem)); }
#line 31719 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1491: /* set_target: ColId opt_indirection  */
#line 284 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[-1].str);
					(yyval.target)->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.target)->val = NULL;	/* upper production sets this */
					(yyval.target)->location = (yylsp[-1]);
				}
#line 31731 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1492: /* DropSecretStmt: DROP opt_persist SECRET ColId opt_storage_drop_specifier  */
#line 8 "third_party/libpg_query/grammar/statements/drop_secret.y"
                                {
					PGDropSecretStmt *n = makeNode(PGDropSecretStmt);
					n->persist_type = (yyvsp[-3].str);
					n->secret_name = (yyvsp[-1].str);
					n->secret_storage = (yyvsp[0].str);
					n->missing_ok  = false;
					(yyval.node) = (PGNode *)n;
				}
#line 31744 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1493: /* DropSecretStmt: DROP opt_persist SECRET IF_P EXISTS ColId opt_storage_drop_specifier  */
#line 17 "third_party/libpg_query/grammar/statements/drop_secret.y"
                {
                    PGDropSecretStmt *n = makeNode(PGDropSecretStmt);
                    n->persist_type = (yyvsp[-5].str);
                    n->secret_name = (yyvsp[-1].str);
                    n->secret_storage = (yyvsp[0].str);
                    n->missing_ok  = true;
                    (yyval.node) = (PGNode *)n;
                }
#line 31757 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1494: /* opt_storage_drop_specifier: %empty  */
#line 28 "third_party/libpg_query/grammar/statements/drop_secret.y"
                                                    { (yyval.str) = pstrdup(""); }
#line 31763 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1495: /* opt_storage_drop_specifier: FROM IDENT  */
#line 29 "third_party/libpg_query/grammar/statements/drop_secret.y"
                                                    { (yyval.str) = (yyvsp[0].str); }
#line 31769 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1496: /* ExplainStmt: EXPLAIN ExplainableStmt  */
#line 10 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = NIL;
					(yyval.node) = (PGNode *) n;
				}
#line 31780 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1497: /* ExplainStmt: EXPLAIN analyze_keyword opt_verbose ExplainableStmt  */
#line 17 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = list_make1(makeDefElem("analyze", NULL, (yylsp[-2])));
					if ((yyvsp[-1].boolean))
						n->options = lappend(n->options,
											 makeDefElem("verbose", NULL, (yylsp[-1])));
					(yyval.node) = (PGNode *) n;
				}
#line 31794 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1498: /* ExplainStmt: EXPLAIN VERBOSE ExplainableStmt  */
#line 27 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = list_make1(makeDefElem("verbose", NULL, (yylsp[-1])));
					(yyval.node) = (PGNode *) n;
				}
#line 31805 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1499: /* ExplainStmt: EXPLAIN '(' explain_option_list ')' ExplainableStmt  */
#line 34 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = (yyvsp[-2].list);
					(yyval.node) = (PGNode *) n;
				}
#line 31816 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1500: /* opt_verbose: VERBOSE  */
#line 44 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.boolean) = true; }
#line 31822 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1501: /* opt_verbose: %empty  */
#line 45 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.boolean) = false; }
#line 31828 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1502: /* explain_option_arg: opt_boolean_or_string  */
#line 50 "third_party/libpg_query/grammar/statements/explain.y"
                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 31834 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1503: /* explain_option_arg: NumericOnly  */
#line 51 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.node) = (PGNode *) (yyvsp[0].value); }
#line 31840 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1504: /* explain_option_arg: %empty  */
#line 52 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.node) = NULL; }
#line 31846 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1537: /* NonReservedWord: IDENT  */
#line 92 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 31852 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1538: /* NonReservedWord: unreserved_keyword  */
#line 93 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 31858 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1539: /* NonReservedWord: other_keyword  */
#line 94 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 31864 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1540: /* NonReservedWord_or_Sconst: NonReservedWord  */
#line 99 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 31870 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1541: /* NonReservedWord_or_Sconst: Sconst  */
#line 100 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 31876 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1542: /* explain_option_list: explain_option_elem  */
#line 106 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 31884 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1543: /* explain_option_list: explain_option_list ',' explain_option_elem  */
#line 110 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 31892 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1544: /* analyze_keyword: ANALYZE  */
#line 117 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                {}
#line 31898 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1545: /* analyze_keyword: ANALYSE  */
#line 118 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                {}
#line 31904 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1546: /* opt_boolean_or_string: TRUE_P  */
#line 123 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "true"; }
#line 31910 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1547: /* opt_boolean_or_string: FALSE_P  */
#line 124 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "false"; }
#line 31916 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1548: /* opt_boolean_or_string: ON  */
#line 125 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "on"; }
#line 31922 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1549: /* opt_boolean_or_string: NonReservedWord_or_Sconst  */
#line 131 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 31928 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1550: /* explain_option_elem: explain_option_name explain_option_arg  */
#line 137 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 31936 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1551: /* explain_option_name: NonReservedWord  */
#line 144 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.str) = (yyvsp[0].str); }
#line 31942 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1552: /* explain_option_name: analyze_keyword  */
#line 145 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.str) = (char*) "analyze"; }
#line 31948 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1553: /* DeleteStmt: opt_with_clause DELETE_P FROM relation_expr_opt_alias using_clause where_or_current_clause returning_clause  */
#line 9 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGDeleteStmt *n = makeNode(PGDeleteStmt);
					n->relation = (yyvsp[-3].range);
					n->usingClause = (yyvsp[-2].list);
					n->whereClause = (yyvsp[-1].node);
					n->returningList = (yyvsp[0].list);
					n->withClause = (yyvsp[-6].with);
					(yyval.node) = (PGNode *)n;
				}
#line 31962 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1554: /* DeleteStmt: TRUNCATE opt_table relation_expr_opt_alias  */
#line 19 "third_party/libpg_query/grammar/statements/delete.y"
                            {
					PGDeleteStmt *n = makeNode(PGDeleteStmt);
					n->relation = (yyvsp[0].range);
					n->usingClause = NULL;
					n->whereClause = NULL;
					n->returningList = NULL;
					n->withClause = NULL;
					(yyval.node) = (PGNode *)n;
			    }
#line 31976 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1555: /* relation_expr_opt_alias: relation_expr  */
#line 32 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					(yyval.range) = (yyvsp[0].range);
				}
#line 31984 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1556: /* relation_expr_opt_alias: relation_expr ColId  */
#line 36 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGAlias *alias = makeNode(PGAlias);
					alias->aliasname = (yyvsp[0].str);
					(yyvsp[-1].range)->alias = alias;
					(yyval.range) = (yyvsp[-1].range);
				}
#line 31995 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1557: /* relation_expr_opt_alias: relation_expr AS ColId  */
#line 43 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGAlias *alias = makeNode(PGAlias);
					alias->aliasname = (yyvsp[0].str);
					(yyvsp[-2].range)->alias = alias;
					(yyval.range) = (yyvsp[-2].range);
				}
#line 32006 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1558: /* where_or_current_clause: WHERE a_expr  */
#line 53 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 32012 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1559: /* where_or_current_clause: %empty  */
#line 54 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                                { (yyval.node) = NULL; }
#line 32018 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1560: /* using_clause: USING from_list_opt_comma  */
#line 60 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 32024 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1561: /* using_clause: %empty  */
#line 61 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                                { (yyval.list) = NIL; }
#line 32030 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;


#line 32034 "third_party/libpg_query/grammar/grammar_out.cpp"

      default: break;
    }
  /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT ("-> $$ =", YY_CAST (yysymbol_kind_t, yyr1[yyn]), &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;

  *++yyvsp = yyval;
  *++yylsp = yyloc;

  /* Now 'shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */
  {
    const int yylhs = yyr1[yyn] - YYNTOKENS;
    const int yyi = yypgoto[yylhs] + *yyssp;
    yystate = (0 <= yyi && yyi <= YYLAST && yycheck[yyi] == *yyssp
               ? yytable[yyi]
               : yydefgoto[yylhs]);
  }

  goto yynewstate;


/*--------------------------------------.
| yyerrlab -- here on detecting error.  |
`--------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYSYMBOL_YYEMPTY : YYTRANSLATE (yychar);
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
      yyerror (&yylloc, yyscanner, YY_("syntax error"));
    }

  yyerror_range[1] = yylloc;
  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
         error, discard it.  */

      if (yychar <= YYEOF)
        {
          /* Return failure if at end of input.  */
          if (yychar == YYEOF)
            YYABORT;
        }
      else
        {
          yydestruct ("Error: discarding",
                      yytoken, &yylval, &yylloc, yyscanner);
          yychar = YYEMPTY;
        }
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:
  /* Pacify compilers when the user code never invokes YYERROR and the
     label yyerrorlab therefore never appears in user code.  */
  if (0)
    YYERROR;
  ++yynerrs;

  /* Do not reclaim the symbols of the rule whose action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;      /* Each real token shifted decrements this.  */

  /* Pop stack until we find a state that shifts the error token.  */
  for (;;)
    {
      yyn = yypact[yystate];
      if (!yypact_value_is_default (yyn))
        {
          yyn += YYSYMBOL_YYerror;
          if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYSYMBOL_YYerror)
            {
              yyn = yytable[yyn];
              if (0 < yyn)
                break;
            }
        }

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
        YYABORT;

      yyerror_range[1] = *yylsp;
      yydestruct ("Error: popping",
                  YY_ACCESSING_SYMBOL (yystate), yyvsp, yylsp, yyscanner);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END

  yyerror_range[2] = yylloc;
  ++yylsp;
  YYLLOC_DEFAULT (*yylsp, yyerror_range, 2);

  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", YY_ACCESSING_SYMBOL (yyn), yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturnlab;


/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturnlab;


/*-----------------------------------------------------------.
| yyexhaustedlab -- YYNOMEM (memory exhaustion) comes here.  |
`-----------------------------------------------------------*/
yyexhaustedlab:
  yyerror (&yylloc, yyscanner, YY_("memory exhausted"));
  yyresult = 2;
  goto yyreturnlab;


/*----------------------------------------------------------.
| yyreturnlab -- parsing is finished, clean up and return.  |
`----------------------------------------------------------*/
yyreturnlab:
  if (yychar != YYEMPTY)
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct ("Cleanup: discarding lookahead",
                  yytoken, &yylval, &yylloc, yyscanner);
    }
  /* Do not reclaim the symbols of the rule whose action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
                  YY_ACCESSING_SYMBOL (+*yyssp), yyvsp, yylsp, yyscanner);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif

  return yyresult;
}

#line 74 "third_party/libpg_query/grammar/statements/delete.y"


#line 1 "third_party/libpg_query/grammar/grammar.cpp"
/*
 * The signature of this function is required by bison.  However, we
 * ignore the passed yylloc and instead use the last token position
 * available from the scanner.
 */
static void
base_yyerror(YYLTYPE *yylloc, core_yyscan_t yyscanner, const char *msg)
{
	parser_yyerror(msg);
}

static PGRawStmt *
makeRawStmt(PGNode *stmt, int stmt_location)
{
	PGRawStmt    *rs = makeNode(PGRawStmt);

	rs->stmt = stmt;
	rs->stmt_location = stmt_location;
	rs->stmt_len = 0;			/* might get changed later */
	return rs;
}

/* Adjust a PGRawStmt to reflect that it doesn't run to the end of the string */
static void
updateRawStmtEnd(PGRawStmt *rs, int end_location)
{
	/*
	 * If we already set the length, don't change it.  This is for situations
	 * like "select foo ;; select bar" where the same statement will be last
	 * in the string for more than one semicolon.
	 */
	if (rs->stmt_len > 0)
		return;

	/* OK, update length of PGRawStmt */
	rs->stmt_len = end_location - rs->stmt_location;
}

static PGNode *
makeColumnRef(char *colname, PGList *indirection,
			  int location, core_yyscan_t yyscanner)
{
	/*
	 * Generate a PGColumnRef node, with an PGAIndirection node added if there
	 * is any subscripting in the specified indirection list.  However,
	 * any field selection at the start of the indirection list must be
	 * transposed into the "fields" part of the PGColumnRef node.
	 */
	PGColumnRef  *c = makeNode(PGColumnRef);
	int		nfields = 0;
	PGListCell *l;

	c->location = location;
	foreach(l, indirection)
	{
		if (IsA(lfirst(l), PGAIndices))
		{
			PGAIndirection *i = makeNode(PGAIndirection);

			if (nfields == 0)
			{
				/* easy case - all indirection goes to PGAIndirection */
				c->fields = list_make1(makeString(colname));
				i->indirection = check_indirection(indirection, yyscanner);
			}
			else
			{
				/* got to split the list in two */
				i->indirection = check_indirection(list_copy_tail(indirection,
																  nfields),
												   yyscanner);
				indirection = list_truncate(indirection, nfields);
				c->fields = lcons(makeString(colname), indirection);
			}
			i->arg = (PGNode *) c;
			return (PGNode *) i;
		}
		else if (IsA(lfirst(l), PGAStar))
		{
			/* We only allow '*' at the end of a PGColumnRef */
			if (lnext(l) != NULL)
				parser_yyerror("improper use of \"*\"");
		}
		nfields++;
	}
	/* No subscripting, so all indirection gets added to field list */
	c->fields = lcons(makeString(colname), indirection);
	return (PGNode *) c;
}

static PGNode *
makeTypeCast(PGNode *arg, PGTypeName *tpname, int trycast, int location)
{
	PGTypeCast *n = makeNode(PGTypeCast);
	n->arg = arg;
	n->typeName = tpname;
	n->tryCast = trycast;
	n->location = location;
	return (PGNode *) n;
}

static PGNode *
makeStringConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGString;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeStringConstCast(char *str, int location, PGTypeName *tpname)
{
	PGNode *s = makeStringConst(str, location);

	return makeTypeCast(s, tpname, 0, -1);
}

static PGNode *
makeIntervalNode(char *str, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGString;
	n->sval = str;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;

}

static PGNode *
makeIntervalNode(int val, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGInteger;
	n->ival = val;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;
}

static PGNode *
makeIntervalNode(PGNode *arg, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGAExpr;
	n->eval = arg;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;
}

static PGNode *
makeSampleSize(PGValue *sample_size, bool is_percentage) {
	PGSampleSize *n = makeNode(PGSampleSize);

	n->sample_size = *sample_size;
	n->is_percentage = is_percentage;

	return (PGNode *)n;
}

static PGNode *
makeSampleOptions(PGNode *sample_size, char *method, int *seed, int location) {
	PGSampleOptions *n = makeNode(PGSampleOptions);

	n->sample_size = sample_size;
	n->method = method;
	if (seed) {
		n->has_seed = true;
		n->seed = *seed;
	}
	n->location = location;

	return (PGNode *)n;
}

/* makeLimitPercent()
 * Make limit percent node
 */
static PGNode *
makeLimitPercent(PGNode *limit_percent) {
	PGLimitPercent *n = makeNode(PGLimitPercent);

	n->limit_percent = limit_percent;

	return (PGNode *)n;
}

static PGNode *
makeIntConst(int val, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGInteger;
	n->val.val.ival = val;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeFloatConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGFloat;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeBitStringConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGBitString;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeNullAConst(int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGNull;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeAConst(PGValue *v, int location)
{
	PGNode *n;

	switch (v->type)
	{
		case T_PGFloat:
			n = makeFloatConst(v->val.str, location);
			break;

		case T_PGInteger:
			n = makeIntConst(v->val.ival, location);
			break;

		case T_PGString:
		default:
			n = makeStringConst(v->val.str, location);
			break;
	}

	return n;
}

/* makeBoolAConst()
 * Create an PGAConst string node and put it inside a boolean cast.
 */
static PGNode *
makeBoolAConst(bool state, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGString;
	n->val.val.str = (state ? (char*) "t" : (char*) "f");
	n->location = location;

	return makeTypeCast((PGNode *)n, SystemTypeName("bool"), 0, -1);
}

/* check_qualified_name --- check the result of qualified_name production
 *
 * It's easiest to let the grammar production for qualified_name allow
 * subscripts and '*', which we then must reject here.
 */
static void
check_qualified_name(PGList *names, core_yyscan_t yyscanner)
{
	PGListCell   *i;

	foreach(i, names)
	{
		if (!IsA(lfirst(i), PGString))
			parser_yyerror("syntax error");
	}
}

/* check_func_name --- check the result of func_name production
 *
 * It's easiest to let the grammar production for func_name allow subscripts
 * and '*', which we then must reject here.
 */
static PGList *
check_func_name(PGList *names, core_yyscan_t yyscanner)
{
	PGListCell   *i;

	foreach(i, names)
	{
		if (!IsA(lfirst(i), PGString))
			parser_yyerror("syntax error");
	}
	return names;
}

/* check_indirection --- check the result of indirection production
 *
 * We only allow '*' at the end of the list, but it's hard to enforce that
 * in the grammar, so do it here.
 */
static PGList *
check_indirection(PGList *indirection, core_yyscan_t yyscanner)
{
	PGListCell *l;

	foreach(l, indirection)
	{
		if (IsA(lfirst(l), PGAStar))
		{
			if (lnext(l) != NULL)
				parser_yyerror("improper use of \"*\"");
		}
	}
	return indirection;
}

/* makeParamRef
 * Creates a new PGParamRef node
 */
static PGNode* makeParamRef(int number, int location)
{
	PGParamRef *p = makeNode(PGParamRef);
	p->number = number;
	p->location = location;
	p->name = NULL;
	return (PGNode *) p;
}

/* makeNamedParamRef
 * Creates a new PGParamRef node
 */
static PGNode* makeNamedParamRef(char *name, int location)
{
	PGParamRef *p = (PGParamRef *)makeParamRef(0, location);
	p->name = name;
	return (PGNode *) p;
}


/* insertSelectOptions()
 * Insert ORDER BY, etc into an already-constructed SelectStmt.
 *
 * This routine is just to avoid duplicating code in PGSelectStmt productions.
 */
static void
insertSelectOptions(PGSelectStmt *stmt,
					PGList *sortClause, PGList *lockingClause,
					PGNode *limitOffset, PGNode *limitCount,
					PGWithClause *withClause,
					core_yyscan_t yyscanner)
{
	if (stmt->type != T_PGSelectStmt) {
		ereport(ERROR,
				(errcode(PG_ERRCODE_SYNTAX_ERROR),
						errmsg("DESCRIBE/SHOW/SUMMARIZE with CTE/ORDER BY/... not allowed - wrap the statement in a subquery instead"),
						parser_errposition(exprLocation((PGNode *) stmt))));
	}
	Assert(IsA(stmt, PGSelectStmt));

	/*
	 * Tests here are to reject constructs like
	 *	(SELECT foo ORDER BY bar) ORDER BY baz
	 */
	if (sortClause)
	{
		if (stmt->sortClause)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple ORDER BY clauses not allowed"),
					 parser_errposition(exprLocation((PGNode *) sortClause))));
		stmt->sortClause = sortClause;
	}
	/* We can handle multiple locking clauses, though */
	stmt->lockingClause = list_concat(stmt->lockingClause, lockingClause);
	if (limitOffset)
	{
		if (stmt->limitOffset)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple OFFSET clauses not allowed"),
					 parser_errposition(exprLocation(limitOffset))));
		stmt->limitOffset = limitOffset;
	}
	if (limitCount)
	{
		if (stmt->limitCount)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple LIMIT clauses not allowed"),
					 parser_errposition(exprLocation(limitCount))));
		stmt->limitCount = limitCount;
	}
	if (withClause)
	{
		if (stmt->withClause)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple WITH clauses not allowed"),
					 parser_errposition(exprLocation((PGNode *) withClause))));
		stmt->withClause = withClause;
	}
}

static PGNode *
makeSetOp(PGSetOperation op, bool all, PGNode *larg, PGNode *rarg)
{
	PGSelectStmt *n = makeNode(PGSelectStmt);

	n->op = op;
	n->all = all;
	n->larg = larg;
	n->rarg = rarg;
	return (PGNode *) n;
}

/* SystemFuncName()
 * Build a properly-qualified reference to a built-in function.
 */
PGList *
SystemFuncName(const char *name)
{
	return list_make2(makeString(DEFAULT_SCHEMA), makeString(name));
}

/* SystemTypeName()
 * Build a properly-qualified reference to a built-in type.
 *
 * typmod is defaulted, but may be changed afterwards by caller.
 * Likewise for the location.
 */
PGTypeName *
SystemTypeName(const char *name)
{
	return makeTypeNameFromNameList(list_make1(makeString(name)));
}

/* doNegate()
 * Handle negation of a numeric constant.
 *
 * Formerly, we did this here because the optimizer couldn't cope with
 * indexquals that looked like "var = -4" --- it wants "var = const"
 * and a unary minus operator applied to a constant didn't qualify.
 * As of Postgres 7.0, that problem doesn't exist anymore because there
 * is a constant-subexpression simplifier in the optimizer.  However,
 * there's still a good reason for doing this here, which is that we can
 * postpone committing to a particular internal representation for simple
 * negative constants.	It's better to leave "-123.456" in string form
 * until we know what the desired type is.
 */
static PGNode *
doNegate(PGNode *n, int location)
{
	if (IsA(n, PGAConst))
	{
		PGAConst *con = (PGAConst *)n;

		/* report the constant's location as that of the '-' sign */
		con->location = location;

		if (con->val.type == T_PGInteger)
		{
			con->val.val.ival = -con->val.val.ival;
			return n;
		}
		if (con->val.type == T_PGFloat)
		{
			doNegateFloat(&con->val);
			return n;
		}
	}

	return (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", NULL, n, location);
}

static void
doNegateFloat(PGValue *v)
{
	char   *oldval = v->val.str;

	Assert(IsA(v, PGFloat));
	if (*oldval == '+')
		oldval++;
	if (*oldval == '-')
		v->val.str = oldval+1;	/* just strip the '-' */
	else
		v->val.str = psprintf("-%s", oldval);
}

static PGNode *
makeAndExpr(PGNode *lexpr, PGNode *rexpr, int location)
{
	PGNode	   *lexp = lexpr;

	/* Look through AEXPR_PAREN nodes so they don't affect flattening */
	while (IsA(lexp, PGAExpr) &&
		   ((PGAExpr *) lexp)->kind == AEXPR_PAREN)
		lexp = ((PGAExpr *) lexp)->lexpr;
	/* Flatten "a AND b AND c ..." to a single PGBoolExpr on sight */
	if (IsA(lexp, PGBoolExpr))
	{
		PGBoolExpr *blexpr = (PGBoolExpr *) lexp;

		if (blexpr->boolop == PG_AND_EXPR)
		{
			blexpr->args = lappend(blexpr->args, rexpr);
			return (PGNode *) blexpr;
		}
	}
	return (PGNode *) makeBoolExpr(PG_AND_EXPR, list_make2(lexpr, rexpr), location);
}

static PGNode *
makeOrExpr(PGNode *lexpr, PGNode *rexpr, int location)
{
	PGNode	   *lexp = lexpr;

	/* Look through AEXPR_PAREN nodes so they don't affect flattening */
	while (IsA(lexp, PGAExpr) &&
		   ((PGAExpr *) lexp)->kind == AEXPR_PAREN)
		lexp = ((PGAExpr *) lexp)->lexpr;
	/* Flatten "a OR b OR c ..." to a single PGBoolExpr on sight */
	if (IsA(lexp, PGBoolExpr))
	{
		PGBoolExpr *blexpr = (PGBoolExpr *) lexp;

		if (blexpr->boolop == PG_OR_EXPR)
		{
			blexpr->args = lappend(blexpr->args, rexpr);
			return (PGNode *) blexpr;
		}
	}
	return (PGNode *) makeBoolExpr(PG_OR_EXPR, list_make2(lexpr, rexpr), location);
}

static PGNode *
makeNotExpr(PGNode *expr, int location)
{
	return (PGNode *) makeBoolExpr(PG_NOT_EXPR, list_make1(expr), location);
}

/* Separate PGConstraint nodes from COLLATE clauses in a */
static void
SplitColQualList(PGList *qualList,
				 PGList **constraintList, PGCollateClause **collClause,
				 core_yyscan_t yyscanner)
{
	PGListCell   *cell;
	PGListCell   *prev;
	PGListCell   *next;

	*collClause = NULL;
	prev = NULL;
	for (cell = list_head(qualList); cell; cell = next)
	{
		PGNode   *n = (PGNode *) lfirst(cell);

		next = lnext(cell);
		if (IsA(n, PGConstraint))
		{
			/* keep it in list */
			prev = cell;
			continue;
		}
		if (IsA(n, PGCollateClause))
		{
			PGCollateClause *c = (PGCollateClause *) n;

			if (*collClause)
				ereport(ERROR,
						(errcode(PG_ERRCODE_SYNTAX_ERROR),
						 errmsg("multiple COLLATE clauses not allowed"),
						 parser_errposition(c->location)));
			*collClause = c;
		}
		else
			elog(ERROR, "unexpected node type %d", (int) n->type);
		/* remove non-Constraint nodes from qualList */
		qualList = list_delete_cell(qualList, cell, prev);
	}
	*constraintList = qualList;
}

/*
 * Process result of ConstraintAttributeSpec, and set appropriate bool flags
 * in the output command node.  Pass NULL for any flags the particular
 * command doesn't support.
 */
static void
processCASbits(int cas_bits, int location, const char *constrType,
			   bool *deferrable, bool *initdeferred, bool *not_valid,
			   bool *no_inherit, core_yyscan_t yyscanner)
{
	/* defaults */
	if (deferrable)
		*deferrable = false;
	if (initdeferred)
		*initdeferred = false;
	if (not_valid)
		*not_valid = false;

	if (cas_bits & (CAS_DEFERRABLE | CAS_INITIALLY_DEFERRED))
	{
		if (deferrable)
			*deferrable = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked DEFERRABLE",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_INITIALLY_DEFERRED)
	{
		if (initdeferred)
			*initdeferred = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked DEFERRABLE",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_NOT_VALID)
	{
		if (not_valid)
			*not_valid = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked NOT VALID",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_NO_INHERIT)
	{
		if (no_inherit)
			*no_inherit = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked NO INHERIT",
							constrType),
					 parser_errposition(location)));
	}
}

/*----------
 * Recursive view transformation
 *
 * Convert
 *
 *     CREATE RECURSIVE VIEW relname (aliases) AS query
 *
 * to
 *
 *     CREATE VIEW relname (aliases) AS
 *         WITH RECURSIVE relname (aliases) AS (query)
 *         SELECT aliases FROM relname
 *
 * Actually, just the WITH ... part, which is then inserted into the original
 * view as the query.
 * ----------
 */
static PGNode *
makeRecursiveViewSelect(char *relname, PGList *aliases, PGNode *query)
{
	PGSelectStmt *s = makeNode(PGSelectStmt);
	PGWithClause *w = makeNode(PGWithClause);
	PGCommonTableExpr *cte = makeNode(PGCommonTableExpr);
	PGList	   *tl = NIL;
	PGListCell   *lc;

	/* create common table expression */
	cte->ctename = relname;
	cte->aliascolnames = aliases;
	cte->ctequery = query;
	cte->location = -1;

	/* create WITH clause and attach CTE */
	w->recursive = true;
	w->ctes = list_make1(cte);
	w->location = -1;

	/* create target list for the new SELECT from the alias list of the
	 * recursive view specification */
	foreach (lc, aliases)
	{
		PGResTarget *rt = makeNode(PGResTarget);

		rt->name = NULL;
		rt->indirection = NIL;
		rt->val = makeColumnRef(strVal(lfirst(lc)), NIL, -1, 0);
		rt->location = -1;

		tl = lappend(tl, rt);
	}

	/* create new SELECT combining WITH clause, target list, and fake FROM
	 * clause */
	s->withClause = w;
	s->targetList = tl;
	s->fromClause = list_make1(makeRangeVar(NULL, relname, -1));

	return (PGNode *) s;
}

/* parser_init()
 * Initialize to parse one query string
 */
void
parser_init(base_yy_extra_type *yyext)
{
	yyext->parsetree = NIL;		/* in case grammar forgets to set it */
}

#undef yyparse
#undef yylex
#undef yyerror
#undef yylval
#undef yychar
#undef yydebug
#undef yynerrs
#undef yylloc

} // namespace duckdb_libpgquery
