/* A Bison parser, made by GNU Bison 3.8.2.  */

/* Bison implementation for Yacc-like parsers in C

   Copyright (C) 1984, 1989-1990, 2000-2015, 2018-2021 Free Software Foundation,
   Inc.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <https://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* DO NOT RELY ON FEATURES THAT ARE NOT DOCUMENTED in the manual,
   especially those whose name start with YY_ or yy_.  They are
   private implementation details that can be changed or removed.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output, and Bison version.  */
#define YYBISON 30802

/* Bison version string.  */
#define YYBISON_VERSION "3.8.2"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1


/* Substitute the variable and function names.  */
#define yyparse         base_yyparse
#define yylex           base_yylex
#define yyerror         base_yyerror
#define yydebug         base_yydebug
#define yynerrs         base_yynerrs

/* First part of user prologue.  */
#line 1 "third_party/libpg_query/grammar/grammar.y.tmp"

#line 1 "third_party/libpg_query/grammar/grammar.hpp"
/*#define YYDEBUG 1*/
/*-------------------------------------------------------------------------
 *
 * gram.y
 *	  POSTGRESQL BISON rules/actions
 *
 * Portions Copyright (c) 1996-2017, PostgreSQL Global Development PGGroup
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *	  src/backend/parser/gram.y
 *
 * HISTORY
 *	  AUTHOR			DATE			MAJOR EVENT
 *	  Andrew Yu			Sept, 1994		POSTQUEL to SQL conversion
 *	  Andrew Yu			Oct, 1994		lispy code conversion
 *
 * NOTES
 *	  CAPITALS are used to represent terminal symbols.
 *	  non-capitals are used to represent non-terminals.
 *
 *	  In general, nothing in this file should initiate database accesses
 *	  nor depend on changeable state (such as SET variables).  If you do
 *	  database accesses, your code will fail when we have aborted the
 *	  current transaction and are just parsing commands to find the next
 *	  ROLLBACK or COMMIT.  If you make use of SET variables, then you
 *	  will do the wrong thing in multi-query strings like this:
 *			SET constraint_exclusion TO off; SELECT * FROM foo;
 *	  because the entire string is parsed by gram.y before the SET gets
 *	  executed.  Anything that depends on the database or changeable state
 *	  should be handled during parse analysis so that it happens at the
 *	  right time not the wrong time.
 *
 * WARNINGS
 *	  If you use a list, make sure the datum is a node so that the printing
 *	  routines work.
 *
 *	  Sometimes we assign constants to makeStrings. Make sure we don't free
 *	  those.
 *
 *-------------------------------------------------------------------------
 */
#include "pg_functions.hpp"
#include <string.h>

#include <ctype.h>
#include <limits.h>

#include "nodes/makefuncs.hpp"
#include "nodes/nodeFuncs.hpp"
#include "parser/gramparse.hpp"
#include "parser/parser.hpp"
#include "utils/datetime.hpp"

namespace duckdb_libpgquery {
#define DEFAULT_SCHEMA "main"

/*
 * Location tracking support --- simpler than bison's default, since we only
 * want to track the start position not the end position of each nonterminal.
 */
#define YYLLOC_DEFAULT(Current, Rhs, N) \
	do { \
		if ((N) > 0) \
			(Current) = (Rhs)[1]; \
		else \
			(Current) = (-1); \
	} while (0)

/*
 * The above macro assigns -1 (unknown) as the parse location of any
 * nonterminal that was reduced from an empty rule, or whose leftmost
 * component was reduced from an empty rule.  This is problematic
 * for nonterminals defined like
 *		OptFooList: / * EMPTY * / { ... } | OptFooList Foo { ... } ;
 * because we'll set -1 as the location during the first reduction and then
 * copy it during each subsequent reduction, leaving us with -1 for the
 * location even when the list is not empty.  To fix that, do this in the
 * action for the nonempty rule(s):
 *		if (@$ < 0) @$ = @2;
 * (Although we have many nonterminals that follow this pattern, we only
 * bother with fixing @$ like this when the nonterminal's parse location
 * is actually referenced in some rule.)
 *
 * A cleaner answer would be to make YYLLOC_DEFAULT scan all the Rhs
 * locations until it's found one that's not -1.  Then we'd get a correct
 * location for any nonterminal that isn't entirely empty.  But this way
 * would add overhead to every rule reduction, and so far there's not been
 * a compelling reason to pay that overhead.
 */

/*
 * Bison doesn't allocate anything that needs to live across parser calls,
 * so we can easily have it use palloc instead of malloc.  This prevents
 * memory leaks if we error out during parsing.  Note this only works with
 * bison >= 2.0.  However, in bison 1.875 the default is to use alloca()
 * if possible, so there's not really much problem anyhow, at least if
 * you're building with gcc.
 */
#define YYMALLOC palloc
#define YYFREE   pfree
#define YYINITDEPTH 1000

/* yields an integer bitmask of these flags: */
#define CAS_NOT_DEFERRABLE			0x01
#define CAS_DEFERRABLE				0x02
#define CAS_INITIALLY_IMMEDIATE		0x04
#define CAS_INITIALLY_DEFERRED		0x08
#define CAS_NOT_VALID				0x10
#define CAS_NO_INHERIT				0x20


#define parser_yyerror(msg)  scanner_yyerror(msg, yyscanner)
#define parser_errposition(pos)  scanner_errposition(pos, yyscanner)

#if YYBISON == 1
// explicitly define stack growing support
// yacc cannot handle stack growing by default YYLTYPE is overriden - which the Postgres parser overrides with an `int`
// so we need to copy these definitions here explicitly
/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  short int yyss;
  YYSTYPE yyvs;
  YYLTYPE yyls;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE) + sizeof (YYLTYPE)) \
      + 2 * YYSTACK_GAP_MAXIMUM)

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  YYSIZE_T yyi;				\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (YYID (0))
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack)					\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack, Stack, yysize);				\
	Stack = &yyptr->Stack;						\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (YYID (0))
#endif

static void base_yyerror(YYLTYPE *yylloc, core_yyscan_t yyscanner,
						 const char *msg);
static PGRawStmt *makeRawStmt(PGNode *stmt, int stmt_location);
static void updateRawStmtEnd(PGRawStmt *rs, int end_location);
static PGNode *makeColumnRef(char *colname, PGList *indirection,
						   int location, core_yyscan_t yyscanner);
static PGNode *makeTypeCast(PGNode *arg, PGTypeName *tpname, int trycast, int location);
static PGNode *makeStringConst(char *str, int location);
static PGNode *makeStringConstCast(char *str, int location, PGTypeName *tpname);
static PGNode *makeIntervalNode(char *str, int location, PGList *typmods);
static PGNode *makeIntervalNode(int val, int location, PGList *typmods);
static PGNode *makeIntervalNode(PGNode *arg, int location, PGList *typmods);
static PGNode *makeSampleSize(PGNode *sample_size, bool is_percentage);
static PGNode *makeSampleOptions(PGNode *sample_size, char *method, int *seed, int location);
static PGNode *makeIntConst(int val, int location);
static PGNode *makeFloatConst(char *str, int location);
static PGNode *makeBitStringConst(char *str, int location);
static PGNode *makeNullAConst(int location);
static PGNode *makeAConst(PGValue *v, int location);
static PGNode *makeBoolAConst(bool state, int location);
static PGNode *makeParamRef(int number, int location);
static PGNode *makeNamedParamRef(char* name, int location);
static void check_qualified_name(PGList *names, core_yyscan_t yyscanner);
static PGList *check_func_name(PGList *names, core_yyscan_t yyscanner);
static PGList *check_indirection(PGList *indirection, core_yyscan_t yyscanner);
static void insertSelectOptions(PGSelectStmt *stmt,
								PGList *sortClause, PGList *lockingClause,
								PGNode *limitOffset, PGNode *limitCount, PGNode *isLimitOffsetFirst,
								PGWithClause *withClause,
								core_yyscan_t yyscanner);
static PGNode *makeSetOp(PGSetOperation op, bool all, PGNode *larg, PGNode *rarg);
static PGNode *doNegate(PGNode *n, int location);
static void doNegateFloat(PGValue *v);
static PGNode *makeAndExpr(PGNode *lexpr, PGNode *rexpr, int location);
static PGNode *makeOrExpr(PGNode *lexpr, PGNode *rexpr, int location);
static PGNode *makeNotExpr(PGNode *expr, int location);
static void SplitColQualList(PGList *qualList,
							 PGList **constraintList, PGCollateClause **collClause,
							 core_yyscan_t yyscanner);
static void processCASbits(int cas_bits, int location, const char *constrType,
			   bool *deferrable, bool *initdeferred, bool *not_valid,
			   bool *no_inherit, core_yyscan_t yyscanner);
static PGNode *makeRecursiveViewSelect(char *relname, PGList *aliases, PGNode *query);
static PGNode *makeLimitPercent(PGNode *limit_percent);


#line 297 "third_party/libpg_query/grammar/grammar_out.cpp"

# ifndef YY_CAST
#  ifdef __cplusplus
#   define YY_CAST(Type, Val) static_cast<Type> (Val)
#   define YY_REINTERPRET_CAST(Type, Val) reinterpret_cast<Type> (Val)
#  else
#   define YY_CAST(Type, Val) ((Type) (Val))
#   define YY_REINTERPRET_CAST(Type, Val) ((Type) (Val))
#  endif
# endif
# ifndef YY_NULLPTR
#  if defined __cplusplus
#   if 201103L <= __cplusplus
#    define YY_NULLPTR nullptr
#   else
#    define YY_NULLPTR 0
#   endif
#  else
#   define YY_NULLPTR ((void*)0)
#  endif
# endif

#include "include/parser/gram.hpp"
/* Symbol kind.  */
enum yysymbol_kind_t
{
  YYSYMBOL_YYEMPTY = -2,
  YYSYMBOL_YYEOF = 0,                      /* "end of file"  */
  YYSYMBOL_YYerror = 1,                    /* error  */
  YYSYMBOL_YYUNDEF = 2,                    /* "invalid token"  */
  YYSYMBOL_IDENT = 3,                      /* IDENT  */
  YYSYMBOL_FCONST = 4,                     /* FCONST  */
  YYSYMBOL_SCONST = 5,                     /* SCONST  */
  YYSYMBOL_BCONST = 6,                     /* BCONST  */
  YYSYMBOL_XCONST = 7,                     /* XCONST  */
  YYSYMBOL_Op = 8,                         /* Op  */
  YYSYMBOL_ICONST = 9,                     /* ICONST  */
  YYSYMBOL_PARAM = 10,                     /* PARAM  */
  YYSYMBOL_TYPECAST = 11,                  /* TYPECAST  */
  YYSYMBOL_DOT_DOT = 12,                   /* DOT_DOT  */
  YYSYMBOL_COLON_EQUALS = 13,              /* COLON_EQUALS  */
  YYSYMBOL_EQUALS_GREATER = 14,            /* EQUALS_GREATER  */
  YYSYMBOL_INTEGER_DIVISION = 15,          /* INTEGER_DIVISION  */
  YYSYMBOL_POWER_OF = 16,                  /* POWER_OF  */
  YYSYMBOL_SINGLE_ARROW = 17,              /* SINGLE_ARROW  */
  YYSYMBOL_DOUBLE_ARROW = 18,              /* DOUBLE_ARROW  */
  YYSYMBOL_SINGLE_COLON = 19,              /* SINGLE_COLON  */
  YYSYMBOL_LESS_EQUALS = 20,               /* LESS_EQUALS  */
  YYSYMBOL_GREATER_EQUALS = 21,            /* GREATER_EQUALS  */
  YYSYMBOL_NOT_EQUALS = 22,                /* NOT_EQUALS  */
  YYSYMBOL_ABORT_P = 23,                   /* ABORT_P  */
  YYSYMBOL_ABSOLUTE_P = 24,                /* ABSOLUTE_P  */
  YYSYMBOL_ACCESS = 25,                    /* ACCESS  */
  YYSYMBOL_ACTION = 26,                    /* ACTION  */
  YYSYMBOL_ADD_P = 27,                     /* ADD_P  */
  YYSYMBOL_ADMIN = 28,                     /* ADMIN  */
  YYSYMBOL_AFTER = 29,                     /* AFTER  */
  YYSYMBOL_AGGREGATE = 30,                 /* AGGREGATE  */
  YYSYMBOL_ALL = 31,                       /* ALL  */
  YYSYMBOL_ALSO = 32,                      /* ALSO  */
  YYSYMBOL_ALTER = 33,                     /* ALTER  */
  YYSYMBOL_ALWAYS = 34,                    /* ALWAYS  */
  YYSYMBOL_ANALYSE = 35,                   /* ANALYSE  */
  YYSYMBOL_ANALYZE = 36,                   /* ANALYZE  */
  YYSYMBOL_AND = 37,                       /* AND  */
  YYSYMBOL_ANTI = 38,                      /* ANTI  */
  YYSYMBOL_ANY = 39,                       /* ANY  */
  YYSYMBOL_API = 40,                       /* API  */
  YYSYMBOL_ARRAY = 41,                     /* ARRAY  */
  YYSYMBOL_AS = 42,                        /* AS  */
  YYSYMBOL_ASC_P = 43,                     /* ASC_P  */
  YYSYMBOL_ASOF = 44,                      /* ASOF  */
  YYSYMBOL_ASSERTION = 45,                 /* ASSERTION  */
  YYSYMBOL_ASSIGNMENT = 46,                /* ASSIGNMENT  */
  YYSYMBOL_ASYMMETRIC = 47,                /* ASYMMETRIC  */
  YYSYMBOL_AT = 48,                        /* AT  */
  YYSYMBOL_ATTACH = 49,                    /* ATTACH  */
  YYSYMBOL_ATTRIBUTE = 50,                 /* ATTRIBUTE  */
  YYSYMBOL_AUTHORIZATION = 51,             /* AUTHORIZATION  */
  YYSYMBOL_BACKWARD = 52,                  /* BACKWARD  */
  YYSYMBOL_BEFORE = 53,                    /* BEFORE  */
  YYSYMBOL_BEGIN_P = 54,                   /* BEGIN_P  */
  YYSYMBOL_BETWEEN = 55,                   /* BETWEEN  */
  YYSYMBOL_BIGINT = 56,                    /* BIGINT  */
  YYSYMBOL_BINARY = 57,                    /* BINARY  */
  YYSYMBOL_BIT = 58,                       /* BIT  */
  YYSYMBOL_BOOLEAN_P = 59,                 /* BOOLEAN_P  */
  YYSYMBOL_BOTH = 60,                      /* BOTH  */
  YYSYMBOL_BY = 61,                        /* BY  */
  YYSYMBOL_CACHE = 62,                     /* CACHE  */
  YYSYMBOL_CALL_P = 63,                    /* CALL_P  */
  YYSYMBOL_CALLED = 64,                    /* CALLED  */
  YYSYMBOL_CASCADE = 65,                   /* CASCADE  */
  YYSYMBOL_CASCADED = 66,                  /* CASCADED  */
  YYSYMBOL_CASE = 67,                      /* CASE  */
  YYSYMBOL_CAST = 68,                      /* CAST  */
  YYSYMBOL_CATALOG_P = 69,                 /* CATALOG_P  */
  YYSYMBOL_CENTURIES_P = 70,               /* CENTURIES_P  */
  YYSYMBOL_CENTURY_P = 71,                 /* CENTURY_P  */
  YYSYMBOL_CHAIN = 72,                     /* CHAIN  */
  YYSYMBOL_CHAR_P = 73,                    /* CHAR_P  */
  YYSYMBOL_CHARACTER = 74,                 /* CHARACTER  */
  YYSYMBOL_CHARACTERISTICS = 75,           /* CHARACTERISTICS  */
  YYSYMBOL_CHECK_P = 76,                   /* CHECK_P  */
  YYSYMBOL_CHECKPOINT = 77,                /* CHECKPOINT  */
  YYSYMBOL_CLASS = 78,                     /* CLASS  */
  YYSYMBOL_CLOSE = 79,                     /* CLOSE  */
  YYSYMBOL_CLUSTER = 80,                   /* CLUSTER  */
  YYSYMBOL_COALESCE = 81,                  /* COALESCE  */
  YYSYMBOL_COLLATE = 82,                   /* COLLATE  */
  YYSYMBOL_COLLATION = 83,                 /* COLLATION  */
  YYSYMBOL_COLUMN = 84,                    /* COLUMN  */
  YYSYMBOL_COLUMNS = 85,                   /* COLUMNS  */
  YYSYMBOL_COMMENT = 86,                   /* COMMENT  */
  YYSYMBOL_COMMENTS = 87,                  /* COMMENTS  */
  YYSYMBOL_COMMIT = 88,                    /* COMMIT  */
  YYSYMBOL_COMMITTED = 89,                 /* COMMITTED  */
  YYSYMBOL_COMPRESSION = 90,               /* COMPRESSION  */
  YYSYMBOL_CONCURRENTLY = 91,              /* CONCURRENTLY  */
  YYSYMBOL_CONFIGURATION = 92,             /* CONFIGURATION  */
  YYSYMBOL_CONFLICT = 93,                  /* CONFLICT  */
  YYSYMBOL_CONNECTION = 94,                /* CONNECTION  */
  YYSYMBOL_CONSTRAINT = 95,                /* CONSTRAINT  */
  YYSYMBOL_CONSTRAINTS = 96,               /* CONSTRAINTS  */
  YYSYMBOL_CONTENT_P = 97,                 /* CONTENT_P  */
  YYSYMBOL_CONTINUE_P = 98,                /* CONTINUE_P  */
  YYSYMBOL_CONVERSION_P = 99,              /* CONVERSION_P  */
  YYSYMBOL_COPY = 100,                     /* COPY  */
  YYSYMBOL_COST = 101,                     /* COST  */
  YYSYMBOL_CREATE_P = 102,                 /* CREATE_P  */
  YYSYMBOL_CROSS = 103,                    /* CROSS  */
  YYSYMBOL_CSV = 104,                      /* CSV  */
  YYSYMBOL_CUBE = 105,                     /* CUBE  */
  YYSYMBOL_CURRENT_P = 106,                /* CURRENT_P  */
  YYSYMBOL_CURSOR = 107,                   /* CURSOR  */
  YYSYMBOL_CYCLE = 108,                    /* CYCLE  */
  YYSYMBOL_DATA_P = 109,                   /* DATA_P  */
  YYSYMBOL_DATABASE = 110,                 /* DATABASE  */
  YYSYMBOL_DAY_P = 111,                    /* DAY_P  */
  YYSYMBOL_DAYS_P = 112,                   /* DAYS_P  */
  YYSYMBOL_DEALLOCATE = 113,               /* DEALLOCATE  */
  YYSYMBOL_DEC = 114,                      /* DEC  */
  YYSYMBOL_DECADE_P = 115,                 /* DECADE_P  */
  YYSYMBOL_DECADES_P = 116,                /* DECADES_P  */
  YYSYMBOL_DECIMAL_P = 117,                /* DECIMAL_P  */
  YYSYMBOL_DECLARE = 118,                  /* DECLARE  */
  YYSYMBOL_DEFAULT = 119,                  /* DEFAULT  */
  YYSYMBOL_DEFAULTS = 120,                 /* DEFAULTS  */
  YYSYMBOL_DEFERRABLE = 121,               /* DEFERRABLE  */
  YYSYMBOL_DEFERRED = 122,                 /* DEFERRED  */
  YYSYMBOL_DEFINER = 123,                  /* DEFINER  */
  YYSYMBOL_DELETE_P = 124,                 /* DELETE_P  */
  YYSYMBOL_DELIMITER = 125,                /* DELIMITER  */
  YYSYMBOL_DELIMITERS = 126,               /* DELIMITERS  */
  YYSYMBOL_DEPENDS = 127,                  /* DEPENDS  */
  YYSYMBOL_DESC_P = 128,                   /* DESC_P  */
  YYSYMBOL_DESCRIBE = 129,                 /* DESCRIBE  */
  YYSYMBOL_DETACH = 130,                   /* DETACH  */
  YYSYMBOL_DICTIONARY = 131,               /* DICTIONARY  */
  YYSYMBOL_DISABLE_P = 132,                /* DISABLE_P  */
  YYSYMBOL_DISCARD = 133,                  /* DISCARD  */
  YYSYMBOL_DISTINCT = 134,                 /* DISTINCT  */
  YYSYMBOL_DO = 135,                       /* DO  */
  YYSYMBOL_DOCUMENT_P = 136,               /* DOCUMENT_P  */
  YYSYMBOL_DOMAIN_P = 137,                 /* DOMAIN_P  */
  YYSYMBOL_DOUBLE_P = 138,                 /* DOUBLE_P  */
  YYSYMBOL_DROP = 139,                     /* DROP  */
  YYSYMBOL_EACH = 140,                     /* EACH  */
  YYSYMBOL_EDGES = 141,                    /* EDGES  */
  YYSYMBOL_ELSE = 142,                     /* ELSE  */
  YYSYMBOL_ENABLE_P = 143,                 /* ENABLE_P  */
  YYSYMBOL_ENCODING = 144,                 /* ENCODING  */
  YYSYMBOL_ENCRYPTED = 145,                /* ENCRYPTED  */
  YYSYMBOL_END_P = 146,                    /* END_P  */
  YYSYMBOL_ENUM_P = 147,                   /* ENUM_P  */
  YYSYMBOL_ESCAPE = 148,                   /* ESCAPE  */
  YYSYMBOL_EVENT = 149,                    /* EVENT  */
  YYSYMBOL_EXCEPT = 150,                   /* EXCEPT  */
  YYSYMBOL_EXCLUDE = 151,                  /* EXCLUDE  */
  YYSYMBOL_EXCLUDING = 152,                /* EXCLUDING  */
  YYSYMBOL_EXCLUSIVE = 153,                /* EXCLUSIVE  */
  YYSYMBOL_EXECUTE = 154,                  /* EXECUTE  */
  YYSYMBOL_EXISTS = 155,                   /* EXISTS  */
  YYSYMBOL_EXPLAIN = 156,                  /* EXPLAIN  */
  YYSYMBOL_EXPORT_P = 157,                 /* EXPORT_P  */
  YYSYMBOL_EXPORT_STATE = 158,             /* EXPORT_STATE  */
  YYSYMBOL_EXTENSION = 159,                /* EXTENSION  */
  YYSYMBOL_EXTENSIONS = 160,               /* EXTENSIONS  */
  YYSYMBOL_EXTERNAL = 161,                 /* EXTERNAL  */
  YYSYMBOL_EXTRACT = 162,                  /* EXTRACT  */
  YYSYMBOL_FALSE_P = 163,                  /* FALSE_P  */
  YYSYMBOL_FAMILY = 164,                   /* FAMILY  */
  YYSYMBOL_FEATURES = 165,                 /* FEATURES  */
  YYSYMBOL_FETCH = 166,                    /* FETCH  */
  YYSYMBOL_FILTER = 167,                   /* FILTER  */
  YYSYMBOL_FIRST_P = 168,                  /* FIRST_P  */
  YYSYMBOL_FLOAT_P = 169,                  /* FLOAT_P  */
  YYSYMBOL_FOLLOWING = 170,                /* FOLLOWING  */
  YYSYMBOL_FOR = 171,                      /* FOR  */
  YYSYMBOL_FORCE = 172,                    /* FORCE  */
  YYSYMBOL_FOREIGN = 173,                  /* FOREIGN  */
  YYSYMBOL_FORWARD = 174,                  /* FORWARD  */
  YYSYMBOL_FREEZE = 175,                   /* FREEZE  */
  YYSYMBOL_FROM = 176,                     /* FROM  */
  YYSYMBOL_FULL = 177,                     /* FULL  */
  YYSYMBOL_FUNCTION = 178,                 /* FUNCTION  */
  YYSYMBOL_FUNCTIONS = 179,                /* FUNCTIONS  */
  YYSYMBOL_GENERATED = 180,                /* GENERATED  */
  YYSYMBOL_GLOB = 181,                     /* GLOB  */
  YYSYMBOL_GLOBAL = 182,                   /* GLOBAL  */
  YYSYMBOL_GNN = 183,                      /* GNN  */
  YYSYMBOL_GRANT = 184,                    /* GRANT  */
  YYSYMBOL_GRANTED = 185,                  /* GRANTED  */
  YYSYMBOL_GROUP_P = 186,                  /* GROUP_P  */
  YYSYMBOL_GROUPING = 187,                 /* GROUPING  */
  YYSYMBOL_GROUPING_ID = 188,              /* GROUPING_ID  */
  YYSYMBOL_GROUPS = 189,                   /* GROUPS  */
  YYSYMBOL_HANDLER = 190,                  /* HANDLER  */
  YYSYMBOL_HAVING = 191,                   /* HAVING  */
  YYSYMBOL_HEADER_P = 192,                 /* HEADER_P  */
  YYSYMBOL_HOLD = 193,                     /* HOLD  */
  YYSYMBOL_HOUR_P = 194,                   /* HOUR_P  */
  YYSYMBOL_HOURS_P = 195,                  /* HOURS_P  */
  YYSYMBOL_IDENTITY_P = 196,               /* IDENTITY_P  */
  YYSYMBOL_IF_P = 197,                     /* IF_P  */
  YYSYMBOL_IGNORE_P = 198,                 /* IGNORE_P  */
  YYSYMBOL_ILIKE = 199,                    /* ILIKE  */
  YYSYMBOL_IMMEDIATE = 200,                /* IMMEDIATE  */
  YYSYMBOL_IMMUTABLE = 201,                /* IMMUTABLE  */
  YYSYMBOL_IMPLICIT_P = 202,               /* IMPLICIT_P  */
  YYSYMBOL_IMPORT_P = 203,                 /* IMPORT_P  */
  YYSYMBOL_IN_P = 204,                     /* IN_P  */
  YYSYMBOL_INCLUDE_P = 205,                /* INCLUDE_P  */
  YYSYMBOL_INCLUDING = 206,                /* INCLUDING  */
  YYSYMBOL_INCREMENT = 207,                /* INCREMENT  */
  YYSYMBOL_INDEX = 208,                    /* INDEX  */
  YYSYMBOL_INDEXES = 209,                  /* INDEXES  */
  YYSYMBOL_INHERIT = 210,                  /* INHERIT  */
  YYSYMBOL_INHERITS = 211,                 /* INHERITS  */
  YYSYMBOL_INITIALLY = 212,                /* INITIALLY  */
  YYSYMBOL_INLINE_P = 213,                 /* INLINE_P  */
  YYSYMBOL_INNER_P = 214,                  /* INNER_P  */
  YYSYMBOL_INOUT = 215,                    /* INOUT  */
  YYSYMBOL_INPUT_P = 216,                  /* INPUT_P  */
  YYSYMBOL_INSENSITIVE = 217,              /* INSENSITIVE  */
  YYSYMBOL_INSERT = 218,                   /* INSERT  */
  YYSYMBOL_INSTALL = 219,                  /* INSTALL  */
  YYSYMBOL_INSTEAD = 220,                  /* INSTEAD  */
  YYSYMBOL_INT_P = 221,                    /* INT_P  */
  YYSYMBOL_INTEGER = 222,                  /* INTEGER  */
  YYSYMBOL_INTERSECT = 223,                /* INTERSECT  */
  YYSYMBOL_INTERVAL = 224,                 /* INTERVAL  */
  YYSYMBOL_INTO = 225,                     /* INTO  */
  YYSYMBOL_INVOKER = 226,                  /* INVOKER  */
  YYSYMBOL_IS = 227,                       /* IS  */
  YYSYMBOL_ISNULL = 228,                   /* ISNULL  */
  YYSYMBOL_ISOLATION = 229,                /* ISOLATION  */
  YYSYMBOL_JOIN = 230,                     /* JOIN  */
  YYSYMBOL_JSON = 231,                     /* JSON  */
  YYSYMBOL_KEY = 232,                      /* KEY  */
  YYSYMBOL_LABEL = 233,                    /* LABEL  */
  YYSYMBOL_LAMBDA = 234,                   /* LAMBDA  */
  YYSYMBOL_LANGUAGE = 235,                 /* LANGUAGE  */
  YYSYMBOL_LARGE_P = 236,                  /* LARGE_P  */
  YYSYMBOL_LAST_P = 237,                   /* LAST_P  */
  YYSYMBOL_LATERAL_P = 238,                /* LATERAL_P  */
  YYSYMBOL_LEADING = 239,                  /* LEADING  */
  YYSYMBOL_LEAKPROOF = 240,                /* LEAKPROOF  */
  YYSYMBOL_LEFT = 241,                     /* LEFT  */
  YYSYMBOL_LEVEL = 242,                    /* LEVEL  */
  YYSYMBOL_LIKE = 243,                     /* LIKE  */
  YYSYMBOL_LIMIT = 244,                    /* LIMIT  */
  YYSYMBOL_LISTEN = 245,                   /* LISTEN  */
  YYSYMBOL_LLM = 246,                      /* LLM  */
  YYSYMBOL_LM = 247,                       /* LM  */
  YYSYMBOL_LOAD = 248,                     /* LOAD  */
  YYSYMBOL_LOCAL = 249,                    /* LOCAL  */
  YYSYMBOL_LOCATION = 250,                 /* LOCATION  */
  YYSYMBOL_LOCK_P = 251,                   /* LOCK_P  */
  YYSYMBOL_LOCKED = 252,                   /* LOCKED  */
  YYSYMBOL_LOGGED = 253,                   /* LOGGED  */
  YYSYMBOL_MACRO = 254,                    /* MACRO  */
  YYSYMBOL_MAP = 255,                      /* MAP  */
  YYSYMBOL_MAPPING = 256,                  /* MAPPING  */
  YYSYMBOL_MATCH = 257,                    /* MATCH  */
  YYSYMBOL_MATERIALIZED = 258,             /* MATERIALIZED  */
  YYSYMBOL_MAXVALUE = 259,                 /* MAXVALUE  */
  YYSYMBOL_METHOD = 260,                   /* METHOD  */
  YYSYMBOL_MICROSECOND_P = 261,            /* MICROSECOND_P  */
  YYSYMBOL_MICROSECONDS_P = 262,           /* MICROSECONDS_P  */
  YYSYMBOL_MILLENNIA_P = 263,              /* MILLENNIA_P  */
  YYSYMBOL_MILLENNIUM_P = 264,             /* MILLENNIUM_P  */
  YYSYMBOL_MILLISECOND_P = 265,            /* MILLISECOND_P  */
  YYSYMBOL_MILLISECONDS_P = 266,           /* MILLISECONDS_P  */
  YYSYMBOL_MINUTE_P = 267,                 /* MINUTE_P  */
  YYSYMBOL_MINUTES_P = 268,                /* MINUTES_P  */
  YYSYMBOL_MINVALUE = 269,                 /* MINVALUE  */
  YYSYMBOL_MODE = 270,                     /* MODE  */
  YYSYMBOL_MODEL = 271,                    /* MODEL  */
  YYSYMBOL_MONTH_P = 272,                  /* MONTH_P  */
  YYSYMBOL_MONTHS_P = 273,                 /* MONTHS_P  */
  YYSYMBOL_MOVE = 274,                     /* MOVE  */
  YYSYMBOL_NAME_P = 275,                   /* NAME_P  */
  YYSYMBOL_NAMES = 276,                    /* NAMES  */
  YYSYMBOL_NATIONAL = 277,                 /* NATIONAL  */
  YYSYMBOL_NATURAL = 278,                  /* NATURAL  */
  YYSYMBOL_NCHAR = 279,                    /* NCHAR  */
  YYSYMBOL_NEW = 280,                      /* NEW  */
  YYSYMBOL_NEXT = 281,                     /* NEXT  */
  YYSYMBOL_NO = 282,                       /* NO  */
  YYSYMBOL_NODES = 283,                    /* NODES  */
  YYSYMBOL_NONE = 284,                     /* NONE  */
  YYSYMBOL_NOT = 285,                      /* NOT  */
  YYSYMBOL_NOTHING = 286,                  /* NOTHING  */
  YYSYMBOL_NOTIFY = 287,                   /* NOTIFY  */
  YYSYMBOL_NOTNULL = 288,                  /* NOTNULL  */
  YYSYMBOL_NOWAIT = 289,                   /* NOWAIT  */
  YYSYMBOL_NULL_P = 290,                   /* NULL_P  */
  YYSYMBOL_NULLIF = 291,                   /* NULLIF  */
  YYSYMBOL_NULLS_P = 292,                  /* NULLS_P  */
  YYSYMBOL_NUMERIC = 293,                  /* NUMERIC  */
  YYSYMBOL_OBJECT_P = 294,                 /* OBJECT_P  */
  YYSYMBOL_OF = 295,                       /* OF  */
  YYSYMBOL_OFF = 296,                      /* OFF  */
  YYSYMBOL_OFFSET = 297,                   /* OFFSET  */
  YYSYMBOL_OIDS = 298,                     /* OIDS  */
  YYSYMBOL_OLD = 299,                      /* OLD  */
  YYSYMBOL_ON = 300,                       /* ON  */
  YYSYMBOL_ONLY = 301,                     /* ONLY  */
  YYSYMBOL_OPERATOR = 302,                 /* OPERATOR  */
  YYSYMBOL_OPTION = 303,                   /* OPTION  */
  YYSYMBOL_OPTIONS = 304,                  /* OPTIONS  */
  YYSYMBOL_OR = 305,                       /* OR  */
  YYSYMBOL_ORDER = 306,                    /* ORDER  */
  YYSYMBOL_ORDINALITY = 307,               /* ORDINALITY  */
  YYSYMBOL_OTHERS = 308,                   /* OTHERS  */
  YYSYMBOL_OUT_P = 309,                    /* OUT_P  */
  YYSYMBOL_OUTER_P = 310,                  /* OUTER_P  */
  YYSYMBOL_OUTPUT = 311,                   /* OUTPUT  */
  YYSYMBOL_OVER = 312,                     /* OVER  */
  YYSYMBOL_OVERLAPS = 313,                 /* OVERLAPS  */
  YYSYMBOL_OVERLAY = 314,                  /* OVERLAY  */
  YYSYMBOL_OVERRIDING = 315,               /* OVERRIDING  */
  YYSYMBOL_OWNED = 316,                    /* OWNED  */
  YYSYMBOL_OWNER = 317,                    /* OWNER  */
  YYSYMBOL_PARALLEL = 318,                 /* PARALLEL  */
  YYSYMBOL_PARSER = 319,                   /* PARSER  */
  YYSYMBOL_PARTIAL = 320,                  /* PARTIAL  */
  YYSYMBOL_PARTITION = 321,                /* PARTITION  */
  YYSYMBOL_PARTITIONED = 322,              /* PARTITIONED  */
  YYSYMBOL_PASSING = 323,                  /* PASSING  */
  YYSYMBOL_PASSWORD = 324,                 /* PASSWORD  */
  YYSYMBOL_PATH = 325,                     /* PATH  */
  YYSYMBOL_PERCENT = 326,                  /* PERCENT  */
  YYSYMBOL_PERSISTENT = 327,               /* PERSISTENT  */
  YYSYMBOL_PIVOT = 328,                    /* PIVOT  */
  YYSYMBOL_PIVOT_LONGER = 329,             /* PIVOT_LONGER  */
  YYSYMBOL_PIVOT_WIDER = 330,              /* PIVOT_WIDER  */
  YYSYMBOL_PLACING = 331,                  /* PLACING  */
  YYSYMBOL_PLANS = 332,                    /* PLANS  */
  YYSYMBOL_POLICY = 333,                   /* POLICY  */
  YYSYMBOL_POSITION = 334,                 /* POSITION  */
  YYSYMBOL_POSITIONAL = 335,               /* POSITIONAL  */
  YYSYMBOL_PRAGMA_P = 336,                 /* PRAGMA_P  */
  YYSYMBOL_PRECEDING = 337,                /* PRECEDING  */
  YYSYMBOL_PRECISION = 338,                /* PRECISION  */
  YYSYMBOL_PREDICT = 339,                  /* PREDICT  */
  YYSYMBOL_PREPARE = 340,                  /* PREPARE  */
  YYSYMBOL_PREPARED = 341,                 /* PREPARED  */
  YYSYMBOL_PRESERVE = 342,                 /* PRESERVE  */
  YYSYMBOL_PRIMARY = 343,                  /* PRIMARY  */
  YYSYMBOL_PRIOR = 344,                    /* PRIOR  */
  YYSYMBOL_PRIVILEGES = 345,               /* PRIVILEGES  */
  YYSYMBOL_PROCEDURAL = 346,               /* PROCEDURAL  */
  YYSYMBOL_PROCEDURE = 347,                /* PROCEDURE  */
  YYSYMBOL_PROGRAM = 348,                  /* PROGRAM  */
  YYSYMBOL_PROMPT = 349,                   /* PROMPT  */
  YYSYMBOL_PUBLICATION = 350,              /* PUBLICATION  */
  YYSYMBOL_QUALIFY = 351,                  /* QUALIFY  */
  YYSYMBOL_QUARTER_P = 352,                /* QUARTER_P  */
  YYSYMBOL_QUARTERS_P = 353,               /* QUARTERS_P  */
  YYSYMBOL_QUOTE = 354,                    /* QUOTE  */
  YYSYMBOL_RANGE = 355,                    /* RANGE  */
  YYSYMBOL_READ_P = 356,                   /* READ_P  */
  YYSYMBOL_REAL = 357,                     /* REAL  */
  YYSYMBOL_REASSIGN = 358,                 /* REASSIGN  */
  YYSYMBOL_RECHECK = 359,                  /* RECHECK  */
  YYSYMBOL_RECURSIVE = 360,                /* RECURSIVE  */
  YYSYMBOL_REF = 361,                      /* REF  */
  YYSYMBOL_REFERENCES = 362,               /* REFERENCES  */
  YYSYMBOL_REFERENCING = 363,              /* REFERENCING  */
  YYSYMBOL_REFRESH = 364,                  /* REFRESH  */
  YYSYMBOL_REINDEX = 365,                  /* REINDEX  */
  YYSYMBOL_RELATIVE_P = 366,               /* RELATIVE_P  */
  YYSYMBOL_RELEASE = 367,                  /* RELEASE  */
  YYSYMBOL_RENAME = 368,                   /* RENAME  */
  YYSYMBOL_REPEATABLE = 369,               /* REPEATABLE  */
  YYSYMBOL_REPLACE = 370,                  /* REPLACE  */
  YYSYMBOL_REPLICA = 371,                  /* REPLICA  */
  YYSYMBOL_RESET = 372,                    /* RESET  */
  YYSYMBOL_RESPECT_P = 373,                /* RESPECT_P  */
  YYSYMBOL_RESTART = 374,                  /* RESTART  */
  YYSYMBOL_RESTRICT = 375,                 /* RESTRICT  */
  YYSYMBOL_RETURNING = 376,                /* RETURNING  */
  YYSYMBOL_RETURNS = 377,                  /* RETURNS  */
  YYSYMBOL_REVOKE = 378,                   /* REVOKE  */
  YYSYMBOL_RIGHT = 379,                    /* RIGHT  */
  YYSYMBOL_ROLE = 380,                     /* ROLE  */
  YYSYMBOL_ROLLBACK = 381,                 /* ROLLBACK  */
  YYSYMBOL_ROLLUP = 382,                   /* ROLLUP  */
  YYSYMBOL_ROW = 383,                      /* ROW  */
  YYSYMBOL_ROWS = 384,                     /* ROWS  */
  YYSYMBOL_RULE = 385,                     /* RULE  */
  YYSYMBOL_SAMPLE = 386,                   /* SAMPLE  */
  YYSYMBOL_SAVEPOINT = 387,                /* SAVEPOINT  */
  YYSYMBOL_SCHEMA = 388,                   /* SCHEMA  */
  YYSYMBOL_SCHEMAS = 389,                  /* SCHEMAS  */
  YYSYMBOL_SCOPE = 390,                    /* SCOPE  */
  YYSYMBOL_SCROLL = 391,                   /* SCROLL  */
  YYSYMBOL_SEARCH = 392,                   /* SEARCH  */
  YYSYMBOL_SECOND_P = 393,                 /* SECOND_P  */
  YYSYMBOL_SECONDS_P = 394,                /* SECONDS_P  */
  YYSYMBOL_SECRET = 395,                   /* SECRET  */
  YYSYMBOL_SECURITY = 396,                 /* SECURITY  */
  YYSYMBOL_SELECT = 397,                   /* SELECT  */
  YYSYMBOL_SEMI = 398,                     /* SEMI  */
  YYSYMBOL_SEQUENCE = 399,                 /* SEQUENCE  */
  YYSYMBOL_SEQUENCES = 400,                /* SEQUENCES  */
  YYSYMBOL_SERIALIZABLE = 401,             /* SERIALIZABLE  */
  YYSYMBOL_SERVER = 402,                   /* SERVER  */
  YYSYMBOL_SESSION = 403,                  /* SESSION  */
  YYSYMBOL_SET = 404,                      /* SET  */
  YYSYMBOL_SETOF = 405,                    /* SETOF  */
  YYSYMBOL_SETS = 406,                     /* SETS  */
  YYSYMBOL_SHARE = 407,                    /* SHARE  */
  YYSYMBOL_SHOW = 408,                     /* SHOW  */
  YYSYMBOL_SIMILAR = 409,                  /* SIMILAR  */
  YYSYMBOL_SIMPLE = 410,                   /* SIMPLE  */
  YYSYMBOL_SKIP = 411,                     /* SKIP  */
  YYSYMBOL_SMALLINT = 412,                 /* SMALLINT  */
  YYSYMBOL_SNAPSHOT = 413,                 /* SNAPSHOT  */
  YYSYMBOL_SOME = 414,                     /* SOME  */
  YYSYMBOL_SORTED = 415,                   /* SORTED  */
  YYSYMBOL_SQL_P = 416,                    /* SQL_P  */
  YYSYMBOL_STABLE = 417,                   /* STABLE  */
  YYSYMBOL_STANDALONE_P = 418,             /* STANDALONE_P  */
  YYSYMBOL_START = 419,                    /* START  */
  YYSYMBOL_STATEMENT = 420,                /* STATEMENT  */
  YYSYMBOL_STATISTICS = 421,               /* STATISTICS  */
  YYSYMBOL_STDIN = 422,                    /* STDIN  */
  YYSYMBOL_STDOUT = 423,                   /* STDOUT  */
  YYSYMBOL_STORAGE = 424,                  /* STORAGE  */
  YYSYMBOL_STORED = 425,                   /* STORED  */
  YYSYMBOL_STRICT_P = 426,                 /* STRICT_P  */
  YYSYMBOL_STRIP_P = 427,                  /* STRIP_P  */
  YYSYMBOL_STRUCT = 428,                   /* STRUCT  */
  YYSYMBOL_SUBSCRIPTION = 429,             /* SUBSCRIPTION  */
  YYSYMBOL_SUBSTRING = 430,                /* SUBSTRING  */
  YYSYMBOL_SUMMARIZE = 431,                /* SUMMARIZE  */
  YYSYMBOL_SYMMETRIC = 432,                /* SYMMETRIC  */
  YYSYMBOL_SYSID = 433,                    /* SYSID  */
  YYSYMBOL_SYSTEM_P = 434,                 /* SYSTEM_P  */
  YYSYMBOL_TABLE = 435,                    /* TABLE  */
  YYSYMBOL_TABLES = 436,                   /* TABLES  */
  YYSYMBOL_TABLESAMPLE = 437,              /* TABLESAMPLE  */
  YYSYMBOL_TABLESPACE = 438,               /* TABLESPACE  */
  YYSYMBOL_TABULAR = 439,                  /* TABULAR  */
  YYSYMBOL_TAKES = 440,                    /* TAKES  */
  YYSYMBOL_TEMP = 441,                     /* TEMP  */
  YYSYMBOL_TEMPLATE = 442,                 /* TEMPLATE  */
  YYSYMBOL_TEMPORARY = 443,                /* TEMPORARY  */
  YYSYMBOL_TEXT_P = 444,                   /* TEXT_P  */
  YYSYMBOL_THEN = 445,                     /* THEN  */
  YYSYMBOL_TIES = 446,                     /* TIES  */
  YYSYMBOL_TIME = 447,                     /* TIME  */
  YYSYMBOL_TIMESTAMP = 448,                /* TIMESTAMP  */
  YYSYMBOL_TO = 449,                       /* TO  */
  YYSYMBOL_TRAILING = 450,                 /* TRAILING  */
  YYSYMBOL_TRANSACTION = 451,              /* TRANSACTION  */
  YYSYMBOL_TRANSFORM = 452,                /* TRANSFORM  */
  YYSYMBOL_TREAT = 453,                    /* TREAT  */
  YYSYMBOL_TRIGGER = 454,                  /* TRIGGER  */
  YYSYMBOL_TRIM = 455,                     /* TRIM  */
  YYSYMBOL_TRUE_P = 456,                   /* TRUE_P  */
  YYSYMBOL_TRUNCATE = 457,                 /* TRUNCATE  */
  YYSYMBOL_TRUSTED = 458,                  /* TRUSTED  */
  YYSYMBOL_TRY_CAST = 459,                 /* TRY_CAST  */
  YYSYMBOL_TYPE_P = 460,                   /* TYPE_P  */
  YYSYMBOL_TYPES_P = 461,                  /* TYPES_P  */
  YYSYMBOL_UNBOUNDED = 462,                /* UNBOUNDED  */
  YYSYMBOL_UNCOMMITTED = 463,              /* UNCOMMITTED  */
  YYSYMBOL_UNENCRYPTED = 464,              /* UNENCRYPTED  */
  YYSYMBOL_UNION = 465,                    /* UNION  */
  YYSYMBOL_UNIQUE = 466,                   /* UNIQUE  */
  YYSYMBOL_UNKNOWN = 467,                  /* UNKNOWN  */
  YYSYMBOL_UNLISTEN = 468,                 /* UNLISTEN  */
  YYSYMBOL_UNLOGGED = 469,                 /* UNLOGGED  */
  YYSYMBOL_UNPACK = 470,                   /* UNPACK  */
  YYSYMBOL_UNPIVOT = 471,                  /* UNPIVOT  */
  YYSYMBOL_UNTIL = 472,                    /* UNTIL  */
  YYSYMBOL_UPDATE = 473,                   /* UPDATE  */
  YYSYMBOL_USE_P = 474,                    /* USE_P  */
  YYSYMBOL_USER = 475,                     /* USER  */
  YYSYMBOL_USING = 476,                    /* USING  */
  YYSYMBOL_VACUUM = 477,                   /* VACUUM  */
  YYSYMBOL_VALID = 478,                    /* VALID  */
  YYSYMBOL_VALIDATE = 479,                 /* VALIDATE  */
  YYSYMBOL_VALIDATOR = 480,                /* VALIDATOR  */
  YYSYMBOL_VALUE_P = 481,                  /* VALUE_P  */
  YYSYMBOL_VALUES = 482,                   /* VALUES  */
  YYSYMBOL_VARCHAR = 483,                  /* VARCHAR  */
  YYSYMBOL_VARIABLE_P = 484,               /* VARIABLE_P  */
  YYSYMBOL_VARIADIC = 485,                 /* VARIADIC  */
  YYSYMBOL_VARYING = 486,                  /* VARYING  */
  YYSYMBOL_VERBOSE = 487,                  /* VERBOSE  */
  YYSYMBOL_VERSION_P = 488,                /* VERSION_P  */
  YYSYMBOL_VIEW = 489,                     /* VIEW  */
  YYSYMBOL_VIEWS = 490,                    /* VIEWS  */
  YYSYMBOL_VIRTUAL = 491,                  /* VIRTUAL  */
  YYSYMBOL_VOLATILE = 492,                 /* VOLATILE  */
  YYSYMBOL_WEEK_P = 493,                   /* WEEK_P  */
  YYSYMBOL_WEEKS_P = 494,                  /* WEEKS_P  */
  YYSYMBOL_WHEN = 495,                     /* WHEN  */
  YYSYMBOL_WHERE = 496,                    /* WHERE  */
  YYSYMBOL_WHITESPACE_P = 497,             /* WHITESPACE_P  */
  YYSYMBOL_WINDOW = 498,                   /* WINDOW  */
  YYSYMBOL_WITH = 499,                     /* WITH  */
  YYSYMBOL_WITHIN = 500,                   /* WITHIN  */
  YYSYMBOL_WITHOUT = 501,                  /* WITHOUT  */
  YYSYMBOL_WORK = 502,                     /* WORK  */
  YYSYMBOL_WRAPPER = 503,                  /* WRAPPER  */
  YYSYMBOL_WRITE_P = 504,                  /* WRITE_P  */
  YYSYMBOL_XML_P = 505,                    /* XML_P  */
  YYSYMBOL_XMLATTRIBUTES = 506,            /* XMLATTRIBUTES  */
  YYSYMBOL_XMLCONCAT = 507,                /* XMLCONCAT  */
  YYSYMBOL_XMLELEMENT = 508,               /* XMLELEMENT  */
  YYSYMBOL_XMLEXISTS = 509,                /* XMLEXISTS  */
  YYSYMBOL_XMLFOREST = 510,                /* XMLFOREST  */
  YYSYMBOL_XMLNAMESPACES = 511,            /* XMLNAMESPACES  */
  YYSYMBOL_XMLPARSE = 512,                 /* XMLPARSE  */
  YYSYMBOL_XMLPI = 513,                    /* XMLPI  */
  YYSYMBOL_XMLROOT = 514,                  /* XMLROOT  */
  YYSYMBOL_XMLSERIALIZE = 515,             /* XMLSERIALIZE  */
  YYSYMBOL_XMLTABLE = 516,                 /* XMLTABLE  */
  YYSYMBOL_YEAR_P = 517,                   /* YEAR_P  */
  YYSYMBOL_YEARS_P = 518,                  /* YEARS_P  */
  YYSYMBOL_YES_P = 519,                    /* YES_P  */
  YYSYMBOL_ZONE = 520,                     /* ZONE  */
  YYSYMBOL_NOT_LA = 521,                   /* NOT_LA  */
  YYSYMBOL_NULLS_LA = 522,                 /* NULLS_LA  */
  YYSYMBOL_WITH_LA = 523,                  /* WITH_LA  */
  YYSYMBOL_524_ = 524,                     /* '<'  */
  YYSYMBOL_525_ = 525,                     /* '>'  */
  YYSYMBOL_526_ = 526,                     /* '='  */
  YYSYMBOL_POSTFIXOP = 527,                /* POSTFIXOP  */
  YYSYMBOL_528_ = 528,                     /* '+'  */
  YYSYMBOL_529_ = 529,                     /* '-'  */
  YYSYMBOL_530_ = 530,                     /* '*'  */
  YYSYMBOL_531_ = 531,                     /* '/'  */
  YYSYMBOL_532_ = 532,                     /* '%'  */
  YYSYMBOL_533_ = 533,                     /* '^'  */
  YYSYMBOL_UMINUS = 534,                   /* UMINUS  */
  YYSYMBOL_535_ = 535,                     /* '['  */
  YYSYMBOL_536_ = 536,                     /* ']'  */
  YYSYMBOL_537_ = 537,                     /* '('  */
  YYSYMBOL_538_ = 538,                     /* ')'  */
  YYSYMBOL_539_ = 539,                     /* '.'  */
  YYSYMBOL_540_ = 540,                     /* ';'  */
  YYSYMBOL_541_ = 541,                     /* '{'  */
  YYSYMBOL_542_ = 542,                     /* '}'  */
  YYSYMBOL_543_ = 543,                     /* '?'  */
  YYSYMBOL_544_ = 544,                     /* '$'  */
  YYSYMBOL_545_ = 545,                     /* '#'  */
  YYSYMBOL_546_ = 546,                     /* ','  */
  YYSYMBOL_YYACCEPT = 547,                 /* $accept  */
  YYSYMBOL_stmtblock = 548,                /* stmtblock  */
  YYSYMBOL_stmtmulti = 549,                /* stmtmulti  */
  YYSYMBOL_stmt = 550,                     /* stmt  */
  YYSYMBOL_AlterObjectSchemaStmt = 551,    /* AlterObjectSchemaStmt  */
  YYSYMBOL_AlterSeqStmt = 552,             /* AlterSeqStmt  */
  YYSYMBOL_SeqOptList = 553,               /* SeqOptList  */
  YYSYMBOL_opt_with = 554,                 /* opt_with  */
  YYSYMBOL_NumericOnly = 555,              /* NumericOnly  */
  YYSYMBOL_SeqOptElem = 556,               /* SeqOptElem  */
  YYSYMBOL_opt_by = 557,                   /* opt_by  */
  YYSYMBOL_SignedIconst = 558,             /* SignedIconst  */
  YYSYMBOL_AlterTableStmt = 559,           /* AlterTableStmt  */
  YYSYMBOL_alter_identity_column_option_list = 560, /* alter_identity_column_option_list  */
  YYSYMBOL_alter_column_default = 561,     /* alter_column_default  */
  YYSYMBOL_alter_identity_column_option = 562, /* alter_identity_column_option  */
  YYSYMBOL_alter_generic_option_list = 563, /* alter_generic_option_list  */
  YYSYMBOL_qualify_list = 564,             /* qualify_list  */
  YYSYMBOL_qualify_el = 565,               /* qualify_el  */
  YYSYMBOL_qualified_column = 566,         /* qualified_column  */
  YYSYMBOL_qualifiedColumnDef = 567,       /* qualifiedColumnDef  */
  YYSYMBOL_alter_table_cmd = 568,          /* alter_table_cmd  */
  YYSYMBOL_alter_using = 569,              /* alter_using  */
  YYSYMBOL_alter_generic_option_elem = 570, /* alter_generic_option_elem  */
  YYSYMBOL_alter_table_cmds = 571,         /* alter_table_cmds  */
  YYSYMBOL_alter_generic_options = 572,    /* alter_generic_options  */
  YYSYMBOL_opt_set_data = 573,             /* opt_set_data  */
  YYSYMBOL_AnalyzeStmt = 574,              /* AnalyzeStmt  */
  YYSYMBOL_AttachStmt = 575,               /* AttachStmt  */
  YYSYMBOL_DetachStmt = 576,               /* DetachStmt  */
  YYSYMBOL_opt_database = 577,             /* opt_database  */
  YYSYMBOL_opt_database_alias = 578,       /* opt_database_alias  */
  YYSYMBOL_CallStmt = 579,                 /* CallStmt  */
  YYSYMBOL_CheckPointStmt = 580,           /* CheckPointStmt  */
  YYSYMBOL_opt_col_id = 581,               /* opt_col_id  */
  YYSYMBOL_CommentOnStmt = 582,            /* CommentOnStmt  */
  YYSYMBOL_comment_value = 583,            /* comment_value  */
  YYSYMBOL_comment_on_type_any_name = 584, /* comment_on_type_any_name  */
  YYSYMBOL_qualified_name = 585,           /* qualified_name  */
  YYSYMBOL_ColId = 586,                    /* ColId  */
  YYSYMBOL_ColIdOrString = 587,            /* ColIdOrString  */
  YYSYMBOL_Sconst = 588,                   /* Sconst  */
  YYSYMBOL_indirection = 589,              /* indirection  */
  YYSYMBOL_indirection_el = 590,           /* indirection_el  */
  YYSYMBOL_attr_name = 591,                /* attr_name  */
  YYSYMBOL_ColLabel = 592,                 /* ColLabel  */
  YYSYMBOL_CopyStmt = 593,                 /* CopyStmt  */
  YYSYMBOL_copy_database_flag = 594,       /* copy_database_flag  */
  YYSYMBOL_copy_from = 595,                /* copy_from  */
  YYSYMBOL_copy_delimiter = 596,           /* copy_delimiter  */
  YYSYMBOL_copy_generic_opt_arg_list = 597, /* copy_generic_opt_arg_list  */
  YYSYMBOL_opt_using = 598,                /* opt_using  */
  YYSYMBOL_opt_as = 599,                   /* opt_as  */
  YYSYMBOL_opt_program = 600,              /* opt_program  */
  YYSYMBOL_copy_options = 601,             /* copy_options  */
  YYSYMBOL_copy_generic_opt_arg = 602,     /* copy_generic_opt_arg  */
  YYSYMBOL_copy_generic_opt_elem = 603,    /* copy_generic_opt_elem  */
  YYSYMBOL_opt_oids = 604,                 /* opt_oids  */
  YYSYMBOL_copy_opt_list = 605,            /* copy_opt_list  */
  YYSYMBOL_opt_binary = 606,               /* opt_binary  */
  YYSYMBOL_copy_opt_item = 607,            /* copy_opt_item  */
  YYSYMBOL_copy_generic_opt_arg_list_item = 608, /* copy_generic_opt_arg_list_item  */
  YYSYMBOL_copy_file_name = 609,           /* copy_file_name  */
  YYSYMBOL_copy_generic_opt_list = 610,    /* copy_generic_opt_list  */
  YYSYMBOL_CreateStmt = 611,               /* CreateStmt  */
  YYSYMBOL_ConstraintAttributeSpec = 612,  /* ConstraintAttributeSpec  */
  YYSYMBOL_def_arg = 613,                  /* def_arg  */
  YYSYMBOL_OptParenthesizedSeqOptList = 614, /* OptParenthesizedSeqOptList  */
  YYSYMBOL_generic_option_arg = 615,       /* generic_option_arg  */
  YYSYMBOL_key_action = 616,               /* key_action  */
  YYSYMBOL_ColConstraint = 617,            /* ColConstraint  */
  YYSYMBOL_ColConstraintElem = 618,        /* ColConstraintElem  */
  YYSYMBOL_GeneratedColumnType = 619,      /* GeneratedColumnType  */
  YYSYMBOL_opt_GeneratedColumnType = 620,  /* opt_GeneratedColumnType  */
  YYSYMBOL_GeneratedConstraintElem = 621,  /* GeneratedConstraintElem  */
  YYSYMBOL_generic_option_elem = 622,      /* generic_option_elem  */
  YYSYMBOL_key_update = 623,               /* key_update  */
  YYSYMBOL_key_actions = 624,              /* key_actions  */
  YYSYMBOL_OnCommitOption = 625,           /* OnCommitOption  */
  YYSYMBOL_reloptions = 626,               /* reloptions  */
  YYSYMBOL_opt_no_inherit = 627,           /* opt_no_inherit  */
  YYSYMBOL_TableConstraint = 628,          /* TableConstraint  */
  YYSYMBOL_TableLikeOption = 629,          /* TableLikeOption  */
  YYSYMBOL_reloption_list = 630,           /* reloption_list  */
  YYSYMBOL_ExistingIndex = 631,            /* ExistingIndex  */
  YYSYMBOL_ConstraintAttr = 632,           /* ConstraintAttr  */
  YYSYMBOL_OptWith = 633,                  /* OptWith  */
  YYSYMBOL_definition = 634,               /* definition  */
  YYSYMBOL_TableLikeOptionList = 635,      /* TableLikeOptionList  */
  YYSYMBOL_generic_option_name = 636,      /* generic_option_name  */
  YYSYMBOL_ConstraintAttributeElem = 637,  /* ConstraintAttributeElem  */
  YYSYMBOL_regularColumnDef = 638,         /* regularColumnDef  */
  YYSYMBOL_generatedColumnDef = 639,       /* generatedColumnDef  */
  YYSYMBOL_columnDef = 640,                /* columnDef  */
  YYSYMBOL_def_list = 641,                 /* def_list  */
  YYSYMBOL_index_name = 642,               /* index_name  */
  YYSYMBOL_TableElement = 643,             /* TableElement  */
  YYSYMBOL_def_elem = 644,                 /* def_elem  */
  YYSYMBOL_opt_definition = 645,           /* opt_definition  */
  YYSYMBOL_OptTableElementList = 646,      /* OptTableElementList  */
  YYSYMBOL_columnElem = 647,               /* columnElem  */
  YYSYMBOL_opt_column_list = 648,          /* opt_column_list  */
  YYSYMBOL_ColQualList = 649,              /* ColQualList  */
  YYSYMBOL_key_delete = 650,               /* key_delete  */
  YYSYMBOL_reloption_elem = 651,           /* reloption_elem  */
  YYSYMBOL_columnList = 652,               /* columnList  */
  YYSYMBOL_columnList_opt_comma = 653,     /* columnList_opt_comma  */
  YYSYMBOL_func_type = 654,                /* func_type  */
  YYSYMBOL_ConstraintElem = 655,           /* ConstraintElem  */
  YYSYMBOL_TableElementList = 656,         /* TableElementList  */
  YYSYMBOL_key_match = 657,                /* key_match  */
  YYSYMBOL_TableLikeClause = 658,          /* TableLikeClause  */
  YYSYMBOL_OptTemp = 659,                  /* OptTemp  */
  YYSYMBOL_generated_when = 660,           /* generated_when  */
  YYSYMBOL_CreateAsStmt = 661,             /* CreateAsStmt  */
  YYSYMBOL_opt_with_data = 662,            /* opt_with_data  */
  YYSYMBOL_create_as_target = 663,         /* create_as_target  */
  YYSYMBOL_CreateFunctionStmt = 664,       /* CreateFunctionStmt  */
  YYSYMBOL_table_macro_definition = 665,   /* table_macro_definition  */
  YYSYMBOL_table_macro_definition_parens = 666, /* table_macro_definition_parens  */
  YYSYMBOL_table_macro_list_internal = 667, /* table_macro_list_internal  */
  YYSYMBOL_table_macro_list = 668,         /* table_macro_list  */
  YYSYMBOL_macro_definition = 669,         /* macro_definition  */
  YYSYMBOL_macro_definition_list = 670,    /* macro_definition_list  */
  YYSYMBOL_macro_alias = 671,              /* macro_alias  */
  YYSYMBOL_param_list = 672,               /* param_list  */
  YYSYMBOL_CreateModelStmt = 673,          /* CreateModelStmt  */
  YYSYMBOL_model_type_value = 674,         /* model_type_value  */
  YYSYMBOL_model_on = 675,                 /* model_on  */
  YYSYMBOL_opt_feat_col_list = 676,        /* opt_feat_col_list  */
  YYSYMBOL_feat_col_list = 677,            /* feat_col_list  */
  YYSYMBOL_with_result_col_list = 678,     /* with_result_col_list  */
  YYSYMBOL_result_col_list = 679,          /* result_col_list  */
  YYSYMBOL_opt_option = 680,               /* opt_option  */
  YYSYMBOL_opt_api = 681,                  /* opt_api  */
  YYSYMBOL_CreateSchemaStmt = 682,         /* CreateSchemaStmt  */
  YYSYMBOL_OptSchemaEltList = 683,         /* OptSchemaEltList  */
  YYSYMBOL_schema_stmt = 684,              /* schema_stmt  */
  YYSYMBOL_CreateSecretStmt = 685,         /* CreateSecretStmt  */
  YYSYMBOL_opt_secret_name = 686,          /* opt_secret_name  */
  YYSYMBOL_opt_persist = 687,              /* opt_persist  */
  YYSYMBOL_opt_storage_specifier = 688,    /* opt_storage_specifier  */
  YYSYMBOL_create_secret_generic_opt_arg = 689, /* create_secret_generic_opt_arg  */
  YYSYMBOL_create_secret_generic_opt_elem = 690, /* create_secret_generic_opt_elem  */
  YYSYMBOL_create_secret_generic_opt_list = 691, /* create_secret_generic_opt_list  */
  YYSYMBOL_CreateSeqStmt = 692,            /* CreateSeqStmt  */
  YYSYMBOL_OptSeqOptList = 693,            /* OptSeqOptList  */
  YYSYMBOL_CreateTypeStmt = 694,           /* CreateTypeStmt  */
  YYSYMBOL_create_type_value = 695,        /* create_type_value  */
  YYSYMBOL_opt_enum_val_list = 696,        /* opt_enum_val_list  */
  YYSYMBOL_enum_val_list = 697,            /* enum_val_list  */
  YYSYMBOL_DeallocateStmt = 698,           /* DeallocateStmt  */
  YYSYMBOL_DeleteStmt = 699,               /* DeleteStmt  */
  YYSYMBOL_relation_expr_opt_alias = 700,  /* relation_expr_opt_alias  */
  YYSYMBOL_where_or_current_clause = 701,  /* where_or_current_clause  */
  YYSYMBOL_using_clause = 702,             /* using_clause  */
  YYSYMBOL_DropStmt = 703,                 /* DropStmt  */
  YYSYMBOL_drop_type_any_name = 704,       /* drop_type_any_name  */
  YYSYMBOL_drop_type_name = 705,           /* drop_type_name  */
  YYSYMBOL_any_name_list = 706,            /* any_name_list  */
  YYSYMBOL_opt_drop_behavior = 707,        /* opt_drop_behavior  */
  YYSYMBOL_drop_type_name_on_any_name = 708, /* drop_type_name_on_any_name  */
  YYSYMBOL_DropSecretStmt = 709,           /* DropSecretStmt  */
  YYSYMBOL_opt_storage_drop_specifier = 710, /* opt_storage_drop_specifier  */
  YYSYMBOL_ExecuteStmt = 711,              /* ExecuteStmt  */
  YYSYMBOL_execute_param_expr = 712,       /* execute_param_expr  */
  YYSYMBOL_execute_param_list = 713,       /* execute_param_list  */
  YYSYMBOL_execute_param_clause = 714,     /* execute_param_clause  */
  YYSYMBOL_ExplainStmt = 715,              /* ExplainStmt  */
  YYSYMBOL_opt_verbose = 716,              /* opt_verbose  */
  YYSYMBOL_explain_option_arg = 717,       /* explain_option_arg  */
  YYSYMBOL_ExplainableStmt = 718,          /* ExplainableStmt  */
  YYSYMBOL_NonReservedWord = 719,          /* NonReservedWord  */
  YYSYMBOL_NonReservedWord_or_Sconst = 720, /* NonReservedWord_or_Sconst  */
  YYSYMBOL_explain_option_list = 721,      /* explain_option_list  */
  YYSYMBOL_analyze_keyword = 722,          /* analyze_keyword  */
  YYSYMBOL_opt_boolean_or_string = 723,    /* opt_boolean_or_string  */
  YYSYMBOL_explain_option_elem = 724,      /* explain_option_elem  */
  YYSYMBOL_explain_option_name = 725,      /* explain_option_name  */
  YYSYMBOL_ExportStmt = 726,               /* ExportStmt  */
  YYSYMBOL_ImportStmt = 727,               /* ImportStmt  */
  YYSYMBOL_IndexStmt = 728,                /* IndexStmt  */
  YYSYMBOL_access_method = 729,            /* access_method  */
  YYSYMBOL_access_method_clause = 730,     /* access_method_clause  */
  YYSYMBOL_opt_concurrently = 731,         /* opt_concurrently  */
  YYSYMBOL_opt_index_name = 732,           /* opt_index_name  */
  YYSYMBOL_opt_reloptions = 733,           /* opt_reloptions  */
  YYSYMBOL_opt_unique = 734,               /* opt_unique  */
  YYSYMBOL_InsertStmt = 735,               /* InsertStmt  */
  YYSYMBOL_insert_rest = 736,              /* insert_rest  */
  YYSYMBOL_insert_target = 737,            /* insert_target  */
  YYSYMBOL_opt_by_name_or_position = 738,  /* opt_by_name_or_position  */
  YYSYMBOL_opt_conf_expr = 739,            /* opt_conf_expr  */
  YYSYMBOL_opt_with_clause = 740,          /* opt_with_clause  */
  YYSYMBOL_insert_column_item = 741,       /* insert_column_item  */
  YYSYMBOL_set_clause = 742,               /* set_clause  */
  YYSYMBOL_opt_or_action = 743,            /* opt_or_action  */
  YYSYMBOL_opt_on_conflict = 744,          /* opt_on_conflict  */
  YYSYMBOL_index_elem = 745,               /* index_elem  */
  YYSYMBOL_returning_clause = 746,         /* returning_clause  */
  YYSYMBOL_override_kind = 747,            /* override_kind  */
  YYSYMBOL_set_target_list = 748,          /* set_target_list  */
  YYSYMBOL_opt_collate = 749,              /* opt_collate  */
  YYSYMBOL_opt_class = 750,                /* opt_class  */
  YYSYMBOL_insert_column_list = 751,       /* insert_column_list  */
  YYSYMBOL_set_clause_list = 752,          /* set_clause_list  */
  YYSYMBOL_set_clause_list_opt_comma = 753, /* set_clause_list_opt_comma  */
  YYSYMBOL_index_params = 754,             /* index_params  */
  YYSYMBOL_set_target = 755,               /* set_target  */
  YYSYMBOL_LoadStmt = 756,                 /* LoadStmt  */
  YYSYMBOL_opt_force = 757,                /* opt_force  */
  YYSYMBOL_file_name = 758,                /* file_name  */
  YYSYMBOL_opt_ext_version = 759,          /* opt_ext_version  */
  YYSYMBOL_PragmaStmt = 760,               /* PragmaStmt  */
  YYSYMBOL_PrepareStmt = 761,              /* PrepareStmt  */
  YYSYMBOL_prep_type_clause = 762,         /* prep_type_clause  */
  YYSYMBOL_PreparableStmt = 763,           /* PreparableStmt  */
  YYSYMBOL_RenameStmt = 764,               /* RenameStmt  */
  YYSYMBOL_opt_column = 765,               /* opt_column  */
  YYSYMBOL_SelectStmt = 766,               /* SelectStmt  */
  YYSYMBOL_select_with_parens = 767,       /* select_with_parens  */
  YYSYMBOL_select_no_parens = 768,         /* select_no_parens  */
  YYSYMBOL_select_clause = 769,            /* select_clause  */
  YYSYMBOL_opt_select = 770,               /* opt_select  */
  YYSYMBOL_simple_select = 771,            /* simple_select  */
  YYSYMBOL_value_or_values = 772,          /* value_or_values  */
  YYSYMBOL_pivot_keyword = 773,            /* pivot_keyword  */
  YYSYMBOL_unpivot_keyword = 774,          /* unpivot_keyword  */
  YYSYMBOL_pivot_column_entry = 775,       /* pivot_column_entry  */
  YYSYMBOL_pivot_column_list_internal = 776, /* pivot_column_list_internal  */
  YYSYMBOL_pivot_column_list = 777,        /* pivot_column_list  */
  YYSYMBOL_with_clause = 778,              /* with_clause  */
  YYSYMBOL_cte_list = 779,                 /* cte_list  */
  YYSYMBOL_common_table_expr = 780,        /* common_table_expr  */
  YYSYMBOL_opt_on_key = 781,               /* opt_on_key  */
  YYSYMBOL_column_ref_list_opt_comma = 782, /* column_ref_list_opt_comma  */
  YYSYMBOL_column_ref_list = 783,          /* column_ref_list  */
  YYSYMBOL_opt_materialized = 784,         /* opt_materialized  */
  YYSYMBOL_into_clause = 785,              /* into_clause  */
  YYSYMBOL_OptTempTableName = 786,         /* OptTempTableName  */
  YYSYMBOL_opt_table = 787,                /* opt_table  */
  YYSYMBOL_all_or_distinct = 788,          /* all_or_distinct  */
  YYSYMBOL_by_name = 789,                  /* by_name  */
  YYSYMBOL_distinct_clause = 790,          /* distinct_clause  */
  YYSYMBOL_opt_all_clause = 791,           /* opt_all_clause  */
  YYSYMBOL_opt_ignore_nulls = 792,         /* opt_ignore_nulls  */
  YYSYMBOL_opt_sort_clause = 793,          /* opt_sort_clause  */
  YYSYMBOL_sort_clause = 794,              /* sort_clause  */
  YYSYMBOL_sortby_list = 795,              /* sortby_list  */
  YYSYMBOL_sortby = 796,                   /* sortby  */
  YYSYMBOL_opt_asc_desc = 797,             /* opt_asc_desc  */
  YYSYMBOL_opt_nulls_order = 798,          /* opt_nulls_order  */
  YYSYMBOL_select_limit = 799,             /* select_limit  */
  YYSYMBOL_opt_select_limit = 800,         /* opt_select_limit  */
  YYSYMBOL_limit_clause = 801,             /* limit_clause  */
  YYSYMBOL_offset_clause = 802,            /* offset_clause  */
  YYSYMBOL_sample_value = 803,             /* sample_value  */
  YYSYMBOL_sample_count = 804,             /* sample_count  */
  YYSYMBOL_sample_clause = 805,            /* sample_clause  */
  YYSYMBOL_opt_sample_func = 806,          /* opt_sample_func  */
  YYSYMBOL_tablesample_entry = 807,        /* tablesample_entry  */
  YYSYMBOL_tablesample_clause = 808,       /* tablesample_clause  */
  YYSYMBOL_opt_tablesample_clause = 809,   /* opt_tablesample_clause  */
  YYSYMBOL_opt_repeatable_clause = 810,    /* opt_repeatable_clause  */
  YYSYMBOL_at_unit = 811,                  /* at_unit  */
  YYSYMBOL_at_specifier = 812,             /* at_specifier  */
  YYSYMBOL_opt_at_clause = 813,            /* opt_at_clause  */
  YYSYMBOL_select_limit_value = 814,       /* select_limit_value  */
  YYSYMBOL_select_offset_value = 815,      /* select_offset_value  */
  YYSYMBOL_select_fetch_first_value = 816, /* select_fetch_first_value  */
  YYSYMBOL_I_or_F_const = 817,             /* I_or_F_const  */
  YYSYMBOL_row_or_rows = 818,              /* row_or_rows  */
  YYSYMBOL_first_or_next = 819,            /* first_or_next  */
  YYSYMBOL_group_clause = 820,             /* group_clause  */
  YYSYMBOL_group_by_list = 821,            /* group_by_list  */
  YYSYMBOL_group_by_list_opt_comma = 822,  /* group_by_list_opt_comma  */
  YYSYMBOL_group_by_item = 823,            /* group_by_item  */
  YYSYMBOL_empty_grouping_set = 824,       /* empty_grouping_set  */
  YYSYMBOL_rollup_clause = 825,            /* rollup_clause  */
  YYSYMBOL_cube_clause = 826,              /* cube_clause  */
  YYSYMBOL_grouping_sets_clause = 827,     /* grouping_sets_clause  */
  YYSYMBOL_grouping_or_grouping_id = 828,  /* grouping_or_grouping_id  */
  YYSYMBOL_having_clause = 829,            /* having_clause  */
  YYSYMBOL_qualify_clause = 830,           /* qualify_clause  */
  YYSYMBOL_for_locking_clause = 831,       /* for_locking_clause  */
  YYSYMBOL_opt_for_locking_clause = 832,   /* opt_for_locking_clause  */
  YYSYMBOL_for_locking_items = 833,        /* for_locking_items  */
  YYSYMBOL_for_locking_item = 834,         /* for_locking_item  */
  YYSYMBOL_for_locking_strength = 835,     /* for_locking_strength  */
  YYSYMBOL_locked_rels_list = 836,         /* locked_rels_list  */
  YYSYMBOL_opt_nowait_or_skip = 837,       /* opt_nowait_or_skip  */
  YYSYMBOL_values_clause = 838,            /* values_clause  */
  YYSYMBOL_values_clause_opt_comma = 839,  /* values_clause_opt_comma  */
  YYSYMBOL_from_clause = 840,              /* from_clause  */
  YYSYMBOL_from_list = 841,                /* from_list  */
  YYSYMBOL_from_list_opt_comma = 842,      /* from_list_opt_comma  */
  YYSYMBOL_alias_prefix_colon_clause = 843, /* alias_prefix_colon_clause  */
  YYSYMBOL_table_ref = 844,                /* table_ref  */
  YYSYMBOL_opt_pivot_group_by = 845,       /* opt_pivot_group_by  */
  YYSYMBOL_opt_include_nulls = 846,        /* opt_include_nulls  */
  YYSYMBOL_single_pivot_value = 847,       /* single_pivot_value  */
  YYSYMBOL_pivot_header = 848,             /* pivot_header  */
  YYSYMBOL_pivot_value = 849,              /* pivot_value  */
  YYSYMBOL_pivot_value_list = 850,         /* pivot_value_list  */
  YYSYMBOL_unpivot_header = 851,           /* unpivot_header  */
  YYSYMBOL_unpivot_value = 852,            /* unpivot_value  */
  YYSYMBOL_unpivot_value_list = 853,       /* unpivot_value_list  */
  YYSYMBOL_joined_table = 854,             /* joined_table  */
  YYSYMBOL_alias_clause = 855,             /* alias_clause  */
  YYSYMBOL_opt_alias_clause = 856,         /* opt_alias_clause  */
  YYSYMBOL_func_alias_clause = 857,        /* func_alias_clause  */
  YYSYMBOL_join_type = 858,                /* join_type  */
  YYSYMBOL_join_outer = 859,               /* join_outer  */
  YYSYMBOL_join_qual = 860,                /* join_qual  */
  YYSYMBOL_relation_expr = 861,            /* relation_expr  */
  YYSYMBOL_func_table = 862,               /* func_table  */
  YYSYMBOL_rowsfrom_item = 863,            /* rowsfrom_item  */
  YYSYMBOL_rowsfrom_list = 864,            /* rowsfrom_list  */
  YYSYMBOL_opt_col_def_list = 865,         /* opt_col_def_list  */
  YYSYMBOL_opt_ordinality = 866,           /* opt_ordinality  */
  YYSYMBOL_where_clause = 867,             /* where_clause  */
  YYSYMBOL_TableFuncElementList = 868,     /* TableFuncElementList  */
  YYSYMBOL_TableFuncElement = 869,         /* TableFuncElement  */
  YYSYMBOL_opt_collate_clause = 870,       /* opt_collate_clause  */
  YYSYMBOL_colid_type_list = 871,          /* colid_type_list  */
  YYSYMBOL_RowOrStruct = 872,              /* RowOrStruct  */
  YYSYMBOL_opt_Typename = 873,             /* opt_Typename  */
  YYSYMBOL_Typename = 874,                 /* Typename  */
  YYSYMBOL_qualified_typename = 875,       /* qualified_typename  */
  YYSYMBOL_opt_array_bounds = 876,         /* opt_array_bounds  */
  YYSYMBOL_SimpleTypename = 877,           /* SimpleTypename  */
  YYSYMBOL_ConstTypename = 878,            /* ConstTypename  */
  YYSYMBOL_GenericType = 879,              /* GenericType  */
  YYSYMBOL_opt_type_modifiers = 880,       /* opt_type_modifiers  */
  YYSYMBOL_Numeric = 881,                  /* Numeric  */
  YYSYMBOL_opt_float = 882,                /* opt_float  */
  YYSYMBOL_Bit = 883,                      /* Bit  */
  YYSYMBOL_ConstBit = 884,                 /* ConstBit  */
  YYSYMBOL_BitWithLength = 885,            /* BitWithLength  */
  YYSYMBOL_BitWithoutLength = 886,         /* BitWithoutLength  */
  YYSYMBOL_Character = 887,                /* Character  */
  YYSYMBOL_ConstCharacter = 888,           /* ConstCharacter  */
  YYSYMBOL_CharacterWithLength = 889,      /* CharacterWithLength  */
  YYSYMBOL_CharacterWithoutLength = 890,   /* CharacterWithoutLength  */
  YYSYMBOL_character = 891,                /* character  */
  YYSYMBOL_opt_varying = 892,              /* opt_varying  */
  YYSYMBOL_ConstDatetime = 893,            /* ConstDatetime  */
  YYSYMBOL_ConstInterval = 894,            /* ConstInterval  */
  YYSYMBOL_opt_timezone = 895,             /* opt_timezone  */
  YYSYMBOL_year_keyword = 896,             /* year_keyword  */
  YYSYMBOL_month_keyword = 897,            /* month_keyword  */
  YYSYMBOL_day_keyword = 898,              /* day_keyword  */
  YYSYMBOL_hour_keyword = 899,             /* hour_keyword  */
  YYSYMBOL_minute_keyword = 900,           /* minute_keyword  */
  YYSYMBOL_second_keyword = 901,           /* second_keyword  */
  YYSYMBOL_millisecond_keyword = 902,      /* millisecond_keyword  */
  YYSYMBOL_microsecond_keyword = 903,      /* microsecond_keyword  */
  YYSYMBOL_week_keyword = 904,             /* week_keyword  */
  YYSYMBOL_quarter_keyword = 905,          /* quarter_keyword  */
  YYSYMBOL_decade_keyword = 906,           /* decade_keyword  */
  YYSYMBOL_century_keyword = 907,          /* century_keyword  */
  YYSYMBOL_millennium_keyword = 908,       /* millennium_keyword  */
  YYSYMBOL_opt_interval = 909,             /* opt_interval  */
  YYSYMBOL_a_expr = 910,                   /* a_expr  */
  YYSYMBOL_b_expr = 911,                   /* b_expr  */
  YYSYMBOL_c_expr = 912,                   /* c_expr  */
  YYSYMBOL_d_expr = 913,                   /* d_expr  */
  YYSYMBOL_indirection_expr_or_a_expr = 914, /* indirection_expr_or_a_expr  */
  YYSYMBOL_param_expr = 915,               /* param_expr  */
  YYSYMBOL_indirection_expr = 916,         /* indirection_expr  */
  YYSYMBOL_list_expr = 917,                /* list_expr  */
  YYSYMBOL_struct_expr = 918,              /* struct_expr  */
  YYSYMBOL_map_expr = 919,                 /* map_expr  */
  YYSYMBOL_func_application = 920,         /* func_application  */
  YYSYMBOL_func_expr = 921,                /* func_expr  */
  YYSYMBOL_func_expr_windowless = 922,     /* func_expr_windowless  */
  YYSYMBOL_func_expr_common_subexpr = 923, /* func_expr_common_subexpr  */
  YYSYMBOL_list_comprehension = 924,       /* list_comprehension  */
  YYSYMBOL_within_group_clause = 925,      /* within_group_clause  */
  YYSYMBOL_filter_clause = 926,            /* filter_clause  */
  YYSYMBOL_export_clause = 927,            /* export_clause  */
  YYSYMBOL_window_clause = 928,            /* window_clause  */
  YYSYMBOL_window_definition_list = 929,   /* window_definition_list  */
  YYSYMBOL_window_definition = 930,        /* window_definition  */
  YYSYMBOL_over_clause = 931,              /* over_clause  */
  YYSYMBOL_window_specification = 932,     /* window_specification  */
  YYSYMBOL_opt_existing_window_name = 933, /* opt_existing_window_name  */
  YYSYMBOL_opt_partition_clause = 934,     /* opt_partition_clause  */
  YYSYMBOL_opt_frame_clause = 935,         /* opt_frame_clause  */
  YYSYMBOL_frame_extent = 936,             /* frame_extent  */
  YYSYMBOL_frame_bound = 937,              /* frame_bound  */
  YYSYMBOL_opt_window_exclusion_clause = 938, /* opt_window_exclusion_clause  */
  YYSYMBOL_qualified_row = 939,            /* qualified_row  */
  YYSYMBOL_row = 940,                      /* row  */
  YYSYMBOL_dict_arg = 941,                 /* dict_arg  */
  YYSYMBOL_dict_arguments = 942,           /* dict_arguments  */
  YYSYMBOL_dict_arguments_opt_comma = 943, /* dict_arguments_opt_comma  */
  YYSYMBOL_map_arg = 944,                  /* map_arg  */
  YYSYMBOL_map_arguments = 945,            /* map_arguments  */
  YYSYMBOL_map_arguments_opt_comma = 946,  /* map_arguments_opt_comma  */
  YYSYMBOL_opt_map_arguments_opt_comma = 947, /* opt_map_arguments_opt_comma  */
  YYSYMBOL_sub_type = 948,                 /* sub_type  */
  YYSYMBOL_all_Op = 949,                   /* all_Op  */
  YYSYMBOL_MathOp = 950,                   /* MathOp  */
  YYSYMBOL_qual_Op = 951,                  /* qual_Op  */
  YYSYMBOL_qual_all_Op = 952,              /* qual_all_Op  */
  YYSYMBOL_subquery_Op = 953,              /* subquery_Op  */
  YYSYMBOL_any_operator = 954,             /* any_operator  */
  YYSYMBOL_c_expr_list = 955,              /* c_expr_list  */
  YYSYMBOL_c_expr_list_opt_comma = 956,    /* c_expr_list_opt_comma  */
  YYSYMBOL_expr_list = 957,                /* expr_list  */
  YYSYMBOL_expr_list_opt_comma = 958,      /* expr_list_opt_comma  */
  YYSYMBOL_opt_expr_list_opt_comma = 959,  /* opt_expr_list_opt_comma  */
  YYSYMBOL_func_arg_list = 960,            /* func_arg_list  */
  YYSYMBOL_func_arg_expr = 961,            /* func_arg_expr  */
  YYSYMBOL_type_list = 962,                /* type_list  */
  YYSYMBOL_extract_list = 963,             /* extract_list  */
  YYSYMBOL_extract_arg = 964,              /* extract_arg  */
  YYSYMBOL_overlay_list = 965,             /* overlay_list  */
  YYSYMBOL_overlay_placing = 966,          /* overlay_placing  */
  YYSYMBOL_position_list = 967,            /* position_list  */
  YYSYMBOL_substr_list = 968,              /* substr_list  */
  YYSYMBOL_substr_from = 969,              /* substr_from  */
  YYSYMBOL_substr_for = 970,               /* substr_for  */
  YYSYMBOL_trim_list = 971,                /* trim_list  */
  YYSYMBOL_in_expr = 972,                  /* in_expr  */
  YYSYMBOL_case_expr = 973,                /* case_expr  */
  YYSYMBOL_when_clause_list = 974,         /* when_clause_list  */
  YYSYMBOL_when_clause = 975,              /* when_clause  */
  YYSYMBOL_case_default = 976,             /* case_default  */
  YYSYMBOL_case_arg = 977,                 /* case_arg  */
  YYSYMBOL_columnref = 978,                /* columnref  */
  YYSYMBOL_columnref_opt_indirection = 979, /* columnref_opt_indirection  */
  YYSYMBOL_opt_slice_bound = 980,          /* opt_slice_bound  */
  YYSYMBOL_opt_indirection = 981,          /* opt_indirection  */
  YYSYMBOL_opt_func_arguments = 982,       /* opt_func_arguments  */
  YYSYMBOL_extended_indirection_el = 983,  /* extended_indirection_el  */
  YYSYMBOL_opt_extended_indirection = 984, /* opt_extended_indirection  */
  YYSYMBOL_opt_asymmetric = 985,           /* opt_asymmetric  */
  YYSYMBOL_opt_target_list_opt_comma = 986, /* opt_target_list_opt_comma  */
  YYSYMBOL_target_list = 987,              /* target_list  */
  YYSYMBOL_target_list_opt_comma = 988,    /* target_list_opt_comma  */
  YYSYMBOL_target_el = 989,                /* target_el  */
  YYSYMBOL_except_list = 990,              /* except_list  */
  YYSYMBOL_except_name = 991,              /* except_name  */
  YYSYMBOL_except_name_list = 992,         /* except_name_list  */
  YYSYMBOL_except_name_list_opt_comma = 993, /* except_name_list_opt_comma  */
  YYSYMBOL_opt_except_list = 994,          /* opt_except_list  */
  YYSYMBOL_replace_list_el = 995,          /* replace_list_el  */
  YYSYMBOL_replace_list = 996,             /* replace_list  */
  YYSYMBOL_replace_list_opt_comma = 997,   /* replace_list_opt_comma  */
  YYSYMBOL_opt_replace_list = 998,         /* opt_replace_list  */
  YYSYMBOL_rename_list_el = 999,           /* rename_list_el  */
  YYSYMBOL_rename_list = 1000,             /* rename_list  */
  YYSYMBOL_rename_list_opt_comma = 1001,   /* rename_list_opt_comma  */
  YYSYMBOL_opt_rename_list = 1002,         /* opt_rename_list  */
  YYSYMBOL_qualified_name_list = 1003,     /* qualified_name_list  */
  YYSYMBOL_name_list = 1004,               /* name_list  */
  YYSYMBOL_name_list_opt_comma = 1005,     /* name_list_opt_comma  */
  YYSYMBOL_name_list_opt_comma_opt_bracket = 1006, /* name_list_opt_comma_opt_bracket  */
  YYSYMBOL_name = 1007,                    /* name  */
  YYSYMBOL_func_name = 1008,               /* func_name  */
  YYSYMBOL_AexprConst = 1009,              /* AexprConst  */
  YYSYMBOL_Iconst = 1010,                  /* Iconst  */
  YYSYMBOL_type_function_name = 1011,      /* type_function_name  */
  YYSYMBOL_function_name_token = 1012,     /* function_name_token  */
  YYSYMBOL_type_name_token = 1013,         /* type_name_token  */
  YYSYMBOL_any_name = 1014,                /* any_name  */
  YYSYMBOL_attrs = 1015,                   /* attrs  */
  YYSYMBOL_opt_name_list = 1016,           /* opt_name_list  */
  YYSYMBOL_param_name = 1017,              /* param_name  */
  YYSYMBOL_ColLabelOrString = 1018,        /* ColLabelOrString  */
  YYSYMBOL_TransactionStmt = 1019,         /* TransactionStmt  */
  YYSYMBOL_opt_transaction = 1020,         /* opt_transaction  */
  YYSYMBOL_opt_transaction_type = 1021,    /* opt_transaction_type  */
  YYSYMBOL_UpdateStmt = 1022,              /* UpdateStmt  */
  YYSYMBOL_UpdateExtensionsStmt = 1023,    /* UpdateExtensionsStmt  */
  YYSYMBOL_unreserved_keyword = 1024,      /* unreserved_keyword  */
  YYSYMBOL_col_name_keyword = 1025,        /* col_name_keyword  */
  YYSYMBOL_func_name_keyword = 1026,       /* func_name_keyword  */
  YYSYMBOL_type_name_keyword = 1027,       /* type_name_keyword  */
  YYSYMBOL_other_keyword = 1028,           /* other_keyword  */
  YYSYMBOL_type_func_name_keyword = 1029,  /* type_func_name_keyword  */
  YYSYMBOL_reserved_keyword = 1030,        /* reserved_keyword  */
  YYSYMBOL_UseStmt = 1031,                 /* UseStmt  */
  YYSYMBOL_VacuumStmt = 1032,              /* VacuumStmt  */
  YYSYMBOL_vacuum_option_elem = 1033,      /* vacuum_option_elem  */
  YYSYMBOL_opt_full = 1034,                /* opt_full  */
  YYSYMBOL_vacuum_option_list = 1035,      /* vacuum_option_list  */
  YYSYMBOL_opt_freeze = 1036,              /* opt_freeze  */
  YYSYMBOL_VariableResetStmt = 1037,       /* VariableResetStmt  */
  YYSYMBOL_generic_reset = 1038,           /* generic_reset  */
  YYSYMBOL_reset_rest = 1039,              /* reset_rest  */
  YYSYMBOL_VariableSetStmt = 1040,         /* VariableSetStmt  */
  YYSYMBOL_set_rest = 1041,                /* set_rest  */
  YYSYMBOL_generic_set = 1042,             /* generic_set  */
  YYSYMBOL_var_value = 1043,               /* var_value  */
  YYSYMBOL_zone_value = 1044,              /* zone_value  */
  YYSYMBOL_var_list = 1045,                /* var_list  */
  YYSYMBOL_VariableShowStmt = 1046,        /* VariableShowStmt  */
  YYSYMBOL_describe_or_desc = 1047,        /* describe_or_desc  */
  YYSYMBOL_show_or_describe = 1048,        /* show_or_describe  */
  YYSYMBOL_opt_tables = 1049,              /* opt_tables  */
  YYSYMBOL_var_name = 1050,                /* var_name  */
  YYSYMBOL_ViewStmt = 1051,                /* ViewStmt  */
  YYSYMBOL_opt_check_option = 1052         /* opt_check_option  */
};
typedef enum yysymbol_kind_t yysymbol_kind_t;




#ifdef short
# undef short
#endif

/* On compilers that do not define __PTRDIFF_MAX__ etc., make sure
   <limits.h> and (if available) <stdint.h> are included
   so that the code can choose integer types of a good width.  */

#ifndef __PTRDIFF_MAX__
# include <limits.h> /* INFRINGES ON USER NAME SPACE */
# if defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
#  include <stdint.h> /* INFRINGES ON USER NAME SPACE */
#  define YY_STDINT_H
# endif
#endif

/* Narrow types that promote to a signed type and that can represent a
   signed or unsigned integer of at least N bits.  In tables they can
   save space and decrease cache pressure.  Promoting to a signed type
   helps avoid bugs in integer arithmetic.  */

#ifdef __INT_LEAST8_MAX__
typedef __INT_LEAST8_TYPE__ yytype_int8;
#elif defined YY_STDINT_H
typedef int_least8_t yytype_int8;
#else
typedef signed char yytype_int8;
#endif

#ifdef __INT_LEAST16_MAX__
typedef __INT_LEAST16_TYPE__ yytype_int16;
#elif defined YY_STDINT_H
typedef int_least16_t yytype_int16;
#else
typedef short yytype_int16;
#endif

/* Work around bug in HP-UX 11.23, which defines these macros
   incorrectly for preprocessor constants.  This workaround can likely
   be removed in 2023, as HPE has promised support for HP-UX 11.23
   (aka HP-UX 11i v2) only through the end of 2022; see Table 2 of
   <https://h20195.www2.hpe.com/V2/getpdf.aspx/4AA4-7673ENW.pdf>.  */
#ifdef __hpux
# undef UINT_LEAST8_MAX
# undef UINT_LEAST16_MAX
# define UINT_LEAST8_MAX 255
# define UINT_LEAST16_MAX 65535
#endif

#if defined __UINT_LEAST8_MAX__ && __UINT_LEAST8_MAX__ <= __INT_MAX__
typedef __UINT_LEAST8_TYPE__ yytype_uint8;
#elif (!defined __UINT_LEAST8_MAX__ && defined YY_STDINT_H \
       && UINT_LEAST8_MAX <= INT_MAX)
typedef uint_least8_t yytype_uint8;
#elif !defined __UINT_LEAST8_MAX__ && UCHAR_MAX <= INT_MAX
typedef unsigned char yytype_uint8;
#else
typedef short yytype_uint8;
#endif

#if defined __UINT_LEAST16_MAX__ && __UINT_LEAST16_MAX__ <= __INT_MAX__
typedef __UINT_LEAST16_TYPE__ yytype_uint16;
#elif (!defined __UINT_LEAST16_MAX__ && defined YY_STDINT_H \
       && UINT_LEAST16_MAX <= INT_MAX)
typedef uint_least16_t yytype_uint16;
#elif !defined __UINT_LEAST16_MAX__ && USHRT_MAX <= INT_MAX
typedef unsigned short yytype_uint16;
#else
typedef int yytype_uint16;
#endif

#ifndef YYPTRDIFF_T
# if defined __PTRDIFF_TYPE__ && defined __PTRDIFF_MAX__
#  define YYPTRDIFF_T __PTRDIFF_TYPE__
#  define YYPTRDIFF_MAXIMUM __PTRDIFF_MAX__
# elif defined PTRDIFF_MAX
#  ifndef ptrdiff_t
#   include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  endif
#  define YYPTRDIFF_T ptrdiff_t
#  define YYPTRDIFF_MAXIMUM PTRDIFF_MAX
# else
#  define YYPTRDIFF_T long
#  define YYPTRDIFF_MAXIMUM LONG_MAX
# endif
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned
# endif
#endif

#define YYSIZE_MAXIMUM                                  \
  YY_CAST (YYPTRDIFF_T,                                 \
           (YYPTRDIFF_MAXIMUM < YY_CAST (YYSIZE_T, -1)  \
            ? YYPTRDIFF_MAXIMUM                         \
            : YY_CAST (YYSIZE_T, -1)))

#define YYSIZEOF(X) YY_CAST (YYPTRDIFF_T, sizeof (X))


/* Stored state numbers (used for stacks). */
typedef yytype_int16 yy_state_t;

/* State numbers in computations.  */
typedef int yy_state_fast_t;

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(Msgid) Msgid
# endif
#endif


#ifndef YY_ATTRIBUTE_PURE
# if defined __GNUC__ && 2 < __GNUC__ + (96 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_PURE __attribute__ ((__pure__))
# else
#  define YY_ATTRIBUTE_PURE
# endif
#endif

#ifndef YY_ATTRIBUTE_UNUSED
# if defined __GNUC__ && 2 < __GNUC__ + (7 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_UNUSED __attribute__ ((__unused__))
# else
#  define YY_ATTRIBUTE_UNUSED
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YY_USE(E) ((void) (E))
#else
# define YY_USE(E) /* empty */
#endif

/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
#if defined __GNUC__ && ! defined __ICC && 406 <= __GNUC__ * 100 + __GNUC_MINOR__
# if __GNUC__ * 100 + __GNUC_MINOR__ < 407
#  define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN                           \
    _Pragma ("GCC diagnostic push")                                     \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")
# else
#  define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN                           \
    _Pragma ("GCC diagnostic push")                                     \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")              \
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# endif
# define YY_IGNORE_MAYBE_UNINITIALIZED_END      \
    _Pragma ("GCC diagnostic pop")
#else
# define YY_INITIAL_VALUE(Value) Value
#endif
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif

#if defined __cplusplus && defined __GNUC__ && ! defined __ICC && 6 <= __GNUC__
# define YY_IGNORE_USELESS_CAST_BEGIN                          \
    _Pragma ("GCC diagnostic push")                            \
    _Pragma ("GCC diagnostic ignored \"-Wuseless-cast\"")
# define YY_IGNORE_USELESS_CAST_END            \
    _Pragma ("GCC diagnostic pop")
#endif
#ifndef YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_END
#endif


#define YY_ASSERT(E) ((void) (0 && (E)))

#if !defined yyoverflow

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
#     ifndef EXIT_SUCCESS
#      define EXIT_SUCCESS 0
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's 'empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
       && ! ((defined YYMALLOC || defined malloc) \
             && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef EXIT_SUCCESS
#    define EXIT_SUCCESS 0
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined EXIT_SUCCESS
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined EXIT_SUCCESS
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* !defined yyoverflow */

#if (! defined yyoverflow \
     && (! defined __cplusplus \
         || (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL \
             && defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yy_state_t yyss_alloc;
  YYSTYPE yyvs_alloc;
  YYLTYPE yyls_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (YYSIZEOF (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (YYSIZEOF (yy_state_t) + YYSIZEOF (YYSTYPE) \
             + YYSIZEOF (YYLTYPE)) \
      + 2 * YYSTACK_GAP_MAXIMUM)

# define YYCOPY_NEEDED 1

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)                           \
    do                                                                  \
      {                                                                 \
        YYPTRDIFF_T yynewbytes;                                         \
        YYCOPY (&yyptr->Stack_alloc, Stack, yysize);                    \
        Stack = &yyptr->Stack_alloc;                                    \
        yynewbytes = yystacksize * YYSIZEOF (*Stack) + YYSTACK_GAP_MAXIMUM; \
        yyptr += yynewbytes / YYSIZEOF (*yyptr);                        \
      }                                                                 \
    while (0)

#endif

#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
/* Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(Dst, Src, Count) \
      __builtin_memcpy (Dst, Src, YY_CAST (YYSIZE_T, (Count)) * sizeof (*(Src)))
#  else
#   define YYCOPY(Dst, Src, Count)              \
      do                                        \
        {                                       \
          YYPTRDIFF_T yyi;                      \
          for (yyi = 0; yyi < (Count); yyi++)   \
            (Dst)[yyi] = (Src)[yyi];            \
        }                                       \
      while (0)
#  endif
# endif
#endif /* !YYCOPY_NEEDED */

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  897
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   78786

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  547
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  506
/* YYNRULES -- Number of rules.  */
#define YYNRULES  2262
/* YYNSTATES -- Number of states.  */
#define YYNSTATES  3800

/* YYMAXUTOK -- Last valid token kind.  */
#define YYMAXUTOK   780


/* YYTRANSLATE(TOKEN-NUM) -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex, with out-of-bounds checking.  */
#define YYTRANSLATE(YYX)                                \
  (0 <= (YYX) && (YYX) <= YYMAXUTOK                     \
   ? YY_CAST (yysymbol_kind_t, yytranslate[YYX])        \
   : YYSYMBOL_YYUNDEF)

/* YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex.  */
static const yytype_int16 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,   545,   544,   532,     2,     2,
     537,   538,   530,   528,   546,   529,   539,   531,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,   540,
     524,   526,   525,   543,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   535,     2,   536,   533,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   541,     2,   542,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   527,
     534
};

#if YYDEBUG
/* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
static const yytype_int16 yyrline[] =
{
       0,   521,   521,   537,   549,   558,   559,   560,   561,   562,
     563,   564,   565,   566,   567,   568,   569,   570,   571,   572,
     573,   574,   575,   576,   577,   578,   579,   580,   581,   582,
     583,   584,   585,   586,   587,   588,   589,   590,   591,   592,
     593,   594,   595,   596,   597,   598,   599,   601,    10,    16,
      22,    28,    34,    44,    45,    53,    64,    76,    84,    95,
     101,   105,   109,   124,   131,   132,   133,   137,   138,     7,
      16,    25,    37,    44,    51,    60,    61,    65,    66,     9,
      16,    26,    33,    44,    45,    50,    51,    52,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      92,    93,    94,    99,   100,   105,   109,   117,   118,   123,
     124,   125,   131,   136,   144,   145,     8,    33,    62,    66,
      67,    72,    73,    78,    79,    83,    84,    89,    90,     9,
      19,     3,    10,    17,    24,    31,    38,    45,    52,    61,
      61,    63,    63,    65,    65,    67,    68,     7,    15,    23,
      34,    42,    50,    68,    69,    72,    76,     9,    13,    44,
      45,    46,    50,    51,    55,    59,    60,    64,    70,    75,
      76,    77,    78,     9,    23,    29,    36,    42,    49,    59,
      63,    71,    72,    73,    77,    86,    95,   102,   103,   108,
     120,   125,   150,   155,   160,   166,   176,   186,   192,   203,
     214,   229,   230,   236,   237,   242,   243,   249,   250,   254,
     255,   260,   262,   268,   269,   273,   274,   277,   278,   283,
       7,    13,    19,    25,     8,    18,    29,    39,    49,    59,
      71,    81,    91,    95,   102,   106,   110,   119,   123,   130,
     131,   135,   139,     8,    20,    32,    47,    48,    49,    50,
      54,    63,    71,    82,    93,    94,    98,   104,   113,   114,
     115,   119,   123,   130,   134,   138,   139,     7,    26,    50,
      73,    80,    85,    86,    87,    88,    89,     7,    16,    25,
      34,    43,    52,     2,    10,    17,    24,    32,    40,    51,
      52,    53,    57,    58,    59,     6,     7,    21,    36,    56,
      57,    84,    85,    86,    87,    88,    89,    93,    94,    99,
     104,   105,   106,   107,   108,   113,   120,   121,   122,   139,
     146,   153,   163,   173,   185,   193,   202,   220,   221,   225,
     226,   230,   239,   262,   276,   283,   288,   290,   292,   294,
     297,   300,   301,   302,   303,   308,   312,   313,   318,   325,
     330,   331,   332,   333,   334,   335,   336,   337,   343,   344,
     348,   353,   360,   367,   374,   386,   387,   388,   389,   393,
     398,   399,   400,   405,   410,   411,   412,   413,   414,   415,
     420,   440,   466,   474,   484,   485,   489,   493,   494,   495,
     499,   503,   511,   512,   517,   518,   519,   523,   531,   532,
     537,   538,   542,   547,   551,   555,   560,   568,   569,   573,
     574,   578,   579,   585,   596,   609,   623,   637,   651,   665,
     688,   692,   699,   703,   711,   716,   723,   733,   734,   735,
     736,   737,   744,   751,   752,   757,   758,     9,    19,    29,
      42,    43,    47,    48,    52,    53,    54,    72,    73,    80,
      88,    96,   104,   112,   120,   131,   132,   159,   164,   172,
     188,   205,   223,   241,   242,   261,   265,   269,   273,   277,
     287,   298,   308,   317,   328,   339,   351,   366,   384,   384,
     388,   388,   392,   392,   396,   402,   409,   413,   414,   418,
     419,   433,   440,   447,   457,   458,   461,   475,   476,   480,
     481,   485,   486,   490,   491,   492,   496,   507,   515,   520,
     525,   530,   535,   543,   551,   556,   561,   568,   569,   573,
     574,   575,   579,   586,   587,   591,   592,   596,   597,   598,
     602,   603,   607,   608,   624,   625,   628,   637,   648,   649,
     650,   653,   654,   655,   659,   660,   661,   662,   666,   667,
     671,   673,   689,   691,   696,   699,   704,   708,   712,   719,
     723,   727,   731,   738,   743,   750,   751,   755,   760,   764,
     768,   776,   783,   784,   789,   790,   795,   796,   800,   810,
     811,   816,   817,   822,   824,   826,   831,   851,   852,   854,
     859,   860,   864,   865,   868,   869,   894,   895,   900,   904,
     905,   909,   910,   914,   915,   916,   917,   918,   922,   935,
     942,   949,   956,   957,   961,   962,   966,   967,   971,   972,
     976,   977,   981,   982,   986,   997,   998,   999,  1000,  1004,
    1005,  1010,  1011,  1012,  1021,  1027,  1036,  1037,  1050,  1051,
    1055,  1056,  1060,  1061,  1065,  1076,  1083,  1090,  1098,  1106,
    1116,  1124,  1133,  1142,  1151,  1155,  1160,  1165,  1176,  1187,
    1195,  1204,  1217,  1218,  1221,  1222,  1223,  1226,  1234,  1244,
    1245,  1246,  1249,  1257,  1266,  1270,  1277,  1278,  1282,  1291,
    1295,  1320,  1324,  1337,  1351,  1366,  1378,  1391,  1405,  1419,
    1432,  1447,  1466,  1472,  1477,  1483,  1490,  1491,  1499,  1503,
    1507,  1513,  1520,  1525,  1526,  1527,  1528,  1529,  1530,  1534,
    1535,  1547,  1548,  1553,  1560,  1567,  1574,  1606,  1617,  1630,
    1635,  1636,  1639,  1640,  1643,  1644,  1649,  1650,  1655,  1659,
    1665,  1686,  1694,  1708,  1711,  1715,  1715,  1718,  1719,  1721,
    1726,  1733,  1738,  1744,  1749,  1755,  1759,  1766,  1773,  1783,
    1784,  1788,  1790,  1793,  1797,  1798,  1799,  1800,  1801,  1802,
    1807,  1827,  1828,  1829,  1830,  1841,  1855,  1856,  1862,  1867,
    1872,  1877,  1882,  1887,  1892,  1897,  1903,  1909,  1915,  1922,
    1944,  1953,  1957,  1965,  1969,  1977,  1989,  2010,  2014,  2020,
    2024,  2037,  2045,  2055,  2057,  2059,  2061,  2063,  2065,  2070,
    2071,  2078,  2087,  2095,  2104,  2115,  2123,  2124,  2125,  2129,
    2129,  2132,  2132,  2135,  2135,  2138,  2138,  2141,  2141,  2144,
    2144,  2147,  2147,  2150,  2150,  2153,  2153,  2156,  2156,  2159,
    2159,  2162,  2162,  2165,  2165,  2168,  2170,  2172,  2174,  2176,
    2178,  2180,  2182,  2184,  2186,  2188,  2190,  2192,  2194,  2199,
    2204,  2210,  2217,  2222,  2228,  2234,  2265,  2267,  2269,  2277,
    2292,  2294,  2296,  2298,  2300,  2302,  2304,  2306,  2308,  2310,
    2312,  2314,  2316,  2318,  2320,  2322,  2325,  2327,  2329,  2332,
    2334,  2336,  2338,  2340,  2345,  2350,  2357,  2362,  2369,  2374,
    2381,  2386,  2394,  2402,  2410,  2418,  2436,  2444,  2452,  2460,
    2468,  2476,  2484,  2492,  2496,  2512,  2520,  2528,  2536,  2544,
    2552,  2560,  2564,  2568,  2572,  2576,  2584,  2592,  2600,  2608,
    2628,  2650,  2661,  2668,  2682,  2690,  2695,  2705,  2714,  2735,
    2737,  2739,  2741,  2743,  2745,  2747,  2749,  2751,  2753,  2755,
    2757,  2759,  2761,  2763,  2765,  2767,  2769,  2771,  2773,  2775,
    2777,  2781,  2785,  2789,  2803,  2804,  2818,  2819,  2820,  2831,
    2855,  2866,  2876,  2880,  2884,  2891,  2895,  2902,  2909,  2910,
    2911,  2912,  2913,  2914,  2915,  2916,  2927,  2932,  2941,  2947,
    2954,  2974,  2978,  2985,  2992,  3000,  3008,  3019,  3039,  3075,
    3086,  3087,  3094,  3100,  3102,  3104,  3108,  3117,  3122,  3129,
    3144,  3151,  3155,  3159,  3163,  3167,  3177,  3186,  3208,  3209,
    3213,  3214,  3215,  3219,  3220,  3227,  3228,  3232,  3233,  3238,
    3246,  3248,  3262,  3265,  3292,  3293,  3296,  3297,  3305,  3313,
    3321,  3330,  3340,  3358,  3404,  3413,  3422,  3431,  3440,  3452,
    3453,  3454,  3455,  3456,  3470,  3471,  3474,  3475,  3479,  3489,
    3490,  3494,  3495,  3499,  3506,  3507,  3512,  3513,  3518,  3519,
    3522,  3523,  3524,  3527,  3528,  3531,  3532,  3533,  3534,  3535,
    3536,  3537,  3538,  3539,  3540,  3541,  3542,  3543,  3544,  3547,
    3549,  3554,  3556,  3561,  3563,  3565,  3567,  3569,  3571,  3573,
    3575,  3589,  3591,  3596,  3600,  3607,  3612,  3618,  3622,  3629,
    3634,  3641,  3646,  3654,  3658,  3664,  3668,  3677,  3688,  3689,
    3693,  3697,  3704,  3705,  3706,  3707,  3708,  3709,  3710,  3711,
    3712,  3713,  3714,  3715,  3716,  3717,  3718,  3728,  3732,  3739,
    3746,  3747,  3763,  3767,  3772,  3776,  3791,  3796,  3800,  3803,
    3806,  3807,  3808,  3811,  3818,  3819,  3820,  3830,  3844,  3845,
    3849,  3860,  3861,  3864,  3865,  3873,  3879,  3883,  3890,  3898,
    3906,  3914,  3924,  3925,  3930,  3931,  3935,  3936,  3937,  3941,
    3950,  3958,  3966,  3975,  3990,  3991,  3996,  3997,  4007,  4008,
    4012,  4013,  4017,  4018,  4021,  4037,  4045,  4053,  4063,  4064,
    4068,  4072,  4078,  4080,  4085,  4086,  4090,  4091,  4094,  4098,
    4099,  4103,  4104,  4107,  4108,  4109,  4112,  4116,  4117,  4121,
    4122,  4124,  4125,  4126,  4136,  4137,  4141,  4143,  4149,  4150,
    4154,  4155,  4158,  4169,  4172,  4183,  4187,  4191,  4203,  4207,
    4216,  4223,  4261,  4265,  4269,  4273,  4277,  4281,  4285,  4291,
    4308,  4309,  4310,  4313,  4314,  4315,  4318,  4319,  4320,  4323,
    4324,  4327,  4329,  4334,  4335,  4338,  4342,  4343,     7,    19,
      33,     7,    18,    19,    23,    24,    25,    26,    27,    28,
       2,     7,    12,    17,    22,    31,    38,    48,    49,    56,
       7,    15,    26,    27,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,     8,    22,    36,    48,    56,
      70,    71,    72,    73,    74,    87,    88,    93,    94,    98,
      99,     7,    16,    28,    29,     9,    18,    27,    36,    45,
      54,    63,    72,    85,    87,    93,    94,    99,   103,   107,
     118,   126,   130,   138,   139,   143,   150,   151,   156,   163,
     173,   182,   191,   200,   209,   217,   225,   233,   241,   250,
     258,   266,   275,   284,   293,   302,   319,   328,   337,   346,
     356,   369,   384,   393,   401,   416,   424,   434,   444,   451,
     458,   466,   473,   484,   485,   490,   494,   499,   504,   512,
     513,   518,   522,   523,   524,     7,    14,    22,     1,    30,
      49,    61,    62,    63,    67,    68,    73,    77,    82,    86,
      94,    95,    99,   100,   105,   106,   110,   111,   116,   117,
     118,   119,   120,   121,   122,   123,   128,   136,   140,   145,
     146,   151,   155,   160,   164,   168,   172,   176,   180,   184,
     188,   192,   196,   200,   204,   208,   212,   216,   220,   228,
     233,   234,   235,   236,   237,   243,   247,     7,    17,    26,
      35,    46,    47,    49,    50,    53,    54,    55,     7,     8,
      21,    34,    47,    65,    87,    88,    89,    90,     9,    17,
      29,    30,    34,    35,    36,    41,    42,    43,    48,    52,
      56,    60,    64,    68,    72,    76,    80,    84,    88,    92,
      97,   101,   105,   112,   113,   117,   118,   119,     2,     5,
      12,    22,    23,    11,    24,    37,    54,    55,    56,    61,
       7,    17,    27,    40,    41,    45,    46,    47,    51,    52,
      57,    61,    68,    72,     9,    19,    29,    39,    49,    59,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    96,
      97,    98,    99,   100,   101,   106,   107,   112,   113,   114,
     119,   120,   121,     7,    14,    31,    51,    55,    65,    69,
      75,    76,     7,    18,    31,    35,    42,    53,    54,    60,
      61,     6,    15,    25,    35,    45,    55,    65,    75,    85,
      95,   106,   117,   127,   140,   141,     7,    25,    25,    25,
      25,    25,    25,    25,    25,    25,    25,    25,    25,    25,
      25,    25,    25,    25,    25,    25,    25,    25,    25,    25,
      25,    25,    25,    25,    25,    25,    25,    25,    25,    25,
      25,    25,    25,    25,    25,    25,    25,    25,    25,    25,
      25,    25,    25,    25,    25,    25,    25,    25,    25,    25,
      25,    25,    25,    25,    25,    25,    25,    25,    25,    25,
      25,    25,    25,    25,    25,    25,    25,    25,    25,    25,
      25,    25,    25,    25,    25,    25,    25,    25,    25,    25,
      25,    25,    25,    25,    25,    25,    25,    25,    25,    25,
      25,    25,    25,    25,    25,    25,    25,    25,    25,    25,
      25,    25,    25,    25,    25,    25,    25,    25,    25,    25,
      25,    25,    25,    25,    25,    25,    25,    25,    25,    25,
      25,    25,    25,    25,    25,    25,    25,    25,    25,    25,
      25,    25,    25,    25,    25,    25,    25,    25,    25,    25,
      25,    25,    25,    25,    25,    25,    25,    25,    25,    25,
      25,    25,    25,    25,    25,    25,    25,    25,    25,    25,
      25,    25,    25,    25,    25,    25,    25,    25,    25,    25,
      25,    25,    25,    25,    25,    25,    25,    25,    25,    25,
      25,    25,    25,    25,    25,    25,    25,    25,    25,    25,
      25,    25,    25,    25,    25,    25,    25,    25,    25,    25,
      25,    25,    25,    25,    25,    25,    25,    25,    25,    25,
      25,    25,    25,    25,    25,    25,    25,    25,    25,    25,
      25,    25,    25,    25,    25,    25,    25,    25,    25,    25,
      25,    25,    25,    25,    25,    25,    25,    25,    25,    25,
      25,    25,    25,    25,    25,    25,    25,    25,    25,    25,
      25,    25,    25,    25,    25,    25,    25,    25,    25,    25,
      25,    25,    25,    25,    25,    25,    25,    25,    25,    25,
      25,    25,    25,    25,    25,    25,    25,    25,    25,    25,
      25,    25,    25,    25,    25,    25,    25,    25,    25,    25,
      25,    25,    25,    25,    25,    25,    25,    25,    25,    25,
      25,    25,    25,    25,    25,    25,    25,    25,    25,    25,
      25,    25,    25,    25,    25,    25,    25,    25,    25,    25,
      25,    25,    25,    25,    25,    25,    25,    25,    25,    26,
      26,    26,    26,    26,    26,    26,    26,    26,    26,    26,
      26,    26,    26,    26,    26,    26,    26,    26,    26,    26,
      26,    26,    26,    26,    26,    26,    26,    26,    26,    26,
      26,    26,    26,    26,    26,    26,    26,    26,    26,    26,
      26,    26,    26,    26,    26,    26,    26,    26,    26,    26,
      26,    26,    26,    27,    27,    27,    27,    27,    27,    27,
      27,    27,    27,    27,    27,    27,    27,    27,    27,    27,
      27,    27,    27,    27,    27,    27,    27,    27,    27,    27,
      27,    27,    28,    28,    28,    28,    28,    28,    28,    28,
      28,    28,    28,    28,    28,    28,    28,    28,    28,    28,
      28,    28,    28,    28,    28,    28,    28,    28,    28,    28,
      28,    28,    28,    29,    29,    29,    29,    29,    29,    29,
      29,    29,    29,    29,    29,    29,    29,    29,    29,    29,
      29,    29,    29,    29,    29,    29,    29,    29,    29,    29,
      29,    29,    29,    29,    29,    29,    29,    29,    29,    29,
      29,    29,    29,    29,    29,    29,    29,    29,    29,    29,
      29,    29,    29,    29,    29,    29,    29,    29,    29,    29,
      29,    29,    29,    29,    29,    29,    29,    29,    29,    29,
      29,    29,    29,    29,    29,    29,    29,    29,    29,    29,
      29,    29,    29,    29,    29,    29,    30,    30,    30,    30,
      30,    30,    30,    30,    30,    30,    30,    30,    30,    30,
      30,    30,    30,    30,    30,    30,    30,    30,    30,    30,
      30,    30,    30,    30,    30,    30,    30,    30,    30,    30,
      31,    31,    31,    31,    31,    31,    31,    31,    31,    31,
      31,    31,    31,    31,    31,    31,    31,    31,    31,    31,
      31,    31,    31,    31,    31,    31,    31,    31,    31,    31,
      31,    31,    31,    31,    31,    31,    31,    31,    31,    31,
      31,    31,    31,    31,    31,    31,    31,    31,    31,    31,
      31,    31,    31,    31,    31,    31,    31,    31,    31,    31,
      31,    31,    31,    31,    31,    31,    31,    31,    31,    31,
      31,    31,    31,    31,    31,    31,    31,    31,    31,    31,
      31,    31,    31
};
#endif

/** Accessing symbol of state STATE.  */
#define YY_ACCESSING_SYMBOL(State) YY_CAST (yysymbol_kind_t, yystos[State])

#if YYDEBUG || 0
/* The user-facing name of the symbol whose (internal) number is
   YYSYMBOL.  No bounds checking.  */
static const char *yysymbol_name (yysymbol_kind_t yysymbol) YY_ATTRIBUTE_UNUSED;

/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "\"end of file\"", "error", "\"invalid token\"", "IDENT", "FCONST",
  "SCONST", "BCONST", "XCONST", "Op", "ICONST", "PARAM", "TYPECAST",
  "DOT_DOT", "COLON_EQUALS", "EQUALS_GREATER", "INTEGER_DIVISION",
  "POWER_OF", "SINGLE_ARROW", "DOUBLE_ARROW", "SINGLE_COLON",
  "LESS_EQUALS", "GREATER_EQUALS", "NOT_EQUALS", "ABORT_P", "ABSOLUTE_P",
  "ACCESS", "ACTION", "ADD_P", "ADMIN", "AFTER", "AGGREGATE", "ALL",
  "ALSO", "ALTER", "ALWAYS", "ANALYSE", "ANALYZE", "AND", "ANTI", "ANY",
  "API", "ARRAY", "AS", "ASC_P", "ASOF", "ASSERTION", "ASSIGNMENT",
  "ASYMMETRIC", "AT", "ATTACH", "ATTRIBUTE", "AUTHORIZATION", "BACKWARD",
  "BEFORE", "BEGIN_P", "BETWEEN", "BIGINT", "BINARY", "BIT", "BOOLEAN_P",
  "BOTH", "BY", "CACHE", "CALL_P", "CALLED", "CASCADE", "CASCADED", "CASE",
  "CAST", "CATALOG_P", "CENTURIES_P", "CENTURY_P", "CHAIN", "CHAR_P",
  "CHARACTER", "CHARACTERISTICS", "CHECK_P", "CHECKPOINT", "CLASS",
  "CLOSE", "CLUSTER", "COALESCE", "COLLATE", "COLLATION", "COLUMN",
  "COLUMNS", "COMMENT", "COMMENTS", "COMMIT", "COMMITTED", "COMPRESSION",
  "CONCURRENTLY", "CONFIGURATION", "CONFLICT", "CONNECTION", "CONSTRAINT",
  "CONSTRAINTS", "CONTENT_P", "CONTINUE_P", "CONVERSION_P", "COPY", "COST",
  "CREATE_P", "CROSS", "CSV", "CUBE", "CURRENT_P", "CURSOR", "CYCLE",
  "DATA_P", "DATABASE", "DAY_P", "DAYS_P", "DEALLOCATE", "DEC", "DECADE_P",
  "DECADES_P", "DECIMAL_P", "DECLARE", "DEFAULT", "DEFAULTS", "DEFERRABLE",
  "DEFERRED", "DEFINER", "DELETE_P", "DELIMITER", "DELIMITERS", "DEPENDS",
  "DESC_P", "DESCRIBE", "DETACH", "DICTIONARY", "DISABLE_P", "DISCARD",
  "DISTINCT", "DO", "DOCUMENT_P", "DOMAIN_P", "DOUBLE_P", "DROP", "EACH",
  "EDGES", "ELSE", "ENABLE_P", "ENCODING", "ENCRYPTED", "END_P", "ENUM_P",
  "ESCAPE", "EVENT", "EXCEPT", "EXCLUDE", "EXCLUDING", "EXCLUSIVE",
  "EXECUTE", "EXISTS", "EXPLAIN", "EXPORT_P", "EXPORT_STATE", "EXTENSION",
  "EXTENSIONS", "EXTERNAL", "EXTRACT", "FALSE_P", "FAMILY", "FEATURES",
  "FETCH", "FILTER", "FIRST_P", "FLOAT_P", "FOLLOWING", "FOR", "FORCE",
  "FOREIGN", "FORWARD", "FREEZE", "FROM", "FULL", "FUNCTION", "FUNCTIONS",
  "GENERATED", "GLOB", "GLOBAL", "GNN", "GRANT", "GRANTED", "GROUP_P",
  "GROUPING", "GROUPING_ID", "GROUPS", "HANDLER", "HAVING", "HEADER_P",
  "HOLD", "HOUR_P", "HOURS_P", "IDENTITY_P", "IF_P", "IGNORE_P", "ILIKE",
  "IMMEDIATE", "IMMUTABLE", "IMPLICIT_P", "IMPORT_P", "IN_P", "INCLUDE_P",
  "INCLUDING", "INCREMENT", "INDEX", "INDEXES", "INHERIT", "INHERITS",
  "INITIALLY", "INLINE_P", "INNER_P", "INOUT", "INPUT_P", "INSENSITIVE",
  "INSERT", "INSTALL", "INSTEAD", "INT_P", "INTEGER", "INTERSECT",
  "INTERVAL", "INTO", "INVOKER", "IS", "ISNULL", "ISOLATION", "JOIN",
  "JSON", "KEY", "LABEL", "LAMBDA", "LANGUAGE", "LARGE_P", "LAST_P",
  "LATERAL_P", "LEADING", "LEAKPROOF", "LEFT", "LEVEL", "LIKE", "LIMIT",
  "LISTEN", "LLM", "LM", "LOAD", "LOCAL", "LOCATION", "LOCK_P", "LOCKED",
  "LOGGED", "MACRO", "MAP", "MAPPING", "MATCH", "MATERIALIZED", "MAXVALUE",
  "METHOD", "MICROSECOND_P", "MICROSECONDS_P", "MILLENNIA_P",
  "MILLENNIUM_P", "MILLISECOND_P", "MILLISECONDS_P", "MINUTE_P",
  "MINUTES_P", "MINVALUE", "MODE", "MODEL", "MONTH_P", "MONTHS_P", "MOVE",
  "NAME_P", "NAMES", "NATIONAL", "NATURAL", "NCHAR", "NEW", "NEXT", "NO",
  "NODES", "NONE", "NOT", "NOTHING", "NOTIFY", "NOTNULL", "NOWAIT",
  "NULL_P", "NULLIF", "NULLS_P", "NUMERIC", "OBJECT_P", "OF", "OFF",
  "OFFSET", "OIDS", "OLD", "ON", "ONLY", "OPERATOR", "OPTION", "OPTIONS",
  "OR", "ORDER", "ORDINALITY", "OTHERS", "OUT_P", "OUTER_P", "OUTPUT",
  "OVER", "OVERLAPS", "OVERLAY", "OVERRIDING", "OWNED", "OWNER",
  "PARALLEL", "PARSER", "PARTIAL", "PARTITION", "PARTITIONED", "PASSING",
  "PASSWORD", "PATH", "PERCENT", "PERSISTENT", "PIVOT", "PIVOT_LONGER",
  "PIVOT_WIDER", "PLACING", "PLANS", "POLICY", "POSITION", "POSITIONAL",
  "PRAGMA_P", "PRECEDING", "PRECISION", "PREDICT", "PREPARE", "PREPARED",
  "PRESERVE", "PRIMARY", "PRIOR", "PRIVILEGES", "PROCEDURAL", "PROCEDURE",
  "PROGRAM", "PROMPT", "PUBLICATION", "QUALIFY", "QUARTER_P", "QUARTERS_P",
  "QUOTE", "RANGE", "READ_P", "REAL", "REASSIGN", "RECHECK", "RECURSIVE",
  "REF", "REFERENCES", "REFERENCING", "REFRESH", "REINDEX", "RELATIVE_P",
  "RELEASE", "RENAME", "REPEATABLE", "REPLACE", "REPLICA", "RESET",
  "RESPECT_P", "RESTART", "RESTRICT", "RETURNING", "RETURNS", "REVOKE",
  "RIGHT", "ROLE", "ROLLBACK", "ROLLUP", "ROW", "ROWS", "RULE", "SAMPLE",
  "SAVEPOINT", "SCHEMA", "SCHEMAS", "SCOPE", "SCROLL", "SEARCH",
  "SECOND_P", "SECONDS_P", "SECRET", "SECURITY", "SELECT", "SEMI",
  "SEQUENCE", "SEQUENCES", "SERIALIZABLE", "SERVER", "SESSION", "SET",
  "SETOF", "SETS", "SHARE", "SHOW", "SIMILAR", "SIMPLE", "SKIP",
  "SMALLINT", "SNAPSHOT", "SOME", "SORTED", "SQL_P", "STABLE",
  "STANDALONE_P", "START", "STATEMENT", "STATISTICS", "STDIN", "STDOUT",
  "STORAGE", "STORED", "STRICT_P", "STRIP_P", "STRUCT", "SUBSCRIPTION",
  "SUBSTRING", "SUMMARIZE", "SYMMETRIC", "SYSID", "SYSTEM_P", "TABLE",
  "TABLES", "TABLESAMPLE", "TABLESPACE", "TABULAR", "TAKES", "TEMP",
  "TEMPLATE", "TEMPORARY", "TEXT_P", "THEN", "TIES", "TIME", "TIMESTAMP",
  "TO", "TRAILING", "TRANSACTION", "TRANSFORM", "TREAT", "TRIGGER", "TRIM",
  "TRUE_P", "TRUNCATE", "TRUSTED", "TRY_CAST", "TYPE_P", "TYPES_P",
  "UNBOUNDED", "UNCOMMITTED", "UNENCRYPTED", "UNION", "UNIQUE", "UNKNOWN",
  "UNLISTEN", "UNLOGGED", "UNPACK", "UNPIVOT", "UNTIL", "UPDATE", "USE_P",
  "USER", "USING", "VACUUM", "VALID", "VALIDATE", "VALIDATOR", "VALUE_P",
  "VALUES", "VARCHAR", "VARIABLE_P", "VARIADIC", "VARYING", "VERBOSE",
  "VERSION_P", "VIEW", "VIEWS", "VIRTUAL", "VOLATILE", "WEEK_P", "WEEKS_P",
  "WHEN", "WHERE", "WHITESPACE_P", "WINDOW", "WITH", "WITHIN", "WITHOUT",
  "WORK", "WRAPPER", "WRITE_P", "XML_P", "XMLATTRIBUTES", "XMLCONCAT",
  "XMLELEMENT", "XMLEXISTS", "XMLFOREST", "XMLNAMESPACES", "XMLPARSE",
  "XMLPI", "XMLROOT", "XMLSERIALIZE", "XMLTABLE", "YEAR_P", "YEARS_P",
  "YES_P", "ZONE", "NOT_LA", "NULLS_LA", "WITH_LA", "'<'", "'>'", "'='",
  "POSTFIXOP", "'+'", "'-'", "'*'", "'/'", "'%'", "'^'", "UMINUS", "'['",
  "']'", "'('", "')'", "'.'", "';'", "'{'", "'}'", "'?'", "'$'", "'#'",
  "','", "$accept", "stmtblock", "stmtmulti", "stmt",
  "AlterObjectSchemaStmt", "AlterSeqStmt", "SeqOptList", "opt_with",
  "NumericOnly", "SeqOptElem", "opt_by", "SignedIconst", "AlterTableStmt",
  "alter_identity_column_option_list", "alter_column_default",
  "alter_identity_column_option", "alter_generic_option_list",
  "qualify_list", "qualify_el", "qualified_column", "qualifiedColumnDef",
  "alter_table_cmd", "alter_using", "alter_generic_option_elem",
  "alter_table_cmds", "alter_generic_options", "opt_set_data",
  "AnalyzeStmt", "AttachStmt", "DetachStmt", "opt_database",
  "opt_database_alias", "CallStmt", "CheckPointStmt", "opt_col_id",
  "CommentOnStmt", "comment_value", "comment_on_type_any_name",
  "qualified_name", "ColId", "ColIdOrString", "Sconst", "indirection",
  "indirection_el", "attr_name", "ColLabel", "CopyStmt",
  "copy_database_flag", "copy_from", "copy_delimiter",
  "copy_generic_opt_arg_list", "opt_using", "opt_as", "opt_program",
  "copy_options", "copy_generic_opt_arg", "copy_generic_opt_elem",
  "opt_oids", "copy_opt_list", "opt_binary", "copy_opt_item",
  "copy_generic_opt_arg_list_item", "copy_file_name",
  "copy_generic_opt_list", "CreateStmt", "ConstraintAttributeSpec",
  "def_arg", "OptParenthesizedSeqOptList", "generic_option_arg",
  "key_action", "ColConstraint", "ColConstraintElem",
  "GeneratedColumnType", "opt_GeneratedColumnType",
  "GeneratedConstraintElem", "generic_option_elem", "key_update",
  "key_actions", "OnCommitOption", "reloptions", "opt_no_inherit",
  "TableConstraint", "TableLikeOption", "reloption_list", "ExistingIndex",
  "ConstraintAttr", "OptWith", "definition", "TableLikeOptionList",
  "generic_option_name", "ConstraintAttributeElem", "regularColumnDef",
  "generatedColumnDef", "columnDef", "def_list", "index_name",
  "TableElement", "def_elem", "opt_definition", "OptTableElementList",
  "columnElem", "opt_column_list", "ColQualList", "key_delete",
  "reloption_elem", "columnList", "columnList_opt_comma", "func_type",
  "ConstraintElem", "TableElementList", "key_match", "TableLikeClause",
  "OptTemp", "generated_when", "CreateAsStmt", "opt_with_data",
  "create_as_target", "CreateFunctionStmt", "table_macro_definition",
  "table_macro_definition_parens", "table_macro_list_internal",
  "table_macro_list", "macro_definition", "macro_definition_list",
  "macro_alias", "param_list", "CreateModelStmt", "model_type_value",
  "model_on", "opt_feat_col_list", "feat_col_list", "with_result_col_list",
  "result_col_list", "opt_option", "opt_api", "CreateSchemaStmt",
  "OptSchemaEltList", "schema_stmt", "CreateSecretStmt", "opt_secret_name",
  "opt_persist", "opt_storage_specifier", "create_secret_generic_opt_arg",
  "create_secret_generic_opt_elem", "create_secret_generic_opt_list",
  "CreateSeqStmt", "OptSeqOptList", "CreateTypeStmt", "create_type_value",
  "opt_enum_val_list", "enum_val_list", "DeallocateStmt", "DeleteStmt",
  "relation_expr_opt_alias", "where_or_current_clause", "using_clause",
  "DropStmt", "drop_type_any_name", "drop_type_name", "any_name_list",
  "opt_drop_behavior", "drop_type_name_on_any_name", "DropSecretStmt",
  "opt_storage_drop_specifier", "ExecuteStmt", "execute_param_expr",
  "execute_param_list", "execute_param_clause", "ExplainStmt",
  "opt_verbose", "explain_option_arg", "ExplainableStmt",
  "NonReservedWord", "NonReservedWord_or_Sconst", "explain_option_list",
  "analyze_keyword", "opt_boolean_or_string", "explain_option_elem",
  "explain_option_name", "ExportStmt", "ImportStmt", "IndexStmt",
  "access_method", "access_method_clause", "opt_concurrently",
  "opt_index_name", "opt_reloptions", "opt_unique", "InsertStmt",
  "insert_rest", "insert_target", "opt_by_name_or_position",
  "opt_conf_expr", "opt_with_clause", "insert_column_item", "set_clause",
  "opt_or_action", "opt_on_conflict", "index_elem", "returning_clause",
  "override_kind", "set_target_list", "opt_collate", "opt_class",
  "insert_column_list", "set_clause_list", "set_clause_list_opt_comma",
  "index_params", "set_target", "LoadStmt", "opt_force", "file_name",
  "opt_ext_version", "PragmaStmt", "PrepareStmt", "prep_type_clause",
  "PreparableStmt", "RenameStmt", "opt_column", "SelectStmt",
  "select_with_parens", "select_no_parens", "select_clause", "opt_select",
  "simple_select", "value_or_values", "pivot_keyword", "unpivot_keyword",
  "pivot_column_entry", "pivot_column_list_internal", "pivot_column_list",
  "with_clause", "cte_list", "common_table_expr", "opt_on_key",
  "column_ref_list_opt_comma", "column_ref_list", "opt_materialized",
  "into_clause", "OptTempTableName", "opt_table", "all_or_distinct",
  "by_name", "distinct_clause", "opt_all_clause", "opt_ignore_nulls",
  "opt_sort_clause", "sort_clause", "sortby_list", "sortby",
  "opt_asc_desc", "opt_nulls_order", "select_limit", "opt_select_limit",
  "limit_clause", "offset_clause", "sample_value", "sample_count",
  "sample_clause", "opt_sample_func", "tablesample_entry",
  "tablesample_clause", "opt_tablesample_clause", "opt_repeatable_clause",
  "at_unit", "at_specifier", "opt_at_clause", "select_limit_value",
  "select_offset_value", "select_fetch_first_value", "I_or_F_const",
  "row_or_rows", "first_or_next", "group_clause", "group_by_list",
  "group_by_list_opt_comma", "group_by_item", "empty_grouping_set",
  "rollup_clause", "cube_clause", "grouping_sets_clause",
  "grouping_or_grouping_id", "having_clause", "qualify_clause",
  "for_locking_clause", "opt_for_locking_clause", "for_locking_items",
  "for_locking_item", "for_locking_strength", "locked_rels_list",
  "opt_nowait_or_skip", "values_clause", "values_clause_opt_comma",
  "from_clause", "from_list", "from_list_opt_comma",
  "alias_prefix_colon_clause", "table_ref", "opt_pivot_group_by",
  "opt_include_nulls", "single_pivot_value", "pivot_header", "pivot_value",
  "pivot_value_list", "unpivot_header", "unpivot_value",
  "unpivot_value_list", "joined_table", "alias_clause", "opt_alias_clause",
  "func_alias_clause", "join_type", "join_outer", "join_qual",
  "relation_expr", "func_table", "rowsfrom_item", "rowsfrom_list",
  "opt_col_def_list", "opt_ordinality", "where_clause",
  "TableFuncElementList", "TableFuncElement", "opt_collate_clause",
  "colid_type_list", "RowOrStruct", "opt_Typename", "Typename",
  "qualified_typename", "opt_array_bounds", "SimpleTypename",
  "ConstTypename", "GenericType", "opt_type_modifiers", "Numeric",
  "opt_float", "Bit", "ConstBit", "BitWithLength", "BitWithoutLength",
  "Character", "ConstCharacter", "CharacterWithLength",
  "CharacterWithoutLength", "character", "opt_varying", "ConstDatetime",
  "ConstInterval", "opt_timezone", "year_keyword", "month_keyword",
  "day_keyword", "hour_keyword", "minute_keyword", "second_keyword",
  "millisecond_keyword", "microsecond_keyword", "week_keyword",
  "quarter_keyword", "decade_keyword", "century_keyword",
  "millennium_keyword", "opt_interval", "a_expr", "b_expr", "c_expr",
  "d_expr", "indirection_expr_or_a_expr", "param_expr", "indirection_expr",
  "list_expr", "struct_expr", "map_expr", "func_application", "func_expr",
  "func_expr_windowless", "func_expr_common_subexpr", "list_comprehension",
  "within_group_clause", "filter_clause", "export_clause", "window_clause",
  "window_definition_list", "window_definition", "over_clause",
  "window_specification", "opt_existing_window_name",
  "opt_partition_clause", "opt_frame_clause", "frame_extent",
  "frame_bound", "opt_window_exclusion_clause", "qualified_row", "row",
  "dict_arg", "dict_arguments", "dict_arguments_opt_comma", "map_arg",
  "map_arguments", "map_arguments_opt_comma",
  "opt_map_arguments_opt_comma", "sub_type", "all_Op", "MathOp", "qual_Op",
  "qual_all_Op", "subquery_Op", "any_operator", "c_expr_list",
  "c_expr_list_opt_comma", "expr_list", "expr_list_opt_comma",
  "opt_expr_list_opt_comma", "func_arg_list", "func_arg_expr", "type_list",
  "extract_list", "extract_arg", "overlay_list", "overlay_placing",
  "position_list", "substr_list", "substr_from", "substr_for", "trim_list",
  "in_expr", "case_expr", "when_clause_list", "when_clause",
  "case_default", "case_arg", "columnref", "columnref_opt_indirection",
  "opt_slice_bound", "opt_indirection", "opt_func_arguments",
  "extended_indirection_el", "opt_extended_indirection", "opt_asymmetric",
  "opt_target_list_opt_comma", "target_list", "target_list_opt_comma",
  "target_el", "except_list", "except_name", "except_name_list",
  "except_name_list_opt_comma", "opt_except_list", "replace_list_el",
  "replace_list", "replace_list_opt_comma", "opt_replace_list",
  "rename_list_el", "rename_list", "rename_list_opt_comma",
  "opt_rename_list", "qualified_name_list", "name_list",
  "name_list_opt_comma", "name_list_opt_comma_opt_bracket", "name",
  "func_name", "AexprConst", "Iconst", "type_function_name",
  "function_name_token", "type_name_token", "any_name", "attrs",
  "opt_name_list", "param_name", "ColLabelOrString", "TransactionStmt",
  "opt_transaction", "opt_transaction_type", "UpdateStmt",
  "UpdateExtensionsStmt", "unreserved_keyword", "col_name_keyword",
  "func_name_keyword", "type_name_keyword", "other_keyword",
  "type_func_name_keyword", "reserved_keyword", "UseStmt", "VacuumStmt",
  "vacuum_option_elem", "opt_full", "vacuum_option_list", "opt_freeze",
  "VariableResetStmt", "generic_reset", "reset_rest", "VariableSetStmt",
  "set_rest", "generic_set", "var_value", "zone_value", "var_list",
  "VariableShowStmt", "describe_or_desc", "show_or_describe", "opt_tables",
  "var_name", "ViewStmt", "opt_check_option", YY_NULLPTR
};

static const char *
yysymbol_name (yysymbol_kind_t yysymbol)
{
  return yytname[yysymbol];
}
#endif

#define YYPACT_NINF (-3279)

#define yypact_value_is_default(Yyn) \
  ((Yyn) == YYPACT_NINF)

#define YYTABLE_NINF (-2180)

#define yytable_value_is_error(Yyn) \
  ((Yyn) == YYTABLE_NINF)

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
static const int yypact[] =
{
    6059,     1,   116, -3279, -3279,   248,     1, 53979, 71546,   118,
       1,   303,  1836, 56554, -3279, -3279, 50353,  7123,     1, 59662,
   78230,   350,   503, 34642,   492, 60180, -3279, -3279, -3279, 71546,
   59662, 60698,     1,   382, 72064, -3279,     1, 37752, 57072,   356,
   -3279, 59662,   114,   293, 61216, 59662,  6750,   641,   113, -3279,
   -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279,
   -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279,
   -3279, -3279, -3279, -3279,   346, -3279, -3279, -3279, -3279,   231,
   -3279,   637, -3279, -3279, -3279, -3279,   151, -3279,   858,   163,
   34642, 34642,  1364,   375, -3279, -3279, -3279, -3279, -3279, -3279,
   -3279, -3279, -3279, -3279, 37233, -3279, -3279, -3279, -3279, 61734,
   59662, 62252, 57590, 62770, -3279,   594,   561,   952,   632,   185,
   -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279,
   -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279,
   -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279,
   -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279,
   -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279,
   -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279,
   -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279,
   -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279,
   -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279,
   -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279,
   -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279,
   -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279,
   -3279, -3279, -3279,   206, -3279, -3279, -3279, -3279, -3279, -3279,
   -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279,
   -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279,
   -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279,
   -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279,
   -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279,
   -3279, -3279, -3279, -3279, -3279,   495, -3279, -3279, -3279, -3279,
   -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279,
   -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279,
   -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279,
   -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279,
   -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279,
   -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279,
   -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279,
   -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279,
   -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279,
   -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279,
   -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279,
   -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279,
   -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279,
   -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279,
   -3279, -3279, -3279, -3279, -3279, -3279, -3279,   216, -3279, -3279,
   -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279,
   -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279,
   -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279,
   -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279,
   -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279,
   -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279,
   -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279,
   -3279, -3279,   719, -3279,   548, -3279,   218, -3279, -3279, -3279,
   -3279, -3279, -3279, -3279, -3279, -3279,   880, -3279, -3279,  1035,
    3806, 59662,   784,   950,   735, -3279, 63288, -3279,   771, -3279,
   -3279,  2717,   789,   971, -3279, -3279, 58108, -3279, -3279, -3279,
   -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279,
   -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279,
   -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279,
   -3279, -3279, -3279, -3279, -3279, 50871, -3279, -3279, -3279, -3279,
   -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279,
   -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279,
   -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279,
   -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279,
   -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279,
   -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279,
   -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279,
   -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279,
   -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279,
   -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279,
   -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279,
   -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279,
   -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279,
   -3279, -3279,   935, -3279, -3279,   758, -3279,   209, -3279, -3279,
     787,   751, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279,
   -3279, -3279,   872, -3279, -3279, -3279,   889, 72582, 63806, 64324,
   -3279,   752,  2169,  7143, 78249, 33086, -3279, -3279, -3279, -3279,
   -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279,
   -3279, -3279, -3279, -3279,   346, -3279, -3279, -3279, -3279, -3279,
   -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279,
   60180, 71546,   798,   834,  1207,   845, 35678,   861, 38271,   874,
     926,   937,  1140,   955,   960,   974,  1010,   293, 33605,   878,
     719,  1369, 64842, 64842,   -33, 35160,  4590, -3279, 64842, 65360,
   -3279,   907, -3279,   952, -3279, -3279, -3279, -3279,   -69,  1019,
   -3279, 65878, 65878, 65878,   934,  1334, 65878, -3279, -3279, -3279,
    1030, -3279, -3279,  1295, 21335, 21335, 73100, 73100,   952, 73100,
    1087, 73100, -3279, -3279,    71,   632, -3279,   719, -3279, -3279,
    1364, -3279, -3279, 57072, -3279, -3279,   245,  1479, 21335, 59662,
    1124, -3279,  1149,  1124,  1141,  1144,  1161, -3279,  6059, -3279,
   59662,  1552,  1401, 58626, 60180,   407,   407,  1663,   407,  1159,
    1371,  3270,  3541, -3279,  1662, -3279,  1194,  1302,  1227,  1536,
   -3279, -3279,  1604,  1114,  1405,  1626,  3078,  1628,  1217,  1632,
    1570,  1639,  1687,  1760,    38, -3279, 21335, 51389,   719, -3279,
   12124, 21335, -3279, -3279, -3279,  1376, -3279, -3279, -3279, -3279,
   -3279, -3279, 59662, 71546,  1268,  1281, -3279, -3279, -3279, -3279,
    1918,  1542, -3279, -3279, -3279, -3279, -3279, -3279,  1342, 66396,
   66914, -3279, 67432, 67950, 68468,  1554, 73618,  1756, -3279, -3279,
    1695, -3279, -3279, -3279,  1353, -3279, -3279, -3279,   212, 74136,
    1707,  1329,   254, -3279,  1717,   260, -3279,  1720,  1578, 15905,
   -3279,  1519, -3279, -3279, -3279,   293, -3279,   -85, -3279, -3279,
   47326, -3279, -3279, 78249,  1442,  1368, -3279, 21335, 21335,  1375,
   45260, 64842, 65360, 21335, 59662, -3279, 21335, 26765, 59662,  1377,
   21335, 21335, 12667, 21335, 32050, 64842,  4590,  1379, -3279,  1184,
   -3279, 59662,  1392, -3279,  1508,  1508,   382, 34642,  1742, 33605,
    1508,  1924,  1508, -3279,   269,  1736,  1665, -3279, 34642,  1665,
    1357,  1436,  1746,  1665, -3279,   715,  1747,  1924, 38789,  1441,
   -3279,  1508,  1673, -3279, -3279, 21335, 15905, 68986,  1940, -3279,
   -3279, -3279, -3279,  1744, -3279, 71546,  1446, -3279, -3279, -3279,
   -3279, -3279, -3279,   799,  1980,   182,  1982, 21335,   182,   182,
    1458,   227,   227, -3279,  1669,  1474, -3279,   228,  1475,  1476,
    2003,  2010,   201, 59662,   139,  1228,   182, 21335, -3279,   227,
    1480,  2015,  1484,  2018,   207,   210, -3279,  1487,   229, 21335,
   21335, 21335,   327, 21335, 11038, 59662, -3279, 51389,  2017,   136,
   -3279,   719,  1495,   952, -3279, -3279, -3279, -3279, -3279, -3279,
   -3279,  1496, -3279,   221,  6427, -3279, -3279, -3279, -3279, -3279,
   -3279, -3279, -3279,  1537, -3279, -3279, -3279, -3279,  1726, 21335,
   -3279, -3279,  1494,  1742, -3279,   234, -3279, -3279,  1742, -3279,
   -3279, -3279, -3279, -3279,   247, -3279,  1942, 21335, 21335, -3279,
     719, -3279, 74654, -3279, -3279, -3279, -3279, -3279, -3279,   612,
   -3279,   346,   802, 49014,  1504,  1513,  1124, 59662, 59662,  1576,
   -3279, -3279, -3279, -3279,  1149, 57072,   192,  1832,   162,  1654,
     124, -3279, -3279,  1364,  1364, 16448,   964,   225,   917, 16991,
   21878,  1888,  1766,   257,   251,  1890, -3279,  1769,  2009, 26765,
   21335, 21335,  1159,  1371, 21335, -3279, -3279, -3279,  1830, 59662,
   54497,   790,   921,  1539,  1625,   155,   848,  1984, -3279,  1529,
   -3279,  1635, 59662, 77229,   264, -3279,  2016,   264,   264,   893,
    2026,  1643,   352,  1818,  1043,   454,  1286, -3279,  1529, 57072,
     347,  1510,  1529, 59662,  1648,  1545,  1529,  1687,   952, 71546,
    1368, -3279, -3279, 44951,  2082, -3279, -3279, -3279,   189, 15905,
   -3279,  1308,  1471,  1530,  1546,   919,   230,  1613,  1688, 15905,
    1732,  1743,   200,  1757,  1763,  1787,  1791,  1796,  1801,  1803,
    1816,   187,  1825,  1827,  1829,  1831,  1857,  1868, -3279,  1874,
     204,  1894,   241,  1487, 15905,  1897, -3279,   188, 49014,    31,
   -3279, -3279,  1906,   214, -3279, 49270, -3279,  1875,  1656,  1657,
   71546,  1608, 59662,  2783,  1715,  1959,  2013, 59662,  1833,  1286,
    1834,  1579,  2075,  1837,  2079,  1839,  1281,  1840,  1595, 69489,
    1849, -3279,  1933, -3279, 75172, 51389, -3279, -3279, -3279, -3279,
   -3279,  1983,  1963, 71546, 51389,  1609, -3279, -3279, 71546, -3279,
   59662, 59662, -3279, 59662, 71546, -3279,   622, 49014,  2130,  1046,
   78249, 52943, -3279, -3279, -3279, -3279,   982,  1127, -3279, -3279,
   -3279, -3279, -3279, -3279, -3279, -3279, -3279,   952, 51389, -3279,
    2078, 47968,  1614, 21335, -3279, -3279, -3279, -3279, -3279, -3279,
   -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279,
   -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279,
   -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279,
   -3279, -3279, -3279, -3279, -3279,  1615,  1971, -3279, -3279,  5751,
    1620, 48017,  1633, 26765, 26765,   719,   255, -3279, -3279, 26765,
    1641,  1631, 53461, 47877,  1634,  1646, 48276, 17534, 21335, 17534,
   17534, 48447, -3279,  1653, 48552, 64842,  1629, 59662, 31009, -3279,
   -3279, -3279, 21335, 21335,  4590, 59144,  1685,  1660, -3279,  1649,
    1508, -3279, -3279, 34642, -3279,  1972, 34642, -3279, -3279,  3786,
   -3279, 34642,  1978, 21335, 34642, -3279,  1909,  1919,  1675, 34642,
    1508, 59662,  1678, 59662, -3279, -3279, 49014, -3279,  1672,   644,
    1671, -3279, -3279, -3279, -3279, -3279, -3279,  1733, -3279,  1733,
    1733, -3279, -3279, -3279, -3279,  1684,  1684,  1693, -3279, -3279,
   -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279,
   -3279,  1696,  1228, -3279,  1733, -3279,  1684, -3279, -3279, -3279,
   -3279, -3279, -3279, -3279, 77229, -3279, -3279, -3279, -3279,   723,
     729, -3279,  1697, -3279, -3279, -3279,  1698, -3279,  1686,  2191,
   -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279,  8708,
     721,  1684, -3279, -3279,  3533, -3279, -3279, 21335, 21335, -3279,
   -3279,  1699, 49014,  1749, -3279, -3279, 21335, 21335, -3279, -3279,
   -3279, -3279,  2228, -3279,   217, 21335,  1733,  1733, -3279, 48864,
   -3279, 43970, 18077,  1792,  1800,  2228, -3279,  2228, -3279, 21335,
   48864,  2232,  2232,  1711, 39307, -3279,  1879, 48588, -3279,  1719,
    1917,  7733,  1716,  2242, -3279,  1718,  1721, -3279, -3279, 21335,
   45772,   190,   719,   719, 21335, -3279,  2228, 21335,  6522,  6522,
   -3279,   258, 68986, 21335, 21335, 21335, 21335, 21335, 21335, 21335,
   21335, 49835,  1819,   213, 71546, 21335, 21335, 30486,   946, -3279,
   21335,  1975, -3279,  1730, 21335,  1820,   326, 21335, 21335, 21335,
   21335, 21335, 21335, 21335, 21335, 21335, -3279, -3279, 29963,   295,
     825,  2085,  2101,     9,   779, 21335,  2096, 12124, -3279,  2096,
   -3279, -3279, -3279, -3279, -3279,   235, -3279, -3279,  1672,  1672,
   71546, -3279, 59662,   245, 55533, 21335, -3279, -3279,  1729,  1735,
    2048,  2240, -3279,  1810, -3279, -3279, 59662, -3279, 42415, 60180,
   60180, -3279,  2064, -3279,   353,  1745, -3279, 47841,  2036,  2064,
    1364, -3279, -3279, 27308,  1905,  2069,  2019, -3279, -3279,  1988,
    1989, -3279,  1771, 49324, 22421, 22421, -3279,  1538, 49014,  1540,
   -3279, -3279, -3279, -3279, -3279, -3279,   879, -3279, 59662,   111,
   39825, -3279,  1772,   137, -3279,  2639,  2135,  2100,  1888,   251,
    1793, -3279,  1727,  1795, 75690, 59662,  2097,  2043,  2098,   -44,
   68986, -3279,  1809, -3279, -3279, -3279, 59662, 71546, 70007, 76208,
   51907, 59662,  2273,  2274, 51389, -3279, -3279,  2288,  2289, -3279,
   -3279, 59662,   865, 59662,  6201, -3279, -3279, -3279, -3279,   264,
   -3279, -3279, -3279, -3279, -3279, 71546, 59662, -3279, -3279,   264,
   71546, 59662,   264, -3279,  1741, 59662, 59662, 71546, 59662,  1824,
   59662, 59662,   952,  1760, -3279, -3279, -3279, 22964,    32,    32,
    2046,  2061,  2063,  1822, 13733,   188, -3279, 21335, 21335,  1111,
     324, 71546,  2008, -3279, -3279,   732,  2059,   135, -3279,  1876,
   59662, 59662, 59662, 59662, 59662,  2095, 71546, 59662,  2034, -3279,
   -3279, -3279, -3279, -3279, -3279,  1838,  2212,  1286, -3279,  2214,
   55015,   913,  2779,  2219, 70525,  2223,  1880,  2226, 14276, -3279,
   -3279,  1842, -3279, -3279,  1843,  2348,  2107,  2068,  2239,  2392,
    1860,  2113, -3279, -3279,  2102, -3279, 71546,  2397, -3279,   254,
   -3279, 51389, -3279,   260, -3279,  2103,   263, -3279, 15905, 21335,
   -3279, -3279, -3279, -3279, -3279, -3279,  1368, 31531, -3279,   739,
   -3279, -3279,  2359,   952,  2359,   853, -3279, -3279,  2359, -3279,
    2344,  2359, -3279, 68986, -3279,  7847, -3279, 21335, 21335, -3279,
   21335,  2230, -3279,  2399,  2399, 68986, 26765, 26765, 26765, 26765,
   26765, 26765,   953,  1480, 26765, 26765, 26765, 26765, 26765, 26765,
   26765, 26765, 26765, 27851,   645, -3279, 34124, -3279,   745,  2369,
   21335, 21335,  2241,  2230, 21335, -3279, 68986,  1877, -3279,  1882,
    1885, 21335, -3279, 68986, -3279, 59662,  1886, -3279, -3279, -3279,
     560,  1896,  1898, -3279, -3279,  1742, -3279,  1004,  1038, 59662,
    3733,  4210,  5255, -3279, -3279, 21335,  2227, -3279,   -12, -3279,
    3786, 34642, -3279, 21335,  1901, -3279, -3279, 34642,  2246, -3279,
   -3279, -3279, 40343,  3786, -3279, 68986,   760, -3279, 59662, 68986,
     780, 21335, -3279, 15905,  2436, 68986,  2402, 71546, 71546,  2441,
    1912,  1913,  2228,  2001, -3279,  2002,  2011,  2020, -3279, -3279,
   -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, 68986, -3279,
   -3279, -3279, -3279,   300, -3279, -3279, -3279, -3279,  1920,  1923,
   21335, 21335,   154, -3279,  8162,  1927,  1928, 21335, 48639, -3279,
    1922, -3279,  1929, -3279, -3279, -3279, -3279, -3279, -3279, -3279,
   -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279, -3279,
    1937, -3279,  1934, -3279,  1943,  1958,  1960,  1944,  1945,  8470,
   21335, 59662, -3279,  1946, 23507,  2116, 59662, -3279, -3279, 21335,
   21335, 59662, -3279, 49014,  2336, -3279,  1953,  1957,  9102, -3279,
   -3279, -3279,   226,   418,  7752,   779,  2325,  2325,  2325, 48864,
   -3279, -3279, -3279,  1974, -3279, 26765, 26765, -3279,  6686,  4755,
   11038, -3279, -3279, -3279, -3279,  2320, -3279,   966, -3279,  1961,
   -3279, -3279,  4810, -3279, 43970,  9145, 21335,   215, -3279, 21335,
   30486, 21335,  2050,  2325,  2325,  2325,   306,   306,   226,   226,
     226,   418,   779, -3279, -3279, -3279,  1965, 21335, 51389, -3279,
    1967,  1968,  2339,  1484, 21335, -3279, -3279, 34642,  1685,    31,
    1685,  2228,  6522, -3279,  1149, -3279, -3279,  1149, 49014, 59662,
   -3279,  1970,   585, 34642,  2012,  2467,  2449, 71546, -3279, -3279,
    1966,  2096,  1985,  2027,  2027, -3279, -3279, -3279, -3279,  1992,
   21335,  2014,  1992, -3279,  2064,    48,  2215,  1179,  1179,  1538,
    2216, -3279, -3279,  2045, -3279, -3279, -3279, 21335, 14819,  1547,
   -3279,  1551, -3279, -3279, -3279, -3279, -3279,  1973, -3279,  2268,
   -3279, 59662, -3279, -3279, 26765,  2460, 21335, 40861,  2465,  2252,
   -3279, -3279, -3279,  2083,  1529, 21335,  2243, -3279,   268,  1996,
    2380,   -29,  2328, 71546, -3279, -3279, -3279,   363,   442, 51389,
    1809, -3279, -3279,   925,  2393,   263,  2400,   263, 51389, 51389,
   51389,   781, -3279, -3279, -3279,   952, -3279, -3279, -3279,    26,
     851, -3279,  2023,  2033, -3279, -3279, -3279,  2114,  1790,  1286,
    1529, -3279, -3279, -3279, -3279, -3279, -3279, -3279,   359,  1956,
    1529,  2124, -3279,  2125, -3279,  2129,  1976,  1529, -3279, -3279,
    1760,  1368, 18620, 49014,   238,   188,   188,   188, -3279, -3279,
   -3279, 15905, -3279,  2041, 49014, 49014,   157, -3279, -3279, -3279,
   -3279,  2047, -3279,   256, -3279, 71546, -3279, -3279, -3279,  2008,
    2013, 59662,  1286,  2049,  2510,  2514,  1281,  1595, 59662,  1933,
   -3279,  2210,   940, 71546, 59662, 59662, 59662, 56051, -3279, -3279,
   -3279,  2051,  2039, -3279,    29,  2292,  2287, 59662,  2093, 59662,
    2057, -3279, -3279, 59662,  2058,  2554, 59662, -3279,   854,  1595,
    1595, 19163,  2445,  2596, 71546, -3279, 51389,  2447, 59662,  1963,
   -3279, -3279, -3279, -3279, 71546, -3279, -3279, 49014, -3279,  2062,
   -3279, 21335, 52425, -3279, -3279, -3279, -3279, -3279, -3279, -3279,
   51389, -3279,   952, -3279,   952,  2317, 71546, 46290,   952, 46808,
     952,  2070, -3279, 49014,  9238, 49014,  2241, -3279,   272,  2399,
    1764,  1764,  1764,  3790,  2433,   276,  2074,  1764,  1764,  1764,
     588,   588,   272,   272,   272,  2399,   645,  2610,  1548,   907,
   53461,  2080, -3279, 49014, 49014, -3279, -3279,  2081, -3279, -3279,
   -3279, -3279,  2088,  2090, -3279, -3279, -3279, -3279, 71546,   173,
    1685,   356,   356,   356,   356, -3279, 59662, 59662, 59662, 49014,
    2559,  2430, -3279, -3279,  2615,  2092, -3279,  3786, 49014, 59662,
   -3279, 28917, 59662, -3279,  2462, -3279,  2549, -3279, 59662,   871,
   -3279, -3279, -3279,   877,  2105,  1913, 68986,   905,   911, -3279,
    2228,   184,  2099,  1664,  1137,   809,  1550, -3279, 57072, -3279,
   -3279,  2104, 48702, 21335, -3279,  2495, -3279, -3279, -3279, 49014,
   21335, 21335, -3279, 43970, -3279, -3279, -3279, -3279,   -34,   -34,
   -3279,  9635,  1946,  2106,  2108, 59662, 11038, 48978, -3279, 41379,
   -3279,    86,  9698, 49014, -3279,  1879, -3279, -3279,  6522, 21335,
    2561,  2679, 21335,  2115, 21335,  2468, -3279, -3279,  2119, -3279,
   -3279, 68986, 21335,  2120,  5196, 26765, 26765,  5306, -3279,  5894,
   21335, 11038, -3279, 45165,  2624,  2126,  2046, 19706, -3279,  2333,
    2118, -3279,  2227,   188,  2227,  2127, -3279, -3279, -3279, 71546,
   -3279,  2408,  2131, -3279, 21335,  2275, 71546,   537,  3538,   956,
   -3279,   719, 42415,  2012, 21335, -3279, -3279,   687, -3279, -3279,
    2132, -3279,  1992, -3279, -3279, -3279,  2366, -3279, -3279, -3279,
   59662, -3279,  2133, -3279, 39825,  2488, 11581, -3279, 39825, 59662,
   59662,  9832,  2520, -3279, 71546, 71546, 71546, -3279, 71546,  2134,
    2138,  1005,  2140,   855, -3279,  1238, -3279, -3279,  1005,  2498,
     296,  2058,   352,  2354,   580, -3279, -3279, -3279,  2221, 59662,
   -3279, 71546, -3279, -3279, -3279, -3279, -3279, 51907, -3279, -3279,
   43451, 51389, -3279, 51389, 21335, 21335, 59662, 59662, 59662, 59662,
   71546, 59662, 59662, 59662, 59662, 59662,  1368, -3279, 21335, 21335,
   -3279,  2144,  2145,  2146,  2046, -3279,   232, -3279,  2149, -3279,
   -3279, -3279,   454, -3279,   256,  2154, -3279, 55015,  3806, 70525,
    1880, -3279,  1843,  2368,  2159,  2013,  1171, 71028,   961,  1286,
    2160,  2656, -3279, -3279, -3279,   913, 55015, -3279, -3279, -3279,
    2614, -3279,   752,   242, -3279,  2663,  1175, -3279,  1281, -3279,
    3806,  1595, -3279, -3279,  2664, -3279,  2666,  3806, 49014, 59662,
    2410,  1933, 21335, -3279,  1003, 71546,  2238, -3279,   263,  1008,
   -3279, -3279, -3279, -3279, -3279, 71546,  2174, -3279,  2174, -3279,
   -3279,  2174, -3279, -3279, -3279, -3279, 26765,  2539,  2185, 68986,
    2178, 64842, 34642, -3279, -3279, 59662, -3279, -3279, -3279,  1027,
    2187,  2227, 59662, 59662, 59662, 59662, -3279, -3279, -3279, 20249,
   21335,  2231, 21335, -3279, -3279,  2188, 13210,  2526, -3279, 28394,
   -3279, -3279,  2195, 40343, 71546, -3279, -3279, -3279, -3279,  2228,
   -3279, -3279, 71546, -3279,  2199, -3279,  2200, -3279, -3279, -3279,
   -3279, -3279, -3279, -3279, -3279, -3279, 21335, 49014, -3279, 49014,
   -3279, -3279, -3279, -3279, -3279, 59662, -3279, -3279,  7085, -3279,
    2192,  2201, 71546, 59662,   243, -3279, 21335, -3279,  2116, -3279,
     393, 21335, 21335,  6686, -3279,  6666, 21335, 68986,  1067,  6686,
     301, 21335,  3880,  4554, 21335, 21335,  6311,  9950, -3279, 24050,
   15362, -3279,  2202, 21335, 44496, 42933, -3279, 34642,  2430,  2203,
    2430,   952, -3279,  2205,  2204, -3279, -3279,  3533, 49014, 21335,
   -3279, -3279, -3279, -3279,  2263,    -1, 36714,  2446, -3279,  2222,
   71546, -3279,  2275, 49014, -3279, -3279, 43970, -3279, -3279, -3279,
   -3279, -3279,  2686,   408,  2211,  2213, -3279,  1459, -3279, -3279,
   71546,  2217, -3279,  2233,  1005, -3279, 71546,  2253, -3279,   297,
    2544,   143, -3279, 21335, -3279,  2638,  2727,  1238,  2235, 71546,
   59662, 26765, -3279,   333,   250, -3279,  2538, 59662,  2253,  2684,
   -3279, -3279, -3279,   855, -3279,  2580,  2489, -3279,   264, -3279,
   21335,   855,  2490,   270, 71546, -3279, -3279,  3475, -3279, 68986,
     263,   263, -3279,  1671,  2244,  2245,  2247,  2248,  2250,  2254,
    2255,  2256,  2258,  2262,  2264, -3279,  2265,  2266,  2267,  2269,
    2277,  2278,  2279,  2281,  1696,  2284, -3279,  2285,  2132,  2290,
    2294,  2296,  2297,  2298, 76726,  2300,  2301,  2302,  2303,  1697,
    2305,  2306,   982,  1127, -3279, -3279, -3279, -3279, -3279, -3279,
    1329,  2308, -3279,  2259, -3279,  2276,  1103, -3279, -3279,  2332,
   -3279,  2342, -3279, -3279, -3279, -3279, -3279, -3279,  2291,  2295,
   -3279, -3279, -3279,   188,  2314,  2322, 71546,  1368,   281, 71546,
    2329,  2093, -3279,  2740,  2807, 51389,  1549,  2528,  2334,  1880,
   -3279, 55015,  4050,   762,  2287, 68986, -3279,   252,  2093, -3279,
    2719, 70525, -3279,  2335,  2324,  1880,  2375, -3279,  1843,  2444,
   21335,   142, -3279,  2555,   165, -3279,  2345, -3279, 49014, -3279,
   51389,  2581, 71546,  2346, -3279, -3279, 52425,  2174,  5555, 26765,
   68986,  1107, 34642, -3279,  1848,  1110, -3279,  2875,  2516,  2430,
   -3279, -3279, -3279, -3279, -3279,  2349,    -8,  2350, 10495,  2347,
   -3279, -3279, -3279, -3279, -3279, -3279, 49014, 49014, 71546,  2537,
   49014, -3279, -3279,  2352,  2356, 41897,  2829,  2361, -3279, -3279,
    2697, -3279, 32568, -3279,  1913,  2367,  1913, 68986,  1913, -3279,
   -3279, 49014,  1946, 21335, -3279, -3279, -3279,  2358,  2364, 71546,
   45206,  2710, -3279,  6686,  6686,  6666,  1123, -3279,  6686, 21335,
   21335,  6686,  6686, 21335, -3279, 20792,   253, -3279,  1125, -3279,
   44521, -3279, 77732, -3279, -3279,  2231,   952,  2231, -3279, -3279,
   71546,  2370,  2365, -3279, -3279, -3279,  2429, -3279, -3279,  1126,
    2819,  2275, 21335, -3279, -3279,  2376, 39825, -3279, -3279, -3279,
   -3279, 39825,  1005, -3279,  2551,  2253,  2379, -3279, -3279, -3279,
   -3279, -3279, -3279, 44546, -3279,    90, 21335, -3279,  1186,  3790,
   -3279, -3279, -3279, -3279,  2253,  1281, -3279, 59662,  2876,  2762,
   -3279, -3279, 49014, -3279, -3279,  2228,  2228, -3279, -3279,  2549,
   -3279, -3279, -3279,  2381, -3279, -3279,  1329,   461, 43451, -3279,
   -3279, 59662, 59662, -3279, -3279,  2383, -3279, -3279, -3279, -3279,
   -3279,   454,  2796,  1129,   913, -3279,  3806,  2410,  1135, 59662,
    2768, 55015,  2882,  2387, 59662,  2093,   995,   995, -3279,  2543,
   -3279,  2545, -3279, -3279, -3279, -3279,   952,  2888,   319, -3279,
    1474,  2926,   573, 59662,  2892, 59662,  2623, 51389, -3279, 59662,
   -3279, -3279, 36196, -3279,  5555,  1138, -3279,  2905, 64842, -3279,
    2401,  2403, -3279,  2231, 21335,  2405, 21335, -3279, 24593,  2895,
    2398, -3279, 21335,  2469, 29440, -3279, 21335, -3279, 59662, 64842,
    2409, 64842, -3279, -3279, -3279, -3279, 59662, -3279, -3279, -3279,
   21335, -3279,  6686,  6686,  6686, 21335, 21335, -3279, -3279, -3279,
   -3279,  2617,  2537, -3279,  2537, -3279, -3279, 21335,  3806,   719,
    3729, 71546,    45, -3279, 49014, -3279, -3279, -3279, 59662, -3279,
   51389, -3279,  1005,    -4,  2411, 21335, 44589,  2660, -3279, -3279,
    2694, -3279,  2756, -3279,  2477,   593,  2494, -3279, -3279, -3279,
   -3279,  1368,   952,  1880,  2287,  2375, -3279, -3279,  2419, 59662,
    3806,   913,   752, -3279, -3279, -3279, -3279, -3279, -3279, -3279,
   -3279, -3279, -3279, -3279, -3279, -3279, -3279,  3806,  2881,  2655,
    2883, -3279,  2410,  2336, 59662,  2795,  2957,  2661,  2795,  2435,
    1142,  2238, 21335,    98, -3279,  1145,  2891, -3279, 64842, -3279,
   -3279,  2967,  2537,  2437, 24593,  2440, -3279,  2443, 71546, 49014,
    2597, -3279, -3279,  2450, -3279, -3279, 21335, -3279, -3279, 45258,
    2448,  2451,  2924,  2046,  2469,  2469, -3279,    -1, -3279, -3279,
    2897, 36196,  2859,  1281,  1005,  2470,  1151, -3279, -3279, -3279,
   -3279, -3279,  1286, -3279, 44614,  2715,   191,  2700,  2411, 21335,
   -3279,  2541, -3279, -3279, -3279,  2961, -3279, -3279, 55015,  2472,
    2375,  2287,  2093,  2375,  2701, -3279,  2702, -3279, -3279,  2474,
    2865, -3279, -3279,  2466, -3279,  2699, 71546, -3279,  2479, 44639,
   71546, 71546,  1880, 36196, 71546, -3279,  2482,  2469, -3279,  2483,
   -3279, -3279, -3279, 31009, -3279,  2484, -3279, -3279, -3279, 21335,
     180, -3279, -3279,  2546, 59662,  1157,    61,  2694, 43451, -3279,
   51389,   291,    -4,  2815, -3279, -3279, -3279, -3279,   349,  2726,
   -3279,  2728, -3279, 49014, -3279,  3806, 55015, -3279, -3279, -3279,
   -3279, -3279, -3279, -3279, 59662, 59662,  2499, -3279,  2497,  2492,
   36196,  2891, -3279,   353, -3279,  1685, -3279,   353, -3279, -3279,
   -3279, -3279, -3279,  1634, 25136, 25136, 25136,  2501,  3806, -3279,
    1685, -3279,  2637,  2700, -3279, -3279, -3279, -3279, -3279,   822,
     822,  2918, -3279,  2570, -3279,  2375,  2795,  2502, 71546,  2661,
   71546,  1162, 71546,  1992, -3279,  1992, 26222,  2662,   195, 47920,
    2896, -3279,  2896,  2896, -3279, -3279, -3279, 42415, -3279, -3279,
    3024, -3279,   265, -3279, -3279, -3279,  2742, -3279,  2513, -3279,
   -3279,  1880,   353, -3279, -3279,  3017, -3279, -3279, -3279, -3279,
   -3279,   793, -3279, -3279, -3279,  1685,  1005, -3279, -3279, -3279,
    2518,  2661,  1685,  1992, 25679,  2676, -3279,  2752, -3279, -3279,
   71546, -3279, -3279, -3279, -3279, -3279, -3279,  2523,  2661, -3279
};

/* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
   Performed when YYTABLE does not specify something else to do.  Zero
   means the default is an error.  */
static const yytype_int16 yydefact[] =
{
     208,   311,     0,   128,   127,    76,   311,     0,  1522,     0,
     311,  1442,   454,     0,   160,   159,     0,  1535,   311,     0,
     208,     0,  1472,     0,     0,     0,   500,   503,   501,     0,
       0,     0,   311,   546,     0,   161,   311,     0,     0,   538,
     502,     0,  1326,     0,     0,     0,     0,     0,     2,     4,
       5,     6,     7,     8,     9,    24,    10,    11,    12,    13,
      20,    14,    15,    16,    17,    18,    19,    21,    22,    23,
      26,    25,    27,    28,    84,    29,    30,    31,    32,     0,
      33,     0,    34,    35,    36,    37,   476,   462,   551,   475,
       0,     0,   207,   656,   483,    38,    40,    39,    41,    42,
      43,    44,    45,   162,   158,    46,   310,   309,   303,     0,
       0,     0,     0,     0,    75,     0,     0,     0,   314,   179,
    1617,  1618,  1619,  1620,  1621,  1622,  1623,  1624,  1625,  1626,
    1627,  2003,  1628,  1629,  2004,  1630,  1631,  2005,  1632,  1633,
    1634,  1949,  1950,  2006,  1951,  1952,  1635,  1636,  1637,  1638,
    1639,  1640,  1641,  1642,  1643,  1644,  1953,  1954,  1645,  1646,
    1647,  1648,  1649,  1955,  2007,  1956,  1650,  1651,  1652,  1653,
    1654,  2008,  1655,  1656,  1657,  1658,  1659,  1660,  1661,  1662,
    1663,  2009,  1664,  1665,  1666,  1667,  1668,  1669,  1670,  1671,
    1672,  1673,  1957,  1674,  1675,  1958,  1676,  1677,  1678,  1679,
    1680,  1681,  1682,  1683,  1684,  1685,  1686,  1687,  1688,  1689,
    1690,  1691,  1692,  1693,  1694,  1695,  1696,  1697,  1698,  1699,
    1700,  1701,  1702,  1703,  1959,  1704,  1705,  1706,  1707,  1708,
    1709,  1960,  1710,  1711,  1712,  1961,  1713,  1714,  1715,  2010,
    2011,  1716,  1717,  1962,  2013,  1718,  1719,  1720,  1963,  1964,
    1721,  1722,  1723,  1724,  1725,  1726,  1727,  1728,  1729,  2014,
    1730,  1731,  1732,  1733,  1734,  1735,  1736,  1737,  1738,  1739,
    1740,  1741,  2015,  1965,  1742,  1743,  1744,  1745,  1746,  1966,
    1967,  1968,  1747,  2016,  2017,  1748,  2018,  1749,  1750,  1751,
    1752,  1753,  1754,  1755,  2019,  1756,  2020,  1757,  1758,  1759,
    1760,  1761,  1762,  1763,  1764,  1969,  1765,  1766,  1767,  1768,
    1769,  1770,  1771,  1772,  1773,  1774,  1775,  1776,  1777,  1778,
    1779,  1780,  1781,  1782,  1783,  1784,  1785,  1970,  2022,  1971,
    1786,  1787,  1788,  1789,  1972,  1790,  1791,  2023,  1792,  1973,
    1793,  1974,  1794,  1795,  1796,  1797,  1798,  1799,  1800,  1801,
    1802,  1803,  1975,  2024,  1804,  1805,  2025,  1976,  1806,  1807,
    1808,  1809,  1810,  1811,  1812,  1813,  1814,  1815,  1816,  1817,
    1818,  1819,  1820,  1977,  2026,  1821,  1822,  1978,  1823,  1824,
    1825,  1826,  1827,  1828,  1829,  1830,  1831,  1832,  1833,  1834,
    1835,  1836,  1979,  1837,  1838,  1839,  1840,  1841,  1842,  1843,
    1844,  1845,  1846,  1847,  1848,  1849,  1850,  1851,  1852,  1853,
    1854,  1855,  2027,  1856,  1857,  1858,  1980,  1859,  1860,  1861,
    1862,  1863,  1864,  1865,  1866,  1867,  1868,  1869,  1870,  1871,
    1872,  1873,  1874,  1875,  1876,  1877,  1981,  1878,  1879,  2028,
    1880,  1881,  1982,  1882,  1883,  1884,  1885,  1886,  1887,  1888,
    1889,  1890,  1891,  1892,  1893,  1894,  1895,  1983,  1896,  1984,
    1897,  1898,  1899,  2030,  1900,  1901,  1902,  1903,  1904,  1905,
    1906,  1985,  1986,  1907,  1908,  1987,  1909,  1988,  1910,  1911,
    1989,  1912,  1913,  1914,  1915,  1916,  1917,  1918,  1919,  1920,
    1921,  1922,  1923,  1924,  1925,  1926,  1927,  1928,  1990,  1991,
    1929,  1930,  2031,  1931,  1932,  1933,  1934,  1935,  1936,  1937,
    1938,  1939,  1940,  1941,  1942,  1943,  1944,  1992,  1993,  1994,
    1995,  1996,  1997,  1998,  1999,  2000,  2001,  2002,  1945,  1946,
    1947,  1948,     0,   315,     0,  1243,   180,   181,  1265,   179,
    1962,  1969,  1983,  1520,  1521,   180,     0,   306,  1441,     0,
       0,     0,     0,     0,     0,  1537,     0,   448,   447,   147,
     453,     0,     0,     0,   183,   242,  1823,   182,  1242,   240,
     189,  2180,  2181,  2182,  2183,  2063,  2184,  2185,  2186,  2187,
    2188,  2064,  2189,  2065,  2066,  2067,  2068,  2069,  2070,  2071,
    2190,  2191,  2192,  2073,  2072,  2193,  2074,  2194,  2075,  2195,
    2076,  2077,  2196,  2197,  2078,  1670,  2079,  2080,  2198,  2199,
    2200,  2201,  2202,  2203,  2204,  2205,  2206,  2081,  2082,  2207,
    2208,  2209,  2083,  2210,  2211,  2084,  2212,  2085,  2086,  2087,
    2213,  2214,  2088,  2089,  2215,  2090,  2216,  2217,  2091,  2092,
    2095,  2093,  2218,  2094,  2219,  2096,  2097,  2098,  2220,  2221,
    2222,  2099,  2100,  2223,  2224,  2225,  2101,  2102,  2103,  2104,
    2105,  2226,  2106,  2227,  2107,  2108,  2228,  2229,  2230,  2231,
    2232,  2110,  2109,  2111,  2112,  2233,  2234,  2235,  2236,  2113,
    2114,  2115,  2237,  2238,  2239,  2240,  2116,  2241,  2242,  2117,
    2118,  2243,  2119,  2120,  2244,  2121,  2122,  2245,  2123,  2124,
    2246,  2247,  2248,  2125,  2249,  2250,  2126,  2127,  2251,  2252,
    2128,  2129,  2253,  2130,  2254,  2255,  2131,  2256,  2257,  2132,
    2133,  2258,  2134,  2259,  2260,  2261,  2262,  2135,  2136,  2137,
    2138,  2139,  2140,  2141,  2142,  2143,  2144,  2145,    72,   191,
     190,   192,     0,  1560,  1561,     0,  1571,     0,  1553,  1558,
    1554,     0,  1552,  1580,  1573,  1581,  1562,  1551,  1574,  1563,
    1550,  1536,     0,  1582,  1568,  1556,     0,     0,     0,     0,
     307,  1591,   454,     0,   208,     0,    88,    89,    90,    91,
      92,    93,    99,    94,    95,    98,    96,    97,   100,   101,
     102,   103,   104,    79,    84,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
       0,  1522,     0,  1955,  2007,  1960,     0,  1973,     0,  1976,
    1977,     0,  1859,  1984,  1987,  1988,  1989,  1990,     0,   733,
     182,   177,   717,     0,   478,     0,   660,   674,   717,   722,
    1010,   745,  1011,     0,   184,  1474,  1473,  1467,  1405,  1283,
    1296,  1718,  1759,  1876,  1985,  1907,  1929,   165,  1297,  1290,
    1295,   308,   545,   543,     0,  1199,  1718,  1759,  1863,  1876,
    1985,  1929,    48,    53,     0,   314,   153,   182,   177,   152,
       0,   484,   537,     0,  1518,  1325,     0,  1330,     0,  1839,
     511,   514,  1274,   512,   476,     0,     0,     1,   208,    83,
     149,     0,   214,     0,     0,   541,   541,     0,   541,     0,
     468,     0,     0,   476,   471,   475,   657,   164,  1985,  1907,
     154,   151,  1728,     0,     0,  1728,     0,  1728,     0,  1728,
       0,     0,    76,    78,     0,   304,  1183,     0,  1244,   185,
       0,     0,  1311,  1307,  1312,  1308,  1306,  1313,  1305,  1304,
    1314,  1310,     0,     0,     0,   419,   452,   451,   450,   449,
     454,  1728,   291,   259,   268,   269,   267,   260,     0,     0,
       0,   266,     0,     0,     0,     0,  1533,   142,   243,   241,
    1728,    73,  1569,  1570,     0,  1559,  1555,  1557,     0,     0,
    1728,  1269,  1579,  1575,  1728,  1579,  1236,  1728,     0,     0,
    1583,     0,   447,    81,   120,  2132,   134,     0,   135,   125,
      87,   121,   122,   208,     0,  1440,  1519,     0,     0,     0,
    1131,   717,   722,     0,     0,   735,     0,  1151,     0,     0,
    1157,     0,     0,     0,   717,   483,     0,   674,   734,   178,
     664,     0,   715,   716,   593,   593,   546,     0,   527,     0,
     593,   600,   593,   727,     0,     0,   730,   728,     0,   730,
       0,     0,     0,   730,   726,   686,     0,   600,     0,   715,
     718,   593,     0,   737,  1280,     0,     0,     0,     0,  1293,
    1291,  1292,  1298,     0,  1294,     0,     0,  1246,  1248,  1249,
    1099,  1259,   986,     0,  1950,  1951,  1952,  1174,  1953,  1954,
    1956,  1957,  1958,   943,  1690,  1959,  1257,  1961,  1963,  1964,
    1966,  1967,  1968,     0,  1969,  1970,  1971,     0,  1258,  1974,
    1799,  1979,  1980,  1982,  1985,  1986,  1256,     0,  1991,     0,
       0,     0,  1217,  1122,     0,     0,   985,     0,     0,  1176,
    1184,   978,     0,     0,   781,   782,   803,   804,   783,   809,
     810,   812,   784,     0,  1206,   876,   974,  1194,   988,   983,
     993,   989,   990,  1029,   991,  1009,   994,  1066,   984,     0,
     992,   976,  1202,   527,  1200,     0,   977,  1245,   527,  1198,
      51,    49,    56,    50,     0,    52,     0,     0,     0,   305,
     178,  1593,  1594,  1324,  1322,  1323,  1321,  1320,  1327,     0,
    1329,    84,  1176,  1117,  1119,     0,   513,     0,     0,   518,
     465,   464,   466,     3,  1274,     0,     0,     0,  1708,     0,
    1475,   539,   540,     0,     0,     0,     0,     0,     0,     0,
       0,   641,   566,   567,   569,   638,   642,   650,     0,     0,
       0,     0,     0,   472,     0,   163,   157,   155,     0,     0,
       0,  1615,  1615,     0,     0,     0,     0,     0,  1399,  1337,
    1392,     0,     0,     0,     0,  1501,  1514,     0,     0,     0,
       0,     0,  1511,     0,     0,  1494,  1488,  1490,  1339,     0,
    1615,     0,  1335,     0,     0,     0,  1341,    76,     0,     0,
    1440,   312,   313,  1182,     0,   187,   188,   186,   179,     0,
    2146,  2003,  2004,  2005,  2006,  2007,  1956,  2008,  2009,     0,
    2010,  2011,  1962,  2013,  2014,  2015,  2016,  2017,  2018,  2019,
    2020,  1969,  2022,  2023,  2024,  2025,  2026,  2027,  2173,  2028,
    1983,  2030,  1989,  2178,     0,  2031,  1001,   549,  1125,   551,
    1123,  1275,     0,   180,  1262,     0,  1309,     0,     0,     0,
       0,  1438,     0,     0,     0,     0,   287,     0,  1728,   461,
    1728,   419,     0,  1728,     0,  1728,   419,  1728,     0,     0,
    1728,  1534,  1538,   141,   144,     0,  1572,  1567,  1565,  1564,
    1566,  1728,  1333,     0,     0,  1270,  1577,  1578,     0,  1545,
       0,     0,  1547,     0,     0,  1588,     0,  1586,     0,   454,
     208,     0,  1495,   130,   131,   129,     0,     0,    86,  1498,
     124,   133,   123,   132,    85,  1515,    80,     0,     0,  1278,
    1426,     0,     0,     0,  1132,   852,   851,   833,   834,   849,
     850,   835,   836,   843,   844,   854,   853,   841,   842,   837,
     838,   831,   832,   847,   848,   839,   840,   845,   846,   829,
     830,  1146,  1133,  1134,  1135,  1136,  1137,  1138,  1139,  1140,
    1141,  1142,  1143,  1144,  1145,     0,     0,   673,   670,     0,
       0,     0,     0,     0,     0,  1176,     0,   949,   984,     0,
       0,     0,     0,  1117,  1156,     0,     0,     0,     0,     0,
       0,  1117,  1162,     0,     0,   701,   713,     0,   586,   592,
     671,   669,     0,  1199,   661,     0,   747,   674,   672,     0,
     593,   668,   727,     0,   726,     0,     0,   729,   723,     0,
     724,     0,     0,     0,     0,   725,     0,     0,     0,     0,
     593,     0,   713,     0,   667,   744,    59,    67,  1406,     0,
    1266,  2032,  2033,  2034,  2035,   791,  2036,   820,   798,   820,
     820,  2037,  2038,  2039,  2040,   787,   787,   800,  2041,  2042,
    2043,  2044,  2045,   788,   789,   825,  2046,  2047,  2048,  2049,
    2050,     0,     0,  2051,   820,  2052,   787,  2053,  2054,  2055,
     792,  2056,   755,  2057,     0,  2058,   790,   756,  2059,   828,
     828,  2060,     0,  2061,   815,  2062,     0,  1128,   765,   773,
     774,   775,   776,   801,   802,   777,   807,   808,   778,   875,
       0,   787,  1267,  1268,   208,  1299,   166,     0,  1122,   995,
     819,   806,  1173,     0,   814,   813,     0,  1122,   796,   795,
     794,   980,     0,   793,     0,  1079,   820,   820,   818,   901,
     797,     0,     0,     0,     0,     0,   824,     0,   822,     0,
     902,   880,   881,     0,     0,  1216,  1225,  1117,  1121,     0,
     978,  1117,     0,     0,  1069,  1071,     0,   987,   997,     0,
       0,  1177,  1247,   979,     0,  1252,     0,     0,   875,   875,
    1205,  1099,     0,  1089,  1092,     0,     0,  1096,  1097,  1098,
       0,     0,     0,  1197,     0,  1107,  1109,     0,     0,   917,
    1105,     0,   920,     0,     0,     0,     0,  1093,  1094,  1095,
    1085,  1086,  1087,  1088,  1090,  1091,  1103,  1084,   898,     0,
     975,     0,  1032,     0,   897,  1203,   659,     0,  1250,   659,
      61,    65,    66,    64,    60,     0,    55,    54,    57,    58,
       0,  1595,  1318,     0,  1315,  1120,   654,   515,  1238,     0,
       0,     0,   150,  1600,   213,   212,     0,  1616,     0,     0,
       0,  1468,   488,   487,   560,   552,   554,   560,     0,   486,
       0,   614,   615,     0,     0,     0,     0,   647,   645,  1246,
    1259,   602,   570,   601,     0,     0,   574,     0,   606,   876,
     640,   470,   564,   565,   568,   469,     0,   643,     0,   653,
       0,   507,   509,   492,   506,   504,   489,   497,   641,   569,
       0,   156,     0,     0,     0,     0,     0,  1728,     0,     0,
     758,  1360,  1356,  1383,   369,  1614,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1391,  1388,     0,     0,  1389,
    1390,     0,     0,     0,     0,  1266,  1499,  1500,  1513,     0,
    1504,  1505,  1502,  1506,  1507,     0,     0,  1492,  1493,     0,
       0,     0,     0,  1491,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    78,    77,    69,  1178,  1183,   551,   551,
     551,     0,     0,     0,     0,   549,   550,     0,     0,     0,
       0,     0,  1425,   417,   427,     0,     0,     0,   291,     0,
       0,     0,     0,     0,     0,     0,  1533,     0,   454,   292,
     295,   290,   294,   293,   296,     0,     0,   460,   457,     0,
     416,   388,     0,     0,     0,     0,   146,     0,     0,   254,
     252,   255,   244,   257,   247,     0,  1728,     0,     0,     0,
       0,  1728,   406,   143,     0,    74,     0,     0,  1331,  1579,
    1271,     0,  1576,  1579,  1237,     0,  1579,  1590,     0,     0,
      82,   126,  1496,  1516,  1497,  1517,  1440,  1435,  1465,     0,
    1443,  1448,  1423,     0,  1423,     0,  1445,  1449,  1423,  1444,
       0,  1423,  1439,     0,  1025,     0,  1015,     0,     0,   736,
       0,     0,  1016,   951,   952,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   969,   968,  1017,     0,   740,     0,   743,
       0,     0,  1154,  1155,     0,  1018,     0,     0,  1161,     0,
       0,     0,  1023,     0,   675,     0,     0,   576,   577,   585,
     581,   588,     0,   591,   578,   527,   477,  1718,  1759,     0,
     538,   538,   538,   536,   526,     0,   618,   676,     0,   666,
       0,     0,   702,     0,     0,   704,   706,     0,     0,   709,
     685,   684,     0,     0,   665,     0,     0,   748,     0,  1242,
       0,     0,  1407,     0,     0,     0,   773,     0,     0,     0,
     763,   759,     0,   855,   856,   857,   858,   859,   860,   861,
     862,   863,   864,   865,   866,   867,   779,  1282,     0,   785,
    1287,  1288,  1285,     0,  1281,  1284,  1286,  1289,     0,     0,
       0,     0,  1172,  1168,     0,     0,     0,     0,     0,  1074,
    1076,  1078,     0,   817,   816,  1083,  1089,  1092,  1096,  1097,
    1098,  1093,  1094,  1095,  1085,  1086,  1087,  1088,  1090,  1091,
       0,  1111,     0,  1065,     0,     0,     0,     0,     0,     0,
       0,     0,  1210,  1209,     0,  1233,     0,   998,   982,     0,
       0,  1072,   999,  1207,  1217,  1185,     0,     0,     0,  1255,
    1254,   877,   886,   889,   922,   923,   893,   894,   895,   899,
    1277,  1276,  1204,     0,  1196,     0,     0,   878,   903,   908,
       0,  1163,  1166,   939,  1165,     0,   927,     0,   916,     0,
     925,   929,   904,   919,     0,   900,     0,  1197,  1108,  1110,
       0,  1106,     0,   890,   891,   892,   882,   883,   884,   885,
     887,   888,   896,  1082,  1080,  1081,     0,  1183,     0,  1195,
       0,     0,  1034,     0,     0,   924,  1201,     0,   747,   551,
     747,     0,   875,  1596,  1274,  1328,  1317,  1274,  1118,  1239,
    1273,     0,   525,     0,  1598,   199,   203,     0,  1184,   233,
     235,   659,     0,  1475,  1475,  1477,  1476,   558,   559,   563,
       0,     0,   563,   542,   485,  1980,  1859,     0,     0,     0,
       0,   607,   648,     0,   639,   604,   605,     0,   603,  1246,
     608,  1245,   609,   612,   613,   575,  1234,   649,   651,     0,
     644,     0,  1240,   491,   510,     0,     0,     0,     0,     0,
     474,   473,   655,     0,  1338,     0,  1728,  1362,     0,     0,
       0,     0,     0,     0,   319,  1358,  1359,     0,   421,     0,
    1357,  1353,   319,  1404,  1728,  1579,  1728,  1579,  1621,  1691,
    1877,     0,  1351,   393,  1395,     0,  1608,  1365,  1367,   424,
       0,   378,     0,     0,  1385,  1400,  1601,     0,     0,  1489,
    1340,  1503,  1508,  1604,  1512,  1509,   299,  1510,  1615,     0,
    1336,     0,  1602,     0,   297,     0,     0,  1342,  1606,   301,
      78,  1440,     0,  1182,     0,   549,   549,   549,   547,   548,
    1002,     0,  1124,     0,  1126,  1127,   916,  1301,  1302,  1303,
    1300,  1411,  1424,     0,   418,     0,  1437,  1414,  1415,  1425,
     289,     0,   461,   419,     0,     0,   419,     0,     0,  1538,
     291,     0,     0,     0,     0,     0,     0,   417,   409,   407,
     440,     0,   414,   408,     0,     0,   364,     0,  1528,     0,
    1697,   167,   172,     0,     0,     0,     0,   261,     0,     0,
       0,     0,     0,     0,  1533,  1539,     0,     0,     0,  1333,
    1334,  1544,  1272,  1546,     0,  1548,  1589,  1587,  1279,  2101,
    1431,  1122,     0,  1429,  1436,  1428,  1430,  1433,  1434,  1427,
       0,  1422,     0,  1458,     0,     0,     0,     0,     0,     0,
       0,     0,  1012,  1130,     0,  1149,  1148,   950,   957,   960,
     964,   965,   966,  1150,     0,     0,     0,   961,   962,   963,
     953,   954,   955,   956,   958,   959,   967,     0,     0,   745,
       0,     0,   739,  1159,  1158,  1152,  1153,     0,  1020,  1021,
    1022,  1160,     0,     0,   714,   580,   582,   579,     0,     0,
     747,   538,   538,   538,   538,   535,     0,     0,     0,   746,
       0,   635,   596,   597,     0,     0,   708,     0,   732,     0,
     705,     0,     0,   696,     0,   703,   752,   719,     0,     0,
     721,    68,   769,     0,   764,   760,     0,     0,     0,   770,
       0,     0,     0,     0,     0,     0,     0,  1129,     0,   544,
     996,     0,     0,     0,  1169,     0,   944,   786,   799,   921,
       0,  1077,  1000,     0,  1100,  1064,   827,   826,   828,   828,
     945,     0,  1212,  1214,     0,     0,     0,     0,  1224,     0,
     947,     0,  1118,  1068,  1070,  1225,   981,   811,   875,     0,
       0,     0,     0,     0,     0,     0,   928,   918,     0,   926,
     930,     0,     0,     0,   912,     0,     0,   910,   940,   906,
       0,     0,   941,  1182,     0,  1186,     0,     0,  1033,  1042,
     662,   658,   618,   549,   618,     0,    62,  1319,  1316,     0,
     523,     0,     0,  1599,     0,   222,     0,     0,     0,     0,
     225,   239,   236,  1598,     0,  1469,  1470,     0,   553,   555,
       0,  1101,   563,   557,   611,   610,     0,   573,   646,   571,
       0,   652,     0,   508,     0,   494,     0,   688,     0,     0,
       0,     0,     0,   368,     0,     0,     0,   319,     0,   429,
       0,   436,     0,     0,   421,   400,  1355,  1354,  1384,     0,
       0,     0,  1347,  1403,  1376,  1368,  1343,  1382,     0,     0,
    1387,     0,  1380,  1397,  1398,  1396,  1401,     0,   329,   354,
       0,     0,   365,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1440,    71,  1183,  1183,
    1179,     0,     0,     0,   551,  1003,     0,  1410,  1464,  1461,
    1462,  1460,  1494,   428,     0,     0,   459,   416,     0,     0,
     146,   246,   249,     0,     0,   288,   454,     0,     0,   461,
     419,     0,   392,   402,   403,   388,   415,   386,   385,   387,
       0,  1529,  1591,     0,  1523,     0,   174,   170,   419,   145,
       0,     0,   262,   253,     0,   258,     0,     0,   256,     0,
       0,  1538,     0,  1542,     0,     0,   140,  1332,  1579,     0,
    1418,  1459,  1466,  1446,  1451,     0,  1457,  1453,  1452,  1447,
    1455,  1454,  1450,  1013,  1024,  1147,     0,     0,     0,     0,
       0,   717,     0,   738,   741,     0,  1019,  1014,   712,     0,
       0,   618,     0,     0,     0,     0,   529,   528,   534,     0,
       0,  1036,     0,   599,   707,     0,     0,     0,   694,   683,
     689,   690,     0,     0,     0,   750,   749,   720,   773,     0,
     753,   773,     0,   773,     0,   771,     0,   780,   868,   869,
     870,   871,   872,   873,   874,   805,     0,  1171,  1167,  1073,
    1075,  1112,   823,   821,   946,  1215,  1208,  1211,  1117,  1219,
    1221,     0,     0,     0,     0,  1232,     0,  1067,  1233,  1253,
     879,     0,     0,   909,  1164,   931,     0,     0,     0,   905,
    1100,     0,     0,     0,     0,     0,   914,     0,  1190,  1183,
       0,  1189,     0,     0,     0,     0,  1008,   663,   635,     0,
     635,     0,  1175,     0,   519,   521,   524,   208,  1597,     0,
    1592,   200,   201,   202,     0,     0,     0,   217,   194,     0,
       0,   234,   222,   210,   561,   562,     0,   556,   572,  1235,
    1241,   493,     0,   978,     0,     0,   490,     0,  1609,   319,
       0,     0,  1361,     0,   438,   380,   430,   413,   395,     0,
       0,     0,   320,     0,   455,     0,     0,   401,     0,     0,
       0,     0,   381,     0,     0,   340,     0,     0,   413,     0,
     420,   336,   337,     0,  1346,  1377,     0,  1373,     0,  1402,
       0,     0,     0,     0,     0,  1349,  1372,     0,  1344,   758,
    1579,  1579,  1352,  1266,  2032,  2033,  2034,  2035,  2036,  2037,
    2038,  2039,  2040,  2041,  2042,  2157,  2043,  2044,  2045,  2046,
    2047,  2048,  2049,  2050,  2166,  2051,   326,  2052,  1799,  2053,
    2054,  2055,  2056,  2057,     0,  2058,   756,  2059,  2060,  2254,
    2061,  2062,  1085,  1086,   324,   325,   423,   321,   431,   323,
       0,  1267,   322,   426,   379,     0,     0,  1605,   300,     0,
    1603,     0,   298,  1612,  1610,  1607,   302,    70,     0,     0,
    1006,  1007,  1004,   549,     0,     0,     0,  1440,  1417,     0,
       0,  1528,   169,     0,     0,     0,     0,  1728,     0,   146,
     458,   416,     0,   446,   364,   758,   441,     0,  1528,  1526,
       0,     0,   175,     0,   173,   146,  1487,   245,   248,     0,
       0,   476,   250,     0,     0,   263,     0,  1541,  1540,  1530,
       0,     0,     0,     0,  1549,  1432,     0,  1456,   970,     0,
       0,     0,     0,   679,     0,     0,   589,     0,   595,   635,
     533,   532,   531,   530,   617,  1665,  1963,  1858,     0,   621,
     616,   619,   624,   626,   625,   627,   623,   634,     0,   637,
     598,   731,  1113,  1115,     0,     0,     0,     0,   695,   697,
       0,   699,     0,   751,   767,     0,   768,     0,   766,   761,
     772,  1170,  1213,  1222,  1223,  1218,  1227,  1229,     0,     0,
       0,   876,   948,   937,   935,   932,     0,   933,   913,     0,
       0,   911,   907,     0,   942,     0,     0,  1187,     0,  1028,
       0,  1031,  1045,  1041,  1040,  1036,  1003,  1036,    63,   517,
     520,     0,   221,   198,   224,   223,     0,  1184,   231,     0,
       0,   222,     0,   226,  1478,     0,     0,   505,   687,   498,
     499,     0,   434,  1363,     0,   413,     0,   319,   397,   396,
     399,   394,   398,     0,   456,     0,     0,   338,     0,   345,
     383,   384,   382,   339,   413,   419,   341,     0,     0,     0,
    1369,  1348,  1345,  1350,  1370,     0,     0,  1371,  1374,   752,
     757,  1386,  1379,  1266,  2166,  2175,     0,     0,     0,  1364,
    1366,     0,     0,  1181,  1180,     0,  1413,  1412,  1463,  1409,
    1420,  1494,     0,     0,   388,  1525,     0,     0,     0,     0,
       0,   416,     0,     0,     0,  1528,     0,     0,   316,     0,
     361,     0,  1584,  1527,   168,   171,     0,     0,     0,  1479,
       0,     0,     0,     0,   286,     0,     0,     0,  1543,     0,
     138,   139,     0,  1419,   971,     0,   972,     0,   717,   742,
       0,     0,   587,  1036,     0,     0,     0,   628,   622,     0,
    1035,  1037,     0,   584,  1116,   691,     0,   693,     0,   717,
       0,   717,   700,   762,   754,  1220,  1230,  1231,  1226,  1026,
       0,   934,   938,   936,   915,  1183,  1183,  1191,  1188,  1030,
    1044,  1047,   637,  1251,   637,   522,   516,     0,     0,   209,
       0,     0,   206,   193,   211,  1102,   495,   496,     0,   319,
       0,   412,   435,   350,   328,     0,     0,     0,   335,   342,
     445,   344,     0,  1378,  1394,     0,     0,   425,  1613,  1611,
    1005,  1440,     0,   146,   364,  1487,   265,  1532,     0,     0,
       0,   388,  1591,  1524,   377,   370,   371,   372,   373,   374,
     375,   376,   391,   390,   362,   363,   176,     0,     0,     0,
       0,   251,     0,  1217,     0,   275,     0,   284,   275,     0,
       0,   140,     0,   228,   237,     0,   228,   973,   717,   681,
     590,     0,   637,     0,     0,     0,   620,     0,     0,   636,
       0,   481,  1114,     0,   682,   677,     0,   678,  1228,     0,
       0,     0,     0,   551,   584,   584,   195,     0,   196,   232,
       0,     0,     0,   419,   437,   411,     0,   404,   348,   347,
     349,   353,     0,   351,     0,   367,     0,   360,   328,     0,
    1381,     0,   432,  1408,  1416,     0,   318,  1481,   416,     0,
    1487,   364,  1528,  1487,     0,  1484,     0,   264,   277,     0,
       0,   274,   285,     0,   273,     0,   280,  1531,     0,     0,
       0,   230,   146,     0,   230,   680,     0,   584,   630,     0,
     629,  1039,  1038,   586,   692,     0,  1027,  1193,  1192,     0,
    1051,   480,   479,     0,     0,     0,     0,   445,     0,   389,
       0,     0,   350,     0,   343,   442,   443,   444,     0,   356,
     346,   357,  1375,  1393,   433,     0,   416,  1482,   317,  1585,
    1480,  1485,  1486,   276,     0,     0,     0,   281,     0,   278,
       0,   228,   227,   560,   229,   747,   238,   560,   594,   482,
     631,   583,   698,  1046,     0,     0,     0,     0,     0,   205,
     747,   216,     0,   360,   410,   405,   327,   352,   366,     0,
       0,     0,   358,     0,   359,  1487,   275,     0,   280,   284,
     279,     0,   230,   563,   136,   563,  1949,  1666,  1914,     0,
    1063,  1052,  1063,  1063,  1043,   197,   204,     0,   319,   332,
       0,   331,     0,   422,   355,  1483,     0,   283,     0,   271,
     282,   146,   560,   218,   219,     0,  1056,  1055,  1054,  1058,
    1057,     0,  1050,  1048,  1049,   747,   439,   330,   334,   333,
       0,   284,   747,   563,     0,     0,  1060,     0,  1061,   215,
     280,   270,   137,   220,  1053,  1059,  1062,     0,   284,   272
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
   -3279, -3279, -3279,  2165,   115,   125,  -906, -1222,  -955, -1230,
   -3279,     6,   126, -3279, -3279,   321, -3279, -3279,   727, -1707,
   -1749,  1229, -3279,   316,  -809,   731, -3279,  1331, -3279, -3279,
    -648, -1684,   133,   141,  2270, -3279,  1189, -3279,  4620,    -7,
    4490,   564,  -525,  -903, -1277,    35,     3, -3279, -3279, -3279,
   -3279, -3279,  -765,   661, -1243, -3279,   598, -3279, -3279, -3279,
   -3279,  -113,   312, -3279,     2, -2265, -3052,  -488, -3279,  -608,
   -3279,  -215, -3279,  -548, -3279,  -840,  -556,  -596, -2983, -1179,
   -3279,  1871,  -269, -3279,   791, -3279, -2704, -3279, -3279,   774,
   -3279,  1304,  1305, -3135, -3279, -2298,   310,  -533, -2492, -2681,
   -2284,  -926,   394,  -540,   367, -2198,  -983, -3279,   803, -3279,
    -524, -3279,  -927, -1706,   145, -2927, -1723,   148, -3279,   673,
   -3279, -2205,   674, -2158,  1783,  -510,    10, -1301, -2994, -3181,
     -47, -3278, -3279, -2592, -3279,   149, -1734, -3279, -3279, -1766,
      78, -2245, -3279,   -52, -2824,    14, -2223,   150, -2553, -3279,
   -3279,   156,     8,  -581,   448, -3279,   159, -3279, -3279,  1761,
    -920, -3279, -3279,   676,   161,  1190, -3279, -2693, -3279,  -603,
   -3279,  -650,  -652, -3279, -3279,    39,  -911,  1752, -3279, -3279,
   -3279,    17, -3279,  -394, -3279, -3279, -2690, -3279,    11, -3279,
   -3279, -3279, -3279, -1550,  -322,   458, -3279, -3279,  -478, -2682,
    -420, -3279, -3174, -3223, -3279, -3279,  -589, -3153, -2166,   167,
   -3279,  2257,  -321,   168,   169, -3279,   186,   170, -1167,     4,
    3780,   -27,   -30, -3279,    -3, -3279, -3279, -3279,   846, -3279,
   -3279,    28,    69,  1952, -3279, -3279, -3279, -3279, -1026, -3279,
   -1736,   836, -3279,  2128,  2141, -1805,  -869,   -62,   397,   895,
   -1735, -2208,  -627,  1370,  1948,  1962, -3279,   629, -2635, -3279,
    -459, -3279,  -663, -3279, -3279, -3279,  2121, -3279,   892,  1420,
   -1581, -1549, -3279, -2294, -3279,  -358,  -231, -3279, -3279, -3279,
   -3279, -3279, -2601, -2574,  -599,  1390, -3279,  1964, -3279, -3279,
   -3279, -3279,   107, -1576,  3177,   938, -3279,   -51, -3279, -3279,
   -3279, -3279,   314, -3279,  1130,   -26, -3279,  -482,  -660,  -825,
    2193,   103,   385, -1815,    34,   278,   689, -3279, -3279,   691,
   -2116, -1454,   646,  -126,  1139, -3279,   160, -1589, -3279, -1928,
   -1214, -3279, -3279,  -693,  -828, -3279, -3279, -3279,   991,  1748,
   -3279, -3279,  2309,  2341, -3279,  -891,  3192,  -996, -1067,  2206,
    -963,  2224,  -959,  -951,  -957,  2225,  2229,  2260,  2261,  2272,
    2280,  2286, -1588,  5995,  1258,  2966, -2276, -3279, -1456, -1611,
    1263,  1264,  1265,    75, -3279, -1416,    95, -3279, -3279, -3279,
   -3279, -2860, -3279,  -324, -3279,  -320, -3279, -3279, -3279, -1751,
   -2795, -1786, -3279,  3019,  1065, -3279,  -444,   631, -3279, -3279,
   -3279, -3279, -1568, -3279,  6858,   965, -3279, -2077, -3279, -3279,
   -1025,  -668,  -519, -1006, -1242, -1985, -3279, -3279, -3279, -3279,
   -3279, -3279, -1535, -1806,   240,  1028, -3279, -3279,  1131, -3279,
   -3279,   -43, -1543, -1823, -2180, -3279, -3279, -3279,  1034,  1770,
     285,  -839, -1675, -3279, -1586, -3279, -3279, -2107, -2514, -3279,
   -3279,   625, -2649, -3279, -3279,   328, -3279,  -697, -1130, -2575,
     329,    37, -3279,   271, -2640, -3279, -3279,  -758, -2784, -1127,
    -905, -3279,   171,  1336,  2407,    15,   172,  2463, -3279, -3279,
   -3279,  -732, -3279, -2664, -3279,   174,  1543, -3279, -3279, -3279,
     175, -3279,   608,   176,   844, -3279,  1206, -3279,   782,    36,
   -3279, -3279, -3279,   104,    21, -3108
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
       0,    47,    48,    49,   776,   777,  1917,  1859,  3114,  1277,
    1849,  1409,   778,  2744,  2745,  2746,  2351,  2340,  2341,  1820,
    1821,  1258,  3600,  2352,  1259,  1260,  2748,    53,    54,    55,
     117,  1290,   779,   780,   543,    58,  2407,   952,   829,  1202,
     878,  1140,  1671,   939,  1295,  1296,   781,  2787,  2419,  3371,
    2849,  3372,  2492,  2413,  1419,  2484,  1968,  1897,  1420,   551,
    1982,  2850,  2792,  1969,   782,  2731,  3116,  3593,  2759,  3753,
    3050,  3051,  3590,  3591,  2734,  2354,  3669,  3670,  2821,  1840,
    3664,  2438,  3522,  2360,  2334,  3052,  2446,  3481,  3163,  2355,
    3032,  2813,  2814,  2439,  3586,  1943,  2440,  3587,  3317,  2441,
    1894,  1921,  2735,  3671,  2361,  1895,  2730,  3117,  1824,  2442,
    3597,  2443,   561,  3036,   783,  2824,  1362,   784,  1929,  1930,
    1931,  1932,  1933,  1934,   974,  1935,   785,   975,  3185,  3620,
    3621,  3688,  3689,  3624,  3537,   786,  1356,  1911,    65,  1372,
     562,  1940,  3187,  2843,  2844,   787,  1918,   788,  2451,  3173,
    3174,   789,   790,  1219,  2685,  2264,   791,   767,   768,   992,
    1389,   769,    71,  1948,   792,  1395,  1396,  1000,    73,   900,
    1411,   793,  1412,  1413,  1007,    74,  2851,  1009,  1010,    75,
      76,   795,  3411,  3193,  1374,  1944,  2455,   563,   796,  2997,
    2266,  2688,  3582,    79,  3298,  2269,  1217,  3301,  3544,  2990,
    3296,  2689,  3631,  3693,  3299,  2270,  2271,  3545,  2272,   797,
      81,   847,  1761,   798,   799,  1078,  2114,   800,  1827,   801,
    1141,    87,    88,  1048,    89,  3311,    90,    91,  1801,  1802,
    1803,   880,   890,   891,  1751,  2983,  2984,  2682,  1506,  2054,
     883,  1223,  1770,   864,   865,  1883,   909,  1886,  1765,  1766,
    2279,  2698,  1794,  1795,  1232,  1233,  2040,  2041,  3561,  2042,
    2043,  1499,  1500,  3422,  2564,  2565,  1510,  1782,  1786,  1787,
    2300,  2290,  1773,  2561,  3219,  3220,  3221,  3222,  3223,  3224,
    3225,  1142,  2891,  3433,  1790,  1791,  1235,  1236,  1237,  1799,
    2310,    93,    94,  2248,  2670,  2671,   835,   836,  3237,  1528,
    1804,  2897,  2898,  2899,  3240,  3241,  3242,   837,  1043,  1044,
    1071,  1066,  1518,  2065,   838,   839,  2017,  2018,  2532,  1073,
    2056,  2076,  2077,  2905,  2587,  1596,  2337,  1597,  1598,  2091,
    1599,  1143,  1600,  1628,  1144,  1633,  1602,  1145,  1146,  1147,
    1605,  1148,  1149,  1150,  1151,  1621,  1152,  1153,  1646,  2093,
    2094,  2095,  2096,  2097,  2098,  2099,  2100,  2101,  2102,  2103,
    2104,  2105,  2106,  1203,  1805,  1155,  1156,  1157,  1158,  1159,
    1160,  1161,  1162,  1163,  1164,   841,  1165,  1166,  1722,  2242,
    2669,  3229,  3430,  3431,  2976,  3284,  3461,  3573,  3707,  3740,
    3741,  3772,  1167,  1168,  1664,  1665,  1666,  2129,  2130,  2131,
    2132,  2236,  1716,  1717,  1169,  3119,  1719,  2152,  3233,  3234,
    1204,  1492,  1659,  1339,  1340,  1610,  1465,  1466,  1472,  1991,
    1480,  1485,  2022,  2023,  1493,  2203,  1170,  2122,  2123,  2605,
    1623,  2985,  1171,  1294,  1672,  2971,  2239,  1720,  2196,  1178,
    1172,  1179,  1174,  1655,  2944,  2623,  2624,  1656,  2628,  2940,
    2941,  2165,  2945,  3257,  3258,  2630,  2307,  1748,  2312,  2313,
     996,  1175,  1176,  1177,  1341,   535,  1611,  3694,  1385,  1209,
    1342,  2192,   802,   108,   935,   803,   804,   545,   537,   538,
    1613,   740,  1344,   741,    98,   805,  1198,   887,  1199,  1201,
     806,   858,   859,   807,   872,   873,  1537,  1736,  1538,   896,
     103,   104,  1246,   860,   809,  3399
};

/* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule whose
   number is the opposite.  If YYTABLE_NINF, syntax error.  */
static const yytype_int16 yytable[] =
{
     532,   544,    60,    59,    85,  1484,   567,   938,    69,   993,
      63,    78,   567,  1067,    66,    96,   830,    77,   845,   895,
    1276,   105,   848,   567,   857,  1173,   910,   857,    92,  1351,
     877,   877,  2282,  1353,   877,  1297,   102,   567,   567,   911,
     912,   879,  2044,  1012,   534,  1242,  1863,  1875,    92,  1846,
    2246,   738,  1905,  1862,  2394,  1408,   808,  1453,  1648,   794,
     534,  1455,   914,  1457,  2113,  2327,  2019,  2635,  2163,  1456,
    1539,   995,   881,  2151,  2703,  1392,  1835,  2738,  1749,  2080,
    2403,  1609,   533,   830,   830,  1829,  2202,  1752,  2691,   915,
    2179,  2180,  1880,  2181,  1398,   766,  3122,   877,   840,  1414,
    2583,  2690,   877,   567,   877,   877,   877,  1950,   921,  1662,
    3153,  3164,  2939,  1867,   893,    50,  3150,  1278,   842,  1282,
    3120,  1286,  2347,  1006,  1003,    51,    52,   534,   534,  3168,
     833,  2793,  2672,    56,  2674,  2729,  1297,  2653,   874,  3011,
    2429,    57,  -251,  3016, -2021,    61,   928,  1726,    62,    64,
      67,  -463,  1729,  2250,  2204,  1669,    68, -1303,  2585,    70,
    2383,    72,  -419,  -467,  2420,   840,   840,    80,    82,    83,
      84,    95,    97,  1045,    99,   100,   101,  2037,  2424,  1070,
    3630,  3388,  2038,  1092,  2804,   842,   842,  -820,  1735,  2391,
   -1263,  1013, -2021,  1091, -1263, -1244,  1467,   833,   833,  2796,
   -2166, -2166, -1260, -1260,  2302, -2012,  -825,  1624,  1625, -2029,
    -825, -2012,  -828, -2157, -2157,  -828,  2535, -2175, -2175, -1264,
    1205, -2029,  2801, -1264,  3375,  1638,   844, -1261, -1261,  1733,
    1091,  2338,  -787,  -800,  -815,  2808,  2127,  1682,  2305,   844,
     844,  3392,  1684, -2152, -2152,  2566,  3152,  1186,  1193,  1601,
    1730,  1402,   844,  -463, -2177, -2177,  1091,  2779,  2575,  2788,
    2194,   844,  2194,  1090,  3321,  -467,  1995,  1609,  1402,  2802,
    1996,  1997,  3456,  1091,  1692,  1998,  1999,  2000,  1012,  1091,
       3,     4,  1231,  1995,  1288,  3259,  3484,  1297,  1997, -1083,
    2946,   885,  1757,  1878,  3256,  2900,  2603, -1083,  2856,  2858,
    1759,  2861,  1191,  1879,  1377,  1039,  3497,  1512,  1694,  1847,
    1234,  2417,  1850,  1851,  2556,  2557,  2558,  1682,   984,  1386,
    3304,  1683,  1684,  2315,   109,  1386,  2233,  2817,  1386,   844,
    3402,  3378, -1104,  1263,  2234,  2452,  3357,   907,   907,  1291,
   -1104,  3144,   569,  1378,  1813,  3580,  1037,  3711,   771,  -612,
    1422,  3169,  1190,  1264,  1692,   901, -1494,  3625,   114,   849,
     548, -1494,  1070,  1416,  1046,  3767,  1731,  2036,  3665,  3704,
    2086,  3332,  3634,   892,   892,  1045,  3389,  3285,  2978,  3287,
    2980,  2217,  1501,  3506,  3778,  3528,  1881,  1508,  1694,  1511,
    1754,  3390,  2243,  1771,  2501,  3529,  2277,  3607,  3425,  1265,
    2308,  1806,  1807,  2036,  1682,  2732,  2507, -1421,  1534,  1629,
    2867,  3697,  1653,   862,  2664,  3054,  1634,  1227,   546,  3318,
    1194,  3588,  1195,  1227,   901,  3462,  1640,  3464,  3655,  1682,
    3025,  1825,  2332,  3294,  2881,  1601,  2562,  2537,  1221,   924,
    1926,  1816,  1865,  1825,  2542,   115,  1056,  2332,  3403,   902,
    3758,  -463,   106,  1400,  2768,  3330,  2506,  1075,  3513,  2001,
     810,  1401,  3024,  -467,  3356,  1658,  1692,  1643,  1076,  3382,
    1885,  1565,  1353,  3719,  3295,  1694,  2563,  1832,  1654,   549,
    3383,  2278,  2002,  1057,  -757,  3397,  2576,  3589,  2536,  1644,
    2576,  3687,  3055,  2333,  3007,  1229,  1732,  3319,  1266,  1513,
    1694,  1229,  3677,   107,   110,  3680,  1772,  2218,  2726,  3762,
    1059,  3666,  3797,  1047,  3404,   111,   863,  3732,   902,  2597,
    1187,  3606,  2309,  1648,  3170,  2219,  2729,  -463,  2729,  -632,
    2220,  1379,  3768,  3331,  3712,  3705,  2931,  3731,  3617,  -467,
    3333,  1222,  1292,  2733,   877,  3756,  2244,  3191,  1230,   877,
    1267,   112,  2760,   116,   954,  3779,  3336,  2003,  -476,   567,
    1268,  1882,  1755,  3552,  3706,  2761,  1834,  1507,  3530,  2221,
    1833,  2868,  3495,  1269,  -476,  2622,  1810,  1884,  2083,  -476,
     811,  3056,  3581,  3540,  2418,  1642,  3160,  3209,  1609,   846,
    2781,  2782,  2783,  3687,  3391,  3760,  3186,  1188,  1744,  1995,
    3405,  3667,   843,  1996,  1997,   113,  3714,  1270,  3423,  2202,
    1085,  1818,  1760,  2316,  2409,  1808,  1673,  3755,  3394,  3473,
    3145,  3322,  -757,  2900,  2579,   993,  3177,  3485,  3678,  1387,
    1952,  -476,  1391,   936,  1753,  1387,  1956,   937,  1387,  1872,
     981,   897,  2402,  1809,   985,  2195,  2151,  2655,  1063,  2121,
    -463,   886,  -476,   898,  1380,  3687,  1995,  3197,  1624,  1625,
    1996,  1997,  -467,  2045,  2676,  1272,  2958,  1514,  1620,  1012,
    3504,   936, -1083,  3178,  2472,  1670, -2021,  2204,  2789,  2790,
    1635,   933,  -251,  1638,  2068,  3679,  1609,  1863,  -251,  -463,
    1273,  -463,  1834,  1953,  3122,  2693,  2805, -1303,  2841,  1350,
    2865,  -467,  -419,  -467,   903,  -476,  2776,  2302,  1643,  2235,
    1275,  1643,  2811,  2701,  -476, -1104,  1136,  1137,  3120,  -820,
    2915,  2249, -1263,  2478, -2021,   936, -1263, -1244,  1635,   937,
    1644,  3476,  1196,  1644,  1819,  2222,  3477, -2012,  -825,  3445,
    2706, -2029,  2793, -2012,  1645,  2133,  2134,  1647,   895,  1006,
    1960, -1264,  2894, -2029,  3312, -1264,  1601,  3370,  1677,  1715,
     991,   567,   567,  1391,  1627,  1632,  -815,  1626,  1297,  2175,
    1297,  1727,  2251,  2598,  2780,  1406,  1407,  1036,  1033,  2004,
    2005,  2006,  2625,  2007,  2008,  2009,  2010,  2011,  2012,  3457,
    1682,   882,  1406,  1407,  1683,  1684,  1866,  3568,  3345,  3346,
    1388,   895,    92,  1014,   544,  2012,  1391,  3611,  2769,   532,
     808,   877,  2992,  3605,  1008,  2882,  2883,  2884,  2885,  3612,
    2028,   830,  3720,  3479,  1609,  1042,  1042,  1692,   830,  3716,
     888,  1042,  1069,   899,  3303,  2034,  1712,  1713,  1714,  1715,
     550,  2402,  3489,  2680,   857,   857,   857,  2059,  2338,   857,
     914,  1857,  1243,   534,  1601,  3004,   904,  1139,  1139,   857,
     857,  1694,   857,  1629,   857,   534,  1526,  2074,  2979,  1051,
    2681,  2993,   534,  -476,  1825,  1858,   877,   915,  1337,   931,
   -1494, -1494,   567,  1640,  3201,  1826,  2545,  3749,  3574,  3034,
    3575,   840,  1250,   877,  2371,   979,   877,   845,  1251,  3785,
      60,    59,    85,   840,  2374,  2543,    69,  2377,    63,    78,
     840,   842,    66,    96,  3386,    77,  3035,  1192,  2109,   105,
    1527,   916,  2458,   842,  3005,  1197,    92,  3150,  1609,  3305,
     842,   932, -2151, -2151,   102,  1035,  2197,  1192,  2369,  3651,
    3652,  3765,  3695,   936,  2546,   877,  1348,   937,  2543,  2118,
    1658,  3373,  2739,  1857,  2742,  3138,  3139,   844,  1206,  1658,
    2901,  2665,   877,   877,   941,   877,   877,   877,  3387,  1371,
     874,   874,  3266,   874,  2154,   874,  3022,  1858,  3637,  3786,
    3244,  2432,  1382,  3246,  3067,  3248,  1962,  1609,   934,  3794,
     942,  1091,  1601,  3496,  3122,  3383,  1504,  2910,  1036,  1609,
    1951,  1852,  3699,  2324,  1252,  1825,  2176,  1519,   905,  2395,
    2396,  2397,  2483,    50,  1042,  1069,  1828,   877,  3120,  2550,
    1475,   877,   895,    51,    52,  1768,  3514,  1042,  1042,  2471,
    1609,    56, -2021,  2473,   567,  2370,  2475,  1609,  1354,    57,
     830,    92,   830,    61,  3071,  2151,    62,    64,    67,   808,
    2949,   830,  3482,  1398,    68,  2380,  2485,    70,   943,    72,
    2387,   567,  2736,  3131,  2740,    80,    82,    83,    84,    95,
      97,  3782,    99,   100,   101,  3787,  1439,  1440,  1616,  1609,
    2205,   906,  3515,  1609,   534,   940,   534,  2514,   944,  1609,
    1019,  3516,  2547,  2044,  1022,   534,  1601,  2372,   998,  2119,
    2645,  1836,  2375,  3533,  3750,   960,   567,   895,  2125,  2206,
    3534,  1774,  1609,  1052,  2019,  3517,   844,  3469,  2009,  2010,
    2011,  2012,   840,   964,   840,  3601,  3028,  2677,   567,  2646,
    2678,  1964,  1951,   840,   945,  1673,  1091,  3759,  2495,  1863,
      23,  1250,   842,  2496,   842,   953,  3276,  1251,  2777,  1774,
    1742,   946,  1853,   842,   833,  1601,  1035,  1515,  1743,  2784,
    1957,  1775,  1854,  1522,   907,   833, -1536,  1601,  1958,  1253,
    1837,  3118,  1667,  2007,  2008,  2009,  2010,  2011,  2012,   977,
     844,  2712,  2082,  2704,   976,  1741,   965,   966,  1091,  3791,
    2083,  3518,  2701,  1762,  1763,   982,  1769,  3751,  1601,  1775,
     567,   567,  1445,  1446,  3519,  1601,  3799,  2497,   877,  2494,
    2452,  2770,   983,  2498,  3584,  3415,  2500,  3029,   892,  1662,
     915,   915,   986,   915,  1643,   956,  3752,   957,   552,  1253,
    1643,  2207,  1475,  1139,  1139,  1012,  2208,  1255,  2515,  3788,
     987,  2209,   877,  1822,  1250,  2205,  1644,  1601,  2516,  1192,
    1251,  1601,  1644,  1252,   936,   877,  2647,  1601,   937,  2107,
    1645,  2648,  3038,  1838,   988,  2818,  1647,  2108,   947,  1256,
    2414,  3313,   877,  1776,  2206,  2829,   877,  2489,  2415,   948,
    1601,  1415,  1874,  2529,   989,  2490,  1777,  3030,  2901,   999,
    3031,  2530,    26,    27,    28,   553,  1836,  2741,  2577,  2742,
     968,  1636,  1637,    14,    15,  3041,  2578,  1710,  1711,  1712,
    1713,  1714,  1715,  1864,  3038,   949,  1029,  1839,  2580,  2756,
    3039, -2147, -2147,   908,  1777,  1227,  2578,  2757,  1263,  2743,
    1228,  1431,  1432,  3040,  1618,  1017,    46,   936,  3365,   969,
     950,  1670,   118,  1893,  1257,   877,   547,  3338,  1264,  3252,
     877,    23,  1778,   552,   770,  3343,  1252,  3041,  1909,  3042,
    2237,    33,   877,  2541,  2238,  1837,  1910,  1942,   861,   951,
    1912,  1018,   875,  1913,  1015,  2807,   991,  1914,  1019,   971,
    2673,   991,  1020,   567,   567,  1834,   567,   991,  1040,  2762,
    1778,   958,  2832,   959,  1265,  1512,  2207,  2763,  1023,    38,
    2083,  2406,  2210,  1229,  1439,  1440,  2209,  1074,  1038,  2907,
    1945,  1026,  2444,  2211,  2445,  2908,  3520,  2578,  1253,  3521,
     553,  3205,  2649,  2108,  1679,  2750,  3618,  2752,    92,   973,
    1072,  1861,  1182,  2650,  1352,    40,   808,  2113,  2151,  2895,
    1008,  1609,  2902,  2911,  1520,  2551,    43,  2552,  1525,  2913,
    3043,  2912,  2601,  1967,  1082,  1415,  1230,  2912,  1838,  1079,
    1080,  1081,  2060,  1027,  1084,  2062,  1475,  1475,   846,  2631,
    2066,  3487,  1475,  2069,  1028,   532,  3045,  2715,  2073,  2553,
    3350,  2554,  1254,  3776, -2148, -2148,  1255,   557,  1042,  1002,
     567,  2039,  1030,  1266,  2999,  1139,  1139,  1031,   877,  3159,
    2800,    46,  3000,    26,    27,    28,   830,  2415,  2753,   830,
    2755,  1032,  1839,  3065,   830,   560,  1139,   830,  1256,   534,
    3058,  1253,   830,  3044,   567,  3763,   567,  3764,  3045,  3046,
    1445,  1446,  2643,  3137,  1056,  1415,   892,  -550,  1415,  1415,
      23,  3189,  -550, -2149, -2149,  1267,  3195,  1033,  3047,  3190,
     534,  2932,  2933,   534,  3196,  1268,  1077,   840,   534, -2150,
   -2150,   534,  3057,  1083,  3066,  3206,   534,  2210,  1269,  1085,
    3147,  1057,    33,  3207,  1410,  3793,  2338,   842,  2211,  3734,
    1834,  3046,  2452,    35,  1451,  1280,  1053,  1521,   840,  1255,
    1609,   840,  1054,  1257,  3746,  1086,   840,  1250,  1059,   840,
    3047,  1662,  1270,  1251,   840,  3267,    37,  1184,   842,  1601,
      38,   842,   557,  2108,  1002,  -550,   842,  2110,  2115,   842,
     833,  1281,  2111,   833,   842,  2112, -2153, -2153,   833,  2116,
    2918,   833,  3570,  3571,  2150,  2919,   833,  2921,  2923,  2924,
     560,  3360,    92,  2920,  2922,  3416,    40,   567,  3419,  2280,
    2117,  1055,  3048,  2108,  1200,  1609,  2578,    43,  3444,  3789,
    1272,  3451,  3049,  3458,  3470,  1337,  3792,  3503,  -550,  2108,
    1207,  2083,  3471,  3507,    44,  2415,  3547,  1963,  1965,  1210,
    3627,  3190,  1211,  3632,  2108,  1273,  1208,   991,  3190,  3659,
    1475,  3633,    26,    27,    28,  3710,  1257,  3660,    45,  1212,
    3761, -2154, -2154,  3633,  3048,  1275,  1216,  1675,  3633,  1252,
    1180,  1181,    46,  1183,  3049,  1185,  2848,  1678,  1139,   936,
    1954, -1244,  1955,   937,  1225,  1056,  2191,  2027,  1215,  2029,
    2030,  1244,   964,  2253,   534,   877,  1063,   877,  1245,  1728,
    2284,  3021,  1224,  3023,  1226, -2155, -2155,  1247,  1734,   877,
    1012,  2268,  2273,  2275,  1250,  1514, -2156, -2156,  1601,  1249,
    1251,    33,  1057,  1836,  1609,  1248,  1475,   915,  1250,  3118,
   -2158, -2158,  1090,  1261,  1251,  1995, -2159, -2159,  1058,  1996,
    1997,  1262,  1197,  1279, -2180, -2180, -2180,  1283,  2175,  1059,
    2701,   877,  2246,   567,  1287,   965,   966,   114,  1836,    38,
   -2160, -2160,  1289,  1609, -2161, -2161,  1349,  1822,   567, -2162,
   -2162,  1346,   905,  1658, -2163, -2163, -2164, -2164,  1350,   567,
    2343,   567,  1822,  1601,   567,  1369,  1060,  1355,  -551, -2165,
   -2165,  1357,  1837,  -551,   567,    40,   567,  3065, -2167, -2167,
   -2168, -2168, -2169, -2169, -2170, -2170,    43,  1373,   991,   567,
    1375,  1250,  1873,   991,   567,  1905,  1376,  1251,   567,   567,
    1822,   567,  1383,   567,   567,  2353,  1252,  1837,  1384,  2359,
   -2171, -2171,  1390,  1609,  1253,  1393,  1061,  3015,  1394,  3156,
    1252, -2172, -2172,  1062,  2411,   906,  1053, -2174, -2174,  1399,
    2086,  1417,  1054,   877,   877,   877,   877,   877,  1868,  1371,
     877,    46,  3175,  2126,  3369,  1418,  -551, -2176, -2176,  1899,
   -2179, -2179,  1423,  2437,  1482,  3143,  2157,  1495,  2158,  1887,
    1888,  2303,  2304,  -607,  -607,  1838,  2448,  1063,  3194,  1497,
    -611,  -611,  1601,  1871,  -610,  -610,  1441,  1442,  1284,  2469,
    3309,  3310,  1255,  1445,  1446,  1498,  1064,  2177,  1900,  2834,
    2836,  1055,  2695,  2696,  3742,  3743,  3773,  3774,  3733,  -551,
    1838,  1609,  3735,  1252,  3278,  2528,  1516,  1505,   907,  1738,
    1739,  1601,  1509,  1523,  1285,  1517,  1524,  1529,  1533,  1839,
    1535,  1966,  1614,  1617,  3379,  -791,  1615,  -798,   971,  1475,
    1475,  1475,  1475,  1475,  1475,  1626,  3546,  1475,  1475,  1475,
    1475,  1475,  1475,  1475,  1475,  1475,  1475,  1630,  -788,   830,
    2567,    46,  -632,  -633,  1839,  -789,  2570,  1641,   552,  1065,
    -792,  1642,  2135,  -790,  1649,  1056,  1668,  3783,   567,  2136,
    2137,  1253,  1674,  1676,  2138,  2139,  2140,  1721,  1903,  1723,
    1725,  1601,   877,  1836,  -148,  1253,  3203,  1834,  1737,  1257,
    1745,  1746,  1750,   534,   830,  2301,  2301,  1756,  1758,  1228,
     830,  1796,  1057,  1230,  1798,   567,  2003,  -476,  1603,  3118,
    1800,   567,  1811,  1609,  1831,  1842,  1830,  1848,  1058,  1841,
    2586,  2586,  1834,  -476,  1843,   553,  2871,  1855,  -476,  1059,
    2701,   840,  1856,  1860,  2872,  2323,  3125,  1870,   534,  1255,
     552,  1877,  1890,  3341,   534,  1891,  1892,  1896,  1609,  2378,
    1906,   842,  1837,  1255,  1907,  1908,  1920,  1922,  1916,  1919,
    1415,  1924,  1923,   833,  1925,  1927,  1060,   908,  1253,  1601,
    1415,  1256,  1928,  1415,  1938,  1970,   840,  1939,  1946,  1947,
    -476,   554,   840,  1959,  2328,  2379,  3243,  1987,  1951,  3501,
    3351,  3352,  1984,  1986,   567,  2342,   842,  2345,  1989,   567,
    2356,  -476,   842,   555,   567,  3546,  2035,   553,   833,  1609,
    2364,  1992,  2366,   895,   833,  1609,  1061,  2016,  2767,  2015,
    2024,  2055,  1971,  1062,  2025,  2373,  2058,  2044,  1475,  1475,
    2376,  2032,  2385,  1662,  2381,  2382,  1255,  2384,  2057,  2388,
    2389,  2070,  2061,  1972,  1609,  1838,  1257,  2150,  2067,  1836,
    2084,  2071,  2072,  1475,  -476,  2078,   552,  3546,  2081,  1620,
    1257,  1627,  1973,  -476,   556,  2089,  1974,  1063,  2386,  1836,
    1632, -1535,  2090,  2085,  2087,  2088,  2120,  1091,  1415,  2155,
     830,  1601,  -148,  1682,  2121,   555,  1064,  2156,  2160,  2164,
    1975,  1609,   567,  1976,  1603,  2167,   830,   534,  3603,  1839,
    2268,  2170,  2169,  2172,  2171,  2213,  2193,  2214,  2241,  2216,
    1977,  2240,  2247,  2260,  3546,  2259,  1601,   557,  1837,   558,
    2261,  3327,  2262,   553,   534,  1476,  2263,   906, -2180, -2180,
   -2180,  2280,  2007,  2008,  2009,  2010,  2011,  2012,  1837,  2252,
     534,  2293,   559,  1257,   567,   560,  1352,  1475,  3564,  1139,
     567,  2283,  2292, -1535,  2295,  2296,  2700,  2297,  2314,  1065,
    2294,  2318,   840,  2274,  2276,  2319,  1893,  1834,  2330,  2329,
    2331,  2322,  2325,  1681,  2357,  2358,  1682,  1601,   840,  2431,
    1683,  1684,   842,  1601,  2771, -2180, -2180, -2180,  2339,  2362,
    2363,   552,   907,  2398,   833,  2399,  2412,  2416,   842,   557,
    2400,   558,  1609,  2592,  2775,  2421,  2428,  2434,  1978,  2435,
     833,  1838,  1601,  1692,  2449,  2433,  1979,  -148,  2453,  2454,
    1693,  2456,  -476,  2353,  2353,  2353,  3418,   560,  2459,  2460,
    2461,  1838,  2462,  2463,  2464,  2465,  1263,  2466,  2467,  1980,
    2470,  2491,  2468,  2474,  3619,  2499,  2021,  1694,  1893,  3490,
    1995,  2531,  2020,  2560,   877,  2538,  1264,  2571,   553,  1601,
    2539,   877,  1909,  2540,  2544,  1839,  1893,   877,   877,   877,
    1910,  1863,  1981,  2548,  1912,  2549,  2390,  1913,  2569,  2582,
     567,  1914,   877,  2584,  2589,  1839,   877,  2590,  2591,   877,
    2593,  2594,   936,  2408,  2408,  1210,   937,  1371,  2599,  2600,
    2595,   877,  1265,  3059,  1012,  2607,  2608,   991,  2611,  2596,
     536,  2612,  2614,  3060,  1001,   557,  2613,  1002,  2616,   739,
    2617,  2615,  2618,  2619,  2629,  2625,   536,  1654,  1673,  1893,
    1893,  2636,  1893,  1834,  2639,  2637,  2644,  2668,  2651,  2660,
     559,  2842,  2661,   560,  2666,  2667,  1695,  2679,  2684,  2686,
    2687,  2694,  2692,  1834,  2697,  1760,  -613,  2707,  2708,  2710,
    2711,  2714,  2675,   532,  1696,  1967,  2718,  2719,  2722,  1697,
    1601,  1410,  2720,  2724,  3061,  2725,  2728,  2493,  2141,  2142,
    2143,  2879,  2144,  2145,  2146,  2147,  2148,  2149,  2749,   877,
     877,   877,  2798,   536,   536,  2751,  2799,   556,  2705,  2705,
    2764,  1266,   567,  2766,  1475,   567,  2175,   534,  1700,  1090,
    2765,   567,  1995,  2772,  2773,  1603,  1996,  1997,  2774,  2785,
    2806,  1998,  1999,  2000,  2786,  2816,  2797,  2820,  1954,  2815,
    2819,   877,  2823,  3549,  2826,  1834,  2830,  3563,  2951,   895,
    2839,  2840,  2845,  1635,  2972,   840,  2150,  2855,  2863,  2866,
     557,  2869,  1002,  1267,  3565,  2870,  3567,  2875,   567,  2876,
    2889,  2890,   567,  1268,  3703,   842,  2877,  1703,  2878,  2892,
    2893,  2904,  1192,  2903,   895,   559,  1269,  2917,   560,  3062,
    2909,  2928,  2925,  2969,  2956,  2975,  2936,  1090,  1475,  1475,
    1995,  2989,  2935,  2954,  1996,  1997,  2957,  3657,  2960,  1998,
    1999,  2000,  1609,  2970,  2977,  2981,  2986,  3008,  2987,  3006,
    1270,  3010,  2982,  1603,  3012,  3020,  3027,  3033,  3053,  2991,
    3026,  3069,  3140,  3141,  3142,  2268,  3661,  1090,  3146,  3014,
    1995,  3149,  2998,  3154,  1996,  1997,  3155,  3161,  3162,  1998,
    1999,  2000,  3167,   877,  3650,  3171,  3179,   567,  3180,  1139,
    3184,   567,   567,   567,  3192,  3199,  2952,  1893,  1822,  1893,
    2415,  1942,  3200,  3635,  3202,  3208,  3231,  3645,  1272,  3228,
    3235,  1993,  1994,  3239,  1705,  3249,  3250,  2014,  3253,  3254,
    3279,  3286,   567,  3289,  1822,  3293,  3300,  3306,  3302,  3307,
    3290,  3308,  3316,  1273,  3320,  3314,  3553,  3324,  3555,   567,
     567,   567,   567,  1822,   567,   567,   567,   567,   567,  3325,
    3334,  3315,  3326,  1275,  3337,  3063,  2822,  3339,  3064,  3340,
    3344,  3361,  3376, -2146, -2147,  3358, -2148, -2149,  2002, -2150,
    2437,  3362,  2353, -2151, -2152, -2153,  3123, -2154,  2359,   895,
     877, -2155,  3151, -2156, -2158, -2159, -2160,  1909, -2161,  3165,
    3182,  1603,  3377,  3380,  3359,  1910, -2162, -2163, -2164,  1912,
   -2165,  3204,  1913, -2167, -2168,  1604,  1914,  3363,  3393, -2169,
    1601,  3364,   877, -2170,  3176, -2171, -2172, -2173,  1942, -2174,
   -2175, -2176, -2177,  2317, -2178, -2179,  1706, -1261,  1893, -2180,
   -2180, -2180,  3366,  1710,  1711,  1712,  1713,  1714,  1715,  1475,
    3367,  2914,  2916,  2003,  1042,   830,  2002,  3374,   567,   895,
    3396,  3381,  3692,  3395,  3398,   877,   877,   877,   877,  3400,
    3401,  3409,  3407,  3412,  3420,  3421,  3424,  3426,  3432,  1475,
    3438,  1834,  1475,  3428,  3435,   963,   567,   991,  3434,  3439,
     964,  3440,  3447,  3443,  3446,  3247,  2002,  3450,  3466,   534,
    3468,  3467,  3472,  3478,  3475,  1603,  3480,  3493,  3492,  2758,
   -1260,  3500,  3502,  3509,  3510,  3511,  1504,  3524,   567,  3525,
    3527,  3532,  3536,  2447,  3539,  3255,   567,  3557,  3572,  3550,
    3551,  2003,  3554,  1053,  3558,  3560,  3566,   840,  3592,  1054,
    3333,  3596,  3598,  3599,  3602,    23,  3608,  3614,  3615,  3616,
    3402,   963,  3622,   965,   966,  3623,   964,   842,  3283,   895,
     830,   967,  3626,  3630,  1603,  3638,  3636,  2791,  3640,   833,
    3282,  2003,  1139,  3643,  3647,  3649,  1603,  3648,  3644,  3297,
    2110,  2115,  3654,  2268,  3656,  2111,  3658,  3663,  2112,  2150,
    3668,  3674,  2116,  3675,  3681,  3682,  3684,  3685,  1055,  3676,
    3686,  1604,  3683,  1822,   534,    92,  3690,  1603,   938,  1893,
    3698,  3700,  3702,  2117,  1603,  3718,  3721,  3708,  3723,   965,
     966,  1415,   991,   567,  1475,  3729,  3728,   967,  3730,  3744,
     877,  3747,  3719,  3720,  3757,  3766,  1410,  3771,  3017,  3018,
    3777,  3781,   840,  3780,  3784,  3790,  2853,  3348,  2854,  3795,
    3796,  3798,  2859,  1213,  2862,  3068,  1603,  2737,   739,  3347,
    1603,  2365,   842,  3072,  2747,  2256,  1603,   968,  3070,  2410,
    2794,  1016,  1056,  3413,   833,  2004,  2005,  2006,  2852,  2007,
    2008,  2009,  2010,  2011,  2012,  3127,  3128,  3129,  3130,  1603,
    3132,  3133,  3134,  3135,  3136,  1250,  3148,    26,    27,    28,
    3672,  1251,  3754,  3488,  3717,  3724,   969,  3748,  3523,  1057,
    1263,  1823,  2727,  2754,  2335,  2336,  3166,  3715,  3037,  3722,
    3124,  2723,  2833,  3713,  2835,  1058,  1904,  3406,  3408,  3368,
    1264,  3002,  1893,  1899,  1949,  2847,  1059,  3628,  2476,  3579,
    3001,  3417,   970,  1961,  2437,  3696,   971,  3653,  3775,  1747,
    2713,  1220,  3126,  2004,  2005,  2006,  3385,  2007,  2008,  2009,
    2010,  2011,  2012,  3291,  1502,  2699,    33,   972,  2880,  2321,
    3245,  1793,  1900,  1060,  3701,  3410,  1265,  1503,  1530,  2709,
    2842,   895,  1475,  2289,  1792,   830,  3639,  3556,  2320,  1797,
     834,  2683,  2574,  2004,  2005,  2006,   973,  2007,  2008,  2009,
    2010,  2011,  2012,  3238,    38,  1468,  3442,  1252,  1901,  2874,
    2873,  3429,   971,  3494,  2906,  2842,  1452,  2588,   567,  3349,
    2486,  2487,  2488,  1061,  3642,   567,  2634,  3641,  1011,   534,
    1062,  3727,  2930,  1902,  1454,  1458,  2702,  3465,  2658,  1459,
      40,  2656,  3448,  2604,  2508,  2509,  2510,  2511,  2512,  2513,
    2948,    43,  2517,  2518,  2519,  2520,  2521,  2522,  2523,  2524,
    2525,  2526,  1903,  2046,  3292,  3460,  3262,   840,    44,   536,
    1460,  1461,  1189,  2982,  1063,  1266,  2255,  2581,     0,     0,
       0,   536,  1462,     0,     0,     0,     0,   842,   536,   567,
    1463,     0,    45,  1064,   567,     0,  1464,     0,  1053,   833,
       0,     0,     0,     0,  1054,     0,    46,     0,     0,     0,
       0,     0,     0,     0,  3115,     0,     0,   536,   536,  1415,
     567,     0,  1604,     0,  1415,     0,     0,  1267,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1268,     0,     0,
       0,   536,     0,     0,   567,   567,     0,     0,  2791,     0,
    1269,     0,     0,     0,     0,     0,     0,     0,     0,  3328,
       0,     0,   877,  1055,  3165,     0,  1065,   567,     0,     0,
    3505,     0,  1253,  1963,  1965,     0,  1606,     0,     0,     0,
    3172,     0,     0,     0,  1270,     0,   877,     0,   877,   536,
     739,     0,   877,  1343,   536,  3543,     0,     0,     0,     0,
       0,  1042,     0,     0,     0,     0,     0,     0,  1607,     0,
       0,     0,     0,     0,     0,     0,     0,  1475,  1603,  1139,
    1604,   567,  1042,     0,  1042,     0,     0,     0,     0,   567,
       0,     0,  2842,  3548,     0,     0,  1271,  1056,     0,   534,
    1255,     0,  1272,  2640,  2641,     0,  1238,     0,     0,     0,
    1139,     0,  1343,     0,  3297,     0,     0,     0,     0,     0,
       0,   877,  3576,  1011,  3578,     0,     0,  1273,     0,     0,
     536,   536,  1274,     0,  1057,     0,   536,   840,     0,   536,
     536,     0,     0,   536,   536,   536,   536,  1275,     0,     0,
    1058,     0,   877,     0,     0,     0,     0,   842,     0,     0,
     536,  1059,   536,     0,  3610,  3585,     0,  1263,     0,     0,
       0,   536,     0,     0,     0,     0,     0,   567,     0,     0,
       0,  3613,     0,     0,     0,     0,     0,  1264,   536,  1343,
    1612,  1042,     0,     0,     0,  3288,     0,     0,  1060,     0,
       0,  3429,     0,     0,     0,     0,     0,  1257,     0,  1139,
     536,     0,     0,     0,     0,     0,     0,     0,  1604,     0,
    1239,     0,  1606,     0,  3543,     0,     0,  1603,     0,  1053,
     536,     0,     0,  1265,     0,  1054,     0,     0,     0,     0,
       0,     0,   536,   536,   536,     0,   536,   536,  1061,     0,
     739,  3165,     0,     0,  1607,  1062,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1963,  1965,   534,  3165,
       0,     0,     0,   991,   991,     0,  3543,   991,     0,  1415,
       0,     0,   536,    11,     0,     0,  2039,     0,     0,     0,
       0,     0,  1603,     0,  1055,     0,     0,   567,     0,  1063,
     536,   536,     0,     0,     0,  3061,   840,  2994,     0,     0,
       0,    14,    15,     0,     0,     0,  3491,     0,  1064,  3165,
     534,     0,  1604,     0,     0,     0,   842,   877,   567,  3725,
       0,     0,  1266,  3543,     0,     0,     0,     0,   536,     0,
    3498,  3499,   536,   536,     0,  3585,     0,     0,     0,     0,
       0,     0,   536,   536,   536,     0,     0,   536,   840,    23,
       0,     0,  3745,  3512,    23,     0,     0,     0,  1056,     0,
       0,  3165,     0,  3165,     0,   991,  1612,   534,   842,     0,
       0,  1604,     0, -1902,  1267,     0,     0,     0,     0,     0,
    2268,  1065,     0,  1604,  1268,     0,  1240,     0,     0,     0,
       0,  1603,     0,     0,     0,  1057,     0,  1269,     0,     0,
    1410,     0,  1343,     0,     0,   840,     0,     0,     0,     0,
       0,  1058,  1343,     0,  1604,     0,     0,     0,     0,     0,
      86,  1604,  1059,  3165,     0,   842,     0,     0,     0,     0,
    1603,  1270,     0,     0,     0,     0,     0,  1343,  1090,     0,
      86,  1995,     0,   832,     0,  1996,  1997,     0,     0,     0,
    1998,  1999,  2000,     0,     0,     0,     0,    86,     0,  1060,
       0,     0,     0,  1604,  1053,     0,   894,  1604,     0,     0,
    1054,     0,     0,  1604,     0, -1902,     0,     0,   739,     0,
       0,  1241,     0,     0,     0,     0,     0,   739,     0,  1272,
    3463,     0,     0,  2995,     0,     0,  1604,     0,     0,     0,
    1603,    26,    27,    28,  1011,     0,    26,    27,    28,  1061,
     832,   832,   913,     0,  1273,     0,  1062,     0,     0,     0,
       0,   739,     0, -1902,    86,     0,   536,     0,  1090,  1055,
       0,  1995,     0,  1606,  1275,  1996,  1997,     0,     0, -1902,
    1998,  1999,  2000,     0, -1902,    23,     0,     0,     0, -1902,
       0,     0,     0,  2962,  2963,     0,     0,  3269,     0, -1902,
    1063,     0,  3115,     0, -1902,  1607,     0,     0,     0,  1415,
      33,     0,     0,     0,     0,    33,   536,   536,     0,  1064,
       0,    35,   536,     0,     0,   536,     0,     0,  1603,     0,
     536,   536,   536,   536,     0,     0, -1902,     0,     0,     0,
    3526,     0,     0,  1056,    37,   536,   536,     0,    38,     0,
       0,     0,     0,    38,     0,     0,   536, -1902,     0,   536,
       0,     0,    23,  3709,   536,     0,   536,   536,     0,     0,
      39,  1606,   536,  1477,     0,     0,     0,     0,     0,     0,
    1057,     0,     0,     0,    40,     0,     0,     0,     0,    40,
       0,     0,  1065,     0,     0,    43,  1058,  2002,     0,     0,
      43,     0,     0,  1607,     0,     0,     0,  1059,     0,     0,
   -1902,     0,    44, -1902,     0,     0,     0,    44,     0, -1902,
       0,     0,     0,     0,  3577,     0,  1478,  1612,     0,     0,
       0,     0,     0,     0,     0,     0,    45,    26,    27,    28,
    1603,    45,     0,     0,  1060,     0,  3604,     0,     0,     0,
      46,     0,     0,     0,     0,  2996,     0,     0,     0,     0,
     536,   536,     0,     0, -1902,     0,  2063,     0,     0,   536,
     536,     0,  2003,     0,     0,  1603,     0,     0,   536,     0,
       0,     0,     0,     0,     0,   536,     0,  2002,     0, -1902,
       0,     0,   536,     0,  1061,     0,     0,     0,     0,     0,
       0,  1062,     0,     0,  3198,     0,    33,     0,     0,  1606,
       0,     0,   536,   739,    26,    27,    28,   536,     0,     0,
     536,     0,     0,     0,     0,  1612,   536,   536,   536,   536,
     536,   536,   536,   536,   739,     0,  1603,     0,   536,   536,
     536,  1607,  1603,   536,    38,  1063,     0,   536,   882,     0,
     536,   536,   536,   536,   536,   536,   536,   536,   536,     0,
       0,   536,  2003,     0,  1064,  1604,     0,     0,   536,     0,
    1343,  1603,     0,     0,     0,     0,  1789,     0, -1902,     0,
      40,     0,     0,    33,  3384,  1477,     0,     0,   536, -1902,
   -1904,    43,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3115,     0,     0,     0,    23,     0,    44, -1902,
       0, -1902, -1902,  1606,     0,     0,   536,     0,  1603,     0,
       0,    38,     0,     0,     0,     0,     0,   536,   536,     0,
       0,     0,    45,     0,     0,     0,     0,  1065,  1478,     0,
       0,     0,  2064,     0,     0,  1607,    46,     0, -1902,  1608,
       0, -1902, -1902, -1902,     0,     0,     0,    40,     0,     0,
       0,     0,     0,  1612,     0,     0,     0,     0,    43,     0,
       0,     0,  1606,   739,     0,     0,     0,   739,     0,  3329,
       0,     0,     0,     0,  1606,    44,     0,     0,     0,     0,
       0,     0, -1904,     0,  2004,  2005,  2006,     0,  2007,  2008,
    2009,  2010,  2011,  2012,  1607,     0,     0,     0,     0,    45,
      86,     0,     0,     0,  1604,  1606,  1607,     0,     0,     0,
     536,     0,  1606,    46,     0,     0,     0,  1343,     0,  1603,
     536,   536,     0,     0,     0,     0,     0,     0,     0,     0,
   -1904,     0,     0,     0,     0,     0,     0,  1607,     0,     0,
       0,     0,     0,     0,  1607,     0, -1904,     0,    26,    27,
      28, -1904,     0,     0,  1606,     0, -1904,  1612,  1606,     0,
       0,  1343,     0,     0,  1606,     0, -1904,     0,     0,  1604,
       0, -1904,     0,     0,  2004,  2005,  2006,     0,  2007,  2008,
    2009,  2010,  2011,  2012,   739,     0,  1607,  1606,     0,     0,
    1607,  1343,   536,     0,     0,     0,  1607,     0,     0,     0,
    1011,     0,     0, -1904,     0,     0,     0,     0,     0,  1477,
    1477,     0,     0,     0,     0,  1477,  1612,    33,     0,  1607,
     536,   536,     0,   536, -1904,  1608,     0,  3414,  1612,   536,
     536,   536,   536,   536,   536,     0,     0,   536,   536,   536,
     536,   536,   536,   536,   536,   536,   536,     0,     0,   536,
       0,     0,     0,   536,   536,    38,     0,   536,     0,  1612,
       0,     0,  1478,  1478,   536,     0,  1612,     0,  1478,     0,
       0,     0,     0,   568,     0,     0,     0, -1904,  1604,   568,
   -1904,     0,     0,   831,     0,     0, -1904,     0,   536,     0,
     568,    40,     0,     0,   536,     0,   536,     0,     0,     0,
     536,     0,    43,     0,   568,   568,     0,     0,  1612,     0,
       0,     0,  1612,     0,   536,     0,  1343,  1604,  1612,    44,
       0,     0,     0,     0,    86,   894,     0,     0,     0,     0,
       0, -1904,  1090,     0,     0,  1995,     0,     0,     0,  1996,
    1997,  1612,     0,    45,  1998,  1999,  2000,     0,     0,     0,
     831,   831,     0,   536,   536,     0, -1904,    46,     0,     0,
     536,  3270,     0,     0,     0,     0,  1021,     0,     0,     0,
     568,     0,     0,     0,     0,     0,     0,     0,  1034,     0,
       0,     0,     0,     0,     0,  1050,     0,  1604,     0,     0,
       0,     0,     0,   536,     0,     0,     0,   536,  1053,     0,
       0,     0,   536,   536,  1054,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   882,     0,     0,     0,  1603,
       0,     0,     0,     0,     0,     0,     0,   876,   536,   536,
     913,   884,     0,   536,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0, -1904,     0,     0,    86,   536,
       0,     0,   536,   536,   536,     0, -1904,     0,     0,     0,
       0,     0,     0,  1055,     0,     0,     0,     0,     0,     0,
     536,   739,     0,     0,     0,  1604, -1904,   536, -1904, -1904,
     536,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   920,     0,   536,     0,     0,   923,
       0,   926,     0,   930,     0,     0,     0,     0,     0,  2291,
       0,     0,  2245,   536,     0, -1904,  1606,     0, -1904, -1904,
   -1904,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     536,   536,     0,  1681,     0,     0,  1682,  1056,     0,     0,
    1683,  1684,     0,     0,     0,     0,  1608,   536,  1607,   536,
       0,  2002,     0,     0,     0,     0,     0,     0,   536,     0,
       0,     0,  1478,    86,     0,     0,     0,     0,     0,     0,
       0,     0,   739,  1692,  1057,     0,     0,     0,     0,     0,
   -2180,   739,   739,   739,     0,     0,     0,  1604,  1681,     0,
    1058,  1682,     0,     0,     0,  1683,  1684,   832,     0,  1034,
       0,  1059,     0,     0,     0,     0,     0,  1694,   832,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1604,     0,     0,   536,  2003,     0,  1692,     0,
       0,     0,     0,     0,  1343, -2180,     0,     0,  1060,     0,
       0,     0,     0,  1619,  1608,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1631,     0,     0,     0,     0,
       0,     0,  1694,     0,     0,  1606,     0,     0,     0,     0,
    1612,     0,     0,  2642,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1604,  1660,     0,     0,     0,  1061,  1604,
       0,     0,     0,     0,   536,  1062,     0,  1607,     0,   739,
       0,     0,     0,     0,     0,     0, -2180,     0,     0,     0,
       0,     0,     0,     0,   536,  1011,     0,     0,  1604,     0,
       0,     0,     0,   739, -2180,     0,     0,     0,  2652, -2180,
    1606,     0,  1477,  1477,  1477,  1477,  1477,  1477,     0,  1063,
    1477,  1477,  1477,  1477,  1477,  1477,  1477,  1477,  1477,  1477,
       0,     0,     0,     0,     0,     0,     0,     0,  1064,     0,
       0, -2180,  1607,   536,     0,  1604,     0,     0, -2180,     0,
       0,     0,     0,   913,   913,     0,   913,     0,     0, -2180,
       0,     0,  1608,     0, -2180,  1478,  1478,  1478,  1478,  1478,
    1478,     0,     0,  1478,  1478,  1478,  1478,  1478,  1478,  1478,
    1478,  1478,  1478,     0,   536,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1612,
       0,     0,     0, -2180,     0,     0,   568,  1703,     0,     0,
       0,  1065,     0,     0,     0,     0,   536,     0,     0,  1606,
       0,     0,     0,   536,   536,     0,     0,     0,  2004,  2005,
    2006,     0,  2007,  2008,  2009,  2010,  2011,  2012,     0,   536,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1607,   536,     0,     0,   536,  1604,   536,  1606,     0,
       0,     0,  1703,     0,  1612,   536,  1608,     0,   536,   536,
       0,     0,     0,   536,   536,     0,     0,     0,     0,     0,
     536,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1607,     0,     0,     0,     0,     0,     0,   536,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   536,     0,     0,
       0,  1477,  1477,     0, -2180,     0,     0,     0,     0,     0,
       0,   955,     0,     0,     0,  1608,   962,     0,  1606,   536,
      86,     0,     0,     0,     0,     0,     0,  1608,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1681,     0,     0,  1682,     0,     0,
    1607,  1683,  1684,     0,  1478,  1478,     0,     0,  1608, -2180,
     739,     0,     0,  3121,   739,  1608,   739,   536,   536,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   536,   536,     0,  1692,     0,     0,     0,     0,     0,
       0, -2180,     0,     0,     0, -1919,     0,     0,   568,   568,
       0,     0,  1612,     0,     0,     0,  1606,  1608,     0,     0,
       0,  1608,     0,     0,     0,     0, -2180,  1608,  1694,     0,
    1477,     0,     0,  1710,  1711,  1712,  1713,  1714,  1715,     0,
       0,     0,     0,   832,     0,     0,   832,     0,  1607,     0,
    1608,   832,     0,     0,   832,   536,     0,     0,     0,   832,
       0,     0,     0,     0,  1681,     0,     0,  1682,   831,     0,
       0,  1683,  1684,     0,     0,     0,     0,     0,     0,   536,
       0, -2180,  1612,  1478,     0,   536,     0,     0,  1710,  1711,
    1712,  1713,  1714,  1715,  2961,     0,     0,     0,     0,     0,
       0,     0,   536,   536,  1692,   536,     0, -1919,     0,   536,
       0, -2180,   536,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0, -2180,  1606,   568,
       0,     0,     0,     0,     0,     0,     0,     0,  1694,   536,
       0,     0,     0,     0,    86, -2180,     0,     0,     0,     0,
   -2180,     0,     0,     0,     0, -1919,  1604,     0,     0,   536,
    1607,     0,     0,  1606,   536,   536,     0,     0,     0,   536,
    1612, -1919,     0,     0,   536,     0, -1919,   536,   536,     0,
       0, -1919,   536,  1343,     0,     0,   536,     0,  1025, -2180,
     536, -1919,     0,     0,     0,  1607, -1919,     0,     0,     0,
       0,     0,   536,     0,  2964,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1606,     0,     0,  2201, -1919,     0,
    1606,     0,     0,     0,     0,     0,     0, -2180,     0,     0,
       0,     0,     0,     0,     0,     0,   536,     0,  1703, -1919,
       0,     0,     0,     0,   536, -2180,  1607,     0,     0,  1606,
   -2180,     0,  1607,     0,     0,     0,     0,     0,     0,     0,
    1214,     0,     0,   536,     0,     0,     0,     0,     0,     0,
       0,  1496,  1612,     0,     0,     0,     0,   831,     0,   831,
       0,  1607,     0,     0,     0,     0,     0,     0,   831, -2180,
     913,     0, -1919,     0,     0, -1919,  1606,     0,  1532,     0,
       0, -1919,     0,  1090,     0,     0,  1995,  3121,     0,     0,
    1996,  1997,  1347,     0,     0,  1998,  1999,  2000,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1607,  1359,
    1361,     0,  1364,  1366,  1368,     0,     0,     0,     0,     0,
       0,     0,     0,   568,     0, -2180, -1919,     0,  1703,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   739,     0,
       0,  1477,  1477,     0,     0,  1663,     0,     0,  1612,  1608,
       0, -1919,     0,     0,  1612,     0,     0,     0,     0,     0,
       0,     0,     0,   536,  1470,     0,     0,     0,  1481,     0,
       0,     0,     0,   739,     0,     0,     0,     0,     0,  1011,
       0,     0,   536,  1612,     0,   536,     0,  1606,     0,     0,
       0,     0,     0,     0,  1478,  1478,     0,     0,     0,     0,
       0,   536,     0,     0,     0,     0,     0,     0,     0,     0,
     882,     0,     0,     0,     0,     0,     0,   568,   568,  1607,
       0,     0,    86,     0,     0,     0,     0,     0,     0,     0,
    1612,     0,     0,     0,     0, -2180,   536, -2180,     0,     0,
   -1919,     0,     0,     0,  1710,  1711,  1712,  1713,  1714,  1715,
       0, -1919,   536,   536,     0,     0,   536,     0,   536,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0, -1919,     0, -1919, -1919,     0,     0,     0,     0,  1681,
       0,     0,  1682,     0,     0,   536,  1683,  1684,  1685,  1686,
       0,  1687,  1688,  1689,     0,     0,     0,     0,  1608,     0,
       0,     0, -2180,     0,     0,     0,     0,     0,  1690,   536,
   -1919,     0,     0, -1919, -1919, -1919,   832,     0,     0,  1692,
       0,     0,     0,     0,     0,     0,  1693,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3121,     0,     0,     0,     0,     0, -2180,     0,     0,
       0,     0,  1477,  1694,  1710,  1711,  1712,  1713,  1714,  1715,
       0,   832,     0,  1608,     0,     0,     0,   832,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2003,     0,     0,
       0,     0,  3232,     0,     0,     0,     0,     0,     0,  1812,
     739,     0,     0,     0,     0,   536,     0,     0,     0,     0,
     568,   568,  1844,   568,     0,  1478,     0,   536,     0,   536,
       0,   536,     0,     0,     0,   536,     0,   536,     0,   536,
       0,     0,  1681,  1869,     0,  1682,     0,     0,     0,  1683,
    1684,     0,  3261,   536,     0,  1478,     0,     0,   536,   536,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     536,     0,  1695,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1692,   739,     0,     0,     0,     0,   536, -2180,
    1696,     0,  1608,     0,     0,  1697,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1606,     0,     0,
       0,     0,  1898,     0,     0,     0,  1694,  1915,  1698,  1699,
    1660,     0,     0,     0,     0,     0,     0,   568,     0,  1937,
       0,  1608,     0,     0,  1700,     0,     0,     0,     0,  1607,
    2201,     0,     0,   831,     0,   536,   831,  1477,     0,     0,
       0,   831,     0,     0,   831,     0,  2662,   536,     0,   831,
       0,  2075,     0,  2079,     0,     0,     0,   832,     0,   536,
       0,     0,     0,     0,     0,     0,  1701,     0,     0,  1702,
       0,     0,  2965,   832,   536,     0,     0,     0,     0,     0,
       0,     0,     0,  1703,     0,     0,  1704,     0,     0,   -47,
    1478,  1608,   536,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0, -2180,     0,     0,     0,  2004,
    2005,  2006,     1,  2007,  2008,  2009,  2010,  2011,  2012,     0,
       0,     0,     2, -2180,     3,     4,   536,     0, -2180,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     5,     0,
       0,     0,   536,     6,     0,     0,     0,     0,     0,     0,
       0,  3121,     7,   739,     0,  2053,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     8, -2180,     0,     0,
       0,     0,     0,     0,  2162,     9,     0,    10,     0,  1608,
       0,     0,     0,   536,     0,     0,     0,     0,     0,    11,
    1705,    12,     0,     0,     0,  1477,     0,   536,   536,   536,
       0,     0,    13,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    14,    15,    16,
       0,     0,     0,     0,     0,     0,  1703,     0,    17,   536,
       0,     0,     0,     0,     0,    18,     0,     0,     0,     0,
       0,     0,     0,    19,     0,    20,    21,     0,  1478,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1250,     0,
    2827,    22,     0,     0,  1251,    23,     0,     0,     0,     0,
       0,     0,     0,  1263,     0,     0,     0,   536,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1608,    24,  1264,     0,     0,     0,     0,     0,     0,
       0,     0,  1706,     0,     0,  1707,  1708,  1709, -1471,  1710,
    1711,  1712,  1713,  1714,  1715,     0,     0,     0,     0,     0,
     568,     0,     0,     0,     0,     0,  1608,  1988,     0,     0,
       0,     0,     0, -2180,     0,   568,     0,    25,     0,  1265,
       0,     0,     0,     0,     0,     0,   568,     0,   568,  1681,
       0,   568,  1682,     0,     0,     0,  1683,  1684,     0,     0,
       0,   568,     0,   568,     0,     0,     0,     0,     0,     0,
    1252,     0,     0,     0,     0,     0,   568,     0,     0,     0,
       0,   568,     0,     0,     0,   568,   568,  1608,   568,  1692,
     568,   568,  2254,  1608,  2257,     0, -2180,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2265,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    26,    27,    28,
       0,     0,  1608,  1694,     0,    29,     0,     0,     0,    30,
    3562,     0,     0,     0,     0,     0,  1660,     0,  1266,     0,
       0,     0,     0,     0,     0, -2180,     0,     0,  2306,     0,
       0,     0,  1710,  1711,  1712,  1713,  1714,  1715,     0,     0,
    1680,    31,     0,     0,     0,  1681,     0,     0,  1682,  1608,
      32,  1660,  1683,  1684,  1685,  1686,     0,  1687,  1688,  1689,
       0,     0,     0,  1478,     0,     0,    33,     0,     0,  3273,
    1267,     0,     0,    34,  1690,     0,     0,    35,    86,  1691,
    1268,     0,     0,     0,     0,  1692,     0,     0,    36,     0,
       0,     0,  1693,  1269,     0,     0,     0,     0,     0,     0,
      37,     0, -2180,     0,    38,     0,  3013,     0,     0,     0,
       0,     0,     0,     0,     0,  1253,   831,     0,     0,  1694,
   -2180,     0,     0,     0,     0, -2180,    39,  1270,     0,     0,
    2422,  2423,  2425,  2426,  2427,   568,     0,  2430,     0,     0,
      40,     0,     0,    41,     0,     0,    42,     0,     0,     0,
       0,    43,     0,     0,     0,     0,     0,     0,     0,     0,
    1608,   831,     0,     0, -2180,     0,     0,   831,    44,     0,
       0,     0,  2573,     0,     0,     0,     0,     0,  2079,  2367,
       0,     0,     0,  1255,     0,  1272,     0,     0,    86,     0,
       0,     0,    45,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1425,  1426,     0,     0,    46,     0,     0,   -47,
    1273,     0,     0,     0,     0,  2368,   894,     0,  1695,     0,
      86,     0,     0,  1703,     0,     0,     0,  3181,     0,     0,
    1275,     0,     0,     0,     0,     0,  1696,     0,     0,     0,
       0,  1697,     0,  1427,  1428,     0,     0,  1429,  1430,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2162,   832,     0,  1698,  1699,   568,     0,     0,     0,
       0,  1663,     0,     0,     0,     0,     0,     0,     0,  2555,
    1700,     0,     0,     0,  1681,     0,  1660,  1682,     0,     0,
    1257,  1683,  1684,     0,     0,     0,  1687,  1688,  1689,     0,
       0,     0,     0,     0,  1681,     0,     0,  1682,     0,     0,
       0,  1683,  1684,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1701,     0,  1692,  1702,  1431,  1432,     0,     0,
   -2180,  1693,     0,     0,     0,     0,     0,     0,     0,  1703,
       0,     0,  1704,     0,  1692,     0,     0,   831,     0,     0,
       0, -2180,     0,     0,     0,     0,     0,     0,  1694,   568,
       0,     0,     0,   831,     0,     0,     0,   832,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    86,  1694,     0,
       0,     0,     0,     0,     0,     0,   894,     0,     0,     0,
       0,     0,     0,  1433,  1434,  1435,  1436,  1437,  1438,  1439,
    1440,     0,     0,     0,  1441,  1442,     0,     0,     0,     0,
       0,   568,     0,     0,     0,     0,     0,  2717,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0, -2180,     0,     0,     0,  1705,     0,     0,  1710,
    1711,  1712,  1713,  1714,  1715,     0,     0,  1695,     0,     0,
    1608,     0,     0,     0,     0,     0,     0,     0,     0,  1154,
    1154,     0,     0,     0,     0,  1696,     0, -2180,     0,     0,
    1697,     0,     0,     0,  1443,  1444,     0,     0,    14,    15,
       0,     0,     0,     0,     0, -2180,     0,     0,     0,     0,
   -2180,     0,     0, -2180, -2180,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1700,
       0,     0,     0,     0,     0,  1445,  1446,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    23,     0,     0, -2180,
       0,  1293,     0,     0,     0,  1338,  1345,   568,     0,     0,
       0,     0,    86,     0,     0,     0,     0,     0,  1706,     0,
       0,  1707,  1708,  1709, -2180,  1710,  1711,  1712,  1713,  1714,
    1715,     0,     0,     0,     0,     0,     0,     0,  1703,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   832,     0,     0,     0,     0,     0,  1703,     0,
       0,     0,     0,     0,  1397,     0,     0,     0,  1660,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1421,     0,     0,  1447,  1448,     0,  1469,     0,
       0,  1471,     0,     0,     0,  1483,  1486,  1491,  1494,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1449,
    1450,  2795,     0,     0,     0,     0,     0,     0,  2803,     0,
       0,     0,     0,     0,  2809,  2810,  2812,     0,     0,   568,
       0,     0,   568,     0,     0,     0,     0,     0,  2075,  2825,
    1536,  1338,     0,  2828,     0,  1705,  2831,     0,    26,    27,
      28,     0,     0,     0,     0,     0,     0,     0,  2846,     0,
       0,     0,  1622,  1681,     0, -2180,  1682,     0,     0,     0,
    1683,  1684,  1685,  1686,     0,  1687,  1688,  1689,     0,     0,
       0,     0,  1639,     0,     0,  2937,     0,     0,     0,  2162,
       0,     0,  1690,     0,  1650,  1651,  1652,  2942,  1657,  1661,
       0,     0,     0,  1692,     0,     0,     0,     0,     0,     0,
    1693,     0,     0,     0,     0,     0,     0,    33,   742,     0,
       0,     0,     0,     0,     0,     0,    86,     0,    35,     0,
       0,     0,     0,     0,  1724,     0,     0,  1694,   742,     0,
       0,     0,     0,     0,     0,     0,  2886,  2887,  2888,     0,
    3531,    37,  1536,  1536,     0,    38,     0,  1706,     0,     0,
    1707,  1708,  1709,     0,  1710,  1711,  1712,  1713,  1714,  1715,
       0,     0,     0,     0,   568,     0,   743, -2180,   568,   568,
     568,     0,     0,     0,  1710,  1711,  1712,  1713,  1714,  1715,
    1767,    40,   744,     0,  1783,  1788,   743,     0,     0,     0,
       0,     0,    43,     0,     0,  1154,  1154,     0,     0,   568,
       0,     0,   744,     0,     0,     0,     0,     0,    86,    44,
      86,     0,     0,     0,     0,     0,   568,   568,   568,   568,
       0,   568,   568,   568,   568,   568,  1695,     0,     0,     0,
       0,     0,   745,    45,     0,     0,     0,     0,     0,     0,
       0,     0,   746,     0,  1696,     0,     0,    46,     0,  1697,
      86,     0,   745,     0,  1338,     0,   747,     0,     0,     0,
       0,   748,   746,     0,  1338,     0,     0,    86,     0,     0,
       0,     0,  1698,  1699,     0,     0,   747,     0,     0,     0,
       0,   748,     0,     0,     0,     0,     0,     0,  1700,  1338,
    3009,   749,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   749,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   831,     0,     0,  2075,     0,     0,     0,     0,
    1701,     0,     0,  1702,     0,     0,     0,   750,     0,     0,
       0,   751,     0,     0,     0,     0,     0,  1703,     0,     0,
    1704,     0,     0,  2573,   752,     0,     0,   750,     0,     0,
       0,   751,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   752,     0,     0,     0,  1985,     0,
       0,     0,     0,     0,     0,  2162,     0,  3158,     0,     0,
       0,     0,     0,  2162,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     555,     0,     0,     0,     0,    86,   753,     0,     0,  3183,
       0,     0,     0,     0,     0,     0,     0,   831,     0,     0,
       0,     0,     0,   754,     0,     0,   753,     0,     0,     0,
       0,     0,  1491,     0,  1491,  1491,     0,     0,    86,     0,
       0,     0,     0,   754,  1705,     0,     0,  1154,  1154,     0,
       0,     0,  3210,  3211,  3212,  3213,     0,     0,   755,     0,
       0,   756,     0,     0,     0,     0,     0,     0,  1154,     0,
       0,     0,   757,     0,     0,   758,     0,     0,   755,     0,
     568,   756,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   757,     0,   759,   758,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   760,     0,
       0,     0,     0,     0,   759,     0,   761,   762,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   763,   760,     0,
       0,     0,     0,   764,     0,     0,     0,   762,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   763,     0,     0,
       0,     0,     0,   764,     0,     0,  1706,     0,     0,  1707,
    1708,  1709,   765,  1710,  1711,  1712,  1713,  1714,  1715,     0,
       0,  2124,     0,  2168,     0,     0,     0,     0,     0,     0,
    2128,     0,   765,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2159,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2173,     0,     0,  3335,     0,     0,
       0,     0,  2178,     0,     0,     0,     0,     0,  2182,  2183,
    2184,  2185,  2186,  2187,  2188,  2189,     0,     0,     0,     0,
    2198,  2199,   831,     0,     0,  2212,     0,     0,     0,  2215,
       0,     0,  2223,  2224,  2225,  2226,  2227,  2228,  2229,  2230,
    2231,     0,     0,  2232,     0,     0,     0,     0,     0,     0,
    1154,     0,  1338,     0,     0,  3437,     0,     0,     0,     0,
       0,     0,  2573,     0,     0,     0,     0,     0,     0,     0,
    2258,  1681,     0,     0,  1682,     0,     0,     0,  1683,  1684,
    1685,  1686,     0,  1687,  1688,  1689,     0,     0,     0,     0,
    1681,     0,     0,  1682,     0,     0,     0,  1683,  1684,     0,
    1690,     0,  1687,  1688,  1689,     0,     0,     0,     0,  1651,
    1652,  1692,     0,     0,     0,     0,     0,     0,  1693,  1690,
       0,     0,     0,     0,     0,     0,   568,     0,     0,     0,
    1692,   568,     0,     0,     0,     0,     0,  1693,     0,     0,
       0,     0,     0,     0,     0,  1694,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   568,     0,     0,
       0,     0,     0,     0,  1694,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   568,   568,     0,     0,  1681,     0,     0,  1682,     0,
       0,     0,  1683,  1684,  1685,  1686,     0,  1687,  1688,  1689,
       0,     0,  2393,     0,   568,     0,     0,     0,     0,  1338,
       0,     0,  2404,  2405,  1690,  1479,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1692,     0,     0,     0,     0,
       0,     0,  1693,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1695,     0,     0,     0,     0,     0,
       0,     0,     0,  1338,     0,     0,     0,     0,   568,  1694,
       0,     0,  1696,  1695,     0,     0,  2162,  1697,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1696,     0,  1397,  2477,     0,  1697,     0,     0,     0,
    1698,  1699,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1700,     0,     0,  1698,
    1699,     0,  2503,  2504,     0,  2505,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1700,     0,     0,     0,  3508,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1718,     0,     0,  2533,  2534,     0,  1701,  2258,
       0,  1702,     0,  3535,   568,  3538,     0,     0,  1695,  3541,
       0,     0,     0,     0,     0,  1703,     0,  1701,  1704,     0,
    1702,     0,     0,     0,     0,     0,  1696,     0,     0,     0,
    2559,  1697,     0,     0,  1703,     0,     0,  1704,  2568,     0,
       0,  1718,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1698,  1699,  1536,     0,  1338,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1700,     0,     0,     0,     0,     0,     0,  1479,  3583,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2602,     0,     0,     0,
       0,     0,  2609,     0,     0,     0,     0,     0,     0,  3609,
       0,     0,  1701,     0,     0,  1702,     0,     0,     0,     0,
       0,     0,  1705,     0,   568,     0,     0,     0,     0,  1703,
       0,  1718,  1704,     0,     0,  2621,     0,     0,     0,  2627,
       0,  1705,     0,     0,  2632,  2633,     0,     0,     0,     0,
    1681,     0,     0,  1682,     0,  1663,     0,  1683,  1684,  1685,
    1686,     0,  1687,  1688,  1689,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1718,     0,     0,  1690,
       0,     0,     0,  1718,     0,     0,     0,     0,     0,     0,
    1692,  2654,     0,     0,  2657,     0,  2659,  1693,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2663,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1694,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1706,  1718,  1705,  1707,  1708,  1709,
       0,  1710,  1711,  1712,  1713,  1714,  1715,     0,     0,     0,
       0,  2168,     0,  1706,     0,  1767,  1707,  1708,  1709,  1718,
    1710,  1711,  1712,  1713,  1714,  1715,     0,     0,     0,     0,
       0,     0,  1788,  2230,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3726,     0,     0,     0,     0,     0,
       0,  1154,     0,     0,     0,     0,     0,     0,     0,     0,
    2721,     0,     0,     0,     0,     0,     0,  1718,     0,  1718,
       0,  1479,  1479,     0,  2013,     0,     0,  1479,     0,     0,
       0,  1718,     0,  1695,  1718,     0,     0,     0,     0,  1718,
       0,     0,  1718,     0,     0,     0,     0,     0,     0,     0,
       0,  1696,     0,     0,     0,     0,  1697,     0,  1706,     0,
       0,  1707,  1708,  1709,     0,  1710,  1711,  1712,  1713,  1714,
    1715,     0,     0,     0,     0,  2502,     0,  1652,     0,  1698,
    1699,     0,     0,     0,  1718,     0,  1338,     0,     0,     0,
       0,     0,     0,     0,     0,  1700,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1701,     0,     0,
    1702,     0,     0,     0,     0,     0,  2838,     0,     0,     0,
       0,     0,     0,     0,  1703,     0,     0,  1704,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1681,     0,
    1718,  1682,     0,     0,     0,  1683,  1684,  1685,  1686,     0,
    1687,  1688,  1689,     0,     0,     0,     0,  1718,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1690,  1718,  1718,
    1718,     0,     0,     0,     0,  1718,     0,     0,  1692,  1718,
       0,     0,     0,     0,     0,  1693,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1694,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1705,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1718,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2927,     0,
       0,     0,     0,     0,     0,  2929,  2128,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2938,     0,     0,     0,  1718,     0,     0,     0,     0,
       0,     0,     0,     0,  2950,     0,     0,  2953,     0,  2955,
       0,  1718,     0,     0,     0,     0,  1718,  2959,     0,     0,
       0,  1695,     0,     0,     0,  2966,  2967,     0,     0,     0,
       0,     0,  2974,  2013,     0,     0,     0,     0,     0,  1696,
       0,     0,     0,     0,  1697,     0,     0,     0,     0,  2988,
       0,     0,     0,  1706,     0,     0,  1707,  1708,  1709,  3003,
    1710,  1711,  1712,  1713,  1714,  1715,     0,  1698,  1699,     0,
    2606,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1154,     0,  1700,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1701,     0,     0,  1702,     0,
    1767,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1703,  2393,  2393,  1704,     0,     0,  1425,  1426,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1427,
    1428,     0,     0,  1429,  1430,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3188,     0,     0,
       0,     0,     0,  1718,     0,     0,     0,     0,     0,     0,
       0,  2013,  2013,     0,  1479,  1479,  1479,  1479,  1479,  1479,
       0,     0,  1479,  1479,  1479,  1479,  1479,  1479,  1479,  1479,
    1479,  1479,  2013,     0,     0,     0,     0,     0,     0,  1705,
       0,     0,     0,     0,  3226,  3227,     0,  3230,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1431,  1432,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3251,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3260,     0,     0,     0,     0,  3263,  3264,     0,     0,
       0,  3265,     0,     0,     0,     0,  3268,     0,     0,  3271,
    3272,     0,     0,     0,  2393,  1338,     0,     0,  3280,  1433,
    1434,  1435,  1436,  1437,  1438,  1439,  1440,     0,     0,     0,
    1441,  1442,  1718,     0,  1154,     0,  1718,     0,     0,     0,
       0,  1706,     0,     0,  1707,  1708,  1709,     0,  1710,  1711,
    1712,  1713,  1714,  1715,     0,     0,     0,     0,  2620,     0,
       0,     0,     0,     0,     0,     0,     0,  1718,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3323,     0,
       0,  1718,     0,     0,     0,     0,  1718,     0,     0,     0,
    1718,  1718,  1718,  1718,  1718,  1718,  1718,  1718,     0,     0,
       0,     0,     0,  1479,  1479,  3342,  1718,  1718,     0,     0,
    1443,  1444,     0,     0,     0,     0,     0,     0,     0,     0,
    1718,     0,     0,  1718,     0,     0,     0,     0,     0,     0,
       0,  1718,  1718,  1718,  1718,  1718,  1718,  1718,  1718,  1718,
    1718,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1445,  1446,     0,     0,     0,     0,     0,     0,     0,
    1681,     0,     0,  1682,     0,     0,  1718,  1683,  1684,  1685,
    1686,     0,  1687,  1688,  1689,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1690,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1692,     0,     0,  1681,     0,     0,  1682,  1693,     0,     0,
    1683,  1684,     0,     0,     0,  1687,  1688,  1689,     0,     0,
       0,     0,  1479,     0,     0,  2838,     0,     0,     0,     0,
       0,     0,  1690,     0,  1694,     0,     0,     0,     0,     0,
       0,     0,     0,  1692,     0,     0,     0,     0,     0,     0,
    1693,  1447,  1448,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1661,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1449,  1450,  1694,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2092,  1681,     0,  2627,  1682,
       0,  1718,     0,  1683,  1684,  1685,  1686,     0,  1687,  1688,
    1689,     0,  1718,  1718,  3452,  3453,     0,     0,  3454,     0,
    1652,     0,     0,     0,     0,  1690,     0,     0,     0,     0,
       0,     0,     0,  1695,     0,     0,  1692,     0,     0,     0,
       0,     0,     0,  1693,     0,     0,     0,  3474,     0,     0,
       0,  1696,     0,     0,     0,     0,  1697,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1694,  3486,     0,     0,     0,     0,  1695,     0,     0,  1698,
    1699,     0,     0,     0,     0,  1718,     0,     0,     0,     0,
       0,     0,     0,     0,  1696,  1700,     0,     0,     0,  1697,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1718,  1718,  1718,     0,     0,  2013,  2013,  2013,  2013,
    2013,  2013,  1698,  1699,     0,  2013,  2013,  2013,  2013,  2013,
    2013,  2013,  2013,  2013,  2013,     0,     0,  1701,  1700,     0,
    1702,  1718,  1718,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1703,     0,     0,  1704,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1718,     0,  1695,
       0,     0,     0,  3226,     0,     0,  1718,  3559,     0,     0,
    1701,  1154,     0,  1702,     0,     0,     0,  1696,     0,     0,
       0,     0,  1697,     0,     0,  3569,     0,  1703,     0,     0,
    2393,  2393,     0,     0,     0,     0,     0,     0,     0,     0,
    1718,     0,  1154,     0,     0,  1698,  1699,  1718,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1718,
    3594,  1700,     0,     0,     0,  1718,     0,     0,     0,     0,
    1718,  1718,     0,     0,     0,     0,     0,     0,  2013,  2013,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1705,  1718,  1479,  1479,  1718,     0,  1718,     0,     0,
       0,  1718,     0,  1701,     0,     0,  1702,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3629,     0,     0,
    1703,     0,     0,  1704,     0,     0,     0,     0,     0,  3226,
       0,     0,     0,     0,  1705,     0,     0,     0,     0,     0,
       0,  1154,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1718,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3673,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1706,     0,     0,  1707,  1708,  1709,     0,
    1710,  1711,  1712,  1713,  1714,  1715,     0,     0,     0,     0,
    2638,     0,     0,  1681,     0,     0,  1682,  1705,     0,     0,
    1683,  1684,  1685,  1686,     0,  1687,  1688,  1689,     0,     0,
       0,     0,     0,     0,     0,     0,  1706,     0,     0,  1707,
    1708,  1709,  1690,  1710,  1711,  1712,  1713,  1714,  1715,     0,
       0,     0,     0,  1692,     0,     0,     0,     0,     0,     0,
    1693,     0,     0,     0,     0,     0,  1718,     0,     0,  3739,
    3739,  3739,     0,     0,     0,     0,  1681,     0,     0,  1682,
       0,     0,     0,  1683,  1684,  1685,  1686,  1694,  1687,  1688,
    1689,     0,     0,     0,  1479,     0,     0,     0,     0,     0,
       0,  3739,     0,     0,     0,  1690,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1692,     0,     0,     0,
       0,     0,     0,  1693,     0,     0,     0,     0,     0,  1706,
       0,     0,  1707,  1708,  1709,     0,  1710,  1711,  1712,  1713,
    1714,  1715,     0,     0,     0,     0,  2864,     0,     0,  3739,
    1694,     0,     0,     0,     0,  1718,     0,  1718,     0,     0,
       0,     0,     0,     0,     0,     0,  1718,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1718,     0,
       0,  1718,     0,  1718,     0,     0,  1695,  1718,     0,     0,
    2013,  2013,     0,     0,  1718,  1718,     0,     0,     0,     0,
       0,     0,  1718,     0,  1696,     0,     0,     0,     0,  1697,
    1681,     0,     0,  1682,     0,     0,  1718,  1683,  1684,  1685,
    1686,     0,  1687,  1688,  1689,     0,     0,     0,     0,     0,
       0,  1718,  1698,  1699,     0,     0,     0,     0,     0,  1690,
       0,     0,     0,     0,     0,     0,     0,     0,  1700,  1695,
    1692,     0,     0,     0,     0,     0,     0,  1693,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1696,     0,  1479,
       0,     0,  1697,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1694,     0,     0,     0,     0,     0,
    1701,     0,     0,  1702,     0,  1698,  1699,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1703,     0,     0,
    1704,  1700,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1681,     0,
       0,  1682,     0,     0,     0,  1683,  1684,  1685,  1686,     0,
    1687,  1688,  1689,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1701,     0,     0,  1702,  1690,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1692,     0,
    1703,     0,     0,  1704,     0,  1693,     0,     0,     0,     0,
       0,     0,     0,  1695,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1696,  1694,     0,     0,     0,  1697,     0,     0,     0,
       0,     0,     0,     0,  1705,     0,  1718,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2013,  1479,     0,  1698,
    1699,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1700,     0,     0,     0,     0,
       0,     0,     0,     0,  1718,  1718,     0,     0,  1718,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1705,     0,  1718,
       0,     0,     0,     0,     0,     0,     0,  1701,  1718,     0,
    1702,  1718,  1718,  1718,     0,     0,  1718,     0,     0,  1718,
    1718,  1695,     0,     0,  1703,     0,     0,  1704,  1718,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1696,
       0,     0,     0,     0,  1697,     0,  1706,     0,     0,  1707,
    1708,  1709,     0,  1710,  1711,  1712,  1713,  1714,  1715,     0,
       0,     0,     0,  2934,     0,     0,     0,  1698,  1699,     0,
       0,  1718,     0,     0,     0,     0,     0,  2013,     0,     0,
       0,     0,     0,  1700,     0,     0,     0,     0,     0,     0,
    1718,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1706,
       0,     0,  1707,  1708,  1709,     0,  1710,  1711,  1712,  1713,
    1714,  1715,     0,     0,     0,  1701,  2947,     0,  1702,     0,
       0,  1705,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1703,     0,     0,  1704,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2013,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1718,  1718,  1718,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1718,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1718,     0,     0,     0,     0,     0,
       0,     0,     0,  1706,     0,     0,  1707,  1708,  1709,  1705,
    1710,  1711,  1712,  1713,  1714,  1715,     0,     0,     0,     0,
    3019,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1718,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1718,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1718,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1706,     0,     0,  1707,  1708,  1709,     0,  1710,  1711,
    1712,  1713,  1714,  1715,     0,     0,     0,  1718,  3274,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   119,  1087,
     844,  1088,  1089,  1090,  1091,  1092,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   120,   121,
     122,   123,   124,   125,   126,   127,     0,   128,   129,   130,
       0,  1718,     0,     0,     0,     0,  1093,     0,     0,   131,
     132,   133,     0,   134,   135,   136,   137,   138,   139,   140,
     141,  1094,   143,  1095,  1096,     0,   146,   147,   148,   149,
     150,   151,  1097,   812,   152,   153,   154,   155,  1098,  1099,
     158,     0,   159,   160,   161,   162,   813,     0,   814,     0,
    1100,   166,   167,   168,   169,   170,   171,   172,   173,   174,
       0,   175,   176,   177,   178,   179,   180,  1718,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,  1101,
     193,   194,  1102,   196,  1103,   197,     0,   198,   199,   200,
     201,   202,   203,    14,    15,   204,   205,   206,   207,     0,
       0,   208,   209,  1104,   211,   212,   213,     0,   214,   215,
     216,     0,   217,   218,   219,     0,   220,   221,   222,   223,
    1105,   225,   226,   227,   228,   229,   230,   815,  1106,   232,
       0,     0,   233,   234,  1107,   236,     0,   237,     0,   238,
     239,    23,   240,   241,   242,   243,   244,   245,     0,   246,
     247,     0,  1108,  1109,   250,   251,     0,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,     0,
     264,   265,   266,   267,   268,   269,   270,     0,   271,   272,
     273,   274,   275,   276,   277,   278,  1110,  1111,     0,  1112,
       0,   282,   283,   284,   285,   286,   287,   288,   289,  1113,
     290,   291,   292,     0,     0,   293,   294,   295,   296,     0,
     297,     0,     0,   298,   299,   300,   301,   302,   303,   304,
    1114,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,  1115,   328,  1116,   330,   331,   332,   333,   334,
    1117,   335,   336,   337,   338,  1118,   817,   340,  1119,   342,
     343,   344,     0,   345,   346,     0,     0,  1120,   348,   349,
       0,     0,   350,   351,   352,   353,   354,   355,   356,   819,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,    26,    27,    28,     0,   371,   372,   820,
     374,   375,   376,   377,     0,   378,   379,   380,     0,   381,
     382,   383,   384,   385,     0,   386,     0,   387,   388,   389,
     390,   391,  1121,   393,   394,   395,   396,     0,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,     0,   410,   411,   412,   413,   414,   415,  1122,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,    33,     0,   430,   431,   432,   433,   434,   435,
     436,   437,   438,    35,   439,   440,   441,  1123,   443,     0,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   823,    37,     0,   460,   461,
      38,   462,   463,   464,     0,   465,   466,   467,   468,   469,
       0,   470,  1124,  1125,     0,     0,   473,   474,   824,   476,
     825,  1126,   478,   479,   826,   481,   482,   483,   484,   485,
       0,     0,   486,   487,   488,  1127,    40,   489,   490,   491,
     492,     0,   493,   494,   495,   496,   497,   827,  1128,   500,
       0,   501,   502,   503,   504,   505,   506,   507,   508,   509,
       0,     0,   510,     0,    44,   511,   512,   513,   514,   515,
     516,   517,   518,   519,   520,   521,   522,   523,   524,   525,
     526,   527,   528,   529,   530,   531,  1129,     0,    45,     0,
       0,     0,     0,  1130,  1131,  1132,     0,     0,     0,     0,
    1133,     0,  1134,  3427,     0,     0,  1135,     0,  1136,  1137,
    1138,   119,  1087,   844,  1088,  1089,  1090,  1091,  1092,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   120,   121,   122,   123,   124,   125,   126,   127,     0,
     128,   129,   130,     0,     0,     0,     0,     0,     0,  1093,
       0,     0,   131,   132,   133,     0,   134,   135,   136,   137,
     138,   139,   140,   141,  1094,   143,  1095,  1096,     0,   146,
     147,   148,   149,   150,   151,  1097,   812,   152,   153,   154,
     155,  1098,  1099,   158,     0,   159,   160,   161,   162,   813,
       0,   814,     0,  1100,   166,   167,   168,   169,   170,   171,
     172,   173,   174,     0,   175,   176,   177,   178,   179,   180,
       0,   181,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,  1101,   193,   194,  1102,   196,  1103,   197,     0,
     198,   199,   200,   201,   202,   203,    14,    15,   204,   205,
     206,   207,     0,     0,   208,   209,  1104,   211,   212,   213,
       0,   214,   215,   216,     0,   217,   218,   219,     0,   220,
     221,   222,   223,  1105,   225,   226,   227,   228,   229,   230,
     815,  1106,   232,     0,     0,   233,   234,  1107,   236,     0,
     237,     0,   238,   239,    23,   240,   241,   242,   243,   244,
     245,     0,   246,   247,     0,  1108,  1109,   250,   251,     0,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,     0,   264,   265,   266,   267,   268,   269,   270,
       0,   271,   272,   273,   274,   275,   276,   277,   278,  1110,
    1111,     0,  1112,     0,   282,   283,   284,   285,   286,   287,
     288,   289,  1113,   290,   291,   292,     0,     0,   293,   294,
     295,   296,     0,   297,     0,     0,   298,   299,   300,   301,
     302,   303,   304,  1114,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,  1115,   328,  1116,   330,   331,
     332,   333,   334,  1117,   335,   336,   337,   338,  1118,   817,
     340,  1119,   342,   343,   344,     0,   345,   346,     0,     0,
    1120,   348,   349,     0,     0,   350,   351,   352,   353,   354,
     355,   356,   819,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,    26,    27,    28,     0,
     371,   372,   820,   374,   375,   376,   377,     0,   378,   379,
     380,     0,   381,   382,   383,   384,   385,     0,   386,     0,
     387,   388,   389,   390,   391,  1121,   393,   394,   395,   396,
       0,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,     0,   410,   411,   412,   413,   414,
     415,  1122,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,    33,     0,   430,   431,   432,
     433,   434,   435,   436,   437,   438,    35,   439,   440,   441,
    1123,   443,     0,   444,   445,   446,   447,   448,   449,   450,
     451,   452,   453,   454,   455,   456,   457,   458,   823,    37,
       0,   460,   461,    38,   462,   463,   464,     0,   465,   466,
     467,   468,   469,     0,   470,  1124,  1125,     0,     0,   473,
     474,   824,   476,   825,  1126,   478,   479,   826,   481,   482,
     483,   484,   485,     0,     0,   486,   487,   488,  1127,    40,
     489,   490,   491,   492,     0,   493,   494,   495,   496,   497,
     827,  1128,   500,     0,   501,   502,   503,   504,   505,   506,
     507,   508,   509,     0,     0,   510,     0,    44,   511,   512,
     513,   514,   515,   516,   517,   518,   519,   520,   521,   522,
     523,   524,   525,   526,   527,   528,   529,   530,   531,  1129,
       0,    45,     0,     0,     0,     0,  1130,  1131,  1132,     0,
       0,     0,     0,  1133,     0,  1134,     0,     0,     0,  1135,
       0,  1136,  1137,  1138,   119,  1087,   844,  1088,  1089,  1090,
    1091,  1092,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   120,   121,   122,   123,   124,   125,
     126,   127,     0,   128,   129,   130,     0,     0,     0,     0,
       0,     0,  1093,     0,     0,   131,   132,   133,     0,   134,
     135,   136,   137,   138,   139,   140,   141,  1094,   143,  1095,
    1096,     0,   146,   147,   148,   149,   150,   151,  1097,   812,
     152,   153,   154,   155,  1098,  1099,   158,     0,   159,   160,
     161,   162,   813,     0,   814,     0,  1100,   166,   167,   168,
     169,   170,   171,   172,   173,   174,     0,   175,   176,   177,
     178,   179,   180,     0,   181,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,  1101,   193,   194,  1102,   196,
    1103,   197,     0,   198,   199,   200,   201,   202,   203,     0,
       0,   204,   205,   206,   207,     0,     0,   208,   209,  1104,
     211,   212,   213,     0,   214,   215,   216,     0,   217,   218,
     219,     0,   220,   221,   222,   223,  1105,   225,   226,   227,
     228,   229,   230,   815,  1106,   232,     0,     0,   233,   234,
    1107,   236,     0,   237,     0,   238,   239,    23,   240,   241,
     242,   243,   244,   245,     0,   246,   247,     0,  1108,  1109,
     250,   251,     0,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,     0,   264,   265,   266,   267,
     268,   269,   270,     0,   271,   272,   273,   274,   275,   276,
     277,   278,  1110,  1111,     0,  1112,     0,   282,   283,   284,
     285,   286,   287,   288,   289,  1113,   290,   291,   292,     0,
       0,   293,   294,   295,   296,     0,   297,     0,     0,   298,
     299,   300,   301,   302,   303,   304,  1114,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,  1115,   328,
    1116,   330,   331,   332,   333,   334,  1117,   335,   336,   337,
     338,  1118,   817,   340,  1119,   342,   343,   344,     0,   345,
     346,     0,     0,  1120,   348,   349,     0,     0,   350,   351,
     352,   353,   354,   355,   356,   819,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,    26,
      27,    28,     0,   371,   372,   820,   374,   375,   376,   377,
       0,   378,   379,   380,     0,   381,   382,   383,   384,   385,
       0,   386,     0,   387,   388,   389,   390,   391,  1121,   393,
     394,   395,   396,     0,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,     0,   410,   411,
     412,   413,   414,   415,  1122,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,    33,     0,
     430,   431,   432,   433,   434,   435,   436,   437,   438,     0,
     439,   440,   441,  1123,   443,     0,   444,   445,   446,   447,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   823,     0,     0,   460,   461,    38,   462,   463,   464,
       0,   465,   466,   467,   468,   469,     0,   470,  1124,  1125,
       0,     0,   473,   474,   824,   476,   825,  1126,   478,   479,
     826,   481,   482,   483,   484,   485,     0,     0,   486,   487,
     488,  1127,    40,   489,   490,   491,   492,     0,   493,   494,
     495,   496,   497,   827,  1128,   500,     0,   501,   502,   503,
     504,   505,   506,   507,   508,   509,     0,     0,   510,     0,
      44,   511,   512,   513,   514,   515,   516,   517,   518,   519,
     520,   521,   522,   523,   524,   525,   526,   527,   528,   529,
     530,   531,  1129,     0,    45,     0,     0,     0,     0,  1130,
    1131,  1132,     0,     0,     0,     0,  1133,     0,  1134,     0,
       0,     0,  1135,     0,  1136,  1137,  1138,  1298,  1087,   844,
    1088,  1089,  1090,  1091,  1092,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   120,   121,   122,
     123,   124,   125,   126,   127,  1299,   128,   129,   130,     0,
       0,     0,  1300,     0,     0,  1093,     0,     0,  1301,   132,
     133,     0,  1302,   135,   136,  1303,   138,   139,   140,   141,
    1094,  1304,  1095,  1096,     0,   146,   147,   148,   149,   150,
     151,  1097,   812,   152,   153,   154,   155,  1098,  1099,   158,
       0,   159,   160,   161,   162,   813,     0,  1305,     0,  1306,
     166,   167,   168,   169,   170,  1307,   172,   173,   174,     0,
     175,   176,   177,   178,   179,   180,     0,  1308,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,  1101,   193,
     194,  1102,   196,  1103,   197,     0,   198,   199,   200,   201,
     202,   203,     0,     0,   204,   205,   206,   207,  1309,     0,
     208,   209,  1104,   211,   212,   213,     0,   214,   215,   216,
       0,   217,   218,   219,     0,   220,   221,   222,   223,  1105,
     225,   226,   227,   228,   229,   230,   815,  1106,   232,     0,
       0,   233,   234,  1107,   236,     0,   237,     0,   238,  1310,
       0,  1311,   241,   242,  1312,  1313,   245,     0,   246,   247,
       0,  1108,  1109,   250,   251,     0,   252,   253,   254,   255,
     256,   257,   258,  1314,   260,   261,   262,   263,     0,   264,
     265,   266,   267,   268,   269,   270,     0,   271,  1315,   273,
     274,   275,   276,   277,   278,  1110,  1111,     0,  1112,     0,
     282,  1316,  1317,   285,  1318,   287,   288,   289,  1113,   290,
     291,   292,     0,     0,   293,  1319,   295,  1320,     0,   297,
       0,     0,   298,   299,   300,   301,   302,   303,   304,  1321,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,  1115,  1322,  1116,   330,   331,   332,   333,   334,  1117,
     335,   336,  1323,   338,  1118,   817,   340,  1119,   342,   343,
     344,     0,   345,   346,     0,     0,  1120,   348,   349,     0,
     907,   350,   351,   352,  1324,   354,   355,  1325,   819,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,     0,     0,     0,     0,   371,   372,   820,  1326,
     375,   376,   377,     0,   378,   379,   380,     0,   381,   382,
     383,   384,   385,     0,   386,     0,   387,   388,   389,   390,
     391,  1121,   393,   394,   395,   396,     0,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
       0,   410,   411,  1327,   413,   414,   415,  1122,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,     0,  1328,   430,   431,   432,   433,   434,   435,   436,
     437,   438,     0,  1329,   440,   441,  1123,   443,     0,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,  1330,   458,   823,     0,     0,   460,   461,     0,
     462,  1331,   464,     0,   465,   466,   467,   468,   469,     0,
     470,  1124,  1125,     0,     0,   473,   474,   824,   476,   825,
    1126,   478,   479,  1332,   481,   482,   483,   484,   485,     0,
       0,   486,   487,   488,  1333,     0,   489,   490,   491,   492,
       0,   493,   494,   495,   496,   497,   498,  1128,   500,  1334,
     501,  1335,   503,   504,   505,   506,   507,   508,   509,     0,
       0,   510,     0,     0,   511,   512,   513,   514,   515,   516,
     517,   518,   519,   520,   521,   522,   523,   524,   525,   526,
     527,   528,   529,   530,   531,  1129,     0,     0,     0,     0,
       0,     0,  1130,  1131,  1132,     0,     0,     0,     0,  1133,
       0,  1134,  1336,     0,     0,  1135,     0,  1136,  1137,  1138,
     119,  1087,   844,  1088,  1089,  1090,  1091,  1092,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     120,   121,   122,   123,   124,   125,   126,   127,     0,   128,
     129,   130,     0,     0,     0,     0,     0,     0,  1093,     0,
       0,   131,   132,   133,     0,   134,   135,   136,   137,   138,
     139,   140,   141,  1094,   143,  1095,  1096,  1487,   146,   147,
     148,   149,   150,   151,  1097,   812,   152,   153,   154,   155,
    1098,  1099,   158,     0,   159,   160,   161,   162,   813,     0,
     814,     0,  1100,   166,   167,   168,   169,   170,   171,   172,
     173,   174,     0,   175,   176,   177,   178,   179,   180,     0,
     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,  1101,   193,   194,  1102,   196,  1103,   197,     0,   198,
     199,   200,   201,   202,   203,     0,     0,   204,   205,   206,
     207,     0,     0,   208,   209,  1104,   211,   212,   213,     0,
     214,   215,   216,     0,   217,   218,   219,     0,   220,   221,
     222,   223,  1105,   225,   226,   227,   228,   229,   230,   815,
    1106,   232,     0,     0,   233,   234,  1107,   236,     0,   237,
       0,   238,   239,  1488,   240,   241,   242,   243,   244,   245,
       0,   246,   247,     0,  1108,  1109,   250,   251,     0,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,     0,   264,   265,   266,   267,   268,   269,   270,     0,
     271,   272,   273,   274,   275,   276,   277,   278,  1110,  1111,
       0,  1112,     0,   282,   283,   284,   285,   286,   287,   288,
     289,  1113,   290,   291,   292,     0,  1489,   293,   294,   295,
     296,     0,   297,     0,     0,   298,   299,   300,   301,   302,
     303,   304,  1114,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,  1115,   328,  1116,   330,   331,   332,
     333,   334,  1117,   335,   336,   337,   338,  1118,   817,   340,
    1119,   342,   343,   344,     0,   345,   346,     0,     0,  1120,
     348,   349,     0,     0,   350,   351,   352,   353,   354,   355,
     356,   819,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,     0,     0,     0,     0,   371,
     372,   820,   374,   375,   376,   377,     0,   378,   379,   380,
       0,   381,   382,   383,   384,   385,     0,   386,     0,   387,
     388,   389,   390,   391,  1121,   393,   394,   395,   396,     0,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,     0,   410,   411,   412,   413,   414,   415,
    1122,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,     0,     0,   430,   431,   432,   433,
     434,   435,   436,   437,   438,     0,   439,   440,   441,  1123,
     443,     0,   444,   445,   446,   447,   448,   449,   450,   451,
     452,   453,   454,   455,   456,   457,   458,   823,     0,     0,
     460,   461,     0,   462,   463,   464,     0,   465,   466,   467,
     468,   469,     0,   470,  1124,  1125,     0,  1490,   473,   474,
     824,   476,   825,  1126,   478,   479,   826,   481,   482,   483,
     484,   485,     0,     0,   486,   487,   488,  1127,     0,   489,
     490,   491,   492,     0,   493,   494,   495,   496,   497,   498,
    1128,   500,     0,   501,   502,   503,   504,   505,   506,   507,
     508,   509,     0,     0,   510,     0,     0,   511,   512,   513,
     514,   515,   516,   517,   518,   519,   520,   521,   522,   523,
     524,   525,   526,   527,   528,   529,   530,   531,  1129,     0,
       0,     0,     0,     0,     0,  1130,  1131,  1132,     0,     0,
       0,     0,  1133,     0,  1134,     0,     0,     0,  1135,     0,
    1136,  1137,  1138,   119,  1087,   844,  1088,  1089,     0,  1091,
    1092,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   120,   121,   122,   123,   124,   125,   126,
     127,     0,   128,   129,   130,     0,     0,     0,     0,     0,
       0,  1093,     0,     0,   131,   132,   133,     0,   134,   135,
     136,   137,   138,   139,   140,   141,  1094,   143,  1095,  1096,
       0,   146,   147,   148,   149,   150,   151,  1097,   812,   152,
     153,   154,   155,  1098,  1099,   158,     0,   159,   160,   161,
     162,   813,     0,   814,     0,   165,   166,   167,   168,   169,
     170,   171,   172,   173,   174,     0,   175,   176,   177,   178,
     179,   180,     0,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,  1101,   193,   194,  1102,   196,     0,
     197,     0,   198,   199,   200,   201,   202,   203,    14,    15,
     204,   205,   206,   207,     0,     0,   208,   209,  1104,   211,
     212,   213,     0,   214,   215,   216,     0,   217,   218,   219,
       0,   220,   221,   222,   223,  1105,   225,   226,   227,   228,
     229,   230,   815,  1106,   232,     0,     0,   233,   234,  1107,
     236,     0,   237,     0,   238,   239,    23,   240,   241,   242,
     243,   244,   245,     0,   246,   247,     0,  1108,  1109,   250,
     251,     0,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,     0,   264,   265,   266,   267,   268,
     269,   270,     0,   271,   272,   273,   274,   275,   276,   277,
     278,  1110,  1111,     0,  1112,     0,   282,   283,   284,   285,
     286,   287,   288,   289,     0,   290,   291,   292,     0,     0,
     293,   294,   295,   296,     0,   297,     0,     0,   298,   299,
     300,   301,   302,   303,   304,  1114,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,  1115,   328,  1116,
     330,   331,   332,   333,   334,     0,   335,   336,   337,   338,
    1118,   817,   340,  1119,   342,   343,   344,     0,   345,   346,
       0,     0,   347,   348,   349,     0,     0,   350,   351,   352,
     353,   354,   355,   356,   819,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,    26,    27,
      28,     0,   371,   372,   820,   374,   375,   376,   377,     0,
     378,   379,   380,     0,   381,   382,   383,   384,   385,     0,
     386,     0,   387,   388,   389,   390,   391,  1121,   393,   394,
     395,   396,     0,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,     0,   410,   411,   412,
     413,   414,   415,  1122,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,    33,     0,   430,
     431,   432,   433,   434,   435,   436,   437,   438,    35,   439,
     440,   441,  1123,   443,     0,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
     823,    37,     0,   460,   461,    38,   462,   463,   464,     0,
     465,   466,   467,   468,   469,     0,   470,  1124,  1125,     0,
       0,   473,   474,   824,   476,   825,  1126,   478,   479,   826,
     481,   482,   483,   484,   485,     0,     0,   486,   487,   488,
       0,    40,   489,   490,   491,   492,     0,   493,   494,   495,
     496,   497,   827,  1128,   500,     0,   501,   502,   503,   504,
     505,   506,   507,   508,   509,     0,     0,   510,     0,    44,
     511,   512,   513,   514,   515,   516,   517,   518,   519,   520,
     521,   522,   523,   524,   525,   526,   527,   528,   529,   530,
     531,     0,     0,    45,     0,     0,  1298,  1087,   844,  1088,
    1089,  1090,  1091,  1092,     0,  1133,     0,  1134,     0,     0,
       0,  1135,     0,  1136,  1137,  1138,   120,   121,   122,   123,
     124,   125,   126,   127,     0,   128,   129,   130,     0,     0,
       0,  1300,     0,     0,  1093,     0,     0,  1301,   132,   133,
       0,  1302,   135,   136,  1303,   138,   139,   140,   141,  1094,
    1304,  1095,  1096,     0,   146,   147,   148,   149,   150,   151,
    1097,   812,   152,   153,   154,   155,  1098,  1099,   158,     0,
     159,   160,   161,   162,   813,     0,  1305,     0,  1306,   166,
     167,   168,   169,   170,  1307,   172,   173,   174,     0,   175,
     176,   177,   178,   179,   180,     0,  1308,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,  1101,   193,   194,
    1102,   196,  1103,   197,     0,   198,   199,   200,   201,   202,
     203,     0,     0,   204,   205,   206,   207,     0,     0,   208,
     209,  1104,   211,   212,   213,     0,   214,   215,   216,     0,
     217,   218,   219,     0,   220,   221,   222,   223,  1105,   225,
     226,   227,   228,   229,   230,   815,  1106,   232,     0,     0,
     233,   234,  1107,   236,     0,   237,     0,   238,  1310,     0,
    1311,   241,   242,  1312,  1313,   245,     0,   246,   247,     0,
    1108,  1109,   250,   251,     0,   252,   253,   254,   255,   256,
     257,   258,  1314,   260,   261,   262,   263,     0,   264,   265,
     266,   267,   268,   269,   270,     0,   271,  1315,   273,   274,
     275,   276,   277,   278,  1110,  1111,     0,  1112,     0,   282,
    1316,  1317,   285,  1318,   287,   288,   289,  1113,   290,   291,
     292,     0,     0,   293,  1319,   295,  1320,     0,   297,     0,
       0,   298,   299,   300,   301,   302,   303,   304,  1321,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
    1115,  1322,  1116,   330,   331,   332,   333,   334,  1117,   335,
     336,  1323,   338,  1118,   817,   340,  1119,   342,   343,   344,
       0,   345,   346,     0,     0,  1120,   348,   349,     0,     0,
     350,   351,   352,  1324,   354,   355,  1325,   819,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,     0,     0,     0,     0,   371,   372,   820,  1326,   375,
     376,   377,     0,   378,   379,   380,     0,   381,   382,   383,
     384,   385,     0,   386,     0,   387,   388,   389,   390,   391,
    1121,   393,   394,   395,   396,     0,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,     0,
     410,   411,  1327,   413,   414,   415,  1122,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
       0,  1328,   430,   431,   432,   433,   434,   435,   436,   437,
     438,     0,  1329,   440,   441,  1123,   443,     0,   444,   445,
     446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
     456,  1330,   458,   823,     0,     0,   460,   461,     0,   462,
    1331,   464,     0,   465,   466,   467,   468,   469,     0,   470,
    1124,  1125,     0,     0,   473,   474,   824,   476,   825,  1126,
     478,   479,  1332,   481,   482,   483,   484,   485,     0,     0,
     486,   487,   488,  1333,     0,   489,   490,   491,   492,     0,
     493,   494,   495,   496,   497,   498,  1128,   500,  2401,   501,
    1335,   503,   504,   505,   506,   507,   508,   509,     0,     0,
     510,     0,     0,   511,   512,   513,   514,   515,   516,   517,
     518,   519,   520,   521,   522,   523,   524,   525,   526,   527,
     528,   529,   530,   531,  1129,     0,     0,     0,     0,     0,
       0,  1130,  1131,  1132,     0,     0,     0,     0,  1133,     0,
    1134,     0,     0,     0,  1135,     0,  1136,  1137,  1138,  1298,
    1087,   844,  1088,  1089,  1090,  1091,  1092,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   120,
     121,   122,   123,   124,   125,   126,   127,     0,   128,   129,
     130,     0,     0,     0,  1300,     0,     0,  1093,     0,     0,
    1301,   132,   133,     0,  1302,   135,   136,  1303,   138,   139,
     140,   141,  1094,  1304,  1095,  1096,     0,   146,   147,   148,
     149,   150,   151,  1097,   812,   152,   153,   154,   155,  1098,
    1099,   158,     0,   159,   160,   161,   162,   813,     0,  1305,
       0,  1306,   166,   167,   168,   169,   170,  1307,   172,   173,
     174,     0,   175,   176,   177,   178,   179,   180,     0,  1308,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
    1101,   193,   194,  1102,   196,  1103,   197,     0,   198,   199,
     200,   201,   202,   203,     0,     0,   204,   205,   206,   207,
       0,     0,   208,   209,  1104,   211,   212,   213,     0,   214,
     215,   216,     0,   217,   218,   219,     0,   220,   221,   222,
     223,  1105,   225,   226,   227,   228,   229,   230,   815,  1106,
     232,     0,     0,   233,   234,  1107,   236,     0,   237,     0,
     238,  1310,     0,  1311,   241,   242,  1312,  1313,   245,     0,
     246,   247,     0,  1108,  1109,   250,   251,     0,   252,   253,
     254,   255,   256,   257,   258,  1314,   260,   261,   262,   263,
       0,   264,   265,   266,   267,   268,   269,   270,     0,   271,
    1315,   273,   274,   275,   276,   277,   278,  1110,  1111,     0,
    1112,     0,   282,  1316,  1317,   285,  1318,   287,   288,   289,
    1113,   290,   291,   292,     0,     0,   293,  1319,   295,  1320,
       0,   297,     0,     0,   298,   299,   300,   301,   302,   303,
     304,  1321,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,  1115,  1322,  1116,   330,   331,   332,   333,
     334,  1117,   335,   336,  1323,   338,  1118,   817,   340,  1119,
     342,   343,   344,     0,   345,   346,     0,     0,  1120,   348,
     349,     0,     0,   350,   351,   352,  1324,   354,   355,  1325,
     819,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,     0,     0,     0,     0,   371,   372,
     820,  1326,   375,   376,   377,     0,   378,   379,   380,     0,
     381,   382,   383,   384,   385,     0,   386,     0,   387,   388,
     389,   390,   391,  1121,   393,   394,   395,   396,     0,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,     0,   410,   411,  1327,   413,   414,   415,  1122,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,     0,  1328,   430,   431,   432,   433,   434,
     435,   436,   437,   438,     0,  1329,   440,   441,  1123,   443,
       0,   444,   445,   446,   447,   448,   449,   450,   451,   452,
     453,   454,   455,   456,  1330,   458,   823,     0,     0,   460,
     461,     0,   462,  1331,   464,     0,   465,   466,   467,   468,
     469,     0,   470,  1124,  1125,     0,     0,   473,   474,   824,
     476,   825,  1126,   478,   479,  1332,   481,   482,   483,   484,
     485,     0,     0,   486,   487,   488,  1333,     0,   489,   490,
     491,   492,     0,   493,   494,   495,   496,   497,   498,  1128,
     500,     0,   501,  1335,   503,   504,   505,   506,   507,   508,
     509,     0,     0,   510,     0,     0,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,  1129,     0,     0,
       0,     0,     0,     0,  1130,  1131,  1132,     0,     0,     0,
       0,  1133,     0,  1134,  2457,     0,     0,  1135,     0,  1136,
    1137,  1138,   119,  1087,   844,  1088,  1089,  1090,  1091,  1092,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   120,   121,   122,   123,   124,   125,   126,   127,
   -1090,   128,   129,   130,     0,     0,     0,     0, -1090,     0,
    1093,     0,     0,   131,   132,   133,     0,   134,   135,   136,
     137,   138,   139,   140,   141,  1094,   143,  1095,  1096,     0,
     146,   147,   148,   149,   150,   151,  1097,   812,   152,   153,
     154,   155,  1098,  1099,   158,     0,   159,   160,   161,   162,
     813,     0,   814,     0,  1100,   166,   167,   168,   169,   170,
     171,   172,   173,   174,     0,   175,   176,   177,   178,   179,
     180,     0,   181,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,  1101,   193,   194,  1102,   196,  1103,   197,
       0,   198,   199,   200,   201,   202,   203,     0,     0,   204,
     205,   206,   207,     0,     0,   208,   209,  1104,   211,   212,
     213,     0,   214,   215,   216,     0,   217,   218,   219,     0,
     220,   221,   222,   223,  1105,   225,   226,   227,   228,   229,
     230,   815,  1106,   232,     0,     0,   233,   234,  1107,   236,
       0,   237,     0,   238,   239,     0,   240,   241,   242,   243,
     244,   245,     0,   246,   247,     0,  1108,  1109,   250,   251,
       0,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,     0,   264,   265,   266,   267,   268,   269,
     270,     0,   271,   272,   273,   274,   275,   276,   277,   278,
    1110,  1111,     0,  1112,     0,   282,   283,   284,   285,   286,
     287,   288,   289,  1113,   290,   291,   292,     0,     0,   293,
     294,   295,   296,     0,   297,     0,     0,   298,   299,   300,
     301,   302,   303,   304,  1114,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,  1115,   328,  1116,   330,
     331,   332,   333,   334,  1117,   335,   336,   337,   338,  1118,
     817,   340,  1119,   342,   343,   344,     0,   345,   346,     0,
       0,  1120,   348,   349,     0,     0,   350,   351,   352,   353,
     354,   355,   356,   819,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,     0,     0,     0,
       0,   371,   372,   820,   374,   375,   376,   377,     0,   378,
     379,   380,     0,   381,   382,   383,   384,   385,     0,   386,
       0,   387,   388,   389,   390,   391,  1121,   393,   394,   395,
     396,     0,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,     0,   410,   411,   412,   413,
     414,   415,  1122,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,     0,     0,   430,   431,
     432,   433,   434,   435,   436,   437,   438,     0,   439,   440,
     441,  1123,   443, -1090,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   823,
       0,     0,   460,   461,     0,   462,   463,   464,     0,   465,
     466,   467,   468,   469,     0,   470,  1124,  1125,     0,     0,
     473,   474,   824,   476,   825,  1126,   478,   479,   826,   481,
     482,   483,   484,   485,     0,     0,   486,   487,   488,  1127,
       0,   489,   490,   491,   492,     0,   493,   494,   495,   496,
     497,   498,  1128,   500,     0,   501,   502,   503,   504,   505,
     506,   507,   508,   509,     0,     0,   510,     0,     0,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520,   521,
     522,   523,   524,   525,   526,   527,   528,   529,   530,   531,
    1129,     0,     0,     0,     0,     0,     0,  1130,  1131,  1132,
       0,     0,     0,     0,  1133,     0,  1134,     0,     0,     0,
    1135,     0,  1136,  1137,  1138,  1298,  1087,   844,  1088,  1089,
    1090,  1091,  1092,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   120,   121,   122,   123,   124,
     125,   126,   127,     0,   128,   129,   130,     0,     0,     0,
    1300,     0,     0,  1093,     0,     0,  1301,   132,   133,     0,
    1302,   135,   136,  1303,   138,   139,   140,   141,  1094,  1304,
    1095,  1096,     0,   146,   147,   148,   149,   150,   151,  1097,
     812,   152,   153,   154,   155,  1098,  1099,   158,     0,   159,
     160,   161,   162,   813,     0,  1305,     0,  1306,   166,   167,
     168,   169,   170,  1307,   172,   173,   174,     0,   175,   176,
     177,   178,   179,   180,     0,  1308,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,  1101,   193,   194,  1102,
     196,  1103,   197,     0,   198,   199,   200,   201,   202,   203,
       0,     0,   204,   205,   206,   207,     0,     0,   208,   209,
    1104,   211,   212,   213,     0,   214,   215,   216,     0,   217,
     218,   219,     0,   220,   221,   222,   223,  1105,   225,   226,
     227,   228,   229,   230,   815,  1106,   232,     0,     0,   233,
     234,  1107,   236,     0,   237,     0,   238,  1310,     0,  1311,
     241,   242,  1312,  1313,   245,     0,   246,   247,     0,  1108,
    1109,   250,   251,     0,   252,   253,   254,   255,   256,   257,
     258,  1314,   260,   261,   262,   263,     0,   264,   265,   266,
     267,   268,   269,   270,     0,   271,  1315,   273,   274,   275,
     276,   277,   278,  1110,  1111,     0,  1112,     0,   282,  1316,
    1317,   285,  1318,   287,   288,   289,  1113,   290,   291,   292,
       0,     0,   293,  1319,   295,  1320,     0,   297,     0,     0,
     298,   299,   300,   301,   302,   303,   304,  1321,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,  1115,
    1322,  1116,   330,   331,   332,   333,   334,  1117,   335,   336,
    1323,   338,  1118,   817,   340,  1119,   342,   343,   344,     0,
     345,   346,     0,     0,  1120,   348,   349,     0,     0,   350,
     351,   352,  1324,   354,   355,  1325,   819,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
       0,     0,     0,     0,   371,   372,   820,  1326,   375,   376,
     377,     0,   378,   379,   380,     0,   381,   382,   383,   384,
     385,     0,   386,     0,   387,   388,   389,   390,   391,  1121,
     393,   394,   395,   396,     0,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,     0,   410,
     411,  1327,   413,   414,   415,  1122,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,     0,
    1328,   430,   431,   432,   433,   434,   435,   436,   437,   438,
       0,  1329,   440,   441,  1123,   443,     0,   444,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
    1330,   458,   823,     0,     0,   460,   461,     0,   462,  1331,
     464,     0,   465,   466,   467,   468,   469,     0,   470,  1124,
    1125,     0,     0,   473,   474,   824,   476,   825,  1126,   478,
     479,  1332,   481,   482,   483,   484,   485,     0,     0,   486,
     487,   488,  1333,     0,   489,   490,   491,   492,     0,   493,
     494,   495,   496,   497,   498,  1128,   500,     0,   501,  1335,
     503,   504,   505,   506,   507,   508,   509,     0,     0,   510,
       0,     0,   511,   512,   513,   514,   515,   516,   517,   518,
     519,   520,   521,   522,   523,   524,   525,   526,   527,   528,
     529,   530,   531,  1129,     0,     0,     0,     0,     0,     0,
    1130,  1131,  1132,     0,     0,     0,     0,  1133,     0,  1134,
    3277,     0,     0,  1135,     0,  1136,  1137,  1138,  1298,  1087,
     844,  1088,  1089,  1090,  1091,  1092,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   120,   121,
     122,   123,   124,   125,   126,   127,     0,   128,   129,   130,
       0,     0,     0,  1300,     0,     0,  1093,     0,     0,  1301,
     132,   133,     0,  1302,   135,   136,  1303,   138,   139,   140,
     141,  1094,  1304,  1095,  1096,     0,   146,   147,   148,   149,
     150,   151,  1097,   812,   152,   153,   154,   155,  1098,  1099,
     158,     0,   159,   160,   161,   162,   813,     0,  1305,     0,
    1306,   166,   167,   168,   169,   170,  1307,   172,   173,   174,
       0,   175,   176,   177,   178,   179,   180,     0,  1308,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,  1101,
     193,   194,  1102,   196,  1103,   197,     0,   198,   199,   200,
     201,   202,   203,     0,     0,   204,   205,   206,   207,     0,
       0,   208,   209,  1104,   211,   212,   213,     0,   214,   215,
     216,     0,   217,   218,   219,     0,   220,   221,   222,   223,
    1105,   225,   226,   227,   228,   229,   230,   815,  1106,   232,
       0,     0,   233,   234,  1107,   236,     0,   237,     0,   238,
    1310,     0,  1311,   241,   242,  1312,  1313,   245,     0,   246,
     247,     0,  1108,  1109,   250,   251,     0,   252,   253,   254,
     255,   256,   257,   258,  1314,   260,   261,   262,   263,     0,
     264,   265,   266,   267,   268,   269,   270,     0,   271,  1315,
     273,   274,   275,   276,   277,   278,  1110,  1111,     0,  1112,
       0,   282,  1316,  1317,   285,  1318,   287,   288,   289,  1113,
     290,   291,   292,     0,     0,   293,  1319,   295,  1320,     0,
     297,     0,     0,   298,   299,   300,   301,   302,   303,   304,
    1321,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,  1115,  1322,  1116,   330,   331,   332,   333,   334,
    1117,   335,   336,  1323,   338,  1118,   817,   340,  1119,   342,
     343,   344,     0,   345,   346,     0,     0,  1120,   348,   349,
       0,     0,   350,   351,   352,  1324,   354,   355,  1325,   819,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,     0,     0,     0,     0,   371,   372,   820,
    1326,   375,   376,   377,     0,   378,   379,   380,     0,   381,
     382,   383,   384,   385,     0,   386,     0,   387,   388,   389,
     390,   391,  1121,   393,   394,   395,   396,     0,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,     0,   410,   411,  1327,   413,   414,   415,  1122,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,     0,  1328,   430,   431,   432,   433,   434,   435,
     436,   437,   438,     0,  1329,   440,   441,  1123,   443,     0,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,   455,   456,  1330,   458,   823,     0,     0,   460,   461,
       0,   462,  1331,   464,     0,   465,   466,   467,   468,   469,
       0,   470,  1124,  1125,     0,     0,   473,   474,   824,   476,
     825,  1126,   478,   479,  1332,   481,   482,   483,   484,   485,
       0,     0,   486,   487,   488,  1333,     0,   489,   490,   491,
     492,     0,   493,   494,   495,   496,   497,   498,  1128,   500,
       0,   501,  1335,   503,   504,   505,   506,   507,   508,   509,
       0,     0,   510,     0,     0,   511,   512,   513,   514,   515,
     516,   517,   518,   519,   520,   521,   522,   523,   524,   525,
     526,   527,   528,   529,   530,   531,  1129,     0,     0,     0,
       0,     0,     0,  1130,  1131,  1132,     0,     0,     0,     0,
    1133,     0,  1134,     0,     0,     0,  1135,     0,  1136,  1137,
    1138,   119,  1087,   844,  1088,  1089,  1090,  1091,  1092,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   120,   121,   122,   123,   124,   125,   126,   127,  1764,
     128,   129,   130,     0,     0,     0,     0,     0,     0,  1093,
       0,     0,   131,   132,   133,     0,   134,   135,   136,   137,
     138,   139,   140,   141,  1094,   143,  1095,  1096,     0,   146,
     147,   148,   149,   150,   151,  1097,   812,   152,   153,   154,
     155,  1098,  1099,   158,     0,   159,   160,   161,   162,   813,
       0,   814,     0,  1100,   166,   167,   168,   169,   170,   171,
     172,   173,   174,     0,   175,   176,   177,   178,   179,   180,
       0,   181,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,  1101,   193,   194,  1102,   196,  1103,   197,     0,
     198,   199,   200,   201,   202,   203,     0,     0,   204,   205,
     206,   207,     0,     0,   208,   209,  1104,   211,   212,   213,
       0,   214,   215,   216,     0,   217,   218,   219,     0,   220,
     221,   222,   223,  1105,   225,   226,   227,   228,   229,   230,
     815,  1106,   232,     0,     0,   233,   234,  1107,   236,     0,
     237,     0,   238,   239,     0,   240,   241,   242,   243,   244,
     245,     0,   246,   247,     0,  1108,  1109,   250,   251,     0,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,     0,   264,   265,   266,   267,   268,   269,   270,
       0,   271,   272,   273,   274,   275,   276,   277,   278,  1110,
    1111,     0,  1112,     0,   282,   283,   284,   285,   286,   287,
     288,   289,  1113,   290,   291,   292,     0,     0,   293,   294,
     295,   296,     0,   297,     0,     0,   298,   299,   300,   301,
     302,   303,   304,  1114,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,  1115,   328,  1116,   330,   331,
     332,   333,   334,  1117,   335,   336,   337,   338,  1118,   817,
     340,  1119,   342,   343,   344,     0,   345,   346,     0,     0,
    1120,   348,   349,     0,     0,   350,   351,   352,   353,   354,
     355,   356,   819,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,     0,     0,     0,     0,
     371,   372,   820,   374,   375,   376,   377,     0,   378,   379,
     380,     0,   381,   382,   383,   384,   385,     0,   386,     0,
     387,   388,   389,   390,   391,  1121,   393,   394,   395,   396,
       0,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,     0,   410,   411,   412,   413,   414,
     415,  1122,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,     0,     0,   430,   431,   432,
     433,   434,   435,   436,   437,   438,     0,   439,   440,   441,
    1123,   443,     0,   444,   445,   446,   447,   448,   449,   450,
     451,   452,   453,   454,   455,   456,   457,   458,   823,     0,
       0,   460,   461,     0,   462,   463,   464,     0,   465,   466,
     467,   468,   469,     0,   470,  1124,  1125,     0,     0,   473,
     474,   824,   476,   825,  1126,   478,   479,   826,   481,   482,
     483,   484,   485,     0,     0,   486,   487,   488,  1127,     0,
     489,   490,   491,   492,     0,   493,   494,   495,   496,   497,
     498,  1128,   500,     0,   501,   502,   503,   504,   505,   506,
     507,   508,   509,     0,     0,   510,     0,     0,   511,   512,
     513,   514,   515,   516,   517,   518,   519,   520,   521,   522,
     523,   524,   525,   526,   527,   528,   529,   530,   531,  1129,
       0,     0,     0,     0,     0,     0,  1130,  1131,  1132,     0,
       0,     0,     0,  1133,     0,  1134,     0,     0,     0,  1135,
       0,  1136,  1137,  1138,   119,  1779,   844,  1088,  1089,  1090,
    1780,  1092,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   120,   121,   122,   123,   124,   125,
     126,   127,  1781,   128,   129,   130,     0,     0,     0,     0,
       0,     0,  1093,     0,     0,   131,   132,   133,     0,   134,
     135,   136,   137,   138,   139,   140,   141,  1094,   143,  1095,
    1096,     0,   146,   147,   148,   149,   150,   151,  1097,   812,
     152,   153,   154,   155,  1098,  1099,   158,     0,   159,   160,
     161,   162,   813,     0,   814,     0,  1100,   166,   167,   168,
     169,   170,   171,   172,   173,   174,     0,   175,   176,   177,
     178,   179,   180,     0,   181,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,  1101,   193,   194,  1102,   196,
    1103,   197,     0,   198,   199,   200,   201,   202,   203,     0,
       0,   204,   205,   206,   207,     0,     0,   208,   209,  1104,
     211,   212,   213,     0,   214,   215,   216,     0,   217,   218,
     219,     0,   220,   221,   222,   223,  1105,   225,   226,   227,
     228,   229,   230,   815,  1106,   232,     0,     0,   233,   234,
    1107,   236,     0,   237,     0,   238,   239,     0,   240,   241,
     242,   243,   244,   245,     0,   246,   247,     0,  1108,  1109,
     250,   251,     0,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,     0,   264,   265,   266,   267,
     268,   269,   270,     0,   271,   272,   273,   274,   275,   276,
     277,   278,  1110,  1111,     0,  1112,     0,   282,   283,   284,
     285,   286,   287,   288,   289,  1113,   290,   291,   292,     0,
       0,   293,   294,   295,   296,     0,   297,     0,     0,   298,
     299,   300,   301,   302,   303,   304,  1114,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,  1115,   328,
    1116,   330,   331,   332,   333,   334,  1117,   335,   336,   337,
     338,  1118,   817,   340,  1119,   342,   343,   344,     0,   345,
     346,     0,     0,  1120,   348,   349,     0,     0,   350,   351,
     352,   353,   354,   355,   356,   819,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,     0,
       0,     0,     0,   371,   372,   820,   374,   375,   376,   377,
       0,   378,   379,   380,     0,   381,   382,   383,   384,   385,
       0,   386,     0,   387,   388,   389,   390,   391,  1121,   393,
     394,   395,   396,     0,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,     0,   410,   411,
     412,   413,   414,   415,  1122,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,     0,     0,
     430,   431,   432,   433,   434,   435,   436,   437,   438,     0,
     439,   440,   441,  1123,   443,     0,   444,   445,   446,   447,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   823,     0,     0,   460,   461,     0,   462,   463,   464,
       0,   465,   466,   467,   468,   469,     0,   470,  1124,  1125,
       0,     0,   473,   474,   824,   476,   825,  1126,   478,   479,
     826,   481,   482,   483,   484,   485,     0,     0,   486,   487,
     488,  1127,     0,   489,   490,   491,   492,     0,   493,   494,
     495,   496,   497,   498,  1128,   500,     0,   501,   502,   503,
     504,   505,   506,   507,   508,   509,     0,     0,   510,     0,
       0,   511,   512,   513,   514,   515,   516,   517,   518,   519,
     520,   521,   522,   523,   524,   525,   526,   527,   528,   529,
     530,   531,  1129,     0,     0,     0,     0,     0,     0,  1130,
    1131,  1132,     0,     0,     0,     0,  1133,     0,  1134,     0,
       0,     0,  1135,     0,  1136,  1137,  1138,   119,  1087,   844,
    1088,  1089,  1090,  1091,  1092,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   120,   121,   122,
     123,   124,   125,   126,   127,     0,   128,   129,   130,     0,
       0,     0,     0,     0,     0,  1093,     0,     0,   131,   132,
     133,     0,   134,   135,   136,   137,   138,   139,   140,   141,
    1094,   143,  1095,  1096,     0,   146,   147,   148,   149,   150,
     151,  1097,   812,   152,   153,   154,   155,  1098,  1099,   158,
       0,   159,   160,   161,   162,   813,     0,   814,     0,  1100,
     166,   167,   168,   169,   170,   171,   172,   173,   174,     0,
     175,   176,   177,   178,   179,   180,     0,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,  1101,   193,
     194,  1102,   196,  1103,   197,     0,   198,   199,   200,   201,
     202,   203,     0,     0,   204,   205,   206,   207,     0,     0,
     208,   209,  1104,   211,   212,   213,     0,   214,   215,   216,
       0,   217,   218,   219,     0,   220,   221,   222,   223,  1105,
     225,   226,   227,   228,   229,   230,   815,  1106,   232,     0,
       0,   233,   234,  1107,   236,     0,   237,     0,   238,   239,
    1488,   240,   241,   242,   243,   244,   245,     0,   246,   247,
       0,  1108,  1109,   250,   251,     0,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,     0,   264,
     265,   266,   267,   268,   269,   270,     0,   271,   272,   273,
     274,   275,   276,   277,   278,  1110,  1111,     0,  1112,     0,
     282,   283,   284,   285,   286,   287,   288,   289,  1113,   290,
     291,   292,     0,     0,   293,   294,   295,   296,     0,   297,
       0,     0,   298,   299,   300,   301,   302,   303,   304,  1114,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,  1115,   328,  1116,   330,   331,   332,   333,   334,  1117,
     335,   336,   337,   338,  1118,   817,   340,  1119,   342,   343,
     344,     0,   345,   346,     0,     0,  1120,   348,   349,     0,
       0,   350,   351,   352,   353,   354,   355,   356,   819,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,     0,     0,     0,     0,   371,   372,   820,   374,
     375,   376,   377,     0,   378,   379,   380,     0,   381,   382,
     383,   384,   385,     0,   386,     0,   387,   388,   389,   390,
     391,  1121,   393,   394,   395,   396,     0,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
       0,   410,   411,   412,   413,   414,   415,  1122,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,     0,     0,   430,   431,   432,   433,   434,   435,   436,
     437,   438,     0,   439,   440,   441,  1123,   443,     0,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   823,     0,     0,   460,   461,     0,
     462,   463,   464,     0,   465,   466,   467,   468,   469,     0,
     470,  1124,  1125,     0,     0,   473,   474,   824,   476,   825,
    1126,   478,   479,   826,   481,   482,   483,   484,   485,     0,
       0,   486,   487,   488,  1127,     0,   489,   490,   491,   492,
       0,   493,   494,   495,   496,   497,   498,  1128,   500,     0,
     501,   502,   503,   504,   505,   506,   507,   508,   509,     0,
       0,   510,     0,     0,   511,   512,   513,   514,   515,   516,
     517,   518,   519,   520,   521,   522,   523,   524,   525,   526,
     527,   528,   529,   530,   531,  1129,     0,     0,     0,     0,
       0,     0,  1130,  1131,  1132,     0,     0,     0,     0,  1133,
       0,  1134,     0,     0,     0,  1135,     0,  1136,  1137,  1138,
     119,  1087,   844,  1088,  1089,  1090,  1091,  1092,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     120,   121,   122,   123,   124,   125,   126,   127,     0,   128,
     129,   130,     0,     0,     0,     0,     0,     0,  1093,     0,
       0,   131,   132,   133,     0,   134,   135,   136,   137,   138,
     139,   140,   141,  1094,   143,  1095,  1096,     0,   146,   147,
     148,   149,   150,   151,  1097,   812,   152,   153,   154,   155,
    1098,  1099,   158,     0,   159,   160,   161,   162,   813,     0,
     814,     0,  1100,   166,   167,   168,   169,   170,   171,   172,
     173,   174,     0,   175,   176,   177,   178,   179,   180,     0,
     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,  1101,   193,   194,  1102,   196,  1103,   197,     0,   198,
     199,   200,   201,   202,   203,     0,     0,   204,   205,   206,
     207,     0,     0,   208,   209,  1104,   211,   212,   213,     0,
     214,   215,   216,     0,   217,   218,   219,     0,   220,   221,
     222,   223,  1105,   225,   226,   227,   228,   229,   230,   815,
    1106,   232,     0,     0,   233,   234,  1107,   236,     0,   237,
       0,   238,   239,     0,   240,   241,   242,   243,   244,   245,
       0,   246,   247,     0,  1108,  1109,   250,   251,     0,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,     0,   264,   265,   266,   267,   268,   269,   270,     0,
     271,   272,   273,   274,   275,   276,   277,   278,  1110,  1111,
       0,  1112,     0,   282,   283,   284,   285,   286,   287,   288,
     289,  1113,   290,   291,   292,     0,     0,   293,   294,   295,
     296,     0,   297,     0,     0,   298,   299,   300,   301,   302,
     303,   304,  1114,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,  1115,   328,  1116,   330,   331,   332,
     333,   334,  1117,   335,   336,   337,   338,  1118,   817,   340,
    1119,   342,   343,   344,     0,   345,   346,     0,     0,  1120,
     348,   349,     0,     0,   350,   351,   352,   353,   354,   355,
     356,   819,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,     0,     0,     0,     0,   371,
     372,   820,   374,   375,   376,   377,     0,   378,   379,   380,
       0,   381,   382,   383,   384,   385,     0,   386,     0,   387,
     388,   389,   390,   391,  1121,   393,   394,   395,   396,     0,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,     0,   410,   411,   412,   413,   414,   415,
    1122,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,     0,     0,   430,   431,   432,   433,
     434,   435,   436,   437,   438,     0,   439,   440,   441,  1123,
     443,     0,   444,   445,   446,   447,   448,   449,   450,   451,
     452,   453,   454,   455,   456,   457,   458,   823,     0,     0,
     460,   461,     0,   462,   463,   464,     0,   465,   466,   467,
     468,   469,     0,   470,  1124,  1125,     0,     0,   473,   474,
     824,   476,   825,  1126,   478,   479,   826,   481,   482,   483,
     484,   485,     0,     0,   486,   487,   488,  1127,     0,   489,
     490,   491,   492,     0,   493,   494,   495,   496,   497,   498,
    1128,   500,     0,   501,   502,   503,   504,   505,   506,   507,
     508,   509,     0,     0,   510,     0,     0,   511,   512,   513,
     514,   515,   516,   517,   518,   519,   520,   521,   522,   523,
     524,   525,   526,   527,   528,   529,   530,   531,  1129,     0,
       0,     0,     0,     0,     0,  1130,  1131,  1132,     0,     0,
       0,     0,  1133,     0,  1134,  2153,     0,     0,  1135,     0,
    1136,  1137,  1138,   119,  1087,   844,  1088,  1089,  1090,  1091,
    1092,     0,     0,     0,     0,     0,     0,     0,     0,  2778,
       0,     0,     0,   120,   121,   122,   123,   124,   125,   126,
     127,     0,   128,   129,   130,     0,     0,     0,     0,     0,
       0,  1093,     0,     0,   131,   132,   133,     0,   134,   135,
     136,   137,   138,   139,   140,   141,  1094,   143,  1095,  1096,
       0,   146,   147,   148,   149,   150,   151,  1097,   812,   152,
     153,   154,   155,  1098,  1099,   158,     0,   159,   160,   161,
     162,   813,     0,   814,     0,  1100,   166,   167,   168,   169,
     170,   171,   172,   173,   174,     0,   175,   176,   177,   178,
     179,   180,     0,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,  1101,   193,   194,  1102,   196,  1103,
     197,     0,   198,   199,   200,   201,   202,   203,     0,     0,
     204,   205,   206,   207,     0,     0,   208,   209,  1104,   211,
     212,   213,     0,   214,   215,   216,     0,   217,   218,   219,
       0,   220,   221,   222,   223,  1105,   225,   226,   227,   228,
     229,   230,   815,  1106,   232,     0,     0,   233,   234,  1107,
     236,     0,   237,     0,   238,   239,     0,   240,   241,   242,
     243,   244,   245,     0,   246,   247,     0,  1108,  1109,   250,
     251,     0,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,     0,   264,   265,   266,   267,   268,
     269,   270,     0,   271,   272,   273,   274,   275,   276,   277,
     278,  1110,  1111,     0,  1112,     0,   282,   283,   284,   285,
     286,   287,   288,   289,  1113,   290,   291,   292,     0,     0,
     293,   294,   295,   296,     0,   297,     0,     0,   298,   299,
     300,   301,   302,   303,   304,  1114,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,  1115,   328,  1116,
     330,   331,   332,   333,   334,  1117,   335,   336,   337,   338,
    1118,   817,   340,  1119,   342,   343,   344,     0,   345,   346,
       0,     0,  1120,   348,   349,     0,     0,   350,   351,   352,
     353,   354,   355,   356,   819,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,     0,     0,
       0,     0,   371,   372,   820,   374,   375,   376,   377,     0,
     378,   379,   380,     0,   381,   382,   383,   384,   385,     0,
     386,     0,   387,   388,   389,   390,   391,  1121,   393,   394,
     395,   396,     0,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,     0,   410,   411,   412,
     413,   414,   415,  1122,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,     0,     0,   430,
     431,   432,   433,   434,   435,   436,   437,   438,     0,   439,
     440,   441,  1123,   443,     0,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
     823,     0,     0,   460,   461,     0,   462,   463,   464,     0,
     465,   466,   467,   468,   469,     0,   470,  1124,  1125,     0,
       0,   473,   474,   824,   476,   825,  1126,   478,   479,   826,
     481,   482,   483,   484,   485,     0,     0,   486,   487,   488,
    1127,     0,   489,   490,   491,   492,     0,   493,   494,   495,
     496,   497,   498,  1128,   500,     0,   501,   502,   503,   504,
     505,   506,   507,   508,   509,     0,     0,   510,     0,     0,
     511,   512,   513,   514,   515,   516,   517,   518,   519,   520,
     521,   522,   523,   524,   525,   526,   527,   528,   529,   530,
     531,  1129,     0,     0,     0,     0,     0,     0,  1130,  1131,
    1132,     0,     0,     0,     0,  1133,     0,  1134,     0,     0,
       0,  1135,     0,  1136,  1137,  1138,   119,  1087,   844,  1088,
    1089,  1090,  1091,  1092,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   120,   121,   122,   123,
     124,   125,   126,   127,     0,   128,   129,   130,     0,     0,
       0,     0,     0,     0,  1093,     0,     0,   131,   132,   133,
       0,   134,   135,   136,   137,   138,   139,   140,   141,  1094,
     143,  1095,  1096,     0,   146,   147,   148,   149,   150,   151,
    1097,   812,   152,   153,   154,   155,  1098,  1099,   158,     0,
     159,   160,   161,   162,   813,     0,   814,     0,  1100,   166,
     167,   168,   169,   170,   171,   172,   173,   174,     0,   175,
     176,   177,   178,   179,   180,     0,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,  1101,   193,   194,
    1102,   196,  1103,   197,     0,   198,   199,   200,   201,   202,
     203,     0,     0,   204,   205,   206,   207,     0,     0,   208,
     209,  1104,   211,   212,   213,     0,   214,   215,   216,     0,
     217,   218,   219,     0,   220,   221,   222,   223,  1105,   225,
     226,   227,   228,   229,   230,   815,  1106,   232,     0,     0,
     233,   234,  1107,   236,     0,   237,     0,   238,   239,     0,
     240,   241,   242,   243,   244,   245,     0,   246,   247,     0,
    1108,  1109,   250,   251,     0,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,     0,   264,   265,
     266,   267,   268,   269,   270,     0,   271,   272,   273,   274,
     275,   276,   277,   278,  1110,  1111,     0,  1112,     0,   282,
     283,   284,   285,   286,   287,   288,   289,  1113,   290,   291,
     292,     0,     0,   293,   294,   295,   296,     0,   297,     0,
       0,   298,   299,   300,   301,   302,   303,   304,  1114,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
    1115,   328,  1116,   330,   331,   332,   333,   334,  1117,   335,
     336,   337,   338,  1118,   817,   340,  1119,   342,   343,   344,
       0,   345,   346,     0,     0,  1120,   348,   349,     0,     0,
     350,   351,   352,   353,   354,   355,   356,   819,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,     0,     0,     0,     0,   371,   372,   820,   374,   375,
     376,   377,     0,   378,   379,   380,     0,   381,   382,   383,
     384,   385,     0,   386,     0,   387,   388,   389,   390,   391,
    1121,   393,   394,   395,   396,     0,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,     0,
     410,   411,   412,   413,   414,   415,  1122,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
       0,     0,   430,   431,   432,   433,   434,   435,   436,   437,
     438,     0,   439,   440,   441,  1123,   443,     0,   444,   445,
     446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
     456,   457,   458,   823,     0,     0,   460,   461,  2837,   462,
     463,   464,     0,   465,   466,   467,   468,   469,     0,   470,
    1124,  1125,     0,     0,   473,   474,   824,   476,   825,  1126,
     478,   479,   826,   481,   482,   483,   484,   485,     0,     0,
     486,   487,   488,  1127,     0,   489,   490,   491,   492,     0,
     493,   494,   495,   496,   497,   498,  1128,   500,     0,   501,
     502,   503,   504,   505,   506,   507,   508,   509,     0,     0,
     510,     0,     0,   511,   512,   513,   514,   515,   516,   517,
     518,   519,   520,   521,   522,   523,   524,   525,   526,   527,
     528,   529,   530,   531,  1129,     0,     0,     0,     0,     0,
       0,  1130,  1131,  1132,     0,     0,     0,     0,  1133,     0,
    1134,     0,     0,     0,  1135,     0,  1136,  1137,  1138,   119,
    1087,   844,  1088,  1089,  1090,  1091,  1092,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   120,
     121,   122,   123,   124,   125,   126,   127,     0,   128,   129,
     130,     0,     0,     0,     0,     0,     0,  1093,     0,     0,
     131,   132,   133,     0,   134,   135,   136,   137,   138,   139,
     140,   141,  1094,   143,  1095,  1096,     0,   146,   147,   148,
     149,   150,   151,  1097,   812,   152,   153,   154,   155,  1098,
    1099,   158,     0,   159,   160,   161,   162,   813,     0,   814,
       0,  1100,   166,   167,   168,   169,   170,   171,   172,   173,
     174,     0,   175,   176,   177,   178,   179,   180,     0,   181,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
    1101,   193,   194,  1102,   196,  1103,   197,     0,   198,   199,
     200,   201,   202,   203,     0,     0,   204,   205,   206,   207,
       0,     0,   208,   209,  1104,   211,   212,   213,     0,   214,
     215,   216,     0,   217,   218,   219,     0,   220,   221,   222,
     223,  1105,   225,   226,   227,   228,   229,   230,   815,  1106,
     232,     0,     0,   233,   234,  1107,   236,     0,   237,     0,
     238,   239,     0,   240,   241,   242,   243,   244,   245,     0,
     246,   247,     0,  1108,  1109,   250,   251,     0,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
       0,   264,   265,   266,   267,   268,   269,   270,     0,   271,
     272,   273,   274,   275,   276,   277,   278,  1110,  1111,     0,
    1112,     0,   282,   283,   284,   285,   286,   287,   288,   289,
    1113,   290,   291,   292,     0,     0,   293,   294,   295,   296,
       0,   297,     0,     0,   298,   299,   300,   301,   302,   303,
     304,  1114,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,  1115,   328,  1116,   330,   331,   332,   333,
     334,  1117,   335,   336,   337,   338,  1118,   817,   340,  1119,
     342,   343,   344,     0,   345,   346,     0,     0,  1120,   348,
     349,     0,     0,   350,   351,   352,   353,   354,   355,   356,
     819,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,     0,     0,     0,     0,   371,   372,
     820,   374,   375,   376,   377,     0,   378,   379,   380,     0,
     381,   382,   383,   384,   385,     0,   386,     0,   387,   388,
     389,   390,   391,  1121,   393,   394,   395,   396,     0,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,     0,   410,   411,   412,   413,   414,   415,  1122,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,     0,     0,   430,   431,   432,   433,   434,
     435,   436,   437,   438,     0,   439,   440,   441,  1123,   443,
       0,   444,   445,   446,   447,   448,   449,   450,   451,   452,
     453,   454,   455,   456,   457,   458,   823,     0,     0,   460,
     461,     0,   462,   463,   464,     0,   465,   466,   467,   468,
     469,     0,   470,  1124,  1125,     0,     0,   473,   474,   824,
     476,   825,  1126,   478,   479,   826,   481,   482,   483,   484,
     485,     0,     0,   486,   487,   488,  1127,     0,   489,   490,
     491,   492,     0,   493,   494,   495,   496,   497,   498,  1128,
     500,     0,   501,   502,   503,   504,   505,   506,   507,   508,
     509,     0,  2973,   510,     0,     0,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,  1129,     0,     0,
       0,     0,     0,     0,  1130,  1131,  1132,     0,     0,     0,
       0,  1133,     0,  1134,     0,     0,     0,  1135,     0,  1136,
    1137,  1138,   119,  1087,   844,  1088,  1089,  1090,  1091,  1092,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   120,   121,   122,   123,   124,   125,   126,   127,
    3214,   128,   129,   130,     0,     0,     0,     0,     0,     0,
    1093,     0,     0,   131,   132,   133,     0,   134,   135,   136,
     137,   138,   139,   140,   141,  1094,   143,  1095,  1096,     0,
     146,   147,   148,   149,   150,   151,  1097,   812,   152,   153,
     154,   155,  1098,  1099,   158,     0,   159,   160,   161,   162,
     813,     0,   814,     0,  1100,   166,   167,   168,   169,   170,
     171,   172,   173,   174,     0,   175,   176,   177,   178,   179,
     180,     0,   181,   182,  3215,   184,   185,   186,   187,   188,
     189,   190,   191,  1101,   193,   194,  1102,   196,  1103,   197,
       0,   198,   199,   200,   201,   202,   203,     0,     0,   204,
     205,   206,   207,     0,     0,   208,   209,  1104,   211,   212,
     213,     0,   214,   215,   216,     0,   217,   218,   219,     0,
     220,   221,   222,   223,  1105,   225,   226,   227,   228,   229,
     230,   815,  1106,   232,     0,     0,   233,   234,  1107,   236,
       0,   237,     0,   238,   239,     0,   240,   241,   242,   243,
     244,   245,     0,   246,   247,     0,  3216,  1109,   250,   251,
       0,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,     0,   264,   265,   266,   267,   268,   269,
     270,     0,   271,   272,   273,   274,   275,   276,   277,   278,
    1110,  1111,     0,  1112,     0,   282,   283,   284,   285,   286,
     287,   288,   289,  1113,   290,   291,   292,     0,     0,   293,
     294,   295,   296,     0,   297,     0,     0,   298,   299,   300,
     301,   302,   303,   304,  1114,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,  1115,   328,  1116,   330,
     331,   332,   333,   334,  1117,   335,   336,   337,   338,  1118,
     817,   340,  1119,   342,   343,   344,     0,   345,   346,     0,
       0,  1120,   348,   349,     0,     0,   350,   351,   352,   353,
     354,   355,   356,   819,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,     0,     0,     0,
       0,   371,   372,   820,   374,   375,   376,   377,     0,   378,
     379,   380,     0,   381,   382,   383,   384,   385,     0,   386,
       0,   387,   388,   389,   390,   391,  1121,   393,   394,   395,
     396,     0,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,     0,   410,   411,   412,   413,
     414,  3217,  1122,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,     0,     0,   430,   431,
     432,   433,   434,   435,   436,   437,   438,     0,   439,   440,
     441,  1123,   443,     0,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   823,
       0,     0,   460,   461,     0,   462,   463,   464,     0,   465,
     466,   467,   468,   469,     0,   470,  1124,  1125,     0,     0,
     473,   474,   824,   476,   825,  1126,   478,   479,   826,   481,
     482,   483,   484,   485,     0,     0,   486,   487,   488,  1127,
       0,   489,   490,   491,   492,     0,   493,   494,   495,   496,
     497,   498,  1128,   500,     0,   501,   502,   503,   504,   505,
     506,   507,   508,   509,     0,     0,   510,     0,     0,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520,   521,
     522,   523,   524,   525,   526,   527,   528,   529,   530,   531,
    1129,     0,     0,     0,     0,     0,     0,  1130,  1131,  1132,
       0,     0,     0,     0,  1133,     0,  3218,     0,     0,     0,
    1135,     0,  1136,  1137,  1138,   119,  1087,   844,  1088,  1089,
    1090,  1091,  1092,     0,     0,     0,     0,     0,     0,     0,
       0,  3455,     0,     0,     0,   120,   121,   122,   123,   124,
     125,   126,   127,     0,   128,   129,   130,     0,     0,     0,
       0,     0,     0,  1093,     0,     0,   131,   132,   133,     0,
     134,   135,   136,   137,   138,   139,   140,   141,  1094,   143,
    1095,  1096,     0,   146,   147,   148,   149,   150,   151,  1097,
     812,   152,   153,   154,   155,  1098,  1099,   158,     0,   159,
     160,   161,   162,   813,     0,   814,     0,  1100,   166,   167,
     168,   169,   170,   171,   172,   173,   174,     0,   175,   176,
     177,   178,   179,   180,     0,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,  1101,   193,   194,  1102,
     196,  1103,   197,     0,   198,   199,   200,   201,   202,   203,
       0,     0,   204,   205,   206,   207,     0,     0,   208,   209,
    1104,   211,   212,   213,     0,   214,   215,   216,     0,   217,
     218,   219,     0,   220,   221,   222,   223,  1105,   225,   226,
     227,   228,   229,   230,   815,  1106,   232,     0,     0,   233,
     234,  1107,   236,     0,   237,     0,   238,   239,     0,   240,
     241,   242,   243,   244,   245,     0,   246,   247,     0,  1108,
    1109,   250,   251,     0,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,     0,   264,   265,   266,
     267,   268,   269,   270,     0,   271,   272,   273,   274,   275,
     276,   277,   278,  1110,  1111,     0,  1112,     0,   282,   283,
     284,   285,   286,   287,   288,   289,  1113,   290,   291,   292,
       0,     0,   293,   294,   295,   296,     0,   297,     0,     0,
     298,   299,   300,   301,   302,   303,   304,  1114,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,  1115,
     328,  1116,   330,   331,   332,   333,   334,  1117,   335,   336,
     337,   338,  1118,   817,   340,  1119,   342,   343,   344,     0,
     345,   346,     0,     0,  1120,   348,   349,     0,     0,   350,
     351,   352,   353,   354,   355,   356,   819,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
       0,     0,     0,     0,   371,   372,   820,   374,   375,   376,
     377,     0,   378,   379,   380,     0,   381,   382,   383,   384,
     385,     0,   386,     0,   387,   388,   389,   390,   391,  1121,
     393,   394,   395,   396,     0,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,     0,   410,
     411,   412,   413,   414,   415,  1122,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,     0,
       0,   430,   431,   432,   433,   434,   435,   436,   437,   438,
       0,   439,   440,   441,  1123,   443,     0,   444,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   823,     0,     0,   460,   461,     0,   462,   463,
     464,     0,   465,   466,   467,   468,   469,     0,   470,  1124,
    1125,     0,     0,   473,   474,   824,   476,   825,  1126,   478,
     479,   826,   481,   482,   483,   484,   485,     0,     0,   486,
     487,   488,  1127,     0,   489,   490,   491,   492,     0,   493,
     494,   495,   496,   497,   498,  1128,   500,     0,   501,   502,
     503,   504,   505,   506,   507,   508,   509,     0,     0,   510,
       0,     0,   511,   512,   513,   514,   515,   516,   517,   518,
     519,   520,   521,   522,   523,   524,   525,   526,   527,   528,
     529,   530,   531,  1129,     0,     0,     0,     0,     0,     0,
    1130,  1131,  1132,     0,     0,     0,     0,  1133,     0,  1134,
       0,     0,     0,  1135,     0,  1136,  1137,  1138,   119,  1087,
     844,  1088,  1089,  1090,  1091,  1092,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   120,   121,
     122,   123,   124,   125,   126,   127,     0,   128,   129,   130,
       0,     0,     0,     0,     0,     0,  1093,     0,     0,   131,
     132,   133,     0,   134,   135,   136,   137,   138,   139,   140,
     141,  1094,   143,  1095,  1096,     0,   146,   147,   148,   149,
     150,   151,  1097,   812,   152,   153,   154,   155,  1098,  1099,
     158,     0,   159,   160,   161,   162,   813,     0,   814,     0,
    1100,   166,   167,   168,   169,   170,   171,   172,   173,   174,
       0,   175,   176,   177,   178,   179,   180,     0,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,  1101,
     193,   194,  1102,   196,  1103,   197,     0,   198,   199,   200,
     201,   202,   203,     0,     0,   204,   205,   206,   207,     0,
       0,   208,   209,  1104,   211,   212,   213,     0,   214,   215,
     216,     0,   217,   218,   219,     0,   220,   221,   222,   223,
    1105,   225,   226,   227,   228,   229,   230,   815,  1106,   232,
       0,     0,   233,   234,  1107,   236,     0,   237,     0,   238,
     239,     0,   240,   241,   242,   243,   244,   245,     0,   246,
     247,     0,  1108,  1109,   250,   251,     0,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,     0,
     264,   265,   266,   267,   268,   269,   270,     0,   271,   272,
     273,   274,   275,   276,   277,   278,  1110,  1111,     0,  1112,
       0,   282,   283,   284,   285,   286,   287,   288,   289,  1113,
     290,   291,   292,     0,     0,   293,   294,   295,   296,     0,
     297,     0,     0,   298,   299,   300,   301,   302,   303,   304,
    1114,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,  1115,   328,  1116,   330,   331,   332,   333,   334,
    1117,   335,   336,   337,   338,  1118,   817,   340,  1119,   342,
     343,   344,     0,   345,   346,     0,     0,  1120,   348,   349,
       0,     0,   350,   351,   352,   353,   354,   355,   356,   819,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,     0,     0,     0,     0,   371,   372,   820,
     374,   375,   376,   377,     0,   378,   379,   380,     0,   381,
     382,   383,   384,   385,     0,   386,     0,   387,   388,   389,
     390,   391,  1121,   393,   394,   395,   396,     0,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,     0,   410,   411,   412,   413,   414,   415,  1122,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,     0,     0,   430,   431,   432,   433,   434,   435,
     436,   437,   438,     0,   439,   440,   441,  1123,   443,     0,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   823,     0,     0,   460,   461,
       0,   462,   463,   464,     0,   465,   466,   467,   468,   469,
       0,   470,  1124,  1125,     0,     0,   473,   474,   824,   476,
     825,  1126,   478,   479,   826,   481,   482,   483,   484,   485,
       0,     0,   486,   487,   488,  1127,     0,   489,   490,   491,
     492,     0,   493,   494,   495,   496,   497,   498,  1128,   500,
       0,   501,   502,   503,   504,   505,   506,   507,   508,   509,
       0,     0,   510,     0,     0,   511,   512,   513,   514,   515,
     516,   517,   518,   519,   520,   521,   522,   523,   524,   525,
     526,   527,   528,   529,   530,   531,  1129,     0,     0,     0,
       0,     0,     0,  1130,  1131,  1132,     0,     0,     0,     0,
    1133,     0,  1134,     0,     0,     0,  1135,     0,  1136,  1137,
    1138,   119,  1087,   844,  1088,  1089,  1090,  1091,  1092,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   120,   121,   122,   123,   124,   125,   126,   127,     0,
     128,   129,   130,     0,     0,     0,     0,     0,     0,  1093,
       0,     0,   131,   132,   133,     0,   134,   135,   136,   137,
     138,   139,   140,   141,  1094,   143,  1095,  1096,     0,   146,
     147,   148,   149,   150,   151,  1097,   812,   152,   153,   154,
     155,  1098,  1099,   158,     0,   159,   160,   161,   162,   813,
       0,   814,     0,  1100,   166,   167,   168,   169,   170,   171,
     172,   173,   174,     0,   175,   176,   177,   178,   179,   180,
       0,   181,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,  1101,   193,   194,  1102,   196,  1103,   197,     0,
     198,   199,   200,   201,   202,   203,     0,     0,   204,   205,
     206,   207,     0,     0,   208,   209,  1104,   211,   212,   213,
       0,   214,   215,   216,     0,   217,   218,   219,     0,   220,
     221,   222,   223,  1105,   225,   226,   227,   228,   229,   230,
     815,  1106,   232,     0,     0,   233,   234,  1107,   236,     0,
     237,     0,   238,   239,     0,   240,   241,   242,   243,   244,
     245,     0,   246,   247,     0,  1108,  1109,   250,   251,     0,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,     0,   264,   265,   266,   267,   268,   269,   270,
       0,   271,   272,   273,   274,   275,   276,   277,   278,  1110,
    1111,     0,  1112,     0,   282,   283,   284,   285,   286,   287,
     288,   289,  1113,   290,   291,   292,     0,     0,   293,   294,
     295,   296,     0,   297,     0,     0,   298,   299,   300,   301,
     302,   303,   304,  1114,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,  1115,   328,  1116,   330,   331,
     332,   333,   334,  1117,   335,   336,   337,   338,  1118,   817,
     340,  1119,   342,   343,   344,     0,   345,   346,     0,     0,
    1120,   348,   349,     0,     0,   350,   351,   352,   353,   354,
     355,   356,   819,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,     0,     0,     0,     0,
     371,   372,   820,   374,   375,   376,   377,     0,   378,   379,
     380,     0,   381,   382,   383,   384,   385,     0,   386,     0,
     387,   388,   389,   390,   391,  1121,   393,   394,   395,   396,
       0,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,     0,   410,   411,   412,   413,   414,
     415,  1122,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,     0,     0,   430,   431,   432,
     433,   434,   435,   436,   437,   438,     0,   439,   440,   441,
    1123,   443,     0,   444,   445,   446,   447,   448,   449,   450,
     451,   452,   453,   454,   455,   456,   457,   458,   823,     0,
       0,   460,   461,     0,   462,   463,   464,     0,   465,   466,
     467,   468,   469,     0,   470,  1124,  1125,     0,     0,   473,
     474,   824,   476,   825,  1126,   478,   479,   826,   481,   482,
     483,   484,   485,     0,     0,   486,   487,   488,  1127,     0,
     489,   490,   491,   492,     0,   493,   494,   495,   496,   497,
     498,  1128,   500,     0,   501,   502,   503,   504,   505,   506,
     507,   508,   509,     0,     0,   510,     0,     0,   511,   512,
     513,   514,   515,   516,   517,   518,   519,   520,   521,   522,
     523,   524,   525,   526,   527,   528,   529,   530,   531,  1129,
       0,     0,     0,     0,     0,     0,  1784,  1785,  1132,     0,
       0,     0,     0,  1133,     0,  1134,     0,     0,     0,  1135,
       0,  1136,  1137,  1138,   119,  2299,   844,  1088,  1089,  1090,
    1091,  1092,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   120,   121,   122,   123,   124,   125,
     126,   127,     0,   128,   129,   130,     0,     0,     0,     0,
       0,     0,  1093,     0,     0,   131,   132,   133,     0,   134,
     135,   136,   137,   138,   139,   140,   141,  1094,   143,  1095,
    1096,     0,   146,   147,   148,   149,   150,   151,  1097,   812,
     152,   153,   154,   155,  1098,  1099,   158,     0,   159,   160,
     161,   162,   813,     0,   814,     0,  1100,   166,   167,   168,
     169,   170,   171,   172,   173,   174,     0,   175,   176,   177,
     178,   179,   180,     0,   181,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,  1101,   193,   194,  1102,   196,
    1103,   197,     0,   198,   199,   200,   201,   202,   203,     0,
       0,   204,   205,   206,   207,     0,     0,   208,   209,  1104,
     211,   212,   213,     0,   214,   215,   216,     0,   217,   218,
     219,     0,   220,   221,   222,   223,  1105,   225,   226,   227,
     228,   229,   230,   815,  1106,   232,     0,     0,   233,   234,
    1107,   236,     0,   237,     0,   238,   239,     0,   240,   241,
     242,   243,   244,   245,     0,   246,   247,     0,  1108,  1109,
     250,   251,     0,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,     0,   264,   265,   266,   267,
     268,   269,   270,     0,   271,   272,   273,   274,   275,   276,
     277,   278,  1110,  1111,     0,  1112,     0,   282,   283,   284,
     285,   286,   287,   288,   289,  1113,   290,   291,   292,     0,
       0,   293,   294,   295,   296,     0,   297,     0,     0,   298,
     299,   300,   301,   302,   303,   304,  1114,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,  1115,   328,
    1116,   330,   331,   332,   333,   334,  1117,   335,   336,   337,
     338,  1118,   817,   340,  1119,   342,   343,   344,     0,   345,
     346,     0,     0,  1120,   348,   349,     0,     0,   350,   351,
     352,   353,   354,   355,   356,   819,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,     0,
       0,     0,     0,   371,   372,   820,   374,   375,   376,   377,
       0,   378,   379,   380,     0,   381,   382,   383,   384,   385,
       0,   386,     0,   387,   388,   389,   390,   391,  1121,   393,
     394,   395,   396,     0,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,     0,   410,   411,
     412,   413,   414,   415,  1122,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,     0,     0,
     430,   431,   432,   433,   434,   435,   436,   437,   438,     0,
     439,   440,   441,  1123,   443,     0,   444,   445,   446,   447,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   823,     0,     0,   460,   461,     0,   462,   463,   464,
       0,   465,   466,   467,   468,   469,     0,   470,  1124,  1125,
       0,     0,   473,   474,   824,   476,   825,  1126,   478,   479,
     826,   481,   482,   483,   484,   485,     0,     0,   486,   487,
     488,  1127,     0,   489,   490,   491,   492,     0,   493,   494,
     495,   496,   497,   498,  1128,   500,     0,   501,   502,   503,
     504,   505,   506,   507,   508,   509,     0,     0,   510,     0,
       0,   511,   512,   513,   514,   515,   516,   517,   518,   519,
     520,   521,   522,   523,   524,   525,   526,   527,   528,   529,
     530,   531,  1129,     0,     0,     0,     0,     0,     0,  1130,
    1131,  1132,     0,     0,     0,     0,  1133,     0,  1134,     0,
       0,     0,  1135,     0,  1136,  1137,  1138,   119,  1087,   844,
    1088,  1089,  1090,  1091,  1092,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   120,   121,   122,
     123,   124,   125,   126,   127,     0,   128,   129,   130,     0,
       0,     0,     0,     0,     0,  1093,     0,     0,   131,   132,
     133,     0,   134,   135,   136,   137,   138,   139,   140,   141,
    1094,   143,  1095,  1096,     0,   146,   147,   148,   149,   150,
     151,  1097,   812,   152,   153,   154,   155,  1098,  1099,   158,
       0,   159,   160,   161,   162,   813,     0,   814,     0,  1100,
     166,   167,   168,   169,   170,   171,   172,   173,   174,     0,
     175,   176,   177,   178,   179,   180,     0,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,  1101,   193,
     194,  1102,   196,  1103,   197,     0,   198,   199,   200,   201,
     202,   203,     0,     0,   204,   205,   206,   207,     0,     0,
     208,   209,  1104,   211,   212,   213,     0,   214,   215,   216,
       0,   217,   218,   219,     0,   220,   221,   222,   223,  1105,
     225,   226,   227,   228,   229,   230,   815,  1106,   232,     0,
       0,   233,   234,  1107,   236,     0,   237,     0,   238,   239,
       0,   240,   241,   242,   243,   244,   245,     0,   246,   247,
       0,  1108,  1109,   250,   251,     0,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,     0,   264,
     265,   266,   267,   268,   269,   270,     0,   271,   272,   273,
     274,   275,   276,   277,   278,  1110,  1111,     0,  1112,     0,
     282,   283,   284,   285,   286,   287,   288,   289,  1113,   290,
     291,   292,     0,     0,   293,   294,   295,   296,     0,   297,
       0,     0,   298,   299,   300,   301,   302,   303,   304,  1114,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,  1115,   328,  1116,   330,   331,   332,   333,   334,  1117,
     335,   336,   337,   338,  1118,   817,   340,  1119,   342,   343,
     344,     0,   345,   346,     0,     0,  1120,   348,   349,     0,
       0,   350,   351,   352,   353,   354,   355,   356,   819,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,     0,     0,     0,     0,   371,   372,   820,   374,
     375,   376,   377,     0,   378,   379,   380,     0,   381,   382,
     383,   384,   385,     0,   386,     0,   387,   388,   389,   390,
     391,  1121,   393,   394,   395,   396,     0,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
       0,   410,   411,   412,   413,   414,   415,  1122,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,     0,     0,   430,   431,   432,   433,   434,   435,   436,
     437,   438,     0,   439,   440,   441,  1123,   443,     0,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   823,     0,     0,   460,   461,     0,
     462,   463,   464,     0,   465,   466,   467,   468,   469,     0,
     470,  1124,  1125,     0,     0,   473,   474,   824,   476,   825,
    1126,   478,   479,   826,   481,   482,   483,   484,   485,     0,
       0,   486,   487,   488,  1127,     0,   489,   490,   491,   492,
       0,   493,   494,   495,   496,   497,   498,  1128,   500,     0,
     501,   502,   503,   504,   505,   506,   507,   508,   509,     0,
       0,   510,     0,     0,   511,   512,   513,   514,   515,   516,
     517,   518,   519,   520,   521,   522,   523,   524,   525,   526,
     527,   528,   529,   530,   531,  1129,     0,     0,     0,     0,
       0,     0,  1130,  2392,  1132,     0,     0,     0,     0,  1133,
       0,  1134,     0,     0,     0,  1135,     0,  1136,  1137,  1138,
     119,  1087,   844,  1088,  1089,  1090,  1091,  1092,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     120,   121,   122,   123,   124,   125,   126,   127,     0,   128,
     129,   130,     0,     0,     0,     0,     0,     0,  1093,     0,
       0,   131,   132,   133,     0,   134,   135,   136,   137,   138,
     139,   140,   141,  1094,   143,  1095,  1096,     0,   146,   147,
     148,   149,   150,   151,  1097,   812,   152,   153,   154,   155,
    1098,  1099,   158,     0,   159,   160,   161,   162,   813,     0,
     814,     0,  1100,   166,   167,   168,   169,   170,   171,   172,
     173,   174,     0,   175,   176,   177,   178,   179,   180,     0,
     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,  1101,   193,   194,  1102,   196,  1103,   197,     0,   198,
     199,   200,   201,   202,   203,     0,     0,   204,   205,   206,
     207,     0,     0,   208,   209,  1104,   211,   212,   213,     0,
     214,   215,   216,     0,   217,   218,   219,     0,   220,   221,
     222,   223,  1105,   225,   226,   227,   228,   229,   230,   815,
    1106,   232,     0,     0,   233,   234,  1107,   236,     0,   237,
       0,   238,   239,     0,   240,   241,   242,   243,   244,   245,
       0,   246,   247,     0,  1108,  1109,   250,   251,     0,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,     0,   264,   265,   266,   267,   268,   269,   270,     0,
     271,   272,   273,   274,   275,   276,   277,   278,  1110,  1111,
       0,  1112,     0,   282,   283,   284,   285,   286,   287,   288,
     289,  1113,   290,   291,   292,     0,     0,   293,   294,   295,
     296,     0,   297,     0,     0,   298,   299,   300,   301,   302,
     303,   304,  1114,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,  1115,   328,  1116,   330,   331,   332,
     333,   334,  1117,   335,   336,   337,   338,  1118,   817,   340,
    1119,   342,   343,   344,     0,   345,   346,     0,     0,  1120,
     348,   349,     0,     0,   350,   351,   352,   353,   354,   355,
     356,   819,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,     0,     0,     0,     0,   371,
     372,   820,   374,   375,   376,   377,     0,   378,   379,   380,
       0,   381,   382,   383,   384,   385,     0,   386,     0,   387,
     388,   389,   390,   391,  1121,   393,   394,   395,   396,     0,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,     0,   410,   411,   412,   413,   414,   415,
    1122,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,     0,     0,   430,   431,   432,   433,
     434,   435,   436,   437,   438,     0,   439,   440,   441,  1123,
     443,     0,   444,   445,   446,   447,   448,   449,   450,   451,
     452,   453,   454,   455,   456,   457,   458,   823,     0,     0,
     460,   461,     0,   462,   463,   464,     0,   465,   466,   467,
     468,   469,     0,   470,  1124,  1125,     0,     0,   473,   474,
     824,   476,   825,  1126,   478,   479,   826,   481,   482,   483,
     484,   485,     0,     0,   486,   487,   488,  1127,     0,   489,
     490,   491,   492,     0,   493,   494,   495,   496,   497,   498,
    1128,   500,     0,   501,   502,   503,   504,   505,   506,   507,
     508,   509,     0,     0,   510,     0,     0,   511,   512,   513,
     514,   515,   516,   517,   518,   519,   520,   521,   522,   523,
     524,   525,   526,   527,   528,   529,   530,   531,  1129,     0,
       0,     0,     0,     0,     0,  1130,  1131,  1132,     0,     0,
       0,     0,  1133,     0,  2626,     0,     0,     0,  1135,     0,
    1136,  1137,  1138,   119,  1087,   844,  1088,  1089,  1090,  1091,
    1092,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   120,   121,   122,   123,   124,   125,   126,
     127,     0,   128,   129,   130,     0,     0,     0,     0,     0,
       0,  1093,     0,     0,   131,   132,   133,     0,   134,   135,
     136,   137,   138,   139,   140,   141,  1094,   143,  1095,  1096,
       0,   146,   147,   148,   149,   150,   151,  1097,   812,   152,
     153,   154,   155,  1098,  1099,   158,     0,   159,   160,   161,
     162,   813,     0,   814,     0,  1100,   166,   167,   168,   169,
     170,   171,   172,   173,   174,     0,   175,   176,   177,   178,
     179,   180,     0,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,  1101,   193,   194,  1102,   196,  1103,
     197,     0,   198,   199,   200,   201,   202,   203,     0,     0,
     204,   205,   206,   207,     0,     0,   208,   209,  1104,   211,
     212,   213,     0,   214,   215,   216,     0,   217,   218,   219,
       0,   220,   221,   222,   223,  1105,   225,   226,   227,   228,
     229,   230,   815,  1106,   232,     0,     0,   233,   234,  1107,
     236,     0,   237,     0,   238,   239,     0,   240,   241,   242,
     243,   244,   245,     0,   246,   247,     0,  1108,  1109,   250,
     251,     0,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,     0,   264,   265,   266,   267,   268,
     269,   270,     0,   271,   272,   273,   274,   275,   276,   277,
     278,  1110,  1111,     0,  1112,     0,   282,   283,   284,   285,
     286,   287,   288,   289,  1113,   290,   291,   292,     0,     0,
     293,   294,   295,   296,     0,   297,     0,     0,   298,   299,
     300,   301,   302,   303,   304,  1114,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,  1115,   328,  1116,
     330,   331,   332,   333,   334,  1117,   335,   336,   337,   338,
    1118,   817,   340,  1119,   342,   343,   344,     0,   345,   346,
       0,     0,  1120,   348,   349,     0,     0,   350,   351,   352,
     353,   354,   355,   356,   819,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,     0,     0,
       0,     0,   371,   372,   820,   374,   375,   376,   377,     0,
     378,   379,   380,     0,   381,   382,   383,   384,   385,     0,
     386,     0,   387,   388,   389,   390,   391,  1121,   393,   394,
     395,   396,     0,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,     0,   410,   411,   412,
     413,   414,   415,  1122,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,     0,     0,   430,
     431,   432,   433,   434,   435,   436,   437,   438,     0,   439,
     440,   441,  1123,   443,     0,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
     823,     0,     0,   460,   461,     0,   462,   463,   464,     0,
     465,   466,   467,   468,   469,     0,   470,  1124,  1125,     0,
       0,   473,   474,   824,   476,   825,  1126,   478,   479,   826,
     481,   482,   483,   484,   485,     0,     0,   486,   487,   488,
    1127,     0,   489,   490,   491,   492,     0,   493,   494,   495,
     496,   497,   498,  1128,   500,     0,   501,   502,   503,   504,
     505,   506,   507,   508,   509,     0,     0,   510,     0,     0,
     511,   512,   513,   514,   515,   516,   517,   518,   519,   520,
     521,   522,   523,   524,   525,   526,   527,   528,   529,   530,
     531,  1129,     0,     0,     0,     0,     0,     0,  1130,  3275,
    1132,     0,     0,     0,     0,  1133,     0,  1134,     0,     0,
       0,  1135,     0,  1136,  1137,  1138,   119,  1087,   844,  1088,
    1089,  1090,  1091,  1092,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   120,   121,   122,   123,
     124,   125,   126,   127,     0,   128,   129,   130,     0,     0,
       0,     0,     0,     0,  1093,     0,     0,   131,   132,   133,
       0,   134,   135,   136,   137,   138,   139,   140,   141,  1094,
     143,  1095,  1096,     0,   146,   147,   148,   149,   150,   151,
    1097,   812,   152,   153,   154,   155,  1098,  1099,   158,     0,
     159,   160,   161,   162,   813,     0,   814,     0,  1100,   166,
     167,   168,   169,   170,   171,   172,   173,   174,     0,   175,
     176,   177,   178,   179,   180,     0,   181,   182,  3215,   184,
     185,   186,   187,   188,   189,   190,   191,  1101,   193,   194,
    1102,   196,  1103,   197,     0,   198,   199,   200,   201,   202,
     203,     0,     0,   204,   205,   206,   207,     0,     0,   208,
     209,  1104,   211,   212,   213,     0,   214,   215,   216,     0,
     217,   218,   219,     0,   220,   221,   222,   223,  1105,   225,
     226,   227,   228,   229,   230,   815,  1106,   232,     0,     0,
     233,   234,  1107,   236,     0,   237,     0,   238,   239,     0,
     240,   241,   242,   243,   244,   245,     0,   246,   247,     0,
    3216,  1109,   250,   251,     0,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,     0,   264,   265,
     266,   267,   268,   269,   270,     0,   271,   272,   273,   274,
     275,   276,   277,   278,  1110,  1111,     0,  1112,     0,   282,
     283,   284,   285,   286,   287,   288,   289,  1113,   290,   291,
     292,     0,     0,   293,   294,   295,   296,     0,   297,     0,
       0,   298,   299,   300,   301,   302,   303,   304,  1114,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
    1115,   328,  1116,   330,   331,   332,   333,   334,  1117,   335,
     336,   337,   338,  1118,   817,   340,  1119,   342,   343,   344,
       0,   345,   346,     0,     0,  1120,   348,   349,     0,     0,
     350,   351,   352,   353,   354,   355,   356,   819,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,     0,     0,     0,     0,   371,   372,   820,   374,   375,
     376,   377,     0,   378,   379,   380,     0,   381,   382,   383,
     384,   385,     0,   386,     0,   387,   388,   389,   390,   391,
    1121,   393,   394,   395,   396,     0,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,     0,
     410,   411,   412,   413,   414,  3217,  1122,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
       0,     0,   430,   431,   432,   433,   434,   435,   436,   437,
     438,     0,   439,   440,   441,  1123,   443,     0,   444,   445,
     446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
     456,   457,   458,   823,     0,     0,   460,   461,     0,   462,
     463,   464,     0,   465,   466,   467,   468,   469,     0,   470,
    1124,  1125,     0,     0,   473,   474,   824,   476,   825,  1126,
     478,   479,   826,   481,   482,   483,   484,   485,     0,     0,
     486,   487,   488,  1127,     0,   489,   490,   491,   492,     0,
     493,   494,   495,   496,   497,   498,  1128,   500,     0,   501,
     502,   503,   504,   505,   506,   507,   508,   509,     0,     0,
     510,     0,     0,   511,   512,   513,   514,   515,   516,   517,
     518,   519,   520,   521,   522,   523,   524,   525,   526,   527,
     528,   529,   530,   531,  1129,     0,     0,     0,     0,     0,
       0,  1130,  1131,  1132,     0,     0,     0,     0,  1133,     0,
    3218,     0,     0,     0,  1135,     0,  1136,  1137,  1138,   119,
    1087,   844,  1088,  1089,  1090,  1091,  1092,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   120,
     121,   122,   123,   124,   125,   126,   127,     0,   128,   129,
     130,     0,     0,     0,     0,     0,     0,  1093,     0,     0,
     131,   132,   133,     0,   134,   135,   136,   137,   138,   139,
     140,  3736,  1094,   143,  1095,  1096,     0,   146,   147,   148,
     149,   150,   151,  1097,   812,   152,   153,   154,   155,  1098,
    1099,   158,     0,   159,   160,   161,   162,   813,     0,   814,
       0,  1100,   166,   167,   168,   169,   170,   171,   172,   173,
     174,     0,   175,   176,   177,   178,   179,   180,     0,   181,
     182,   183,  3737,   185,   186,   187,   188,   189,   190,   191,
    1101,   193,   194,  1102,   196,  1103,   197,     0,   198,   199,
     200,   201,   202,   203,     0,     0,   204,   205,   206,   207,
       0,     0,   208,   209,  1104,   211,   212,   213,     0,   214,
     215,   216,     0,   217,   218,   219,     0,   220,   221,   222,
     223,  1105,   225,   226,   227,   228,   229,   230,   815,  1106,
     232,     0,     0,   233,   234,  1107,   236,     0,   237,     0,
     238,   239,     0,   240,   241,   242,   243,   244,   245,     0,
     246,   247,     0,  1108,  1109,   250,   251,     0,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
       0,   264,   265,   266,   267,   268,   269,   270,     0,   271,
     272,   273,   274,   275,   276,   277,   278,  1110,  1111,     0,
    1112,     0,   282,   283,   284,   285,   286,   287,   288,   289,
    1113,   290,   291,   292,     0,     0,   293,   294,   295,   296,
       0,   297,     0,     0,   298,   299,   300,   301,   302,   303,
     304,  1114,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,  1115,   328,  1116,   330,   331,   332,   333,
     334,  1117,   335,   336,   337,   338,  1118,   817,   340,  1119,
     342,   343,   344,     0,   345,   346,     0,     0,  1120,   348,
     349,     0,     0,   350,   351,   352,   353,   354,   355,   356,
     819,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,     0,     0,     0,     0,   371,   372,
     820,   374,   375,   376,   377,     0,   378,   379,   380,     0,
     381,   382,   383,   384,   385,     0,   386,     0,   387,   388,
     389,   390,   391,  1121,   393,   394,   395,   396,     0,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,     0,   410,   411,   412,   413,   414,   415,  1122,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,     0,     0,   430,   431,   432,   433,   434,
     435,   436,   437,   438,     0,   439,   440,   441,  1123,   443,
       0,   444,   445,   446,   447,   448,   449,   450,   451,   452,
     453,   454,   455,   456,   457,   458,   823,     0,     0,   460,
     461,     0,   462,   463,   464,     0,   465,   466,   467,   468,
     469,     0,   470,  1124,  1125,     0,     0,   473,   474,   824,
     476,   825,  1126,   478,   479,   826,   481,   482,  3738,   484,
     485,     0,     0,   486,   487,   488,  1127,     0,   489,   490,
     491,   492,     0,   493,   494,   495,   496,   497,   498,  1128,
     500,     0,   501,   502,   503,   504,   505,   506,   507,   508,
     509,     0,     0,   510,     0,     0,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,  1129,     0,     0,
       0,     0,     0,     0,  1130,  1131,  1132,     0,     0,     0,
       0,  1133,     0,  1134,     0,     0,     0,  1135,     0,  1136,
    1137,  1138,   119,  1087,   844,  1088,  1089,  1090,  1091,  1092,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   120,   121,   122,   123,   124,   125,   126,   127,
       0,   128,   129,   130,     0,     0,     0,     0,     0,     0,
    1093,     0,     0,   131,   132,   133,     0,   134,   135,   136,
     137,   138,   139,   140,   141,  1094,   143,  1095,  1096,     0,
     146,   147,   148,   149,   150,   151,  1097,   812,   152,   153,
     154,   155,  1098,  1099,   158,     0,   159,   160,   161,   162,
     813,     0,   814,     0,  1100,   166,   167,   168,   169,   170,
     171,   172,   173,   174,     0,   175,   176,   177,   178,   179,
     180,     0,   181,   182,   183,  3737,   185,   186,   187,   188,
     189,   190,   191,  1101,   193,   194,  1102,   196,  1103,   197,
       0,   198,   199,   200,   201,   202,   203,     0,     0,   204,
     205,   206,   207,     0,     0,   208,   209,  1104,   211,   212,
     213,     0,   214,   215,   216,     0,   217,   218,   219,     0,
     220,   221,   222,   223,  1105,   225,   226,   227,   228,   229,
     230,   815,  1106,   232,     0,     0,   233,   234,  1107,   236,
       0,   237,     0,   238,   239,     0,   240,   241,   242,   243,
     244,   245,     0,   246,   247,     0,  1108,  1109,   250,   251,
       0,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,     0,   264,   265,   266,   267,   268,   269,
     270,     0,   271,   272,   273,   274,   275,   276,   277,   278,
    1110,  1111,     0,  1112,     0,   282,   283,   284,   285,   286,
     287,   288,   289,  1113,   290,   291,   292,     0,     0,   293,
     294,   295,   296,     0,   297,     0,     0,   298,   299,   300,
     301,   302,   303,   304,  1114,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,  1115,   328,  1116,   330,
     331,   332,   333,   334,  1117,   335,   336,   337,   338,  1118,
     817,   340,  1119,   342,   343,   344,     0,   345,   346,     0,
       0,  1120,   348,   349,     0,     0,   350,   351,   352,   353,
     354,   355,   356,   819,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,     0,     0,     0,
       0,   371,   372,   820,   374,   375,   376,   377,     0,   378,
     379,   380,     0,   381,   382,   383,   384,   385,     0,   386,
       0,   387,   388,   389,   390,   391,  1121,   393,   394,   395,
     396,     0,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,     0,   410,   411,   412,   413,
     414,   415,  1122,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,     0,     0,   430,   431,
     432,   433,   434,   435,   436,   437,   438,     0,   439,   440,
     441,  1123,   443,     0,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   823,
       0,     0,   460,   461,     0,   462,   463,   464,     0,   465,
     466,   467,   468,   469,     0,   470,  1124,  1125,     0,     0,
     473,   474,   824,   476,   825,  1126,   478,   479,   826,   481,
     482,  3738,   484,   485,     0,     0,   486,   487,   488,  1127,
       0,   489,   490,   491,   492,     0,   493,   494,   495,   496,
     497,   498,  1128,   500,     0,   501,   502,   503,   504,   505,
     506,   507,   508,   509,     0,     0,   510,     0,     0,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520,   521,
     522,   523,   524,   525,   526,   527,   528,   529,   530,   531,
    1129,     0,     0,     0,     0,     0,     0,  1130,  1131,  1132,
       0,     0,     0,     0,  1133,     0,  1134,     0,     0,     0,
    1135,     0,  1136,  1137,  1138,   119,  1087,   844,  1088,  1089,
    1090,  1091,  1092,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   120,   121,   122,   123,   124,
     125,   126,   127,     0,   128,   129,   130,     0,     0,     0,
       0,     0,     0,  1093,     0,     0,   131,   132,   133,     0,
     134,   135,   136,   137,   138,   139,   140, -2180,  1094,   143,
    1095,  1096,     0,   146,   147,   148,   149,   150,   151,  1097,
     812,   152,   153,   154,   155,  1098,  1099,   158,     0,   159,
     160,   161,   162,   813,     0,   814,     0,  1100,   166,   167,
     168,   169,   170,   171,   172,   173,   174,     0,   175,   176,
     177,   178,   179,   180,     0,   181,   182,   183,  3737,   185,
     186,   187,   188,   189,   190,   191,  1101,   193,   194,  1102,
     196,  1103,   197,     0,   198,   199,   200,   201,   202,   203,
       0,     0,   204,   205,   206,   207,     0,     0,   208,   209,
    1104,   211,   212,   213,     0,   214,   215,   216,     0,   217,
     218,   219,     0,   220,   221,   222,   223,  1105,   225,   226,
     227,   228,   229,   230,   815,  1106,   232,     0,     0,   233,
     234,  1107,   236,     0,   237,     0,   238,   239,     0,   240,
     241,   242,   243, -2180,   245,     0,   246,   247,     0,  1108,
    1109,   250,   251,     0,   252,   253,   254,   255,   256,   257,
     258, -2180,   260,   261,   262,   263,     0,   264,   265,   266,
     267,   268,   269,   270,     0,   271,   272,   273,   274,   275,
     276,   277,   278,  1110,  1111,     0,  1112,     0,   282,     0,
       0,   285,   286,   287,   288,   289,  1113,   290,   291,   292,
       0,     0,   293,   294,   295, -2180,     0,   297,     0,     0,
     298,   299,   300,   301,   302,   303,   304,  1114,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,  1115,
     328,  1116,   330,   331,   332,   333,   334,     0,   335,   336,
       0,   338,  1118,   817,   340,  1119,   342,   343,   344,     0,
     345,   346,     0,     0,  1120,   348,   349,     0,     0,   350,
     351,   352,   353,   354,   355,   356,   819,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
       0,     0,     0,     0,   371,   372,   820,   374,   375,   376,
     377,     0,   378,   379,   380,     0,   381,   382,   383,   384,
     385,     0,   386,     0,   387,   388,   389,   390,   391,  1121,
     393,   394,   395,   396,     0,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,     0,   410,
     411,   412,   413,   414,   415,  1122,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,     0,
       0,   430,   431,   432,   433,   434,   435,   436,   437,   438,
       0, -2180,   440,   441,  1123,   443,     0,   444,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   823,     0,     0,   460,   461,     0,   462,   463,
     464,     0,   465,   466,   467,   468,   469,     0,   470,  1124,
    1125,     0,     0,   473,   474,   824,   476,   825,  1126,   478,
     479,   826,   481,   482,  3738,   484,   485,     0,     0,   486,
     487,   488,  1127,     0,   489,   490,   491,   492,     0,   493,
     494,   495,   496,   497,   498,  1128,   500,     0,   501,   502,
     503,   504,   505,   506,   507,   508,   509,     0,     0,   510,
       0,     0,   511,   512,   513,   514,   515,   516,   517,   518,
     519,   520,   521,   522,   523,   524,   525,   526,   527,   528,
     529,   530,   531, -2180,     0,     0,     0,     0,     0,     0,
    1130,  1131,  1132,     0,     0,     0,     0,  1133,     0,  1134,
       0,     0,     0,  1135,     0,  1136,  1137,  1138,   119,  1087,
     844,  1088,  1089,  1090,  1091,  1092,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   120,   121,
     122,   123,   124,   125,   126,   127,     0,   128,   129,   130,
       0,     0,     0,     0,     0,     0,  1093,     0,     0,   131,
     132,   133,     0,   134,   135,   136,   137,   138,   139,   140,
     141,  1094,   143,  1095,  1096,     0,   146,   147,   148,   149,
     150,   151,  1097,   812,   152,   153,   154,   155,  1098,  1099,
     158,     0,   159,   160,   161,   162,   813,     0,   814,     0,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
       0,   175,   176,   177,   178,   179,   180,     0,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,  1101,
     193,   194,  1102,   196,     0,   197,     0,   198,   199,   200,
     201,   202,   203,     0,     0,   204,   205,   206,   207,     0,
       0,   208,   209,  1104,   211,   212,   213,     0,   214,   215,
     216,     0,   217,   218,   219,     0,   220,   221,   222,   223,
    1105,   225,   226,   227,   228,   229,   230,   815,  1106,   232,
       0,     0,   233,   234,  1107,   236,     0,   237,     0,   238,
     239,     0,   240,   241,   242,   243,   244,   245,     0,   246,
     247,     0,  1108,  1109,   250,   251,     0,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,     0,
     264,   265,   266,   267,   268,   269,   270,     0,   271,   272,
     273,   274,   275,   276,   277,   278,  1110,  1111,     0,  1112,
       0,   282,   283,   284,   285,   286,   287,   288,   289,     0,
     290,   291,   292,     0,     0,   293,   294,   295,   296,     0,
     297,     0,     0,   298,   299,   300,   301,   302,   303,   304,
    1114,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,  1115,   328,  1116,   330,   331,   332,   333,   334,
       0,   335,   336,   337,   338,  1118,   817,   340,  1119,   342,
     343,   344,     0,   345,   346,     0,     0,  1120,   348,   349,
       0,     0,   350,   351,   352,   353,   354,   355,   356,   819,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,     0,     0,     0,     0,   371,   372,   820,
     374,   375,   376,   377,     0,   378,   379,   380,     0,   381,
     382,   383,   384,   385,     0,   386,     0,   387,   388,   389,
     390,   391,  1121,   393,   394,   395,   396,     0,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,     0,   410,   411,   412,   413,   414,   415,  1122,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,     0,     0,   430,   431,   432,   433,   434,   435,
     436,   437,   438,     0,   439,   440,   441,  1123,   443,     0,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   823,     0,     0,   460,   461,
       0,   462,   463,   464,     0,   465,   466,   467,   468,   469,
       0,   470,  1124,  1125,     0,     0,   473,   474,   824,   476,
     825,  1126,   478,   479,   826,   481,   482,   483,   484,   485,
       0,     0,   486,   487,   488,     0,     0,   489,   490,   491,
     492,     0,   493,   494,   495,   496,   497,   498,  1128,   500,
       0,   501,   502,   503,   504,   505,   506,   507,   508,   509,
       0,     0,   510,     0,     0,   511,   512,   513,   514,   515,
     516,   517,   518,   519,   520,   521,   522,   523,   524,   525,
     526,   527,   528,   529,   530,   531,     0,     0,     0,     0,
       0,     0,     0,  1473,  1474,     0,     0,     0,     0,     0,
    1133,     0,  1134,     0,     0,     0,  1135,     0,  1136,  1137,
    1138,   119,  1087,   844,  1088,  1089,     0,  1091,  1092,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   120,   121,   122,   123,   124,   125,   126,   127,     0,
     128,   129,   130,     0,     0,     0,     0,     0,     0,  1093,
       0,     0,   131,   132,   133,     0,   134,   135,   136,   137,
     138,   139,   140,   141,  1094,   143,  1095,  1096,     0,   146,
     147,   148,   149,   150,   151,  1097,   812,   152,   153,   154,
     155,  1098,  1099,   158,     0,   159,   160,   161,   162,   813,
       0,   814,     0,   165,   166,   167,   168,   169,   170,   171,
     172,   173,   174,     0,   175,   176,   177,   178,   179,   180,
       0,   181,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,  1101,   193,   194,  1102,   196,     0,   197,     0,
     198,   199,   200,   201,   202,   203,     0,     0,   204,   205,
     206,   207,     0,     0,   208,   209,  1104,   211,   212,   213,
       0,   214,   215,   216,     0,   217,   218,   219,     0,   220,
     221,   222,   223,  1105,   225,   226,   227,   228,   229,   230,
     815,  1106,   232,     0,     0,   233,   234,  1107,   236,     0,
     237,     0,   238,   239,     0,   240,   241,   242,   243,   244,
     245,     0,   246,   247,     0,  1108,  1109,   250,   251,     0,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,     0,   264,   265,   266,   267,   268,   269,   270,
       0,   271,   272,   273,   274,   275,   276,   277,   278,  1110,
    1111,     0,  1112,     0,   282,   283,   284,   285,   286,   287,
     288,   289,     0,   290,   291,   292,     0,     0,   293,   294,
     295,   296,     0,   297,     0,     0,   298,   299,   300,   301,
     302,   303,   304,  1114,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,  1115,   328,  1116,   330,   331,
     332,   333,   334,     0,   335,   336,   337,   338,  1118,   817,
     340,  1119,   342,   343,   344,     0,   345,   346,     0,     0,
     347,   348,   349,     0,     0,   350,   351,   352,   353,   354,
     355,   356,   819,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,     0,     0,     0,     0,
     371,   372,   820,   374,   375,   376,   377,     0,   378,   379,
     380,     0,   381,   382,   383,   384,   385,     0,   386,     0,
     387,   388,   389,   390,   391,  1121,   393,   394,   395,   396,
       0,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,     0,   410,   411,   412,   413,   414,
     415,  2285,  2286,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,     0,     0,   430,   431,   432,
     433,   434,   435,   436,   437,   438,     0,   439,   440,   441,
    1123,   443,     0,   444,   445,   446,   447,   448,   449,   450,
     451,   452,   453,   454,   455,   456,   457,   458,   823,     0,
       0,   460,   461,     0,   462,   463,   464,     0,   465,   466,
     467,   468,   469,     0,   470,  1124,  1125,     0,     0,   473,
     474,   824,   476,   825,  1126,   478,   479,   826,   481,   482,
     483,   484,   485,     0,     0,   486,   487,   488,     0,     0,
     489,   490,   491,   492,     0,   493,   494,   495,   496,   497,
     498,  1128,   500,     0,   501,   502,   503,   504,   505,   506,
     507,   508,   509,     0,     0,   510,     0,     0,   511,   512,
     513,   514,   515,   516,   517,   518,   519,   520,   521,   522,
     523,   524,   525,   526,   527,   528,   529,   530,   531,     0,
       0,     0,     0,     0,     0,     0,  2287,  2288,     0,     0,
       0,     0,     0,  1133,     0,  1134,     0,     0,     0,  1135,
       0,  1136,  1137,  1138,   119,  1087,   844,  1088,  1089,  1090,
    1091,  1092,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   120,   121,   122,   123,   124,   125,
     126,   127,     0,   128,   129,   130,     0,     0,     0,     0,
       0,     0,  1093,     0,     0,   131,   132,   133,     0,   134,
     135,   136,   137,   138,   139,   140,   141,  1094,   143,  1095,
    1096,     0,   146,   147,   148,   149,   150,   151,  1097,   812,
     152,   153,   154,   155,  1098,  1099,   158,     0,   159,   160,
     161,   162,   813,     0,   814,     0,   165,   166,   167,   168,
     169,   170,   171,   172,   173,   174,     0,   175,   176,   177,
     178,   179,   180,     0,   181,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,  1101,   193,   194,  1102,   196,
       0,   197,     0,   198,   199,   200,   201,   202,   203,     0,
       0,   204,   205,   206,   207,     0,     0,   208,   209,  1104,
     211,   212,   213,     0,   214,   215,   216,     0,   217,   218,
     219,     0,   220,   221,   222,   223,  1105,   225,   226,   227,
     228,   229,   230,   815,  1106,   232,     0,     0,   233,   234,
    1107,   236,     0,   237,     0,   238,   239,     0,   240,   241,
     242,   243,   244,   245,     0,   246,   247,     0,  1108,  1109,
     250,   251,     0,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,     0,   264,   265,   266,   267,
     268,   269,   270,     0,   271,   272,   273,   274,   275,   276,
     277,   278,  1110,  1111,     0,  1112,     0,   282,     0,   284,
     285,   286,   287,   288,   289,     0,   290,   291,   292,     0,
       0,   293,   294,   295,   296,     0,   297,     0,     0,   298,
     299,   300,   301,   302,   303,   304,  1114,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,  1115,   328,
    1116,   330,   331,   332,   333,   334,     0,   335,   336,   337,
     338,  1118,   817,   340,  1119,   342,   343,   344,     0,   345,
     346,     0,     0,  1120,   348,   349,     0,     0,   350,   351,
     352,   353,   354,   355,   356,   819,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,     0,
       0,     0,     0,   371,   372,   820,   374,   375,   376,   377,
       0,   378,   379,   380,     0,   381,   382,   383,   384,   385,
       0,   386,     0,   387,   388,   389,   390,   391,  1121,   393,
     394,   395,   396,     0,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,     0,   410,   411,
     412,   413,   414,   415,  1122,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,     0,     0,
     430,   431,   432,   433,   434,   435,   436,   437,   438,     0,
     439,   440,   441,  1123,   443,     0,   444,   445,   446,   447,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   823,     0,     0,   460,   461,     0,   462,   463,   464,
       0,   465,   466,   467,   468,   469,     0,   470,  1124,  1125,
       0,     0,   473,   474,   824,   476,   825,  1126,   478,   479,
     826,   481,   482,   483,   484,   485,     0,     0,   486,   487,
     488,     0,     0,   489,   490,   491,   492,     0,   493,   494,
     495,   496,   497,   498,  1128,   500,     0,   501,   502,   503,
     504,   505,   506,   507,   508,   509,     0,     0,   510,     0,
       0,   511,   512,   513,   514,   515,   516,   517,   518,   519,
     520,   521,   522,   523,   524,   525,   526,   527,   528,   529,
     530,   531,     0,     0,     0,     0,     0,     0,     0,  1473,
    1474,     0,     0,     0,     0,     0,  1133,     0,  1134,     0,
       0,     0,  1135,     0,  1136,  1137,  1138,   119,  1087,   844,
    1088,  1089,     0,  1091,  1092,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   120,   121,   122,
     123,   124,   125,   126,   127,     0,   128,   129,   130,     0,
       0,     0,     0,     0,     0,  1093,     0,     0,   131,   132,
     133,     0,   134,   135,   136,   137,   138,   139,   140,   141,
    1094,   143,  1095,  1096,     0,   146,   147,   148,   149,   150,
     151,  1097,   812,   152,   153,   154,   155,  1098,  1099,   158,
       0,   159,   160,   161,   162,   813,     0,   814,     0,   165,
     166,   167,   168,   169,   170,   171,   172,   173,   174,     0,
     175,   176,   177,   178,   179,   180,     0,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,  1101,   193,
     194,  1102,   196,     0,   197,     0,   198,   199,   200,   201,
     202,   203,     0,     0,   204,   205,   206,   207,     0,     0,
     208,   209,  1104,   211,   212,   213,     0,   214,   215,   216,
       0,   217,   218,   219,     0,   220,   221,   222,   223,  1105,
     225,   226,   227,   228,   229,   230,   815,  1106,   232,     0,
       0,   233,   234,  1107,   236,     0,   237,     0,   238,   239,
       0,   240,   241,   242,   243,   244,   245,     0,   246,   247,
    3236,  1108,  1109,   250,   251,     0,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,     0,   264,
     265,   266,   267,   268,   269,   270,     0,   271,   272,   273,
     274,   275,   276,   277,   278,  1110,  1111,     0,  1112,     0,
     282,   283,   284,   285,   286,   287,   288,   289,     0,   290,
     291,   292,     0,     0,   293,   294,   295,   296,     0,   297,
       0,     0,   298,   299,   300,   301,   302,   303,   304,  1114,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,  1115,   328,  1116,   330,   331,   332,   333,   334,     0,
     335,   336,   337,   338,  1118,   817,   340,  1119,   342,   343,
     344,     0,   345,   346,     0,     0,   347,   348,   349,     0,
       0,   350,   351,   352,   353,   354,   355,   356,   819,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,     0,     0,     0,     0,   371,   372,   820,   374,
     375,   376,   377,     0,   378,   379,   380,     0,   381,   382,
     383,   384,   385,     0,   386,     0,   387,   388,   389,   390,
     391,  1121,   393,   394,   395,   396,     0,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
       0,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,     0,     0,   430,   431,   432,   433,   434,   435,   436,
     437,   438,     0,   439,   440,   441,  1123,   443,     0,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   823,     0,     0,   460,   461,     0,
     462,   463,   464,     0,   465,   466,   467,   468,   469,     0,
     470,  1124,  1125,     0,     0,   473,   474,   824,   476,   825,
    1126,   478,   479,   826,   481,   482,   483,   484,   485,     0,
       0,   486,   487,   488,     0,     0,   489,   490,   491,   492,
       0,   493,   494,   495,   496,   497,   498,  1128,   500,     0,
     501,   502,   503,   504,   505,   506,   507,   508,   509,     0,
       0,   510,     0,     0,   511,   512,   513,   514,   515,   516,
     517,   518,   519,   520,   521,   522,   523,   524,   525,   526,
     527,   528,   529,   530,   531,     0,     0,     0,     0,     0,
     119,  1087,   844,  1088,  1089,     0,  1091,  1092,     0,  1133,
       0,  2896,     0,     0,     0,  1135,     0,  1136,  1137,  1138,
     120,   121,   122,   123,   124,   125,   126,   127,     0,   128,
     129,   130,     0,     0,     0,     0,     0,     0,  1093,     0,
       0,   131,   132,   133,     0,   134,   135,   136,   137,   138,
     139,   140,   141,  1094,   143,  1095,  1096,     0,   146,   147,
     148,   149,   150,   151,  1097,   812,   152,   153,   154,   155,
    1098,  1099,   158,     0,   159,   160,   161,   162,   813,     0,
     814,     0,   165,   166,   167,   168,   169,   170,   171,   172,
     173,   174,     0,   175,   176,   177,   178,   179,   180,     0,
     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,  1101,   193,   194,  1102,   196,     0,   197,     0,   198,
     199,   200,   201,   202,   203,     0,     0,   204,   205,   206,
     207,     0,     0,   208,   209,  1104,   211,   212,   213,     0,
     214,   215,   216,     0,   217,   218,   219,     0,   220,   221,
     222,   223,  1105,   225,   226,   227,   228,   229,   230,   815,
    1106,   232,     0,     0,   233,   234,  1107,   236,     0,   237,
       0,   238,   239,     0,   240,   241,   242,   243,   244,   245,
       0,   246,   247,     0,  1108,  1109,   250,   251,     0,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,     0,   264,   265,   266,   267,   268,   269,   270,     0,
     271,   272,   273,   274,   275,   276,   277,   278,  1110,  1111,
       0,  1112,     0,   282,   283,   284,   285,   286,   287,   288,
     289,     0,   290,   291,   292,     0,     0,   293,   294,   295,
     296,     0,   297,     0,     0,   298,   299,   300,   301,   302,
     303,   304,  1114,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,  1115,   328,  1116,   330,   331,   332,
     333,   334,     0,   335,   336,   337,   338,  1118,   817,   340,
    1119,   342,   343,   344,     0,   345,   346,     0,     0,   347,
     348,   349,     0,     0,   350,   351,   352,   353,   354,   355,
     356,   819,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,     0,     0,     0,     0,   371,
     372,   820,   374,   375,   376,   377,     0,   378,   379,   380,
       0,   381,   382,   383,   384,   385,     0,   386,     0,   387,
     388,   389,   390,   391,  1121,   393,   394,   395,   396,     0,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,     0,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,     0,     0,   430,   431,   432,   433,
     434,   435,   436,   437,   438,     0,   439,   440,   441,  1123,
     443,     0,   444,   445,   446,   447,   448,   449,   450,   451,
     452,   453,   454,   455,   456,   457,   458,   823,     0,     0,
     460,   461,     0,   462,   463,   464,     0,   465,   466,   467,
     468,   469,     0,   470,  1124,  1125,     0,     0,   473,   474,
     824,   476,   825,  1126,   478,   479,   826,   481,   482,   483,
     484,   485,     0,     0,   486,   487,   488,     0,     0,   489,
     490,   491,   492,     0,   493,   494,   495,   496,   497,   498,
    1128,   500,     0,   501,   502,   503,   504,   505,   506,   507,
     508,   509,     0,     0,   510,     0,     0,   511,   512,   513,
     514,   515,   516,   517,   518,   519,   520,   521,   522,   523,
     524,   525,   526,   527,   528,   529,   530,   531,     0,     0,
       0,     0,     0,   119,  1087,   844,  1088,  1089,     0,  1091,
    1092,     0,  1133,     0,  2896,     0,     0,     0,  1135,     0,
    1136,  1137,  1138,   120,   121,   122,   123,   124,   125,   126,
     127,     0,   128,   129,   130,     0,     0,     0,     0,     0,
       0,  1093,     0,     0,   131,   132,   133,     0,   134,   135,
     136,   137,   138,   139,   140,   141,  1094,   143,  1095,  1096,
       0,   146,   147,   148,   149,   150,   151,  1097,   812,   152,
     153,   154,   155,  1098,  1099,   158,     0,   159,   160,   161,
     162,   813,     0,   814,     0,   165,   166,   167,   168,   169,
     170,   171,   172,   173,   174,     0,   175,   176,   177,   178,
     179,   180,     0,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,  1101,   193,   194,  1102,   196,     0,
     197,     0,   198,   199,   200,   201,   202,   203,     0,     0,
     204,   205,   206,   207,     0,     0,   208,   209,  1104,   211,
     212,   213,     0,   214,   215,   216,     0,   217,   218,   219,
       0,   220,   221,   222,   223,  1105,   225,   226,   227,   228,
     229,   230,   815,  1106,   232,     0,     0,   233,   234,  1107,
     236,     0,   237,     0,   238,   239,     0,   240,   241,   242,
     243,   244,   245,     0,   246,   247,     0,  1108,  1109,   250,
     251,     0,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,     0,   264,   265,   266,   267,   268,
     269,   270,     0,   271,   272,   273,   274,   275,   276,   277,
     278,  1110,  1111,     0,  1112,     0,   282,   283,   284,   285,
     286,   287,   288,   289,     0,   290,   291,   292,     0,     0,
     293,   294,   295,   296,     0,   297,     0,     0,   298,   299,
     300,   301,   302,   303,   304,  1114,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,  1115,   328,  1116,
     330,   331,   332,   333,   334,     0,   335,   336,   337,   338,
    1118,   817,   340,  1119,   342,   343,   344,     0,   345,   346,
       0,     0,   347,   348,   349,     0,     0,   350,   351,   352,
     353,   354,   355,   356,   819,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,     0,     0,
       0,     0,   371,   372,   820,   374,   375,   376,   377,     0,
     378,   379,   380,     0,   381,   382,   383,   384,   385,     0,
     386,     0,   387,   388,   389,   390,   391,  1121,   393,   394,
     395,   396,     0,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,     0,   410,   411,   412,
     413,   414,   415,  1122,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,     0,     0,   430,
     431,   432,   433,   434,   435,   436,   437,   438,     0,   439,
     440,   441,  1123,   443,     0,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
     823,     0,     0,   460,   461,     0,   462,   463,   464,     0,
     465,   466,   467,   468,   469,     0,   470,  1124,  1125,     0,
       0,   473,   474,   824,   476,   825,  1126,   478,   479,   826,
     481,   482,   483,   484,   485,     0,     0,   486,   487,   488,
       0,     0,   489,   490,   491,   492,     0,   493,   494,   495,
     496,   497,   498,  1128,   500,     0,   501,   502,   503,   504,
     505,   506,   507,   508,   509,     0,     0,   510,     0,     0,
     511,   512,   513,   514,   515,   516,   517,   518,   519,   520,
     521,   522,   523,   524,   525,   526,   527,   528,   529,   530,
     531,     0,     0,     0,     0,     0,   119,  1087,   844,  1088,
    1089,  1090,  1091,  1092,     0,  1133,     0,  1134,     0,     0,
       0,  1135,     0,  1136,  1137,  1138,   120,   121,   122,   123,
     124,   125,   126,   127,     0,   128,   129,   130,     0,     0,
       0,     0,     0,     0,  1093,     0,     0,   131,   132,   133,
       0,   134,   135,   136,   137,   138,   139,   140,     0,  1094,
     143,  1095,  1096,     0,   146,   147,   148,   149,   150,   151,
    1097,   812,   152,   153,   154,   155,  1098,  1099,   158,     0,
     159,   160,   161,   162,   813,     0,   814,     0,  1100,   166,
     167,   168,   169,   170,   171,   172,   173,   174,     0,   175,
     176,   177,   178,   179,   180,     0,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,  1101,   193,   194,
    1102,   196,  1103,   197,     0,   198,   199,   200,   201,   202,
     203,     0,     0,   204,   205,   206,   207,     0,     0,   208,
     209,  1104,   211,   212,   213,     0,   214,   215,   216,     0,
     217,     0,   219,     0,   220,   221,   222,   223,  1105,   225,
     226,   227,   228,   229,   230,   815,  1106,   232,     0,     0,
     233,   234,  1107,   236,     0,   237,     0,   238,   239,     0,
     240,   241,   242,   243,     0,   245,     0,   246,   247,     0,
    1108,  1109,   250,   251,     0,   252,   253,   254,   255,   256,
     257,   258,     0,   260,   261,   262,   263,     0,   264,   265,
     266,   267,   268,   269,   270,     0,   271,   272,   273,   274,
     275,   276,   277,   278,  1110,  1111,     0,  1112,     0,   282,
       0,     0,   285,   286,   287,   288,   289,  1113,   290,   291,
     292,     0,     0,   293,   294,   295,     0,     0,   297,     0,
       0,   298,   299,   300,   301,   302,   303,   304,  1114,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
    1115,   328,  1116,   330,   331,   332,   333,   334,     0,   335,
     336,     0,   338,  1118,   817,   340,  1119,   342,   343,   344,
       0,   345,   346,     0,     0,  1120,   348,   349,     0,     0,
     350,   351,   352,   353,   354,   355,   356,   819,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,     0,     0,     0,     0,   371,   372,   820,   374,   375,
     376,   377,     0,   378,   379,   380,     0,   381,   382,   383,
     384,   385,     0,   386,     0,   387,   388,   389,   390,   391,
    1121,   393,   394,   395,   396,     0,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,     0,
     410,   411,   412,   413,   414,   415,  1122,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
       0,     0,   430,   431,   432,   433,   434,   435,   436,   437,
     438,     0,     0,   440,   441,  1123,   443,     0,   444,   445,
     446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
     456,   457,   458,   823,     0,     0,   460,   461,     0,   462,
     463,   464,     0,   465,   466,   467,   468,   469,     0,   470,
    1124,  1125,     0,     0,   473,   474,   824,   476,   825,  1126,
     478,   479,   826,   481,   482,   483,   484,   485,     0,     0,
     486,   487,   488,  1127,     0,   489,   490,   491,   492,     0,
     493,   494,   495,   496,   497,   498,  1128,   500,     0,   501,
     502,   503,   504,   505,   506,   507,   508,   509,     0,     0,
     510,     0,     0,   511,   512,   513,   514,   515,   516,   517,
     518,   519,   520,   521,   522,   523,   524,   525,   526,   527,
     528,   529,   530,   531,     0,     0,     0,     0,     0,   119,
       0,  1130,  1131,  1132,     0,     0,  1092,     0,  1133,     0,
    1134,     0,     0,     0,  1135,     0,  1136,  1137,  1138,   120,
     121,   122,   123,   124,   125,   126,   127,     0,   128,   129,
     130,     0,     0,     0,     0,     0,     0,  1093,     0,     0,
     131,   132,   133,     0,   134,   135,   136,   137,   138,   139,
     140,   141,   142,   143,   144,   145,     0,   146,   147,   148,
     149,   150,   151,  1097,   812,   152,   153,   154,   155,   156,
     157,   158,     0,   159,   160,   161,   162,   813,     0,   814,
       0,   165,   166,   167,   168,   169,   170,   171,   172,   173,
     174,     0,   175,   176,   177,   178,   179,   180,     0,   181,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,     0,   197,     0,   198,   199,
     200,   201,   202,   203,     0,     0,   204,   205,   206,   207,
       0,     0,   208,   209,   210,   211,   212,   213,     0,   214,
     215,   216,     0,   217,   218,   219,     0,   220,   221,   222,
     223,   224,   225,   226,   227,   228,   229,   230,   815,     0,
     232,     0,     0,   233,   234,   235,   236,     0,   237,     0,
     238,   239,     0,   240,   241,   242,   243,   244,   245,     0,
     246,   247,     0,   248,   249,   250,   251,     0,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
       0,   264,   265,   266,   267,   268,   269,   270,     0,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,     0,
     281,     0,   282,   283,   284,   285,   286,   287,   288,   289,
       0,   290,   291,   292,     0,     0,   293,   294,   295,   296,
       0,   297,     0,     0,   298,   299,   300,   301,   302,   303,
     304,  1114,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,     0,   335,   336,   337,   338,     0,   817,   340,   341,
     342,   343,   344,     0,   345,   346,     0,     0,   347,   348,
     349,     0,     0,   350,   351,   352,   353,   354,   355,   356,
     819,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,     0,     0,     0,     0,   371,   372,
     820,   374,   375,   376,   377,     0,   378,   379,   380,     0,
     381,   382,   383,   384,   385,     0,   386,     0,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,     0,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,     0,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,     0,     0,   430,   431,   432,   433,   434,
     435,   436,   437,   438,     0,   439,   440,   441,   442,   443,
       0,   444,   445,   446,   447,   448,   449,   450,   451,   452,
     453,   454,   455,   456,   457,   458,   823,     0,     0,   460,
     461,     0,   462,   463,   464,     0,   465,   466,   467,   468,
     469,     0,   470,   471,   472,     0,     0,   473,   474,   824,
     476,   825,     0,   478,   479,   826,   481,   482,   483,   484,
     485,     0,     0,   486,   487,   488,     0,     0,   489,   490,
     491,   492,     0,   493,   494,   495,   496,   497,   498,   499,
     500,     0,   501,   502,   503,   504,   505,   506,   507,   508,
     509,     0,     0,   510,     0,     0,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,     0,     0,     0,
       0,     0,   539,  2037,     0,     0,     0,     0,  2038,  1092,
       0,  1133,     0,  2200,     0,     0,     0,  1135,     0,  1136,
    1137,  1138,   120,   121,   122,   123,   124,   125,   126,   127,
       0,   128,   129,   130,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   132,   133,     0,     0,   135,   136,
       0,   138,   139,   140,   141,   142,     0,   144,   145,     0,
     146,   147,   148,   149,   150,   151,     0,     0,   152,   153,
     154,   155,   156,   157,   158,     0,   159,   160,   161,   162,
     163,     0,     0,     0,   165,   166,   167,   168,   169,   170,
       0,   172,   173,   174,     0,   175,   176,   177,   178,   179,
     180,     0,     0,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,     0,   197,
       0,   198,   199,   200,   201,   202,   203,     0,     0,   204,
     205,   206,   207,     0,     0,   208,   209,   210,   211,   212,
     213,     0,   214,   215,   216,     0,   217,   218,   219,     0,
     220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     230,   231,     0,   232,     0,     0,   233,   234,   235,   236,
       0,   237,     0,   238,     0,     0,     0,   241,   242,   540,
       0,   245,     0,   246,   247,     0,   248,   249,   250,   251,
       0,   252,   253,   254,   255,   256,   257,   258,     0,   260,
     261,   262,   263,     0,   264,   265,   266,   267,   268,   269,
     270,     0,   271,     0,   273,   274,   275,   276,   277,   278,
     279,   280,     0,   281,     0,   282,     0,     0,   285,     0,
     287,   288,   289,     0,   290,   291,   292,     0,     0,   293,
       0,   295,     0,     0,   297,     0,     0,   298,   299,   300,
     301,   302,   303,   304,   541,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,     0,   329,   330,
     331,   332,   333,   334,     0,   335,   336,     0,   338,     0,
     339,   340,   341,   342,   343,   344,     0,   345,   346,     0,
       0,   347,   348,   349,     0,     0,   350,   351,   352,     0,
     354,   355,     0,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,     0,     0,     0,
       0,   371,   372,   373,     0,   375,   376,   377,     0,   378,
     379,   380,     0,   381,   382,   383,   384,   385,     0,   386,
       0,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,     0,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,     0,   410,   411,     0,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,     0,     0,   430,   431,
     432,   433,   434,   435,   436,   437,   438,     0,     0,   440,
     441,   442,   443,     0,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   542,   458,   459,
       0,     0,   460,   461,     0,   462,     0,   464,     0,   465,
     466,   467,   468,   469,     0,   470,   471,   472,     0,     0,
     473,   474,   475,   476,   477,     0,   478,   479,   480,   481,
     482,   483,   484,   485,     0,     0,   486,   487,   488,     0,
       0,   489,   490,   491,   492,     0,   493,   494,   495,   496,
     497,   498,   499,   500,     0,   501,     0,   503,   504,   505,
     506,   507,   508,   509,     0,     0,   510,     0,     0,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520,   521,
     522,   523,   524,   525,   526,   527,   528,   529,   530,   531,
       0,     0,     0,     0,  1004,  1402,   844,     0,     0,     0,
    1091,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1136,  1137,   120,   121,   122,   123,   124,   125,
     126,   127,     0,   128,   129,   130,     0,     0,     0,   575,
       0,     0,     0,     0,     0,   581,   132,   133,     0,   583,
     135,   136,   584,   138,   139,   140,   585,   586,   587,   588,
     589,     0,   146,   147,   148,   149,   150,   151,     0,     0,
     152,   153,   154,   155,   593,   594,   158,     0,   159,   160,
     161,   162,   596,     0,   598,     0,   600,   166,   167,   168,
     169,   170,   601,   172,   173,   174,     0,   175,   176,   177,
     178,   179,   180,     0,   604,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   606,   193,   194,   607,   196,
       0,   197,     0,   198,   199,   200,   201,   202,   203,     0,
       0,   204,   205,   206,   207,     0,     0,   208,   209,   210,
     211,   212,   213,     0,   214,   215,   216,     0,   217,   218,
     219,     0,   220,   221,   222,   223,   617,   225,   226,   227,
     228,   229,   230,   618,  1403,   232,     0,     0,   233,   234,
     622,   236,     0,   237,     0,   238,   625,     0,   627,   241,
     242,   628,   629,   245,     0,   246,   247,     0,   632,   633,
     250,   251,     0,   252,   253,   254,   255,   256,   257,   258,
     635,   260,   261,   262,   263,     0,   264,   265,   266,   267,
     268,   269,   270,     0,   271,   638,   639,   274,   275,   276,
     277,   278,   640,   641,     0,   643,     0,   282,   645,   646,
     285,   647,   287,   288,   289,     0,   290,   291,   292,     0,
       0,   293,   651,   295,   652,     0,   297,     0,     0,   298,
     299,   300,   301,   302,   303,   304,  2479,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   657,   658,
     659,   330,   331,   332,   333,   660,     0,   335,   336,   662,
     338,     0,   664,   340,   665,   342,   343,   344,     0,   345,
     346,  1404,     0,   347,   348,   349,     0,     0,   350,   351,
     671,   672,   354,   355,   673,   674,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,     0,
       0,     0,     0,   371,   372,   679,   680,   375,   376,   681,
       0,   378,   379,   380,     0,   381,   382,   383,   384,   385,
       0,   386,     0,   387,   388,   389,   390,   391,   686,   393,
     394,   395,   396,     0,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,     0,   410,   411,
     689,   413,   414,   415,   690,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,     0,   692,
     430,   431,   432,   433,   434,   435,   693,   437,   438,     0,
     695,   440,   441,   696,   443,     0,   444,   445,   446,   447,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   698,
     458,   699,     0,     0,   460,   461,     0,   462,   703,   464,
       0,   465,   466,   467,   468,   469,     0,   470,   706,   707,
       0,     0,   473,   474,   710,   476,   711,  1405,   478,   479,
     713,   481,   482,   483,   484,   485,     0,     0,   486,   487,
     488,   716,     0,   489,   490,   491,   492,     0,   493,   494,
     495,   496,   497,   719,   720,   500,     0,   501,   722,   503,
     504,   505,   506,   507,   508,   509,     0,     0,   510,     0,
       0,   511,   512,   513,   514,   515,   516,   727,   728,   729,
     730,   731,   732,   733,   734,   735,   736,   737,   528,   529,
     530,   531,     0,   539,     0,     0,     0,     0,     0,  1406,
    1407,  2480,     0,     0,     0,     0,  2481,     0,  2482,     0,
       0,     0,  1135,   120,   121,   122,   123,   124,   125,   126,
     127,     0,   128,   129,   130,     0,     0,     0,     0,     0,
       0,     0,  1041,     0,     0,   132,   133,     0,     0,   135,
     136,     0,   138,   139,   140,   141,   142,     0,   144,   145,
       0,   146,   147,   148,   149,   150,   151,     0,     0,   152,
     153,   154,   155,   156,   157,   158,     0,   159,   160,   161,
     162,   163,     0,     0,     0,   165,   166,   167,   168,   169,
     170,     0,   172,   173,   174,     0,   175,   176,   177,   178,
     179,   180,     0,     0,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,     0,
     197,     0,   198,   199,   200,   201,   202,   203,     0,     0,
     204,   205,   206,   207,     0,     0,   208,   209,   210,   211,
     212,   213,     0,   214,   215,   216,     0,   217,   218,   219,
    -476,   220,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   230,   231,     0,   232,     0,  -476,   233,   234,   235,
     236,  -476,   237,     0,   238,     0,     0,     0,   241,   242,
     540,     0,   245,     0,   246,   247,     0,   248,   249,   250,
     251,     0,   252,   253,   254,   255,   256,   257,   258,     0,
     260,   261,   262,   263,     0,   264,   265,   266,   267,   268,
     269,   270,     0,   271,     0,   273,   274,   275,   276,   277,
     278,   279,   280,  -476,   281,     0,   282,     0,     0,   285,
       0,   287,   288,   289,     0,   290,   291,   292,     0,     0,
     293,     0,   295,     0,  -476,   297,     0,     0,   298,   299,
     300,   301,   302,   303,   304,   541,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,     0,   329,
     330,   331,   332,   333,   334,     0,   335,   336,     0,   338,
       0,   339,   340,   341,   342,   343,   344,  -476,   345,   346,
       0,     0,   347,   348,   349,     0,  -476,   350,   351,   352,
       0,   354,   355,     0,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,     0,     0,
       0,     0,   371,   372,   373,     0,   375,   376,   377,     0,
     378,   379,   380,     0,   381,   382,   383,   384,   385,     0,
     386,     0,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,     0,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,     0,   410,   411,     0,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,     0,     0,   430,
     431,   432,   433,   434,   435,   436,   437,   438,     0,     0,
     440,   441,   442,   443,     0,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   542,   458,
     459,     0,     0,   460,   461,     0,   462,     0,   464,     0,
     465,   466,   467,   468,   469,     0,   470,   471,   472,     0,
       0,   473,   474,   475,   476,   477,     0,   478,   479,   480,
     481,   482,   483,   484,   485,  -476,     0,   486,   487,   488,
       0,     0,   489,   490,   491,   492,     0,   493,   494,   495,
     496,   497,   498,   499,   500,     0,   501,     0,   503,   504,
     505,   506,   507,   508,   509,     0,     0,   510,     0,     0,
     511,   512,   513,   514,   515,   516,   517,   518,   519,   520,
     521,   522,   523,   524,   525,   526,   527,   528,   529,   530,
     531,   539,     0,   564,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1210,     0,
       0,   120,   121,   122,   123,   124,   125,   126,   127,     0,
     128,   129,   130,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   132,   133,     0,     0,   135,   136,     0,
     138,   139,   140,   141,   142,     0,   144,   145,     0,   146,
     147,   148,   149,   150,   151,     0,     0,   152,   153,   154,
     155,   156,   157,   158,     0,   159,   160,   161,   162,   163,
       0,     0,     0,   165,   166,   167,   168,   169,   170,     0,
     172,   173,   174,     0,   175,   176,   177,   178,   179,   180,
       0,     0,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,     0,   197,     0,
     198,   199,   200,   201,   202,   203,     0,     0,   204,   205,
     206,   207,     0,     0,   208,   209,   210,   211,   212,   213,
       0,   214,   215,   216,     0,   217,   218,   219,     0,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
     231,     0,   232,     0,     0,   233,   234,   235,   236,     0,
     237,     0,   238,     0,     0,     0,   241,   242,   540,     0,
     245,     0,   246,   247,     0,   248,   249,   250,   251,     0,
     252,   253,   254,   255,   256,   257,   258,     0,   260,   261,
     262,   263,     0,   264,   265,   266,   267,   268,   269,   270,
       0,   271,     0,   273,   274,   275,   276,   277,   278,   279,
     280,     0,   281,     0,   282,     0,     0,   285,     0,   287,
     288,   289,     0,   290,   291,   292,     0,     0,   293,     0,
     295,     0,     0,   297,     0,     0,   298,   299,   300,   301,
     302,   303,   304,   541,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,     0,   329,   330,   331,
     332,   333,   334,     0,   335,   336,     0,   338,     0,   339,
     340,   341,   342,   343,   344,     0,   345,   346,     0,     0,
     347,   348,   349,     0,     0,   350,   351,   352,     0,   354,
     355,     0,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,     0,     0,     0,     0,
     371,   372,   373,     0,   375,   376,   377,     0,   378,   379,
     380,     0,   381,   382,   383,   384,   385,     0,   386,     0,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
       0,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,     0,   410,   411,     0,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,     0,     0,   430,   431,   432,
     433,   434,   435,   436,   437,   438,     0,     0,   440,   441,
     442,   443,     0,   444,   445,   446,   447,   448,   449,   450,
     451,   452,   453,   454,   455,   456,   542,   458,   459,     0,
       0,   460,   461,     0,   462,     0,   464,     0,   465,   466,
     467,   468,   469,     0,   470,   471,   472,     0,     0,   473,
     474,   475,   476,   477,     0,   478,   479,   480,   481,   482,
     483,   484,   485,     0,     0,   486,   487,   488,     0,     0,
     489,   490,   491,   492,     0,   493,   494,   495,   496,   497,
     498,   499,   500,     0,   501,     0,   503,   504,   505,   506,
     507,   508,   509,     0,     0,   510,     0,     0,   511,   512,
     513,   514,   515,   516,   517,   518,   519,   520,   521,   522,
     523,   524,   525,   526,   527,   528,   529,   530,   531,  1004,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2572,  3441,     0,     0,   120,
     121,   122,   123,   124,   125,   126,   127,     0,   128,   129,
     130,     3,     4,     0,   575,     0,     0,     0,     0,     0,
     581,   132,   133,     0,   583,   135,   136,   584,   138,   139,
     140,   585,   586,   587,   588,   589,     0,   146,   147,   148,
     149,   150,   151,     0,     0,   152,   153,   154,   155,   593,
     594,   158,     0,   159,   160,   161,   162,   596,     0,   598,
       0,   600,   166,   167,   168,   169,   170,   601,   172,   173,
     174,     0,   175,   176,   177,   178,   179,   180,     0,   604,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     606,   193,   194,   607,   196,     0,   197,     0,   198,   199,
     200,   201,   202,   203,    14,    15,   204,   205,   206,   207,
       0,     0,   208,   209,   210,   211,   212,   213,     0,   214,
     215,   216,     0,   217,   218,   219,     0,   220,   221,   222,
     223,   617,   225,   226,   227,   228,   229,   230,   618,     0,
     232,     0,     0,   233,   234,   622,   236,     0,   237,     0,
     238,   625,    23,   627,   241,   242,   628,   629,   245,     0,
     246,   247,     0,   632,   633,   250,   251,     0,   252,   253,
     254,   255,   256,   257,   258,   635,   260,   261,   262,   263,
       0,   264,   265,   266,   267,   268,   269,   270,     0,   271,
     638,   639,   274,   275,   276,   277,   278,   640,   641,     0,
     643,     0,   282,   645,   646,   285,   647,   287,   288,   289,
       0,   290,   291,   292,     0,     0,   293,   651,   295,   652,
       0,   297,     0,     0,   298,   299,   300,   301,   302,   303,
     304,   656,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   657,   658,   659,   330,   331,   332,   333,
     660,     0,   335,   336,   662,   338,     0,   664,   340,   665,
     342,   343,   344,     0,   345,   346,     0,     0,   347,   348,
     349,     0,     0,   350,   351,   671,   672,   354,   355,   673,
     674,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,    26,    27,    28,     0,   371,   372,
     679,   680,   375,   376,   681,     0,   378,   379,   380,     0,
     381,   382,   383,   384,   385,     0,   386,     0,   387,   388,
     389,   390,   391,   686,   393,   394,   395,   396,     0,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,     0,   410,   411,   689,   413,   414,   415,   690,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,    33,   692,   430,   431,   432,   433,   434,
     435,   693,   437,   438,    35,   695,   440,   441,   696,   443,
       0,   444,   445,   446,   447,   448,   449,   450,   451,   452,
     453,   454,   455,   456,   698,   458,   699,    37,     0,   460,
     461,    38,   462,   703,   464,     0,   465,   466,   467,   468,
     469,     0,   470,   706,   707,     0,     0,   473,   474,   710,
     476,   711,     0,   478,   479,   713,   481,   482,   483,   484,
     485,     0,     0,   486,   487,   488,   716,    40,   489,   490,
     491,   492,     0,   493,   494,   495,   496,   497,  1005,   720,
     500,     0,   501,   722,   503,   504,   505,   506,   507,   508,
     509,     0,     0,   510,     0,    44,   511,   512,   513,   514,
     515,   516,   727,   728,   729,   730,   731,   732,   733,   734,
     735,   736,   737,   528,   529,   530,   531,     0,   119,    45,
     564,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    46,     0,     0,     0,     0,   120,   121,
     122,   123,   124,   125,   126,   127,     0,   128,   129,   130,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   131,
     132,   133,     0,   134,   135,   136,   137,   138,   139,   140,
     141,   142,   143,   144,   145,     0,   146,   147,   148,   149,
     150,   151,     0,   812,   152,   153,   154,   155,   156,   157,
     158,     0,   159,   160,   161,   162,   813,     0,   814,     0,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
       0,   175,   176,   177,   178,   179,   180,     0,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,   196,     0,   197,     0,   198,   199,   200,
     201,   202,   203,    14,    15,   204,   205,   206,   207,     0,
       0,   208,   209,   210,   211,   212,   213,     0,   214,   215,
     216,     0,   217,   218,   219,     0,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   815,     0,   232,
       0,     0,   233,   234,   235,   236,     0,   237,     0,   238,
     239,    23,   240,   241,   242,   243,   244,   245,     0,   246,
     247,     0,   248,   249,   250,   251,     0,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,     0,
     264,   265,   266,   267,   268,   269,   270,     0,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,     0,   281,
       0,   282,   283,   284,   285,   286,   287,   288,   289,     0,
     290,   291,   292,   816,     0,   293,   294,   295,   296,     0,
     297,     0,     0,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
       0,   335,   336,   337,   338,     0,   817,   340,   341,   342,
     343,   344,     0,   345,   346,     0,   818,   347,   348,   349,
       0,     0,   350,   351,   352,   353,   354,   355,   356,   819,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,    26,    27,    28,     0,   371,   372,   820,
     374,   375,   376,   377,   821,   378,   379,   380,     0,   381,
     382,   383,   384,   385,     0,   386,     0,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,     0,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,     0,   410,   411,   412,   413,   414,   415,   416,   822,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,    33,     0,   430,   431,   432,   433,   434,   435,
     436,   437,   438,    35,   439,   440,   441,   442,   443,     0,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   823,    37,     0,   460,   461,
      38,   462,   463,   464,     0,   465,   466,   467,   468,   469,
       0,   470,   471,   472,     0,     0,   473,   474,   824,   476,
     825,     0,   478,   479,   826,   481,   482,   483,   484,   485,
       0,     0,   486,   487,   488,     0,    40,   489,   490,   491,
     492,     0,   493,   494,   495,   496,   497,   827,   499,   500,
       0,   501,   502,   503,   504,   505,   506,   507,   508,   509,
       0,     0,   510,     0,    44,   511,   512,   513,   514,   515,
     516,   517,   518,   519,   520,   521,   522,   523,   524,   525,
     526,   527,   528,   529,   530,   531,     0,   119,    45,   564,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   828,     0,     0,     0,     0,   120,   121,   122,
     123,   124,   125,   126,   127,     0,   128,   129,   130,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   131,   132,
     133,     0,   134,   135,   136,   137,   138,   139,   140,   141,
     142,   143,   144,   145,     0,   146,   147,   148,   149,   150,
     151,     0,   812,   152,   153,   154,   155,   156,   157,   158,
       0,   159,   160,   161,   162,   813,     0,   814,     0,   165,
     166,   167,   168,   169,   170,   171,   172,   173,   174,     0,
     175,   176,   177,   178,   179,   180,     0,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,     0,   197,     0,   198,   199,   200,   201,
     202,   203,     0,     0,   204,   205,   206,   207,     0,     0,
     208,   209,   210,   211,   212,   213,     0,   214,   215,   216,
       0,   217,   218,   219,     0,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   815,     0,   232,     0,
       0,   233,   234,   235,   236,     0,   237,     0,   238,   239,
       0,   240,   241,   242,   243,   244,   245,     0,   246,   247,
       0,   248,   249,   250,   251,     0,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,     0,   264,
     265,   266,   267,   268,   269,   270,     0,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,     0,   281,     0,
     282,   283,   284,   285,   286,   287,   288,   289,     0,   290,
     291,   292,   816,     0,   293,   294,   295,   296,     0,   297,
       0,     0,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   332,   333,   334,     0,
     335,   336,   337,   338,     0,   817,   340,   341,   342,   343,
     344,     0,   345,   346,     0,   818,   347,   348,   349,     0,
       0,   350,   351,   352,   353,   354,   355,   356,   819,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,     0,     0,     0,     0,   371,   372,   820,   374,
     375,   376,   377,   821,   378,   379,   380,     0,   381,   382,
     383,   384,   385,  2527,   386,     0,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,     0,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
       0,   410,   411,   412,   413,   414,   415,   416,   822,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,     0,     0,   430,   431,   432,   433,   434,   435,   436,
     437,   438,     0,   439,   440,   441,   442,   443,     0,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   823,     0,     0,   460,   461,     0,
     462,   463,   464,     0,   465,   466,   467,   468,   469,     0,
     470,   471,   472,     0,     0,   473,   474,   824,   476,   825,
       0,   478,   479,   826,   481,   482,   483,   484,   485,     0,
       0,   486,   487,   488,     0,     0,   489,   490,   491,   492,
       0,   493,   494,   495,   496,   497,   827,   499,   500,     0,
     501,   502,   503,   504,   505,   506,   507,   508,   509,     0,
       0,   510,     0,     0,   511,   512,   513,   514,   515,   516,
     517,   518,   519,   520,   521,   522,   523,   524,   525,   526,
     527,   528,   529,   530,   531,   119,     0,   564,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   828,     0,     0,     0,   120,   121,   122,   123,   124,
     125,   126,   127,     0,   128,   129,   130,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   131,   132,   133,     0,
     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
     144,   145,     0,   146,   147,   148,   149,   150,   151,     0,
     812,   152,   153,   154,   155,   156,   157,   158,     0,   159,
     160,   161,   162,   813,     0,   814,     0,   165,   166,   167,
     168,   169,   170,   171,   172,   173,   174,     0,   175,   176,
     177,   178,   179,   180,     0,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,     0,   197,     0,   198,   199,   200,   201,   202,   203,
       0,     0,   204,   205,   206,   207,     0,     0,   208,   209,
     210,   211,   212,   213,     0,   214,   215,   216,     0,   217,
     218,   219,     0,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,   815,     0,   232,     0,     0,   233,
     234,   235,   236,     0,   237,     0,   238,   239,     0,   240,
     241,   242,   243,   244,   245,     0,   246,   247,     0,   248,
     249,   250,   251,     0,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,     0,   264,   265,   266,
     267,   268,   269,   270,     0,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,     0,   281,     0,   282,   283,
     284,   285,   286,   287,   288,   289,     0,   290,   291,   292,
     816,     0,   293,   294,   295,   296,     0,   297,     0,     0,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,   334,     0,   335,   336,
     337,   338,     0,   817,   340,   341,   342,   343,   344,     0,
     345,   346,     0,   818,   347,   348,   349,     0,     0,   350,
     351,   352,   353,   354,   355,   356,   819,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
       0,     0,     0,     0,   371,   372,   820,   374,   375,   376,
     377,   821,   378,   379,   380,     0,   381,   382,   383,   384,
     385,     0,   386,     0,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,     0,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,     0,   410,
     411,   412,   413,   414,   415,   416,   822,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,     0,
       0,   430,   431,   432,   433,   434,   435,   436,   437,   438,
       0,   439,   440,   441,   442,   443,     0,   444,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   823,     0,     0,   460,   461,     0,   462,   463,
     464,     0,   465,   466,   467,   468,   469,     0,   470,   471,
     472,     0,     0,   473,   474,   824,   476,   825,     0,   478,
     479,   826,   481,   482,   483,   484,   485,     0,     0,   486,
     487,   488,     0,     0,   489,   490,   491,   492,     0,   493,
     494,   495,   496,   497,   827,   499,   500,     0,   501,   502,
     503,   504,   505,   506,   507,   508,   509,     0,     0,   510,
       0,     0,   511,   512,   513,   514,   515,   516,   517,   518,
     519,   520,   521,   522,   523,   524,   525,   526,   527,   528,
     529,   530,   531,   119,     0,   564,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   828,
       0,     0,     0,   120,   121,   122,   123,   124,   125,   126,
     127,     0,   128,   129,   130,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   131,   132,   133,     0,   134,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
       0,   146,   147,   148,   149,   150,   151,     0,   812,   152,
     153,   154,   155,   156,   157,   158,     0,   159,   160,   161,
     162,   813,     0,   814,     0,   165,   166,   167,   168,   169,
     170,   171,   172,   173,   174,     0,   175,   176,   177,   178,
     179,   180,     0,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,     0,
     197,     0,   198,   199,   200,   201,   202,   203,     0,     0,
     204,   205,   206,   207,     0,     0,   208,   209,   210,   211,
     212,   213,     0,   214,   215,   216,     0,   217,   218,   219,
       0,   220,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   230,   815,     0,   232,     0,     0,   233,   234,   235,
     236,     0,   237,     0,   238,   239,     0,   240,   241,   242,
     243,   244,   245,     0,   246,   247,     0,   248,   249,   250,
     251,     0,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,     0,   264,   265,   266,   267,   268,
     269,   270,     0,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,     0,   281,     0,   282,   283,   284,   285,
     286,   287,   288,   289,     0,   290,   291,   292,     0,     0,
     293,   294,   295,   296,     0,   297,     0,     0,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   332,   333,   334,     0,   335,   336,   337,   338,
       0,   817,   340,   341,   342,   343,   344,     0,   345,   346,
       0,   818,   347,   348,   349,     0,     0,   350,   351,   352,
     353,   354,   355,   356,   819,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,     0,     0,
       0,     0,   371,   372,   820,   374,   375,   376,   377,     0,
     378,   379,   380,     0,   381,   382,   383,   384,   385,     0,
     386,     0,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,     0,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,     0,   410,   411,   412,
     413,   414,   415,   416,   822,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,     0,     0,   430,
     431,   432,   433,   434,   435,   436,   437,   438,     0,   439,
     440,   441,   442,   443,     0,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
     823,     0,     0,   460,   461,     0,   462,   463,   464,     0,
     465,   466,   467,   468,   469,     0,   470,   471,   472,     0,
       0,   473,   474,   824,   476,   825,     0,   478,   479,   826,
     481,   482,   483,   484,   485,     0,     0,   486,   487,   488,
       0,     0,   489,   490,   491,   492,     0,   493,   494,   495,
     496,   497,   498,   499,   500,     0,   501,   502,   503,   504,
     505,   506,   507,   508,   509,     0,     0,   510,     0,     0,
     511,   512,   513,   514,   515,   516,   517,   518,   519,   520,
     521,   522,   523,   524,   525,   526,   527,   528,   529,   530,
     531,   119,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1049,     0,     0,
       0,   120,   121,   122,   123,   124,   125,   126,   127,     0,
     128,   129,   130,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   131,   132,   133,     0,   134,   135,   136,   137,
     138,   139,   140,   141,   142,   143,   144,   145,     0,   146,
     147,   148,   149,   150,   151,     0,   812,   152,   153,   154,
     155,   156,   157,   158,     0,   159,   160,   161,   162,   813,
       0,   814,     0,   165,   166,   167,   168,   169,   170,   171,
     172,   173,   174,     0,   175,   176,   177,   178,   179,   180,
       0,   181,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,     0,   197,     0,
     198,   199,   200,   201,   202,   203,     0,     0,   204,   205,
     206,   207,     0,     0,   208,   209,   210,   211,   212,   213,
       0,   214,   215,   216,     0,   217,   218,   219,     0,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
     815,     0,   232,     0,     0,   233,   234,   235,   236,     0,
     237,     0,   238,   239,     0,   240,   241,   242,   243,   244,
     245,     0,   246,   247,     0,   248,   249,   250,   251,     0,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,     0,   264,   265,   266,   267,   268,   269,   270,
       0,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,     0,   281,     0,   282,   283,   284,   285,   286,   287,
     288,   289,     0,   290,   291,   292,     0,     0,   293,   294,
     295,   296,     0,   297,     0,     0,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,   334,     0,   335,   336,   337,   338,     0,   817,
     340,   341,   342,   343,   344,     0,   345,   346,     0,     0,
     347,   348,   349,     0,     0,   350,   351,   352,   353,   354,
     355,   356,   819,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,     0,     0,     0,     0,
     371,   372,   820,   374,   375,   376,   377,     0,   378,   379,
     380,     0,   381,   382,   383,   384,   385,     0,   386,     0,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
       0,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,     0,   410,   411,   412,   413,   414,
     415,   416,   822,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,     0,     0,   430,   431,   432,
     433,   434,   435,   436,   437,   438,     0,   439,   440,   441,
     442,   443,     0,   444,   445,   446,   447,   448,   449,   450,
     451,   452,   453,   454,   455,   456,   457,   458,   823,     0,
       0,   460,   461,     0,   462,   463,   464,     0,   465,   466,
     467,   468,   469,     0,   470,   471,   472,     0,     0,   473,
     474,   824,   476,   825,     0,   478,   479,   826,   481,   482,
     483,   484,   485,     0,     0,   486,   487,   488,     0,     0,
     489,   490,   491,   492,     0,   493,   494,   495,   496,   497,
     498,   499,   500,     0,   501,   502,   503,   504,   505,   506,
     507,   508,   509,     0,     0,   510,     0,     0,   511,   512,
     513,   514,   515,   516,   517,   518,   519,   520,   521,   522,
     523,   524,   525,   526,   527,   528,   529,   530,   531,   119,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    46,     0,     0,     0,   120,
     121,   122,   123,   124,   125,   126,   127,     0,   128,   129,
     130,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     131,   132,   133,     0,   134,   135,   136,   137,   138,   139,
     140,   141,   142,   143,   144,   145,     0,   146,   147,   148,
     149,   150,   151,     0,   812,   152,   153,   154,   155,   156,
     157,   158,     0,   159,   160,   161,   162,   813,     0,   814,
       0,   165,   166,   167,   168,   169,   170,   171,   172,   173,
     174,     0,   175,   176,   177,   178,   179,   180,     0,   181,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,     0,   197,     0,   198,   199,
     200,   201,   202,   203,     0,     0,   204,   205,   206,   207,
       0,     0,   208,   209,   210,   211,   212,   213,     0,   214,
     215,   216,     0,   217,   218,   219,     0,   220,   221,   222,
     223,   224,   225,   226,   227,   228,   229,   230,   815,     0,
     232,     0,     0,   233,   234,   235,   236,     0,   237,     0,
     238,   239,     0,   240,   241,   242,   243,   244,   245,     0,
     246,   247,     0,   248,   249,   250,   251,     0,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
       0,   264,   265,   266,   267,   268,   269,   270,     0,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,     0,
     281,     0,   282,   283,   284,   285,   286,   287,   288,   289,
       0,   290,   291,   292,     0,     0,   293,   294,   295,   296,
       0,   297,     0,     0,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,     0,   335,   336,   337,   338,     0,   817,   340,   341,
     342,   343,   344,     0,   345,   346,     0,     0,   347,   348,
     349,     0,     0,   350,   351,   352,   353,   354,   355,   356,
     819,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,     0,     0,     0,     0,   371,   372,
     820,   374,   375,   376,   377,     0,   378,   379,   380,     0,
     381,   382,   383,   384,   385,     0,   386,     0,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,     0,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,     0,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,     0,     0,   430,   431,   432,   433,   434,
     435,   436,   437,   438,     0,   439,   440,   441,   442,   443,
       0,   444,   445,   446,   447,   448,   449,   450,   451,   452,
     453,   454,   455,   456,   457,   458,   823,     0,     0,   460,
     461,     0,   462,   463,   464,     0,   465,   466,   467,   468,
     469,     0,   470,   471,   472,     0,     0,   473,   474,   824,
     476,   825,     0,   478,   479,   826,   481,   482,   483,   484,
     485,     0,     0,   486,   487,   488,     0,     0,   489,   490,
     491,   492,     0,   493,   494,   495,   496,   497,   498,   499,
     500,     0,   501,   502,   503,   504,   505,   506,   507,   508,
     509,     0,     0,   510,     0,     0,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   539,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3542,     0,     0,     0,   120,   121,   122,
     123,   124,   125,   126,   127,     0,   128,   129,   130,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   132,
     133,     0,     0,   135,   136,     0,   138,   139,   140,   141,
     142,     0,   144,   145,     0,   146,   147,   148,   149,   150,
     151,     0,     0,   152,   153,   154,   155,   156,   157,   158,
       0,   159,   160,   161,   162,   163,     0,     0,     0,   165,
     166,   167,   168,   169,   170,     0,   172,   173,   174,     0,
     175,   176,   177,   178,   179,   180,     0,     0,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,     0,   197,     0,   198,   199,   200,   201,
     202,   203,    14,    15,   204,   205,   206,   207,     0,     0,
     208,   209,   210,   211,   212,   213,     0,   214,   215,   216,
       0,   217,   218,   219,     0,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,     0,   232,     0,
       0,   233,   234,   235,   236,     0,   237,     0,   238,     0,
      23,     0,   241,   242,   540,     0,   245,     0,   246,   247,
       0,   248,   249,   250,   251,     0,   252,   253,   254,   255,
     256,   257,   258,     0,   260,   261,   262,   263,     0,   264,
     265,   266,   267,   268,   269,   270,     0,   271,     0,   273,
     274,   275,   276,   277,   278,   279,   280,     0,   281,     0,
     282,     0,     0,   285,     0,   287,   288,   289,     0,   290,
     291,   292,     0,     0,   293,     0,   295,     0,     0,   297,
       0,     0,   298,   299,   300,   301,   302,   303,   304,   541,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,     0,   329,   330,   331,   332,   333,   334,     0,
     335,   336,     0,   338,     0,   339,   340,   341,   342,   343,
     344,     0,   345,   346,     0,     0,   347,   348,   349,     0,
       0,   350,   351,   352,     0,   354,   355,     0,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,    26,    27,    28,     0,   371,   372,   373,     0,
     375,   376,   377,     0,   378,   379,   380,     0,   381,   382,
     383,   384,   385,     0,   386,     0,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,     0,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
       0,   410,   411,     0,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,    33,     0,   430,   431,   432,   433,   434,   435,   436,
     437,   438,    35,     0,   440,   441,   442,   443,     0,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   542,   458,   459,    37,     0,   460,   461,    38,
     462,     0,   464,     0,   465,   466,   467,   468,   469,     0,
     470,   471,   472,     0,     0,   473,   474,   475,   476,   477,
       0,   478,   479,   480,   481,   482,   483,   484,   485,     0,
       0,   486,   487,   488,     0,    40,   489,   490,   491,   492,
       0,   493,   494,   495,   496,   497,   827,   499,   500,     0,
     501,     0,   503,   504,   505,   506,   507,   508,   509,     0,
       0,   510,     0,    44,   511,   512,   513,   514,   515,   516,
     517,   518,   519,   520,   521,   522,   523,   524,   525,   526,
     527,   528,   529,   530,   531,     0,   539,    45,   564,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    46,     0,     0,     0,     0,   120,   121,   122,   123,
     124,   125,   126,   127,   917,   128,   129,   130,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   132,   133,
       0,     0,   135,   136,     0,   138,   139,   140,   141,   142,
       0,   144,   145,     0,   146,   147,   148,   149,   150,   151,
       0,     0,   152,   153,   154,   155,   156,   157,   158,     0,
     159,   160,   161,   162,   163,     0,     0,     0,   165,   166,
     167,   168,   169,   170,     0,   172,   173,   174,     0,   175,
     176,   177,   178,   179,   180,     0,     0,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,     0,   197,     0,   198,   199,   200,   201,   202,
     203,     0,     0,   204,   205,   206,   207,     0,     0,   208,
     209,   210,   211,   212,   213,     0,   214,   215,   216,     0,
     217,   218,   219,     0,   220,   221,   222,   223,   224,   225,
     226,   227,   228,   229,   230,   231,     0,   232,     0,     0,
     233,   234,   235,   236,     0,   237,     0,   238,     0,    23,
       0,   241,   242,   540,     0,   245,     0,   246,   247,     0,
     248,   249,   250,   251,     0,   252,   253,   254,   255,   256,
     257,   258,     0,   260,   261,   262,   263,     0,   264,   265,
     266,   267,   268,   269,   270,     0,   271,     0,   273,   274,
     275,   276,   277,   278,   279,   280,     0,   281,     0,   282,
       0,     0,   285,     0,   287,   288,   289,     0,   290,   291,
     292,     0,     0,   293,     0,   295,     0,     0,   297,     0,
       0,   298,   299,   300,   301,   302,   303,   304,   541,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,     0,   329,   330,   331,   332,   333,   334,     0,   335,
     336,     0,   338,     0,   339,   340,   341,   342,   343,   344,
       0,   345,   346,     0,     0,   347,   348,   349,     0,     0,
     350,   351,   352,     0,   354,   355,     0,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,    26,    27,    28,     0,   371,   372,   373,     0,   375,
     376,   377,     0,   378,   379,   380,     0,   381,   382,   383,
     384,   385,     0,   386,     0,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,     0,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,     0,
     410,   411,     0,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
      33,     0,   430,   431,   432,   433,   434,   435,   436,   437,
     438,     0,     0,   440,   441,   442,   443,     0,   444,   445,
     446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
     456,   542,   458,   459,     0,     0,   460,   461,    38,   462,
       0,   464,     0,   465,   466,   467,   468,   469,     0,   470,
     918,   472,     0,     0,   919,   474,   475,   476,   477,     0,
     478,   479,   480,   481,   482,   483,   484,   485,     0,     0,
     486,   487,   488,     0,    40,   489,   490,   491,   492,     0,
     493,   494,   495,   496,   497,   827,   499,   500,     0,   501,
       0,   503,   504,   505,   506,   507,   508,   509,     0,     0,
     510,     0,    44,   511,   512,   513,   514,   515,   516,   517,
     518,   519,   520,   521,   522,   523,   524,   525,   526,   527,
     528,   529,   530,   531,     0,   539,    45,   564,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      46,     0,     0,     0,     0,   120,   121,   122,   123,   124,
     125,   126,   127,     0,   128,   129,   130,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   132,   133,     0,
       0,   135,   136,     0,   138,   139,   140,   141,   142,     0,
     144,   145,     0,   146,   147,   148,   149,   150,   151,     0,
       0,   152,   153,   154,   155,   156,   157,   158,     0,   159,
     160,   161,   162,   163,     0,     0,     0,   165,   166,   167,
     168,   169,   170,     0,   172,   173,   174,     0,   175,   176,
     177,   178,   179,   180,     0,     0,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,     0,   197,     0,   198,   199,   200,   201,   202,   203,
       0,     0,   204,   205,   206,   207,     0,     0,   208,   209,
     210,   211,   212,   213,     0,   214,   215,   216,     0,   217,
     218,   219,     0,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,   231,     0,   232,     0,     0,   233,
     234,   235,   236,     0,   237,     0,   238,     0,    23,     0,
     241,   242,   540,     0,   245,     0,   246,   247,     0,   248,
     249,   250,   251,     0,   252,   253,   254,   255,   256,   257,
     258,     0,   260,   261,   262,   263,     0,   264,   265,   266,
     267,   268,   269,   270,     0,   271,     0,   273,   274,   275,
     276,   277,   278,   279,   280,     0,   281,     0,   282,     0,
       0,   285,     0,   287,   288,   289,     0,   290,   291,   292,
       0,     0,   293,     0,   295,     0,     0,   297,     0,     0,
     298,   299,   300,   301,   302,   303,   304,   541,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
       0,   329,   330,   331,   332,   333,   334,     0,   335,   336,
       0,   338,     0,   339,   340,   341,   342,   343,   344,     0,
     345,   346,     0,     0,   347,   348,   349,     0,     0,   350,
     351,   352,     0,   354,   355,     0,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
      26,    27,    28,     0,   371,   372,   373,     0,   375,   376,
     377,     0,   378,   379,   380,     0,   381,   382,   383,   384,
     385,     0,   386,     0,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,     0,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,     0,   410,
     411,     0,   413,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,    33,
       0,   430,   431,   432,   433,   434,   435,   436,   437,   438,
       0,     0,   440,   441,   442,   443,     0,   444,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     542,   458,   459,     0,     0,   460,   461,    38,   462,     0,
     464,     0,   465,   466,   467,   468,   469,     0,   470,   471,
     472,     0,     0,   473,   474,   475,   476,   477,     0,   478,
     479,   480,   481,   482,   483,   484,   485,     0,     0,   486,
     487,   488,     0,    40,   489,   490,   491,   492,     0,   493,
     494,   495,   496,   497,   827,   499,   500,     0,   501,     0,
     503,   504,   505,   506,   507,   508,   509,     0,     0,   510,
       0,    44,   511,   512,   513,   514,   515,   516,   517,   518,
     519,   520,   521,   522,   523,   524,   525,   526,   527,   528,
     529,   530,   531,     0,   539,    45,   564,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    46,
       0,     0,     0,     0,   120,   121,   122,   123,   124,   125,
     126,   127,     0,   128,   129,   130,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   132,   133,     0,     0,
     135,   136,     0,   138,   139,   140,   141,   142,     0,   144,
     145,     0,   146,   147,   148,   149,   150,   151,     0,     0,
     152,   153,   154,   155,   156,   157,   158,     0,   159,   160,
     161,   162,   163,     0,     0,     0,   165,   166,   167,   168,
     169,   170,     0,   172,   173,   174,     0,   175,   176,   177,
     178,   179,   180,     0,     0,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
       0,   197,     0,   198,   199,   200,   201,   202,   203,     0,
       0,   204,   205,   206,   207,     0,     0,   208,   209,   210,
     211,   212,   213,     0,   214,   215,   216,     0,   217,   218,
     219,     0,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,     0,   232,     0,     0,   233,   234,
     235,   236,     0,   237,     0,   238,     0,     0,     0,   241,
     242,   540,     0,   245,     0,   246,   247,     0,   248,   249,
     250,   251,     0,   252,   253,   254,   255,   256,   257,   258,
       0,   260,   261,   262,   263,     0,   264,   265,   266,   267,
     268,   269,   270,     0,   271,     0,   273,   274,   275,   276,
     277,   278,   279,   280,     0,   281,     0,   282,     0,     0,
     285,     0,   287,   288,   289,     0,   290,   291,   292,     0,
       0,   293,     0,   295,     0,     0,   297,     0,     0,   298,
     299,   300,   301,   302,   303,   304,   541,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,     0,
     329,   330,   331,   332,   333,   334,     0,   335,   336,     0,
     338,     0,   339,   340,   341,   342,   343,   344,     0,   345,
     346,     0,     0,   347,   348,   349,     0,     0,   350,   351,
     352,     0,   354,   355,     0,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,     0,
       0,     0,     0,   371,   372,   373,     0,   375,   376,   377,
       0,   378,   379,   380,     0,   381,   382,   383,   384,   385,
       0,   386,     0,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,     0,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,     0,   410,   411,
       0,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,     0,     0,
     430,   431,   432,   433,   434,   435,   436,   437,   438,     0,
       0,   440,   441,   442,   443,     0,   444,   445,   446,   447,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   542,
     458,   459,     0,     0,   460,   461,     0,   462,     0,   464,
       0,   465,   466,   467,   468,   469,     0,   470,   471,   472,
       0,     0,   473,   474,   475,   476,   477,     0,   478,   479,
     480,   481,   482,   483,   484,   485,     0,     0,   486,   487,
     488,     0,     0,   489,   490,   491,   492,     0,   493,   494,
     495,   496,   497,   498,   499,   500,     0,   501,     0,   503,
     504,   505,   506,   507,   508,   509,     0,     0,   510,     0,
       0,   511,   512,   513,   514,   515,   516,   517,   518,   519,
     520,   521,   522,   523,   524,   525,   526,   527,   528,   529,
     530,   531,   539,     0,   564,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1024,     0,
       0,     0,   120,   121,   122,   123,   124,   125,   126,   127,
       0,   128,   129,   130,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   132,   133,     0,     0,   135,   136,
       0,   138,   139,   140,   141,   142,     0,   144,   145,     0,
     146,   147,   148,   149,   150,   151,     0,     0,   152,   153,
     154,   155,   156,   157,   158,     0,   159,   160,   161,   162,
     163,     0,     0,     0,   165,   166,   167,   168,   169,   170,
       0,   172,   173,   174,     0,   175,   176,   177,   178,   179,
     180,     0,     0,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,     0,   197,
       0,   198,   199,   200,   201,   202,   203,     0,     0,   204,
     205,   206,   207,     0,     0,   208,   209,   210,   211,   212,
     213,     0,   214,   215,   216,     0,   217,   218,   219,     0,
     220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     230,   231,     0,   232,     0,     0,   233,   234,   235,   236,
       0,   237,     0,   238,     0,     0,     0,   241,   242,   540,
       0,   245,     0,   246,   247,     0,   248,   249,   250,   251,
       0,   252,   253,   254,   255,   256,   257,   258,     0,   260,
     261,   262,   263,     0,   264,   265,   266,   267,   268,   269,
     270,     0,   271,     0,   273,   274,   275,   276,   277,   278,
     279,   280,     0,   281,     0,   282,     0,     0,   285,     0,
     287,   288,   289,     0,   290,   291,   292,     0,     0,   293,
       0,   295,     0,     0,   297,     0,     0,   298,   299,   300,
     301,   302,   303,   304,   541,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,     0,   329,   330,
     331,   332,   333,   334,     0,   335,   336,     0,   338,     0,
     339,   340,   341,   342,   343,   344,     0,   345,   346,     0,
       0,   347,   348,   349,     0,     0,   350,   351,   352,     0,
     354,   355,     0,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,     0,     0,     0,
       0,   371,   372,   373,     0,   375,   376,   377,     0,   378,
     379,   380,     0,   381,   382,   383,   384,   385,     0,   386,
       0,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,     0,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,     0,   410,   411,     0,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,     0,     0,   430,   431,
     432,   433,   434,   435,   436,   437,   438,     0,     0,   440,
     441,   442,   443,     0,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   542,   458,   459,
       0,     0,   460,   461,     0,   462,     0,   464,     0,   465,
     466,   467,   468,   469,     0,   470,   471,   472,     0,     0,
     473,   474,   475,   476,   477,     0,   478,   479,   480,   481,
     482,   483,   484,   485,     0,     0,   486,   487,   488,     0,
       0,   489,   490,   491,   492,     0,   493,   494,   495,   496,
     497,   498,   499,   500,     0,   501,     0,   503,   504,   505,
     506,   507,   508,   509,     0,     0,   510,     0,     0,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520,   521,
     522,   523,   524,   525,   526,   527,   528,   529,   530,   531,
     539,     0,   564,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1531,     0,     0,     0,
     120,   121,   122,   123,   124,   125,   126,   127,     0,   128,
     129,   130,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   132,   133,     0,     0,   135,   136,     0,   138,
     139,   140,   141,   142,     0,   144,   145,     0,   146,   147,
     148,   149,   150,   151,     0,     0,   152,   153,   154,   155,
     156,   157,   158,     0,   159,   160,   161,   162,   163,     0,
       0,     0,   165,   166,   167,   168,   169,   170,     0,   172,
     173,   174,     0,   175,   176,   177,   178,   179,   180,     0,
       0,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,     0,   197,     0,   198,
     199,   200,   201,   202,   203,     0,     0,   204,   205,   206,
     207,     0,     0,   208,   209,   210,   211,   212,   213,     0,
     214,   215,   216,     0,   217,   218,   219,     0,   220,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,   231,
       0,   232,     0,     0,   233,   234,   235,   236,     0,   237,
       0,   238,     0,     0,     0,   241,   242,   540,     0,   245,
       0,   246,   247,     0,   248,   249,   250,   251,     0,   252,
     253,   254,   255,   256,   257,   258,     0,   260,   261,   262,
     263,     0,   264,   265,   266,   267,   268,   269,   270,     0,
     271,     0,   273,   274,   275,   276,   277,   278,   279,   280,
       0,   281,     0,   282,     0,     0,   285,     0,   287,   288,
     289,     0,   290,   291,   292,     0,     0,   293,     0,   295,
       0,     0,   297,     0,     0,   298,   299,   300,   301,   302,
     303,   304,   541,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,     0,   329,   330,   331,   332,
     333,   334,     0,   335,   336,     0,   338,     0,   339,   340,
     341,   342,   343,   344,     0,   345,   346,     0,     0,   347,
     348,   349,     0,     0,   350,   351,   352,     0,   354,   355,
       0,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,     0,     0,     0,     0,   371,
     372,   373,     0,   375,   376,   377,     0,   378,   379,   380,
       0,   381,   382,   383,   384,   385,     0,   386,     0,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,     0,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,     0,   410,   411,     0,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,     0,     0,   430,   431,   432,   433,
     434,   435,   436,   437,   438,     0,     0,   440,   441,   442,
     443,     0,   444,   445,   446,   447,   448,   449,   450,   451,
     452,   453,   454,   455,   456,   542,   458,   459,     0,     0,
     460,   461,     0,   462,     0,   464,     0,   465,   466,   467,
     468,   469,     0,   470,   471,   472,     0,     0,   473,   474,
     475,   476,   477,     0,   478,   479,   480,   481,   482,   483,
     484,   485,     0,     0,   486,   487,   488,     0,     0,   489,
     490,   491,   492,     0,   493,   494,   495,   496,   497,   498,
     499,   500,     0,   501,     0,   503,   504,   505,   506,   507,
     508,   509,     0,     0,   510,     0,     0,   511,   512,   513,
     514,   515,   516,   517,   518,   519,   520,   521,   522,   523,
     524,   525,   526,   527,   528,   529,   530,   531,   539,     0,
     564,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2161,     0,     0,     0,   120,   121,
     122,   123,   124,   125,   126,   127,     0,   128,   129,   130,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     132,   133,     0,     0,   135,   136,     0,   138,   139,   140,
     141,   142,     0,   144,   145,     0,   146,   147,   148,   149,
     150,   151,     0,     0,   152,   153,   154,   155,   156,   157,
     158,     0,   159,   160,   161,   162,   163,     0,     0,     0,
     165,   166,   167,   168,   169,   170,     0,   172,   173,   174,
       0,   175,   176,   177,   178,   179,   180,     0,     0,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,   196,     0,   197,     0,   198,   199,   200,
     201,   202,   203,     0,     0,   204,   205,   206,   207,     0,
       0,   208,   209,   210,   211,   212,   213,     0,   214,   215,
     216,     0,   217,   218,   219,     0,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,     0,   232,
       0,     0,   233,   234,   235,   236,     0,   237,     0,   238,
       0,     0,     0,   241,   242,   540,     0,   245,     0,   246,
     247,     0,   248,   249,   250,   251,     0,   252,   253,   254,
     255,   256,   257,   258,     0,   260,   261,   262,   263,     0,
     264,   265,   266,   267,   268,   269,   270,     0,   271,     0,
     273,   274,   275,   276,   277,   278,   279,   280,     0,   281,
       0,   282,     0,     0,   285,     0,   287,   288,   289,     0,
     290,   291,   292,     0,     0,   293,     0,   295,     0,     0,
     297,     0,     0,   298,   299,   300,   301,   302,   303,   304,
     541,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,     0,   329,   330,   331,   332,   333,   334,
       0,   335,   336,     0,   338,     0,   339,   340,   341,   342,
     343,   344,     0,   345,   346,     0,     0,   347,   348,   349,
       0,     0,   350,   351,   352,     0,   354,   355,     0,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,     0,     0,     0,     0,   371,   372,   373,
       0,   375,   376,   377,     0,   378,   379,   380,     0,   381,
     382,   383,   384,   385,     0,   386,     0,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,     0,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,     0,   410,   411,     0,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,     0,     0,   430,   431,   432,   433,   434,   435,
     436,   437,   438,     0,     0,   440,   441,   442,   443,     0,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   542,   458,   459,     0,     0,   460,   461,
       0,   462,     0,   464,     0,   465,   466,   467,   468,   469,
       0,   470,   471,   472,     0,     0,   473,   474,   475,   476,
     477,     0,   478,   479,   480,   481,   482,   483,   484,   485,
       0,     0,   486,   487,   488,     0,     0,   489,   490,   491,
     492,     0,   493,   494,   495,   496,   497,   498,   499,   500,
       0,   501,     0,   503,   504,   505,   506,   507,   508,   509,
       0,     0,   510,     0,     0,   511,   512,   513,   514,   515,
     516,   517,   518,   519,   520,   521,   522,   523,   524,   525,
     526,   527,   528,   529,   530,   531,   539,     0,   564,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2311,     0,     0,     0,   120,   121,   122,   123,
     124,   125,   126,   127,     0,   128,   129,   130,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   132,   133,
       0,     0,   135,   136,     0,   138,   139,   140,   141,   142,
       0,   144,   145,     0,   146,   147,   148,   149,   150,   151,
       0,     0,   152,   153,   154,   155,   156,   157,   158,     0,
     159,   160,   161,   162,   163,     0,     0,     0,   165,   166,
     167,   168,   169,   170,     0,   172,   173,   174,     0,   175,
     176,   177,   178,   179,   180,     0,     0,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,     0,   197,     0,   198,   199,   200,   201,   202,
     203,     0,     0,   204,   205,   206,   207,     0,     0,   208,
     209,   210,   211,   212,   213,     0,   214,   215,   216,     0,
     217,   218,   219,     0,   220,   221,   222,   223,   224,   225,
     226,   227,   228,   229,   230,   231,     0,   232,     0,     0,
     233,   234,   235,   236,     0,   237,     0,   238,     0,     0,
       0,   241,   242,   540,     0,   245,     0,   246,   247,     0,
     248,   249,   250,   251,     0,   252,   253,   254,   255,   256,
     257,   258,     0,   260,   261,   262,   263,     0,   264,   265,
     266,   267,   268,   269,   270,     0,   271,     0,   273,   274,
     275,   276,   277,   278,   279,   280,     0,   281,     0,   282,
       0,     0,   285,     0,   287,   288,   289,     0,   290,   291,
     292,     0,     0,   293,     0,   295,     0,     0,   297,     0,
       0,   298,   299,   300,   301,   302,   303,   304,   541,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,     0,   329,   330,   331,   332,   333,   334,     0,   335,
     336,     0,   338,     0,   339,   340,   341,   342,   343,   344,
       0,   345,   346,     0,     0,   347,   348,   349,     0,     0,
     350,   351,   352,     0,   354,   355,     0,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,     0,     0,     0,     0,   371,   372,   373,     0,   375,
     376,   377,     0,   378,   379,   380,     0,   381,   382,   383,
     384,   385,     0,   386,     0,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,     0,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,     0,
     410,   411,     0,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
       0,     0,   430,   431,   432,   433,   434,   435,   436,   437,
     438,     0,     0,   440,   441,   442,   443,     0,   444,   445,
     446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
     456,   542,   458,   459,     0,     0,   460,   461,     0,   462,
       0,   464,     0,   465,   466,   467,   468,   469,     0,   470,
     471,   472,     0,     0,   473,   474,   475,   476,   477,     0,
     478,   479,   480,   481,   482,   483,   484,   485,     0,     0,
     486,   487,   488,     0,     0,   489,   490,   491,   492,     0,
     493,   494,   495,   496,   497,   498,   499,   500,     0,   501,
       0,   503,   504,   505,   506,   507,   508,   509,     0,     0,
     510,     0,     0,   511,   512,   513,   514,   515,   516,   517,
     518,   519,   520,   521,   522,   523,   524,   525,   526,   527,
     528,   529,   530,   531,   539,     0,   564,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2572,     0,     0,     0,   120,   121,   122,   123,   124,   125,
     126,   127,     0,   128,   129,   130,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   132,   133,     0,     0,
     135,   136,     0,   138,   139,   140,   141,   142,     0,   144,
     145,     0,   146,   147,   148,   149,   150,   151,     0,     0,
     152,   153,   154,   155,   156,   157,   158,     0,   159,   160,
     161,   162,   163,     0,     0,     0,   165,   166,   167,   168,
     169,   170,     0,   172,   173,   174,     0,   175,   176,   177,
     178,   179,   180,     0,     0,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
       0,   197,     0,   198,   199,   200,   201,   202,   203,     0,
       0,   204,   205,   206,   207,     0,     0,   208,   209,   210,
     211,   212,   213,     0,   214,   215,   216,     0,   217,   218,
     219,     0,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,     0,   232,     0,     0,   233,   234,
     235,   236,     0,   237,     0,   238,     0,     0,     0,   241,
     242,   540,     0,   245,     0,   246,   247,     0,   248,   249,
     250,   251,     0,   252,   253,   254,   255,   256,   257,   258,
       0,   260,   261,   262,   263,     0,   264,   265,   266,   267,
     268,   269,   270,     0,   271,     0,   273,   274,   275,   276,
     277,   278,   279,   280,     0,   281,     0,   282,     0,     0,
     285,     0,   287,   288,   289,     0,   290,   291,   292,     0,
       0,   293,     0,   295,     0,     0,   297,     0,     0,   298,
     299,   300,   301,   302,   303,   304,   541,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,     0,
     329,   330,   331,   332,   333,   334,     0,   335,   336,     0,
     338,     0,   339,   340,   341,   342,   343,   344,     0,   345,
     346,     0,     0,   347,   348,   349,     0,     0,   350,   351,
     352,     0,   354,   355,     0,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,     0,
       0,     0,     0,   371,   372,   373,     0,   375,   376,   377,
       0,   378,   379,   380,     0,   381,   382,   383,   384,   385,
       0,   386,     0,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,     0,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,     0,   410,   411,
       0,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,     0,     0,
     430,   431,   432,   433,   434,   435,   436,   437,   438,     0,
       0,   440,   441,   442,   443,     0,   444,   445,   446,   447,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   542,
     458,   459,     0,     0,   460,   461,     0,   462,     0,   464,
       0,   465,   466,   467,   468,   469,     0,   470,   471,   472,
       0,     0,   473,   474,   475,   476,   477,     0,   478,   479,
     480,   481,   482,   483,   484,   485,     0,     0,   486,   487,
     488,     0,     0,   489,   490,   491,   492,     0,   493,   494,
     495,   496,   497,   498,   499,   500,     0,   501,     0,   503,
     504,   505,   506,   507,   508,   509,     0,     0,   510,     0,
       0,   511,   512,   513,   514,   515,   516,   517,   518,   519,
     520,   521,   522,   523,   524,   525,   526,   527,   528,   529,
     530,   531,   539,     0,   564,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2716,     0,
       0,     0,   120,   121,   122,   123,   124,   125,   126,   127,
       0,   128,   129,   130,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   132,   133,     0,     0,   135,   136,
       0,   138,   139,   140,   141,   142,     0,   144,   145,     0,
     146,   147,   148,   149,   150,   151,     0,     0,   152,   153,
     154,   155,   156,   157,   158,     0,   159,   160,   161,   162,
     163,     0,     0,     0,   165,   166,   167,   168,   169,   170,
       0,   172,   173,   174,     0,   175,   176,   177,   178,   179,
     180,     0,     0,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,     0,   197,
       0,   198,   199,   200,   201,   202,   203,     0,     0,   204,
     205,   206,   207,     0,     0,   208,   209,   210,   211,   212,
     213,     0,   214,   215,   216,     0,   217,   218,   219,     0,
     220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     230,   231,     0,   232,     0,     0,   233,   234,   235,   236,
       0,   237,     0,   238,     0,     0,     0,   241,   242,   540,
       0,   245,     0,   246,   247,     0,   248,   249,   250,   251,
       0,   252,   253,   254,   255,   256,   257,   258,     0,   260,
     261,   262,   263,     0,   264,   265,   266,   267,   268,   269,
     270,     0,   271,     0,   273,   274,   275,   276,   277,   278,
     279,   280,     0,   281,     0,   282,     0,     0,   285,     0,
     287,   288,   289,     0,   290,   291,   292,     0,     0,   293,
       0,   295,     0,     0,   297,     0,     0,   298,   299,   300,
     301,   302,   303,   304,   541,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,     0,   329,   330,
     331,   332,   333,   334,     0,   335,   336,     0,   338,     0,
     339,   340,   341,   342,   343,   344,     0,   345,   346,     0,
       0,   347,   348,   349,     0,     0,   350,   351,   352,     0,
     354,   355,     0,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,     0,     0,     0,
       0,   371,   372,   373,     0,   375,   376,   377,     0,   378,
     379,   380,     0,   381,   382,   383,   384,   385,     0,   386,
       0,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,     0,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,     0,   410,   411,     0,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,     0,     0,   430,   431,
     432,   433,   434,   435,   436,   437,   438,     0,     0,   440,
     441,   442,   443,     0,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   542,   458,   459,
       0,     0,   460,   461,     0,   462,     0,   464,     0,   465,
     466,   467,   468,   469,     0,   470,   471,   472,     0,     0,
     473,   474,   475,   476,   477,     0,   478,   479,   480,   481,
     482,   483,   484,   485,     0,     0,   486,   487,   488,     0,
       0,   489,   490,   491,   492,     0,   493,   494,   495,   496,
     497,   498,   499,   500,     0,   501,     0,   503,   504,   505,
     506,   507,   508,   509,     0,     0,   510,     0,     0,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520,   521,
     522,   523,   524,   525,   526,   527,   528,   529,   530,   531,
     539,     0,   564,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2943,     0,     0,     0,
     120,   121,   122,   123,   124,   125,   126,   127,     0,   128,
     129,   130,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   132,   133,     0,     0,   135,   136,     0,   138,
     139,   140,   141,   142,     0,   144,   145,     0,   146,   147,
     148,   149,   150,   151,     0,     0,   152,   153,   154,   155,
     156,   157,   158,     0,   159,   160,   161,   162,   163,     0,
       0,     0,   165,   166,   167,   168,   169,   170,     0,   172,
     173,   174,     0,   175,   176,   177,   178,   179,   180,     0,
       0,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,     0,   197,     0,   198,
     199,   200,   201,   202,   203,     0,     0,   204,   205,   206,
     207,     0,     0,   208,   209,   210,   211,   212,   213,     0,
     214,   215,   216,     0,   217,   218,   219,     0,   220,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,   231,
       0,   232,     0,     0,   233,   234,   235,   236,     0,   237,
       0,   238,     0,     0,     0,   241,   242,   540,     0,   245,
       0,   246,   247,     0,   248,   249,   250,   251,     0,   252,
     253,   254,   255,   256,   257,   258,     0,   260,   261,   262,
     263,     0,   264,   265,   266,   267,   268,   269,   270,     0,
     271,     0,   273,   274,   275,   276,   277,   278,   279,   280,
       0,   281,     0,   282,     0,     0,   285,     0,   287,   288,
     289,     0,   290,   291,   292,     0,     0,   293,     0,   295,
       0,     0,   297,     0,     0,   298,   299,   300,   301,   302,
     303,   304,   541,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,     0,   329,   330,   331,   332,
     333,   334,     0,   335,   336,     0,   338,     0,   339,   340,
     341,   342,   343,   344,     0,   345,   346,     0,     0,   347,
     348,   349,     0,     0,   350,   351,   352,     0,   354,   355,
       0,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,     0,     0,     0,     0,   371,
     372,   373,     0,   375,   376,   377,     0,   378,   379,   380,
       0,   381,   382,   383,   384,   385,     0,   386,     0,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,     0,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,     0,   410,   411,     0,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,     0,     0,   430,   431,   432,   433,
     434,   435,   436,   437,   438,     0,     0,   440,   441,   442,
     443,     0,   444,   445,   446,   447,   448,   449,   450,   451,
     452,   453,   454,   455,   456,   542,   458,   459,     0,     0,
     460,   461,     0,   462,     0,   464,     0,   465,   466,   467,
     468,   469,     0,   470,   471,   472,     0,     0,   473,   474,
     475,   476,   477,     0,   478,   479,   480,   481,   482,   483,
     484,   485,     0,     0,   486,   487,   488,     0,     0,   489,
     490,   491,   492,     0,   493,   494,   495,   496,   497,   498,
     499,   500,     0,   501,     0,   503,   504,   505,   506,   507,
     508,   509,     0,     0,   510,     0,     0,   511,   512,   513,
     514,   515,   516,   517,   518,   519,   520,   521,   522,   523,
     524,   525,   526,   527,   528,   529,   530,   531,   539,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3436,     0,     0,     0,   120,   121,
     122,   123,   124,   125,   126,   127,     0,   128,   129,   130,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     132,   133,     0,     0,   135,   136,     0,   138,   139,   140,
     141,   142,     0,   144,   145,     0,   146,   147,   148,   149,
     150,   151,     0,     0,   152,   153,   154,   155,   156,   157,
     158,     0,   159,   160,   161,   162,   163,     0,     0,     0,
     165,   166,   167,   168,   169,   170,     0,   172,   173,   174,
       0,   175,   176,   177,   178,   179,   180,     0,     0,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,   196,     0,   197,     0,   198,   199,   200,
     201,   202,   203,     0,     0,   204,   205,   206,   207,     0,
       0,   208,   209,   210,   211,   212,   213,     0,   214,   215,
     216,     0,   217,   218,   219,     0,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,     0,   232,
       0,     0,   233,   234,   235,   236,     0,   237,     0,   238,
       0,     0,     0,   241,   242,   540,     0,   245,     0,   246,
     247,     0,   248,   249,   250,   251,     0,   252,   253,   254,
     255,   256,   257,   258,     0,   260,   261,   262,   263,     0,
     264,   265,   266,   267,   268,   269,   270,     0,   271,     0,
     273,   274,   275,   276,   277,   278,   279,   280,     0,   281,
       0,   282,     0,     0,   285,     0,   287,   288,   289,     0,
     290,   291,   292,     0,     0,   293,     0,   295,     0,     0,
     297,     0,     0,   298,   299,   300,   301,   302,   303,   304,
     541,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,     0,   329,   330,   331,   332,   333,   334,
       0,   335,   336,     0,   338,     0,   339,   340,   341,   342,
     343,   344,     0,   345,   346,     0,     0,   347,   348,   349,
       0,     0,   350,   351,   352,     0,   354,   355,     0,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,     0,     0,     0,     0,   371,   372,   373,
       0,   375,   376,   377,     0,   378,   379,   380,     0,   381,
     382,   383,   384,   385,     0,   386,     0,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,     0,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,     0,   410,   411,     0,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,     0,     0,   430,   431,   432,   433,   434,   435,
     436,   437,   438,     0,     0,   440,   441,   442,   443,     0,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   542,   458,   459,     0,     0,   460,   461,
       0,   462,     0,   464,     0,   465,   466,   467,   468,   469,
       0,   470,   471,   472,     0,     0,   473,   474,   475,   476,
     477,     0,   478,   479,   480,   481,   482,   483,   484,   485,
       0,     0,   486,   487,   488,     0,     0,   489,   490,   491,
     492,     0,   493,   494,   495,   496,   497,   498,   499,   500,
       0,   501,     0,   503,   504,   505,   506,   507,   508,   509,
       0,     0,   510,     0,     0,   511,   512,   513,   514,   515,
     516,   517,   518,   519,   520,   521,   522,   523,   524,   525,
     526,   527,   528,   529,   530,   531,   539,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2267,     0,     0,     0,   120,   121,   122,   123,
     124,   125,   126,   127,     0,   128,   129,   130,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   132,   133,
       0,     0,   135,   136,     0,   138,   139,   140,   141,   142,
       0,   144,   145,     0,   146,   147,   148,   149,   150,   151,
       0,     0,   152,   153,   154,   155,   156,   157,   158,     0,
     159,   160,   161,   162,   163,     0,     0,     0,   165,   166,
     167,   168,   169,   170,     0,   172,   173,   174,     0,   175,
     176,   177,   178,   179,   180,     0,     0,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,     0,   197,     0,   198,   199,   200,   201,   202,
     203,     0,     0,   204,   205,   206,   207,     0,     0,   208,
     209,   210,   211,   212,   213,     0,   214,   215,   216,     0,
     217,   218,   219,     0,   220,   221,   222,   223,   224,   225,
     226,   227,   228,   229,   230,   231,     0,   232,     0,     0,
     233,   234,   235,   236,     0,   237,     0,   238,     0,     0,
       0,   241,   242,   540,     0,   245,     0,   246,   247,     0,
     248,   249,   250,   251,     0,   252,   253,   254,   255,   256,
     257,   258,     0,   260,   261,   262,   263,     0,   264,   265,
     266,   267,   268,   269,   270,     0,   271,     0,   273,   274,
     275,   276,   277,   278,   279,   280,     0,   281,     0,   282,
       0,     0,   285,     0,   287,   288,   289,     0,   290,   291,
     292,     0,     0,   293,     0,   295,     0,     0,   297,     0,
       0,   298,   299,   300,   301,   302,   303,   304,   541,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,     0,   329,   330,   331,   332,   333,   334,     0,   335,
     336,     0,   338,     0,   339,   340,   341,   342,   343,   344,
       0,   345,   346,     0,     0,   347,   348,   349,     0,     0,
     350,   351,   352,     0,   354,   355,     0,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,     0,     0,     0,     0,   371,   372,   373,     0,   375,
     376,   377,     0,   378,   379,   380,     0,   381,   382,   383,
     384,   385,     0,   386,     0,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,     0,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,     0,
     410,   411,     0,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
       0,     0,   430,   431,   432,   433,   434,   435,   436,   437,
     438,     0,     0,   440,   441,   442,   443,     0,   444,   445,
     446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
     456,   542,   458,   459,     0,     0,   460,   461,     0,   462,
       0,   464,     0,   465,   466,   467,   468,   469,     0,   470,
     471,   472,     0,     0,   473,   474,   475,   476,   477,     0,
     478,   479,   480,   481,   482,   483,   484,   485,     0,     0,
     486,   487,   488,     0,     0,   489,   490,   491,   492,     0,
     493,   494,   495,   496,   497,   498,   499,   500,     0,   501,
       0,   503,   504,   505,   506,   507,   508,   509,     0,     0,
     510,     0,     0,   511,   512,   513,   514,   515,   516,   517,
     518,   519,   520,   521,   522,   523,   524,   525,   526,   527,
     528,   529,   530,   531,  3073,  1402,   844,     0,     0,  2135,
    1091,     0,     0,     0,     0,     0,  2136,  2137,     0,     0,
    3282,  2138,  2139,  2140,   120,   121,   122,   123,   124,   125,
     126,   127,   571,   128,   129,   130,   572,   573,   574,  3074,
     576,   577,   578,   579,   580,  3075,   132,   133,   582,  3076,
     135,   136,  3077,   138,   139,   140,     0,  1545,  3078,  1547,
    1548,   590,   146,   147,   148,   149,   150,   151,   591,   592,
     152,   153,   154,   155,  1549,  1550,   158,   595,   159,   160,
     161,   162,     0,   597,  3079,   599,  3080,   166,   167,   168,
     169,   170,  3081,   172,   173,   174,   602,   175,   176,   177,
     178,   179,   180,   603,  3082,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,  1555,   193,   194,  1556,   196,
     608,   197,   609,   198,   199,   200,   201,   202,   203,   610,
     611,   204,   205,   206,   207,   612,   613,   208,   209,  1104,
     211,   212,   213,   614,   214,   215,   216,   615,   217,   218,
     219,   616,   220,   221,   222,   223,     0,   225,   226,   227,
     228,   229,   230,     0,   619,   232,   620,   621,   233,   234,
    1557,   236,   623,   237,   624,   238,  3083,   626,  3084,   241,
     242,  3085,  3086,   245,   630,   246,   247,   631,     0,     0,
     250,   251,   634,   252,   253,   254,   255,   256,   257,   258,
    3087,   260,   261,   262,   263,   636,   264,   265,   266,   267,
     268,   269,   270,   637,   271,  3088,     0,   274,   275,   276,
     277,   278,  1563,  1564,   642,  1565,   644,   282,  3089,  3090,
     285,  3091,   287,   288,   289,   648,   290,   291,   292,   649,
     650,   293,  3092,   295,  3093,   653,   297,   654,   655,   298,
     299,   300,   301,   302,   303,   304,  3094,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,  1572,  3095,
    1574,   330,   331,   332,   333,  3096,   661,   335,   336,  3097,
     338,   663,     0,   340,  1576,   342,   343,   344,   666,   345,
     346,   667,   668,  3098,   348,   349,   669,   670,   350,   351,
       0,  3099,   354,   355,  3100,     0,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   675,
     676,   677,   678,   371,   372,     0,  3101,   375,   376,     0,
     682,   378,   379,   380,   683,   381,   382,   383,   384,   385,
     684,   386,   685,   387,   388,   389,   390,   391,  1580,   393,
     394,   395,   396,   687,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   688,   410,   411,
    3102,   413,   414,   415,  1582,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   691,  3103,
     430,   431,   432,   433,   434,   435,  3104,   437,   438,   694,
    3105,   440,   441,  1586,   443,   697,   444,   445,   446,   447,
     448,   449,   450,   451,   452,   453,   454,   455,   456,  3106,
     458,     0,   700,   701,   460,   461,   702,   462,  3107,   464,
     704,   465,   466,   467,   468,   469,   705,   470,  1589,  1590,
     708,   709,   473,   474,     0,   476,     0,   712,   478,   479,
    3108,   481,   482,   483,   484,   485,  3109,   715,   486,   487,
     488,  3110,   717,   489,   490,   491,   492,   718,   493,   494,
     495,   496,   497,     0,  1594,   500,   721,   501,  3111,   503,
     504,   505,   506,   507,   508,   509,   723,   724,   510,   725,
     726,   511,   512,   513,   514,   515,   516,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   528,   529,
     530,   531,     0,   539,     0,  2141,  2142,  2143,  2135,  3112,
    3113,  2146,  2147,  2148,  2149,  2136,  2137,     0,     0,     0,
    2138,  2139,  2140,   120,   121,   122,   123,   124,   125,   126,
     127,     0,   128,   129,   130,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   132,   133,     0,     0,   135,
     136,     0,   138,   139,   140,   141,   142,     0,   144,   145,
       0,   146,   147,   148,   149,   150,   151,     0,     0,   152,
     153,   154,   155,   156,   157,   158,     0,   159,   160,   161,
     162,   163,     0,     0,     0,   165,   166,   167,   168,   169,
     170,     0,   172,   173,   174,     0,   175,   176,   177,   178,
     179,   180,     0,     0,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,     0,
     197,     0,   198,   199,   200,   201,   202,   203,     0,     0,
     204,   205,   206,   207,     0,     0,   208,   209,   210,   211,
     212,   213,     0,   214,   215,   216,     0,   217,   218,   219,
       0,   220,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   230,   231,     0,   232,     0,     0,   233,   234,   235,
     236,     0,   237,     0,   238,     0,     0,     0,   241,   242,
     540,     0,   245,     0,   246,   247,     0,   248,   249,   250,
     251,     0,   252,   253,   254,   255,   256,   257,   258,     0,
     260,   261,   262,   263,     0,   264,   265,   266,   267,   268,
     269,   270,     0,   271,     0,   273,   274,   275,   276,   277,
     278,   279,   280,     0,   281,     0,   282,     0,     0,   285,
       0,   287,   288,   289,     0,   290,   291,   292,     0,     0,
     293,     0,   295,     0,     0,   297,     0,     0,   298,   299,
     300,   301,   302,   303,   304,   541,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,     0,   329,
     330,   331,   332,   333,   334,     0,   335,   336,     0,   338,
       0,   339,   340,   341,   342,   343,   344,     0,   345,   346,
       0,     0,   347,   348,   349,     0,     0,   350,   351,   352,
       0,   354,   355,     0,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,     0,     0,
       0,     0,   371,   372,   373,     0,   375,   376,   377,     0,
     378,   379,   380,     0,   381,   382,   383,   384,   385,     0,
     386,     0,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,     0,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,     0,   410,   411,     0,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,     0,     0,   430,
     431,   432,   433,   434,   435,   436,   437,   438,     0,     0,
     440,   441,   442,   443,     0,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   542,   458,
     459,     0,     0,   460,   461,     0,   462,     0,   464,     0,
     465,   466,   467,   468,   469,     0,   470,   471,   472,     0,
       0,   473,   474,   475,   476,   477,     0,   478,   479,   480,
     481,   482,   483,   484,   485,     0,     0,   486,   487,   488,
       0,     0,   489,   490,   491,   492,     0,   493,   494,   495,
     496,   497,   498,   499,   500,     0,   501,     0,   503,   504,
     505,   506,   507,   508,   509,     0,     0,   510,     0,     0,
     511,   512,   513,   514,   515,   516,   517,   518,   519,   520,
     521,   522,   523,   524,   525,   526,   527,   528,   529,   530,
     531,     0,     0,     0,  2141,  2142,  2143,     0,  2144,  2145,
    2146,  2147,  2148,  2149,  1681,     0,     0,  1682,     0,     0,
       0,  1683,  1684,  1685,  1686,     0,  1687,  1688,  1689,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1681,
       0,     0,  1682,  1690,     0,     0,  1683,  1684,  1685,  1686,
       0,  1687,  1688,  1689,  1692,     0,     0,     0,     0,     0,
       0,  1693,     0,     0,  1681,     0,     0,  1682,  1690,     0,
       0,  1683,  1684,  1685,  1686,     0,  1687,  1688,  1689,  1692,
       0,     0,     0,     0,     0,     0,  1693,     0,  1694,     0,
       0,     0,     0,  1690,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1692,     0,     0,  1681,     0,     0,
    1682,  1693,     0,  1694,  1683,  1684,  1685,  1686,     0,  1687,
    1688,  1689,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1681,     0,     0,  1682,  1690,     0,  1694,  1683,
    1684,  1685,  1686,     0,  1687,  1688,  1689,  1692,     0,     0,
       0,     0,     0,     0,  1693,     0,     0,  1681,     0,     0,
    1682,  1690,     0,     0,  1683,  1684,  1685,  1686,     0,  1687,
    1688,  1689,  1692,     0,     0,     0,     0,     0,     0,  1693,
       0,  1694,     0,     0,     0,     0,  1690,  1695,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1692,     0,     0,
       0,     0,     0,     0,  1693,  1696,  1694,     0,     0,     0,
    1697,     0,  1695,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1696,  1694,     0,  1698,  1699,  1697,     0,  1695,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1700,
       0,     0,     0,     0,     0,  1696,     0,     0,  1698,  1699,
    1697,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1700,     0,     0,     0,     0,     0,
    1695,     0,     0,  1698,  1699,     0,     0,     0,     0,     0,
       0,  1701,     0,     0,  1702,     0,     0,     0,  1696,  1700,
       0,     0,     0,  1697,     0,  1695,     0,     0,  1703,     0,
       0,  1704,     0,     0,     0,     0,  1701,     0,     0,  1702,
       0,     0,     0,  1696,     0,     0,  1698,  1699,  1697,     0,
    1695,     0,     0,  1703,     0,     0,  1704,     0,     0,     0,
       0,  1701,  1700,     0,  1702,     0,     0,     0,  1696,     0,
       0,  1698,  1699,  1697,     0,     0,     0,     0,  1703,     0,
       0,  1704,     0,     0,     0,     0,     0,  1700,     0,     0,
       0,     0,     0,     0,     0,     0,  1698,  1699,     0,     0,
       0,     0,     0,     0,  1701,     0,     0,  1702,     0,     0,
       0,     0,  1700,     0,     0,     0,     0,     0,     0,     0,
       0,  1703,     0,     0,  1704,     0,     0,     0,     0,  1701,
       0,     0,  1702,     0,     0,  1705,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1703,     0,     0,  1704,
       0,     0,     0,     0,  1701,     0,     0,  1702,     0,     0,
    1705,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1703,     0,     0,  1704,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1705,     0,     0,     0,  1681,
       0,     0,  1682,     0,     0,     0,  1683,  1684,  1685,  1686,
       0,  1687,  1688,  1689,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1690,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1705,  1692,
       0,     0,     0,     0,     0,     0,  1693,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1706,     0,     0,
    1707,  1708,  1709,  1705,  1710,  1711,  1712,  1713,  1714,  1715,
       0,     0,     0,  1694,  3281,     0,     0,     0,     0,     0,
       0,     0,  1706,     0,     0,  1707,  1708,  1709,  1705,  1710,
    1711,  1712,  1713,  1714,  1715,     0,     0,     0,     0,  3459,
       0,     0,     0,     0,     0,     0,     0,  1706,     0,     0,
    1707,  1708,  1709,     0,  1710,  1711,  1712,  1713,  1714,  1715,
       0,     0,     0,     0,  3483,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1706,     0,     0,  1707,  1708,  1709,     0,  1710,  1711,  1712,
    1713,  1714,  1715,     0,     0,     0,     0,  3595,     0,     0,
       0,     0,  1695,     0,     0,  1706,     0,     0,  1707,  1708,
    1709,     0,  1710,  1711,  1712,  1713,  1714,  1715,     0,     0,
    1696,     0,  3662,     0,     0,  1697,     0,     0,     0,     0,
    1706,     0,     0,  1707,  1708,  1709,     0,  1710,  1711,  1712,
    1713,  1714,  1715,  1681,     0,     0,  1682,  3691,  1698,  1699,
    1683,  1684,  1685,  1686,     0,  1687,  1688,  1689,     0,     0,
       0,     0,     0,     0,  1700,     0,     0,     0,     0,     0,
       0,     0,  1690,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1692,  1681,     0,     0,  1682,     0,     0,
    1693,  1683,  1684,  1685,  1686,     0,  1687,  1688,  1689,     0,
       0,     0,     0,     0,     0,     0,  1701,     0,     0,  1702,
       0,     0,     0,  1690,     0,     0,     0,  1694,     0,     0,
       0,     0,     0,  1703,  1692,     0,  1704,     0,     0,     0,
       0,  1693,     0,  1424,     0,   844,  1681,     0,     0,  1682,
       0,     0,     0,  1683,  1684,  1685,  1686,     0,  1687,  1688,
    1689,     0,     0,     0,     0,     0,     0,     0,  1694,     0,
       0,     0,     0,     0,     0,  1690,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1692,     0,     0,     0,
       0,     0,     0,  1693,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1425,  1426,     0,     0,     0,     0,     0,     0,     0,     0,
    1694,     0,     0,     0,     0,     0,  1695,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1705,     0,     0,     0,  1696,     0,     0,     0,     0,  1697,
       0,  1427,  1428,     0,     0,  1429,  1430,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1695,     0,     0,
       0,     0,  1698,  1699,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1696,     0,     0,  1700,     0,
    1697,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1698,  1699,     0,     0,     0,     0,  1695,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1700,
    1701,     0,     0,  1702,  1431,  1432,     0,  1696,     0,     0,
       0,     0,  1697,     0,     0,     0,     0,  1703,     0,     0,
    1704,     0,  1706,     0,     0,  1707,  1708,  1709,     0,  1710,
    1711,  1712,  1713,  1714,  1715,  1698,  1699,  1876,     0,     0,
       0,  1701,     0,     0,  1702,     0,     0,     0,     0,     0,
       0,  1700,     0,     0,     0,     0,     0,     0,  1703,     0,
       0,  1704,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1433,  1434,  1435,  1436,  1437,  1438,  1439,  1440,     0,
       0,     0,  1441,  1442,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1701,     0,     0,  1702,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1703,     0,     0,  1704,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1705,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1443,  1444,     0,  1705,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1445,  1446,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1705,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1706,     0,     0,  1707,
    1708,  1709,     0,  1710,  1711,  1712,  1713,  1714,  1715,     0,
       0,  2968,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1706,     0,     0,
    1707,  1708,  1709,     0,  1710,  1711,  1712,  1713,  1714,  1715,
       0,     0,  3449,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1447,  1448,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   570,     0,  1449,  1450,  1706,
       0,     0,  1707,  1708,  1709,     0,  1710,  1711,  1712,  1713,
    1714,  1715,     0,     0,  3646,   120,   121,   122,   123,   124,
     125,   126,   127,   571,   128,   129,   130,   572,   573,   574,
     575,   576,   577,   578,   579,   580,   581,   132,   133,   582,
     583,   135,   136,   584,   138,   139,   140,   585,   586,   587,
     588,   589,   590,   146,   147,   148,   149,   150,   151,   591,
     592,   152,   153,   154,   155,   593,   594,   158,   595,   159,
     160,   161,   162,   596,   597,   598,   599,   600,   166,   167,
     168,   169,   170,   601,   172,   173,   174,   602,   175,   176,
     177,   178,   179,   180,   603,   604,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   606,   193,   194,   607,
     196,   608,   197,   609,   198,   199,   200,   201,   202,   203,
     610,   611,   204,   205,   206,   207,   612,   613,   208,   209,
     210,   211,   212,   213,   614,   214,   215,   216,   615,   217,
     218,   219,   616,   220,   221,   222,   223,   617,   225,   226,
     227,   228,   229,   230,   618,   619,   232,   620,   621,   233,
     234,   622,   236,   623,   237,   624,   238,   625,   626,   627,
     241,   242,   628,   629,   245,   630,   246,   247,   631,   632,
     633,   250,   251,   634,   252,   253,   254,   255,   256,   257,
     258,   635,   260,   261,   262,   263,   636,   264,   265,   266,
     267,   268,   269,   270,   637,   271,   638,   639,   274,   275,
     276,   277,   278,   640,   641,   642,   643,   644,   282,   645,
     646,   285,   647,   287,   288,   289,   648,   290,   291,   292,
     649,   650,   293,   651,   295,   652,   653,   297,   654,   655,
     298,   299,   300,   301,   302,   303,   304,   656,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   657,
     658,   659,   330,   331,   332,   333,   660,   661,   335,   336,
     662,   338,   663,   664,   340,   665,   342,   343,   344,   666,
     345,   346,   667,   668,   347,   348,   349,   669,   670,   350,
     351,   671,   672,   354,   355,   673,   674,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     675,   676,   677,   678,   371,   372,   679,   680,   375,   376,
     681,   682,   378,   379,   380,   683,   381,   382,   383,   384,
     385,   684,   386,   685,   387,   388,   389,   390,   391,   686,
     393,   394,   395,   396,   687,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   688,   410,
     411,   689,   413,   414,   415,   690,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   691,
     692,   430,   431,   432,   433,   434,   435,   693,   437,   438,
     694,   695,   440,   441,   696,   443,   697,   444,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     698,   458,   699,   700,   701,   460,   461,   702,   462,   703,
     464,   704,   465,   466,   467,   468,   469,   705,   470,   706,
     707,   708,   709,   473,   474,   710,   476,   711,   712,   478,
     479,   713,   481,   482,   483,   484,   485,   714,   715,   486,
     487,   488,   716,   717,   489,   490,   491,   492,   718,   493,
     494,   495,   496,   497,   719,   720,   500,   721,   501,   722,
     503,   504,   505,   506,   507,   508,   509,   723,   724,   510,
     725,   726,   511,   512,   513,   514,   515,   516,   727,   728,
     729,   730,   731,   732,   733,   734,   735,   736,   737,   528,
     529,   530,   531,   539,     0,     0,     0,     0,     0,     0,
       0,     0,  2174,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   120,   121,   122,   123,   124,   125,   126,
     127,     0,   128,   129,   130,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   132,   133,     0,     0,   135,
     136,     0,   138,   139,   140,   141,   142,     0,   144,   145,
       0,   146,   147,   148,   149,   150,   151,     0,     0,   152,
     153,   154,   155,   156,   157,   158,     0,   159,   160,   161,
     162,   163,     0,     0,     0,   165,   166,   167,   168,   169,
     170,     0,   172,   173,   174,     0,   175,   176,   177,   178,
     179,   180,     0,     0,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,     0,
     197,     0,   198,   199,   200,   201,   202,   203,     0,     0,
     204,   205,   206,   207,     0,     0,   208,   209,   210,   211,
     212,   213,     0,   214,   215,   216,     0,   217,   218,   219,
       0,   220,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   230,   231,     0,   232,     0,     0,   233,   234,   235,
     236,     0,   237,     0,   238,     0,     0,     0,   241,   242,
     540,     0,   245,     0,   246,   247,     0,   248,   249,   250,
     251,     0,   252,   253,   254,   255,   256,   257,   258,     0,
     260,   261,   262,   263,     0,   264,   265,   266,   267,   268,
     269,   270,     0,   271,     0,   273,   274,   275,   276,   277,
     278,   279,   280,     0,   281,     0,   282,     0,     0,   285,
       0,   287,   288,   289,     0,   290,   291,   292,     0,     0,
     293,     0,   295,     0,     0,   297,     0,     0,   298,   299,
     300,   301,   302,   303,   304,   541,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,     0,   329,
     330,   331,   332,   333,   334,     0,   335,   336,     0,   338,
       0,   339,   340,   341,   342,   343,   344,     0,   345,   346,
       0,     0,   347,   348,   349,     0,     0,   350,   351,   352,
       0,   354,   355,     0,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,     0,     0,
       0,     0,   371,   372,   373,     0,   375,   376,   377,     0,
     378,   379,   380,     0,   381,   382,   383,   384,   385,     0,
     386,     0,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,     0,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,     0,   410,   411,     0,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,     0,     0,   430,
     431,   432,   433,   434,   435,   436,   437,   438,     0,     0,
     440,   441,   442,   443,     0,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   542,   458,
     459,     0,     0,   460,   461,     0,   462,     0,   464,     0,
     465,   466,   467,   468,   469,     0,   470,   471,   472,     0,
       0,   473,   474,   475,   476,   477,     0,   478,   479,   480,
     481,   482,   483,   484,   485,     0,     0,   486,   487,   488,
       0,     0,   489,   490,   491,   492,     0,   493,   494,   495,
     496,   497,   498,   499,   500,     0,   501,     0,   503,   504,
     505,   506,   507,   508,   509,     0,     0,   510,     0,     0,
     511,   512,   513,   514,   515,   516,   517,   518,   519,   520,
     521,   522,   523,   524,   525,   526,   527,   528,   529,   530,
     531,   539,     0,     0,     0,     0,     0,     0,     0,     0,
    2857,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   120,   121,   122,   123,   124,   125,   126,   127,     0,
     128,   129,   130,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   132,   133,     0,     0,   135,   136,     0,
     138,   139,   140,   141,   142,     0,   144,   145,     0,   146,
     147,   148,   149,   150,   151,     0,     0,   152,   153,   154,
     155,   156,   157,   158,     0,   159,   160,   161,   162,   163,
       0,     0,     0,   165,   166,   167,   168,   169,   170,     0,
     172,   173,   174,     0,   175,   176,   177,   178,   179,   180,
       0,     0,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,     0,   197,     0,
     198,   199,   200,   201,   202,   203,     0,     0,   204,   205,
     206,   207,     0,     0,   208,   209,   210,   211,   212,   213,
       0,   214,   215,   216,     0,   217,   218,   219,     0,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
     231,     0,   232,     0,     0,   233,   234,   235,   236,     0,
     237,     0,   238,     0,     0,     0,   241,   242,   540,     0,
     245,     0,   246,   247,     0,   248,   249,   250,   251,     0,
     252,   253,   254,   255,   256,   257,   258,     0,   260,   261,
     262,   263,     0,   264,   265,   266,   267,   268,   269,   270,
       0,   271,     0,   273,   274,   275,   276,   277,   278,   279,
     280,     0,   281,     0,   282,     0,     0,   285,     0,   287,
     288,   289,     0,   290,   291,   292,     0,     0,   293,     0,
     295,     0,     0,   297,     0,     0,   298,   299,   300,   301,
     302,   303,   304,   541,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,     0,   329,   330,   331,
     332,   333,   334,     0,   335,   336,     0,   338,     0,   339,
     340,   341,   342,   343,   344,     0,   345,   346,     0,     0,
     347,   348,   349,     0,     0,   350,   351,   352,     0,   354,
     355,     0,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,     0,     0,     0,     0,
     371,   372,   373,     0,   375,   376,   377,     0,   378,   379,
     380,     0,   381,   382,   383,   384,   385,     0,   386,     0,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
       0,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,     0,   410,   411,     0,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,     0,     0,   430,   431,   432,
     433,   434,   435,   436,   437,   438,     0,     0,   440,   441,
     442,   443,     0,   444,   445,   446,   447,   448,   449,   450,
     451,   452,   453,   454,   455,   456,   542,   458,   459,     0,
       0,   460,   461,     0,   462,     0,   464,     0,   465,   466,
     467,   468,   469,     0,   470,   471,   472,     0,     0,   473,
     474,   475,   476,   477,     0,   478,   479,   480,   481,   482,
     483,   484,   485,     0,     0,   486,   487,   488,     0,     0,
     489,   490,   491,   492,     0,   493,   494,   495,   496,   497,
     498,   499,   500,     0,   501,     0,   503,   504,   505,   506,
     507,   508,   509,     0,     0,   510,     0,     0,   511,   512,
     513,   514,   515,   516,   517,   518,   519,   520,   521,   522,
     523,   524,   525,   526,   527,   528,   529,   530,   531,  1004,
    1402,   844,     0,     0,     0,  1091,     0,     0,  2860,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   120,
     121,   122,   123,   124,   125,   126,   127,     0,   128,   129,
     130,     0,     0,     0,   575,     0,     0,     0,     0,     0,
     581,   132,   133,     0,   583,   135,   136,   584,   138,   139,
     140,   585,   586,   587,   588,   589,     0,   146,   147,   148,
     149,   150,   151,     0,     0,   152,   153,   154,   155,   593,
     594,   158,     0,   159,   160,   161,   162,   596,     0,   598,
       0,   600,   166,   167,   168,   169,   170,   601,   172,   173,
     174,     0,   175,   176,   177,   178,   179,   180,     0,   604,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     606,   193,   194,   607,   196,     0,   197,     0,   198,   199,
     200,   201,   202,   203,     0,     0,   204,   205,   206,   207,
       0,     0,   208,   209,   210,   211,   212,   213,     0,   214,
     215,   216,     0,   217,   218,   219,     0,   220,   221,   222,
     223,   617,   225,   226,   227,   228,   229,   230,   618,  1403,
     232,     0,     0,   233,   234,   622,   236,     0,   237,     0,
     238,   625,     0,   627,   241,   242,   628,   629,   245,     0,
     246,   247,     0,   632,   633,   250,   251,     0,   252,   253,
     254,   255,   256,   257,   258,   635,   260,   261,   262,   263,
       0,   264,   265,   266,   267,   268,   269,   270,     0,   271,
     638,   639,   274,   275,   276,   277,   278,   640,   641,     0,
     643,     0,   282,   645,   646,   285,   647,   287,   288,   289,
       0,   290,   291,   292,     0,     0,   293,   651,   295,   652,
       0,   297,     0,     0,   298,   299,   300,   301,   302,   303,
     304,   656,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   657,   658,   659,   330,   331,   332,   333,
     660,     0,   335,   336,   662,   338,     0,   664,   340,   665,
     342,   343,   344,     0,   345,   346,  1404,     0,   347,   348,
     349,     0,     0,   350,   351,   671,   672,   354,   355,   673,
     674,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,     0,     0,     0,     0,   371,   372,
     679,   680,   375,   376,   681,     0,   378,   379,   380,     0,
     381,   382,   383,   384,   385,     0,   386,     0,   387,   388,
     389,   390,   391,   686,   393,   394,   395,   396,     0,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,     0,   410,   411,   689,   413,   414,   415,   690,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,     0,   692,   430,   431,   432,   433,   434,
     435,   693,   437,   438,     0,   695,   440,   441,   696,   443,
       0,   444,   445,   446,   447,   448,   449,   450,   451,   452,
     453,   454,   455,   456,   698,   458,   699,     0,     0,   460,
     461,     0,   462,   703,   464,     0,   465,   466,   467,   468,
     469,     0,   470,   706,   707,     0,     0,   473,   474,   710,
     476,   711,  1405,   478,   479,   713,   481,   482,   483,   484,
     485,     0,     0,   486,   487,   488,   716,     0,   489,   490,
     491,   492,     0,   493,   494,   495,   496,   497,   719,   720,
     500,     0,   501,   722,   503,   504,   505,   506,   507,   508,
     509,     0,     0,   510,     0,     0,   511,   512,   513,   514,
     515,   516,   727,   728,   729,   730,   731,   732,   733,   734,
     735,   736,   737,   528,   529,   530,   531,     0,     0,  1681,
       0,     0,  1682,     0,  1406,  1407,  1683,  1684,  1685,  1686,
       0,  1687,  1688,  1689,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1690,     0,
       0,     0,     0,     0,  2277,  1681,     0,     0,  1682,  1692,
       0,     0,  1683,  1684,  1685,  1686,  1693,  1687,  1688,  1689,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1690,     0,     0,     0,     0,     0,
       0,     0,     0,  1694,     0,  1692,     0,     0,  1681,     0,
       0,  1682,  1693,     0,     0,  1683,  1684,  1685,  1686,     0,
    1687,  1688,  1689,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1690,     0,  1694,
       0,     0,     0,     0,     0,     0,     0,     0,  1692,  2278,
       0,     0,     0,     0,     0,  1693,  1681,     0,     0,  1682,
       0,     0,     0,  1683,  1684,  1685,  1686,     0,  1687,  1688,
    1689,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1694,     0,     0,  1690,     0,     0,     0,     0,
    1983,     0,     0,     0,     0,     0,  1692,     0,     0,     0,
       0,     0,  1695,  1693,     0,  1681,     0,     0,  1682,     0,
       0,     0,  1683,  1684,  1685,  1686,     0,  1687,  1688,  1689,
    1696,     0,     0,     0,     0,  1697,     0,     0,  2020,     0,
    1694,     0,     0,  2021,  1690,     0,     0,     0,  1695,     0,
       0,     0,     0,     0,     0,  1692,     0,     0,  1698,  1699,
       0,     0,  1693,     0,     0,     0,  1696,     0,     0,     0,
       0,  1697,     0,     0,  1700,     0,     0,     0,     0,     0,
    3769,     0,     0,     0,     0,     0,     0,     0,     0,  1694,
       0,  1695,     0,     0,  1698,  1699,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1696,
    1700,     0,     0,     0,  1697,     0,  1701,     0,     0,  1702,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1703,     0,     0,  1704,  1698,  1699,  1695,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1701,  1700,     0,  1702,     0,  1696,     0,     0,
       0,     0,  1697,     0,     0,     0,     0,     0,     0,  1703,
       0,     0,  1704,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1698,  1699,     0,  1695,     0,
       0,     0,     0,     0,     0,  1701,     0,     0,  1702,     0,
       0,  1700,     0,     0,     0,     0,  1696,     0,     0,     0,
       0,  1697,  1703,     0,     0,  1704,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1698,  1699,     0,     0,     0,     0,
    1705,     0,     0,  1701,     0,     0,  1702,  3770,     0,     0,
    1700,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1703,     0,     0,  1704,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1681,     0,  1705,  1682,     0,     0,
       0,  1683,  1684,  1685,  1686,     0,  1687,  1688,  1689,     0,
       0,     0,  1701,     0,     0,  1702,     0,     0,     0,     0,
       0,     0,     0,  1690,     0,     0,     0,  2281,  2026,  1703,
       0,     0,  1704,     0,  1692,     0,     0,     0,     0,  1705,
       0,  1693,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1990,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1694,     0,
       0,     0,  1706,     0,     0,  1707,  1708,  1709,     0,  1710,
    1711,  1712,  1713,  1714,  1715,     0,     0,  1705,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1706,     0,
       0,  1707,  1708,  1709,     0,  1710,  1711,  1712,  1713,  1714,
    1715,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1705,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1706,     0,     0,  1707,  1708,  1709,     0,  1710,  1711,
    1712,  1713,  1714,  1715,     0,  1681,     0,  1695,  1682,     0,
       0,     0,  1683,  1684,  1685,  1686,     0,  1687,  1688,  1689,
       0,     0,     0,     0,     0,  1696,     0,     0,     0,     0,
    1697,     0,     0,     0,  1690,     0,     0,     0,     0,  1706,
       0,     0,  1707,  1708,  1709,  1692,  1710,  1711,  1712,  1713,
    1714,  1715,  1693,  1698,  1699,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1700,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1694,
       0,     0,     0,     0,     0,     0,     0,     0,  1706,     0,
       0,  1707,  1708,  1709,     0,  1710,  1711,  1712,  1713,  1714,
    1715,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1681,  1701,     0,  1682,  1702,     0,     0,  1683,  1684,  1685,
    1686,     0,  1687,  1688,  1689,     0,     0,     0,  1703,     0,
       0,  1704,     0,     0,     0,     0,     0,     0,     0,  1690,
       0,     0,     0,     0,  2033,     0,  1681,     0,     0,  1682,
    1692,     0,     0,  1683,  1684,  1685,  1686,  1693,  1687,  1688,
    1689,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  2031,     0,  1690,     0,     0,  1695,     0,
       0,     0,     0,     0,  1694,     0,  1692,     0,     0,     0,
       0,     0,     0,  1693,     0,     0,  1696,  1681,     0,     0,
    1682,  1697,     0,     0,  1683,  1684,  1685,  1686,  2610,  1687,
    1688,  1689,     0,     0,     0,     0,     0,     0,     0,     0,
    1694,     0,     0,     0,  1698,  1699,  1690,     0,     0,     0,
       0,     0,     0,     0,     0,  1705,     0,  1692,     0,     0,
    1700,     0,     0,     0,  1693,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1681,     0,     0,  1682,     0,     0,     0,  1683,  1684,  1685,
    1686,  1694,  1687,  1688,  1689,     0,     0,     0,     0,     0,
       0,     0,  1701,  1695,     0,  1702,     0,     0,     0,  1690,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1703,
    1692,  1696,  1704,     0,     0,     0,  1697,  1693,     0,  2166,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1695,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1698,
    1699,     0,     0,     0,  1694,     0,     0,  1696,     0,     0,
       0,     0,  1697,     0,     0,  1700,     0,  1706,     0,     0,
    1707,  1708,  1709,     0,  1710,  1711,  1712,  1713,  1714,  1715,
       0,     0,     0,     0,     0,  1698,  1699,     0,     0,     0,
    1695,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1700,     0,     0,     0,     0,     0,  1701,  1696,     0,
    1702,     0,     0,  1697,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1703,     0,  1705,  1704,     0,     0,
       0,     0,     0,     0,     0,     0,  1698,  1699,     0,     0,
       0,     0,  1681,  1701,     0,  1682,  1702,     0,     0,  1683,
    1684,     0,  1700,  1695,  1687,  1688,  1689,     0,     0,     0,
    1703,     0,     0,  1704,     0,     0,     0,     0,     0,     0,
       0,  1696,     0,     0,     0,     0,  1697,     0,     0,     0,
       0,     0,  1692,     0,     0,     0,     0,     0,     0,  1693,
       0,     0,     0,     0,  1701,     0,     0,  1702,     0,  1698,
    1699,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1703,     0,     0,  1704,  1700,  1694,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1705,     0,     0,     0,     0,     0,     0,  1706,     0,
       0,  1707,  1708,  1709,     0,  1710,  1711,  1712,  1713,  1714,
    1715,     0,     0,     0,     0,     0,  1681,  1701,     0,  1682,
    1702,     0,     0,  1683,  1684,  1685,  1686,  1705,  1687,  1688,
    1689,     0,     0,     0,  1703,     0,     0,  1704,     0,     0,
       0,     0,     0,     0,     0,  1690,     0,     0,     0,     0,
    2942,     0,  1681,     0,     0,  1682,  1692,     0,     0,  1683,
    1684,  1685,  1686,  1693,  1687,  1688,  1689,     0,     0,     0,
       0,     0,     0,     0,     0,  1695,     0,     0,  1705,     0,
       0,  1690,     0,     0,     0,     0,     0,     0,     0,     0,
    1694,     0,  1692,  1696,     0,     0,     0,     0,  1697,  1693,
       0,     0,     0,  1706,     0,     0,  1707,  1708,  1709,     0,
    1710,  1711,  1712,  1713,  1714,  1715,     0,     0,     0,     0,
       0,  1698,  1699,     0,     0,     0,  1694,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1700,     0,  1706,
       0,  1705,  1707,  1708,  1709,     0,  1710,  1711,  1712,  1713,
    1714,  1715,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2926,     0,  1701,
       0,     0,  1702,     0,     0,     0,     0,     0,     0,  1695,
    1706,     0,     0,  1707,  1708,  1709,  1703,  1710,  1711,  1712,
    1713,  1714,  1715,     0,     0,     0,     0,  1696,     0,     0,
       0,     0,  1697,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1695,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1698,  1699,     0,     0,     0,
       0,     0,     0,  1696,     0,     0,     0,     0,  1697,     0,
       0,  1700,     0,  1706,     0,     0,  1707,  1708,  1709,     0,
    1710,  1711,  1712,  1713,  1714,  1715,     0,     0,     0,     0,
       0,  1698,  1699,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1700,     0,     0,
       0,     0,     0,  1701,     0,     0,  1702,     0,     0,     0,
       0,     0,     0,  1705,     0,     0,     0,     0,  1681,     0,
    1703,  1682,     0,  1704,     0,  1683,  1684,  1685,  1686,     0,
    1687,  1688,  1689,     0,     0,     0,     0,     0,     0,  1701,
       0,     0,  1702,     0,     0,     0,     0,  1690,     0,     0,
       0,     0,     0,     0,     0,     0,  1703,     0,  1692,  1704,
       0,     0,     0,     0,     0,  1693,     0,     0,     0,     0,
       0,     0,  1681,     0,     0,  1682,     0,     0,     0,  1683,
    1684,  1685,  1686,     0,  1687,  1688,  1689,     0,     0,     0,
       0,     0,  1694,     0,     0,     0,     0,     0,     0,     0,
       0,  1690,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1692,     0,     0,     0,     0,     0,     0,  1693,
       0,     0,     0,     0,     0,  1706,     0,  1705,  1707,  1708,
    1709,     0,  1710,  1711,  1712,  1713,  1714,  1715,     0,     0,
       0,     0,     0,     0,     0,     0,  1694,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1705,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1695,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1696,
       0,     0,     0,     0,  1697,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1889,  1699,  1706,
       0,     0,  1707,  1708,  1709,  1695,  1710,  1711,  1712,  1713,
    1714,  1715,     0,  1700,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1696,     0,     0,     0,     0,  1697,     0,
       0,     0,     0,     0,     0,  1706,     0,     0,  1707,  1708,
    1709,     0,  1710,  1711,  1712,  1713,  1714,  1715,     0,     0,
       0,  1698,  1699,     0,     0,  1701,     0,     0,  1702,     0,
       0,     0,     0,     0,     0,     0,     0,  1700,     0,     0,
       0,     0,  1703,     0,     0,  1704,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1701,
       0,     0,  1702,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1703,     0,     0,  1704,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1705,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1705,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1706,     0,     0,  1707,  1708,  1709,     0,  1710,  1711,
    1712,  1713,  1714,  1715,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   570,     0,
    2190,     0,     0,     0,     0,  1706,     0,     0,  1707,  1708,
    1709,     0,  1710,  1711,  1712,  1713,  2298,  1715,   120,   121,
     122,   123,   124,   125,   126,   127,   571,   128,   129,   130,
     572,   573,   574,   575,   576,   577,   578,   579,   580,   581,
     132,   133,   582,   583,   135,   136,   584,   138,   139,   140,
     585,   586,   587,   588,   589,   590,   146,   147,   148,   149,
     150,   151,   591,   592,   152,   153,   154,   155,   593,   594,
     158,   595,   159,   160,   161,   162,   596,   597,   598,   599,
     600,   166,   167,   168,   169,   170,   601,   172,   173,   174,
     602,   175,   176,   177,   178,   179,   180,   603,   604,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   606,
     193,   194,   607,   196,   608,   197,   609,   198,   199,   200,
     201,   202,   203,   610,   611,   204,   205,   206,   207,   612,
     613,   208,   209,   210,   211,   212,   213,   614,   214,   215,
     216,   615,   217,   218,   219,   616,   220,   221,   222,   223,
     617,   225,   226,   227,   228,   229,   230,   618,   619,   232,
     620,   621,   233,   234,   622,   236,   623,   237,   624,   238,
     625,   626,   627,   241,   242,   628,   629,   245,   630,   246,
     247,   631,   632,   633,   250,   251,   634,   252,   253,   254,
     255,   256,   257,   258,   635,   260,   261,   262,   263,   636,
     264,   265,   266,   267,   268,   269,   270,   637,   271,   638,
     639,   274,   275,   276,   277,   278,   640,   641,   642,   643,
     644,   282,   645,   646,   285,   647,   287,   288,   289,   648,
     290,   291,   292,   649,   650,   293,   651,   295,   652,   653,
     297,   654,   655,   298,   299,   300,   301,   302,   303,   304,
     656,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   657,   658,   659,   330,   331,   332,   333,   660,
     661,   335,   336,   662,   338,   663,   664,   340,   665,   342,
     343,   344,   666,   345,   346,   667,   668,   347,   348,   349,
     669,   670,   350,   351,   671,   672,   354,   355,   673,   674,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   675,   676,   677,   678,   371,   372,   679,
     680,   375,   376,   681,   682,   378,   379,   380,   683,   381,
     382,   383,   384,   385,   684,   386,   685,   387,   388,   389,
     390,   391,   686,   393,   394,   395,   396,   687,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   688,   410,   411,   689,   413,   414,   415,   690,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   691,   692,   430,   431,   432,   433,   434,   435,
     693,   437,   438,   694,   695,   440,   441,   696,   443,   697,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   698,   458,   699,   700,   701,   460,   461,
     702,   462,   703,   464,   704,   465,   466,   467,   468,   469,
     705,   470,   706,   707,   708,   709,   473,   474,   710,   476,
     711,   712,   478,   479,   713,   481,   482,   483,   484,   485,
     714,   715,   486,   487,   488,   716,   717,   489,   490,   491,
     492,   718,   493,   494,   495,   496,   497,   719,   720,   500,
     721,   501,   722,   503,   504,   505,   506,   507,   508,   509,
     723,   724,   510,   725,   726,   511,   512,   513,   514,   515,
     516,   727,   728,   729,   730,   731,   732,   733,   734,   735,
     736,   737,   528,   529,   530,   531,   570,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   120,   121,   122,   123,
     124,   125,   126,   127,   571,   128,   129,   130,   572,   573,
     574,   575,   576,   577,   578,   579,   580,   581,   132,   133,
     582,   583,   135,   136,   584,   138,   139,   140,   585,   586,
     587,   588,   589,   590,   146,   147,   148,   149,   150,   151,
     591,   592,   152,   153,   154,   155,   593,   594,   158,   595,
     159,   160,   161,   162,   596,   597,   598,   599,   600,   166,
     167,   168,   169,   170,   601,   172,   173,   174,   602,   175,
     176,   177,   178,   179,   180,   603,   604,   182,   183,   184,
     185,   186,   187,   605,   189,   190,   191,   606,   193,   194,
     607,   196,   608,   197,   609,   198,   199,   200,   201,   202,
     203,   610,   611,   204,   205,   206,   207,   612,   613,   208,
     209,   210,   211,   212,   213,   614,   214,   215,   216,   615,
     217,   218,   219,   616,   220,   221,   222,   223,   617,   225,
     226,   227,   228,   229,   230,   618,   619,   232,   620,   621,
     233,   234,   622,   236,   623,   237,   624,   238,   625,   626,
     627,   241,   242,   628,   629,   245,   630,   246,   247,   631,
     632,   633,   250,   251,   634,   252,   253,   254,   255,   256,
     257,   258,   635,   260,   261,   262,   263,   636,   264,   265,
     266,   267,   268,   269,   270,   637,   271,   638,   639,   274,
     275,   276,   277,   278,   640,   641,   642,   643,   644,   282,
     645,   646,   285,   647,   287,   288,   289,   648,   290,   291,
     292,   649,   650,   293,   651,   295,   652,   653,   297,   654,
     655,   298,   299,   300,   301,   302,   303,   304,   656,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     657,   658,   659,   330,   331,   332,   333,   660,   661,   335,
     336,   662,   338,   663,   664,   340,   665,   342,   343,   344,
     666,   345,   346,   667,   668,   347,   348,   349,   669,   670,
     350,   351,   671,   672,   354,   355,   673,   674,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   675,   676,   677,   678,   371,   372,   679,   680,   375,
     376,   681,   682,   378,   379,   380,   683,   381,   382,   383,
     384,   385,   684,   386,   685,   387,   388,   389,   390,   391,
     686,   393,   394,   395,   396,   687,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   688,
     410,   411,   689,   413,   414,   415,   690,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     691,   692,   430,   431,   432,   433,   434,   435,   693,   437,
     438,   694,   695,   440,   441,   696,   443,   697,   444,   445,
     446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
     456,   698,   458,   699,   700,   701,   460,   461,   702,   462,
     703,   464,   704,   465,   466,   467,   468,   469,   705,   470,
     706,   707,   708,   709,   473,   474,   710,   476,   711,   712,
     478,   479,   713,   481,   482,   483,   484,   485,   714,   715,
     486,   487,   488,   716,   717,   489,   490,   491,   492,   718,
     493,   494,   495,   496,   497,   719,   720,   500,   721,   501,
     722,   503,   504,   505,   506,   507,   508,   509,   723,   724,
     510,   725,   726,   511,   512,   513,   514,   515,   516,   727,
     728,   729,   730,   731,   732,   733,   734,   735,   736,   737,
     528,   529,   530,   531,   570,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   120,   121,   122,   123,   124,   125,
     126,   127,   571,   128,   129,   130,   572,   573,   574,   575,
     576,   577,   578,   579,   580,   581,   132,   133,   582,   583,
     135,   136,   584,   138,   139,   140,   585,   586,   587,   588,
     589,   590,   146,   147,   148,   149,   150,   151,   591,   592,
     152,   153,   154,   155,   593,   594,   158,   595,   159,   160,
     161,   162,   596,   597,   598,   599,   600,   166,   167,   168,
     169,   170,   601,   172,   173,   174,   602,   175,   176,   177,
     178,   179,   180,   603,   604,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   606,   193,   194,   607,   196,
     608,   197,   609,   198,   199,   200,   201,   202,   203,   610,
     611,   204,   205,   206,   207,   612,   613,   208,   209,   210,
     211,   212,   213,   614,   214,   215,   216,   615,   217,   218,
     219,   616,   220,   221,   222,   223,   617,   225,   226,   227,
     228,   229,   230,   618,   619,   232,   620,   621,   233,   234,
     622,   236,   623,   237,   624,   238,   625,   626,   627,   241,
     242,   628,   629,   245,   630,   246,   247,   631,   632,   633,
     250,   251,   634,   252,   253,   254,   255,   256,   980,   258,
     635,   260,   261,   262,   263,   636,   264,   265,   266,   267,
     268,   269,   270,   637,   271,   638,   639,   274,   275,   276,
     277,   278,   640,   641,   642,   643,   644,   282,   645,   646,
     285,   647,   287,   288,   289,   648,   290,   291,   292,   649,
     650,   293,   651,   295,   652,   653,   297,   654,   655,   298,
     299,   300,   301,   302,   303,   304,   656,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   657,   658,
     659,   330,   331,   332,   333,   660,   661,   335,   336,   662,
     338,   663,   664,   340,   665,   342,   343,   344,   666,   345,
     346,   667,   668,   347,   348,   349,   669,   670,   350,   351,
     671,   672,   354,   355,   673,   674,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   675,
     676,   677,   678,   371,   372,   679,   680,   375,   376,   681,
     682,   378,   379,   380,   683,   381,   382,   383,   384,   385,
     684,   386,   685,   387,   388,   389,   390,   391,   686,   393,
     394,   395,   396,   687,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   688,   410,   411,
     689,   413,   414,   415,   690,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   691,   692,
     430,   431,   432,   433,   434,   435,   693,   437,   438,   694,
     695,   440,   441,   696,   443,   697,   444,   445,   446,   447,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   698,
     458,   699,   700,   701,   460,   461,   702,   462,   703,   464,
     704,   465,   466,   467,   468,   469,   705,   470,   706,   707,
     708,   709,   473,   474,   710,   476,   711,   712,   478,   479,
     713,   481,   482,   483,   484,   485,   714,   715,   486,   487,
     488,   716,   717,   489,   490,   491,   492,   718,   493,   494,
     495,   496,   497,   719,   720,   500,   721,   501,   722,   503,
     504,   505,   506,   507,   508,   509,   723,   724,   510,   725,
     726,   511,   512,   513,   514,   515,   516,   727,   728,   729,
     730,   731,   732,   733,   734,   735,   736,   737,   528,   529,
     530,   531,   570,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   120,   121,   122,   123,   124,   125,   126,   127,
     571,   128,   129,   130,   572,   573,   574,   575,   576,   577,
     578,   579,   580,   581,   132,   133,   582,   583,   135,   136,
     584,   138,   139,   140,   585,   586,   587,   588,   589,   590,
     146,   147,   148,   149,   150,   151,   591,   592,   152,   153,
     154,   155,   593,   594,   158,   595,   159,   160,   161,   162,
     596,   597,   598,   599,   600,   166,   167,   168,   169,   170,
     601,   172,   173,   174,   602,   175,   176,   177,   178,   179,
     180,   603,   604,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   606,   193,   194,   607,   196,   608,   197,
     609,   198,   199,   200,   201,   202,   203,   610,   611,   204,
     205,   206,   207,   612,   613,   208,   209,   210,   211,   212,
     213,   614,   214,   215,   216,   615,   217,   218,   219,   616,
     220,   221,   222,   223,   617,   225,   226,   227,   228,   229,
     230,   618,   619,   232,   620,   621,   233,   234,   622,   236,
     623,   237,   624,   238,   625,   626,   627,   241,   242,   628,
     629,   245,   630,   246,   247,   631,   632,   633,   250,   251,
     634,   252,   253,   254,   255,   256,   257,   258,   635,   260,
     261,   262,   263,   636,   264,   265,   266,   267,   268,   269,
     270,   637,   271,   638,   639,   274,   275,   276,   277,   278,
     640,   641,   642,   643,   644,   282,   645,   646,   285,   647,
     287,   288,   289,   648,   290,   291,   292,   649,   650,   293,
     651,   295,   652,   653,   297,   654,   655,   298,   299,   300,
     301,   302,   303,   304,   656,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   657,   658,   659,   330,
     331,   332,   333,   660,   661,   335,   336,   662,   338,   663,
     664,   340,   665,   342,   343,   344,   666,   345,   346,   667,
     668,   347,   348,   349,   669,   670,   350,   351,   671,   672,
     354,   355,   673,   674,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   675,   676,   677,
     678,   371,   372,   679,   680,   375,   376,   681,   682,   378,
     379,   380,   683,   381,   382,   383,   384,   385,   684,   386,
     685,   387,   388,   389,   390,   391,   686,   393,   394,   395,
     396,   687,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   688,   410,   411,   689,   413,
     414,   415,   690,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   691,   692,   430,   431,
     432,   433,   434,   435,   693,   437,   438,   694,   695,   440,
     441,   696,   443,   697,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   698,   458,   699,
     700,   701,   460,   461,   702,   462,   703,   464,   704,   465,
     466,   467,   468,   469,   705,   470,   706,   707,   708,   709,
     473,   474,   710,   476,   711,   712,   478,   479,   713,   481,
     482,   483,   484,   485,   714,   715,   486,   487,   488,   716,
     717,   489,   490,   491,   492,   718,   493,   494,   495,   496,
     497,   719,   720,   500,   721,   501,   722,   503,   504,   505,
     506,   507,   508,   509,   723,   724,   510,   725,   726,   511,
     512,   513,   514,   515,   516,   727,   728,   729,   730,   731,
     732,   733,   734,   735,   736,   737,   528,   529,   530,   531,
     570,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     120,   121,   122,   123,  2348,   125,   126,   127,   571,   128,
     129,   130,   572,   573,   574,   575,   576,   577,   578,   579,
     580,   581,   132,   133,   582,   583,   135,   136,   584,   138,
     139,   140,   585,   586,   587,   588,   589,   590,   146,   147,
     148,   149,   150,   151,   591,   592,   152,   153,   154,   155,
     593,   594,   158,   595,   159,   160,   161,   162,   596,   597,
     598,   599,   600,   166,   167,   168,   169,   170,   601,   172,
     173,   174,   602,   175,   176,   177,   178,   179,   180,   603,
     604,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   606,   193,   194,   607,   196,   608,   197,   609,   198,
     199,   200,   201,   202,   203,   610,   611,   204,   205,   206,
     207,   612,   613,   208,   209,   210,  2349,   212,   213,   614,
     214,   215,   216,   615,   217,   218,   219,   616,   220,   221,
     222,   223,   617,   225,   226,   227,   228,   229,   230,   618,
     619,   232,   620,   621,   233,   234,   622,   236,   623,   237,
     624,   238,   625,   626,   627,   241,   242,   628,   629,   245,
     630,   246,   247,   631,   632,   633,   250,   251,   634,   252,
     253,   254,   255,   256,   257,   258,   635,   260,   261,   262,
     263,   636,   264,   265,   266,   267,   268,   269,   270,   637,
     271,   638,   639,   274,   275,   276,   277,   278,   640,   641,
     642,   643,   644,   282,   645,   646,   285,   647,   287,   288,
     289,   648,   290,   291,   292,   649,   650,   293,   651,   295,
     652,   653,   297,   654,   655,   298,   299,   300,   301,   302,
     303,   304,   656,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   657,   658,   659,   330,   331,   332,
     333,   660,   661,   335,   336,   662,   338,   663,   664,   340,
     665,   342,   343,   344,   666,   345,   346,   667,   668,   347,
     348,   349,   669,   670,   350,   351,   671,   672,   354,   355,
     673,   674,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   675,   676,   677,   678,   371,
     372,   679,   680,   375,   376,   681,   682,   378,   379,   380,
     683,   381,   382,   383,   384,   385,   684,   386,   685,   387,
     388,   389,   390,   391,   686,   393,   394,   395,   396,   687,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   688,   410,   411,   689,   413,   414,   415,
     690,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   691,   692,   430,   431,   432,   433,
     434,  2350,   693,   437,   438,   694,   695,   440,   441,   696,
     443,   697,   444,   445,   446,   447,   448,   449,   450,   451,
     452,   453,   454,   455,   456,   698,   458,   699,   700,   701,
     460,   461,   702,   462,   703,   464,   704,   465,   466,   467,
     468,   469,   705,   470,   706,   707,   708,   709,   473,   474,
     710,   476,   711,   712,   478,   479,   713,   481,   482,   483,
     484,   485,   714,   715,   486,   487,   488,   716,   717,   489,
     490,   491,   492,   718,   493,   494,   495,   496,   497,   719,
     720,   500,   721,   501,   722,   503,   504,   505,   506,   507,
     508,   509,   723,   724,   510,   725,   726,   511,   512,   513,
     514,   515,   516,   727,   728,   729,   730,   731,   732,   733,
     734,   735,   736,   737,   528,   529,   530,   531,  1004,     0,
     844,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   120,   121,
     122,   123,   124,   125,   126,   127,     0,   128,   129,   130,
       0,     0,     0,   575,     0,     0,     0,     0,     0,   581,
     132,   133,     0,   583,   135,   136,   584,   138,   139,   140,
     585,   586,   587,   588,   589,     0,   146,   147,   148,   149,
     150,   151,     0,     0,   152,   153,   154,   155,   593,   594,
     158,     0,   159,   160,   161,   162,   596,     0,   598,     0,
     600,   166,   167,   168,   169,   170,   601,   172,   173,   174,
       0,   175,   176,   177,   178,   179,   180,     0,   604,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   606,
     193,   194,   607,   196,     0,   197,     0,   198,   199,   200,
     201,   202,   203,     0,     0,   204,   205,   206,   207,     0,
       0,   208,   209,   210,   211,   212,   213,     0,   214,   215,
     216,     0,   217,   218,   219,     0,   220,   221,   222,   223,
     617,   225,   226,   227,   228,   229,   230,   618,  1403,   232,
       0,     0,   233,   234,   622,   236,     0,   237,     0,   238,
     625,     0,   627,   241,   242,   628,   629,   245,     0,   246,
     247,     0,   632,   633,   250,   251,     0,   252,   253,   254,
     255,   256,   257,   258,   635,   260,   261,   262,   263,     0,
     264,   265,   266,   267,   268,   269,   270,     0,   271,   638,
     639,   274,   275,   276,   277,   278,   640,   641,     0,   643,
       0,   282,   645,   646,   285,   647,   287,   288,   289,     0,
     290,   291,   292,     0,     0,   293,   651,   295,   652,     0,
     297,     0,     0,   298,   299,   300,   301,   302,   303,   304,
     656,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   657,   658,   659,   330,   331,   332,   333,   660,
       0,   335,   336,   662,   338,     0,   664,   340,   665,   342,
     343,   344,     0,   345,   346,  1404,     0,   347,   348,   349,
       0,     0,   350,   351,   671,   672,   354,   355,   673,   674,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,     0,     0,     0,     0,   371,   372,   679,
     680,   375,   376,   681,     0,   378,   379,   380,     0,   381,
     382,   383,   384,   385,     0,   386,     0,   387,   388,   389,
     390,   391,   686,   393,   394,   395,   396,     0,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,     0,   410,   411,   689,   413,   414,   415,   690,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,     0,   692,   430,   431,   432,   433,   434,   435,
     693,   437,   438,     0,   695,   440,   441,   696,   443,     0,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   698,   458,   699,     0,     0,   460,   461,
       0,   462,   703,   464,     0,   465,   466,   467,   468,   469,
       0,   470,   706,   707,     0,     0,   473,   474,   710,   476,
     711,  1405,   478,   479,   713,   481,   482,   483,   484,   485,
       0,     0,   486,   487,   488,   716,     0,   489,   490,   491,
     492,     0,   493,   494,   495,   496,   497,   719,   720,   500,
       0,   501,   722,   503,   504,   505,   506,   507,   508,   509,
       0,     0,   510,     0,     0,   511,   512,   513,   514,   515,
     516,   727,   728,   729,   730,   731,   732,   733,   734,   735,
     736,   737,   528,   529,   530,   531,  1004,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   120,   121,   122,   123,
     124,   125,   126,   127,     0,   128,   129,   130,     3,     4,
       0,   575,     0,     0,     0,     0,     0,   581,   132,   133,
       0,   583,   135,   136,   584,   138,   139,   140,   585,   586,
     587,   588,   589,     0,   146,   147,   148,   149,   150,   151,
       0,     0,   152,   153,   154,   155,   593,   594,   158,     0,
     159,   160,   161,   162,   596,     0,   598,     0,   600,   166,
     167,   168,   169,   170,   601,   172,   173,   174,     0,   175,
     176,   177,   178,   179,   180,     0,   604,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   606,   193,   194,
     607,   196,     0,   197,     0,   198,   199,   200,   201,   202,
     203,     0,     0,   204,   205,   206,   207,     0,     0,   208,
     209,   210,   211,   212,   213,     0,   214,   215,   216,     0,
     217,   218,   219,     0,   220,   221,   222,   223,   617,   225,
     226,   227,   228,   229,   230,   618,     0,   232,     0,     0,
     233,   234,   622,   236,     0,   237,     0,   238,   625,     0,
     627,   241,   242,   628,   629,   245,     0,   246,   247,     0,
     632,   633,   250,   251,     0,   252,   253,   254,   255,   256,
     257,   258,   635,   260,   261,   262,   263,     0,   264,   265,
     266,   267,   268,   269,   270,     0,   271,   638,   639,   274,
     275,   276,   277,   278,   640,   641,     0,   643,     0,   282,
     645,   646,   285,   647,   287,   288,   289,     0,   290,   291,
     292,     0,     0,   293,   651,   295,   652,     0,   297,     0,
       0,   298,   299,   300,   301,   302,   303,   304,   656,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     657,   658,   659,   330,   331,   332,   333,   660,     0,   335,
     336,   662,   338,     0,   664,   340,   665,   342,   343,   344,
       0,   345,   346,     0,     0,   347,   348,   349,     0,     0,
     350,   351,   671,   672,   354,   355,   673,   674,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,     0,     0,     0,     0,   371,   372,   679,   680,   375,
     376,   681,     0,   378,   379,   380,     0,   381,   382,   383,
     384,   385,     0,   386,     0,   387,   388,   389,   390,   391,
     686,   393,   394,   395,   396,     0,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,     0,
     410,   411,   689,   413,   414,   415,   690,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
       0,   692,   430,   431,   432,   433,   434,   435,   693,   437,
     438,     0,   695,   440,   441,   696,   443,     0,   444,   445,
     446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
     456,   698,   458,   699,     0,     0,   460,   461,     0,   462,
     703,   464,     0,   465,   466,   467,   468,   469,     0,   470,
     706,   707,     0,     0,   473,   474,   710,   476,   711,     0,
     478,   479,   713,   481,   482,   483,   484,   485,     0,     0,
     486,   487,   488,   716,     0,   489,   490,   491,   492,     0,
     493,   494,   495,   496,   497,   719,   720,   500,     0,   501,
     722,   503,   504,   505,   506,   507,   508,   509,     0,     0,
     510,     0,     0,   511,   512,   513,   514,   515,   516,   727,
     728,   729,   730,   731,   732,   733,   734,   735,   736,   737,
     528,   529,   530,   531,   119,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   120,   121,   122,   123,   124,   125,
     126,   127,     0,   128,   129,   130,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   131,   132,   133,     0,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,     0,   146,   147,   148,   149,   150,   151,     0,   812,
     152,   153,   154,   155,   156,   157,   158,     0,   159,   160,
     161,   162,   813,     0,   814,     0,   165,   166,   167,   168,
     169,   170,   171,   172,   173,   174,     0,   175,   176,   177,
     178,   179,   180,     0,   181,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
       0,   197,     0,   198,   199,   200,   201,   202,   203,     0,
       0,   204,   205,   206,   207,     0,     0,   208,   209,   210,
     211,   212,   213,     0,   214,   215,   216,     0,   217,   218,
     219,     0,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   815,     0,   232,     0,     0,   233,   234,
     235,   236,     0,   237,     0,   238,   239,     0,   240,   241,
     242,   243,   244,   245,     0,   246,   247,     0,   248,   249,
     250,   251,     0,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,     0,   264,   265,   266,   267,
     268,   269,   270,     0,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,     0,   281,     0,   282,   283,   284,
     285,   286,   287,   288,   289,     0,   290,   291,   292,     0,
       0,   293,   294,   295,   296,     0,   297,     0,     0,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,     0,   335,   336,   337,
     338,     0,   817,   340,   341,   342,   343,   344,     0,   345,
     346,     0,     0,   347,   348,   349,     0,     0,   350,   351,
     352,   353,   354,   355,   356,   819,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,     0,
       0,     0,     0,   371,   372,   820,   374,   375,   376,   377,
       0,   378,   379,   380,     0,   381,   382,   383,   384,   385,
       0,   386,     0,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,     0,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,     0,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,     0,     0,
     430,   431,   432,   433,   434,   435,   436,   437,   438,     0,
     439,   440,   441,   442,   443,     0,   444,   445,   446,   447,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   823,     0,     0,   460,   461,     0,   462,   463,   464,
       0,   465,   466,   467,   468,   469,     0,   470,   471,   472,
       0,     0,   473,   474,   824,   476,   825,     0,   478,   479,
     826,   481,   482,   483,   484,   485,     0,     0,   486,   487,
     488,     0,     0,   489,   490,   491,   492,     0,   493,   494,
     495,   496,   497,   498,   499,   500,     0,   501,   502,   503,
     504,   505,   506,   507,   508,   509,     0,     0,   510,     0,
       0,   511,   512,   513,   514,   515,   516,   517,   518,   519,
     520,   521,   522,   523,   524,   525,   526,   527,   528,   529,
     530,   531,   119,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   120,   121,   122,   123,   124,   125,   126,   127,
       0,   128,   129,   130,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   131,   132,   133,     0,   134,   135,   136,
     137,   138,   139,   140,   141,   142,   143,   144,   145,     0,
     146,   147,   148,   149,   150,   151,     0,     0,   152,   153,
     154,   155,   156,   157,   158,     0,   159,   160,   161,   162,
     163,     0,   164,     0,   165,   166,   167,   168,   169,   170,
     171,   172,   173,   174,     0,   175,   176,   177,   178,   179,
     180,     0,   181,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,     0,   197,
       0,   198,   199,   200,   201,   202,   203,     0,     0,   204,
     205,   206,   207,     0,     0,   208,   209,   210,   211,   212,
     213,     0,   214,   215,   216,     0,   217,   218,   219,     0,
     220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     230,   231,     0,   232,     0,     0,   233,   234,   235,   236,
       0,   237,     0,   238,   239,     0,   240,   241,   242,   243,
     244,   245,     0,   246,   247,     0,   248,   249,   250,   251,
       0,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,     0,   264,   265,   266,   267,   268,   269,
     270,     0,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,     0,   281,     0,   282,   283,   284,   285,   286,
     287,   288,   289,     0,   290,   291,   292,     0,     0,   293,
     294,   295,   296,     0,   297,     0,     0,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,     0,   335,   336,   337,   338,     0,
     339,   340,   341,   342,   343,   344,     0,   345,   346,     0,
       0,   347,   348,   349,     0,     0,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,     0,     0,     0,
       0,   371,   372,   373,   374,   375,   376,   377,     0,   378,
     379,   380,     0,   381,   382,   383,   384,   385,     0,   386,
       0,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,     0,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,     0,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,     0,     0,   430,   431,
     432,   433,   434,   435,   436,   437,   438,     0,   439,   440,
     441,   442,   443,     0,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
       0,     0,   460,   461,     0,   462,   463,   464,     0,   465,
     466,   467,   468,   469,     0,   470,   471,   472,     0,     0,
     473,   474,   475,   476,   477,     0,   478,   479,   480,   481,
     482,   483,   484,   485,     0,     0,   486,   487,   488,     0,
       0,   489,   490,   491,   492,     0,   493,   494,   495,   496,
     497,   498,   499,   500,     0,   501,   502,   503,   504,   505,
     506,   507,   508,   509,     0,     0,   510,     0,     0,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520,   521,
     522,   523,   524,   525,   526,   527,   528,   529,   530,   531,
     539,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     120,   121,   122,   123,   124,   125,   126,   127,     0,   128,
     129,   130,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   132,   133,     0,     0,   135,   136,     0,   138,
     139,   140,   141,   142,     0,   144,   145,     0,   146,   147,
     148,   149,   150,   151,     0,     0,   152,   153,   154,   155,
     156,   157,   158,  1813,   159,   160,   161,   162,   163,     0,
       0,  1814,   165,   166,   167,   168,   169,   170,     0,   172,
     173,   174,  1815,   175,   176,   177,   178,   179,   180,     0,
       0,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,     0,   197,     0,   198,
     199,   200,   201,   202,   203,     0,     0,   204,   205,   206,
     207,     0,     0,   208,   209,   210,   211,   212,   213,     0,
     214,   215,   216,     0,   217,   218,   219,     0,   220,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,   231,
       0,   232,     0,     0,   233,   234,   235,   236,     0,   237,
    1816,   238,     0,     0,     0,   241,   242,   540,     0,   245,
       0,   246,   247,     0,   248,   249,   250,   251,     0,   252,
     253,   254,   255,   256,  1817,   258,     0,   260,   261,   262,
     263,     0,   264,   265,   266,   267,   268,   269,   270,     0,
     271,     0,   273,   274,   275,   276,   277,   278,   279,   280,
       0,   281,     0,   282,     0,     0,   285,     0,   287,   288,
     289,     0,   290,   291,   292,     0,     0,   293,     0,   295,
       0,     0,   297,     0,     0,   298,   299,   300,   301,   302,
     303,   304,   541,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,     0,   329,   330,   331,   332,
     333,   334,     0,   335,   336,     0,   338,     0,   339,   340,
     341,   342,   343,   344,     0,   345,   346,     0,     0,   347,
     348,   349,     0,     0,   350,   351,   352,     0,   354,   355,
       0,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,     0,     0,     0,     0,   371,
     372,   373,     0,   375,   376,   377,     0,   378,   379,   380,
    1818,   381,   382,   383,   384,   385,     0,   386,     0,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,     0,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,     0,   410,   411,     0,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,     0,     0,   430,   431,   432,   433,
     434,   435,   436,   437,   438,     0,     0,   440,   441,   442,
     443,     0,   444,   445,   446,   447,   448,   449,   450,   451,
     452,   453,   454,   455,   456,   542,   458,   459,     0,     0,
     460,   461,     0,   462,     0,   464,     0,   465,   466,   467,
     468,   469,     0,   470,   471,   472,     0,     0,   473,   474,
     475,   476,   477,     0,   478,   479,   480,   481,   482,   483,
     484,   485,     0,  1819,   486,   487,   488,     0,     0,   489,
     490,   491,   492,     0,   493,   494,   495,   496,   497,   498,
     499,   500,     0,   501,     0,   503,   504,   505,   506,   507,
     508,   509,     0,     0,   510,     0,     0,   511,   512,   513,
     514,   515,   516,   517,   518,   519,   520,   521,   522,   523,
     524,   525,   526,   527,   528,   529,   530,   531,   539,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   120,   121,
     122,   123,   124,   125,   126,   127,     0,   128,   129,   130,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     132,   133,     0,     0,   135,   136,     0,   138,   139,   140,
     141,   142,     0,   144,   145,     0,   146,   147,   148,   149,
     150,   151,     0,     0,   152,   153,   154,   155,   156,   157,
     158,  1813,   159,   160,   161,   162,   163,     0,     0,     0,
     165,   166,   167,   168,   169,   170,     0,   172,   173,   174,
    1815,   175,   176,   177,   178,   179,   180,     0,     0,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,   196,     0,   197,     0,   198,   199,   200,
     201,   202,   203,     0,     0,   204,   205,   206,   207,     0,
       0,   208,   209,   210,   211,   212,   213,     0,   214,   215,
     216,     0,   217,   218,   219,     0,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,     0,   232,
       0,     0,   233,   234,   235,   236,     0,   237,  1816,   238,
       0,     0,     0,   241,   242,   540,     0,   245,     0,   246,
     247,     0,   248,   249,   250,   251,     0,   252,   253,   254,
     255,   256,   257,   258,     0,   260,   261,   262,   263,     0,
     264,   265,   266,   267,   268,   269,   270,     0,   271,     0,
     273,   274,   275,   276,   277,   278,   279,   280,     0,   281,
       0,   282,     0,     0,   285,     0,   287,   288,   289,     0,
     290,   291,   292,     0,     0,   293,     0,   295,  2436,     0,
     297,     0,     0,   298,   299,   300,   301,   302,   303,   304,
     541,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,     0,   329,   330,   331,   332,   333,   334,
       0,   335,   336,     0,   338,     0,   339,   340,   341,   342,
     343,   344,     0,   345,   346,     0,     0,   347,   348,   349,
       0,     0,   350,   351,   352,     0,   354,   355,     0,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,     0,     0,     0,     0,   371,   372,   373,
       0,   375,   376,   377,     0,   378,   379,   380,  1818,   381,
     382,   383,   384,   385,     0,   386,     0,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,     0,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,     0,   410,   411,     0,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,     0,     0,   430,   431,   432,   433,   434,   435,
     436,   437,   438,     0,     0,   440,   441,   442,   443,     0,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   542,   458,   459,     0,     0,   460,   461,
       0,   462,     0,   464,     0,   465,   466,   467,   468,   469,
       0,   470,   471,   472,     0,     0,   473,   474,   475,   476,
     477,     0,   478,   479,   480,   481,   482,   483,   484,   485,
       0,  1819,   486,   487,   488,     0,     0,   489,   490,   491,
     492,     0,   493,   494,   495,   496,   497,   498,   499,   500,
       0,   501,     0,   503,   504,   505,   506,   507,   508,   509,
       0,     0,   510,     0,     0,   511,   512,   513,   514,   515,
     516,   517,   518,   519,   520,   521,   522,   523,   524,   525,
     526,   527,   528,   529,   530,   531,   539,     0,   564,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   120,   121,   122,   123,
     124,   125,   126,   127,     0,   128,   129,   130,     3,     4,
       0,     0,     0,     0,     0,     0,     0,     0,   132,   133,
       0,     0,   135,   136,     0,   138,   139,   140,   141,   142,
       0,   144,   145,     0,   146,   147,   148,   149,   150,   151,
       0,     0,   152,   153,   154,   155,   156,   157,   158,     0,
     159,   160,   161,   162,   163,     0,     0,     0,   165,   166,
     167,   168,   169,   170,     0,   172,   173,   174,     0,   175,
     176,   177,   178,   179,   180,     0,     0,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,     0,   197,     0,   198,   199,   200,   201,   202,
     203,     0,     0,   204,   205,   206,   207,     0,     0,   208,
     209,   210,   211,   212,   213,     0,   214,   215,   216,     0,
     217,   218,   219,     0,   220,   221,   222,   223,   224,   225,
     226,   227,   228,   229,   230,   231,     0,   232,     0,     0,
     233,   234,   235,   236,     0,   237,     0,   238,     0,     0,
       0,   241,   242,   540,     0,   245,     0,   246,   247,     0,
     248,   249,   250,   251,     0,   252,   253,   254,   255,   256,
     257,   258,     0,   260,   261,   262,   263,     0,   264,   265,
     266,   267,   268,   269,   270,     0,   271,     0,   273,   274,
     275,   276,   277,   278,   279,   280,     0,   281,     0,   282,
       0,     0,   285,     0,   287,   288,   289,     0,   290,   291,
     292,     0,     0,   293,     0,   295,     0,     0,   297,     0,
       0,   298,   299,   300,   301,   302,   303,   304,   541,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,     0,   329,   330,   331,   332,   333,   334,     0,   335,
     336,     0,   338,     0,   339,   340,   341,   342,   343,   344,
       0,   345,   346,     0,     0,   347,   348,   349,     0,     0,
     350,   351,   352,     0,   354,   355,     0,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,     0,     0,     0,     0,   371,   372,   373,     0,   375,
     376,   377,     0,   378,   379,   380,     0,   381,   382,   383,
     384,   385,     0,   386,     0,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,     0,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,     0,
     410,   411,     0,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
       0,     0,   430,   431,   432,   433,   434,   435,   436,   437,
     438,     0,     0,   440,   441,   442,   443,     0,   444,   445,
     446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
     456,   542,   458,   459,     0,     0,   460,   461,     0,   462,
       0,   464,     0,   465,   466,   467,   468,   469,     0,   470,
     471,   472,     0,     0,   473,   474,   475,   476,   477,     0,
     478,   479,   480,   481,   482,   483,   484,   485,     0,     0,
     486,   487,   488,     0,     0,   489,   490,   491,   492,     0,
     493,   494,   495,   496,   497,   498,   499,   500,     0,   501,
       0,   503,   504,   505,   506,   507,   508,   509,     0,     0,
     510,     0,     0,   511,   512,   513,   514,   515,   516,   517,
     518,   519,   520,   521,   522,   523,   524,   525,   526,   527,
     528,   529,   530,   531,  1540,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   120,   121,   122,   123,   124,   125,
     126,   127,     0,   128,   129,   130,     0,     0,     0,  1541,
       0,     0,     0,  -758,     0,  1542,   132,   133,     0,  1543,
     135,   136,  1544,   138,   139,   140,     0,  1545,  1546,  1547,
    1548,     0,   146,   147,   148,   149,   150,   151,     0,     0,
     152,   153,   154,   155,  1549,  1550,   158,     0,   159,   160,
     161,   162,     0,     0,  1551,     0,  1552,   166,   167,   168,
     169,   170,  1553,   172,   173,   174,     0,   175,   176,   177,
     178,   179,   180,     0,  1554,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,  1555,   193,   194,  1556,   196,
       0,   197,     0,   198,   199,   200,   201,   202,   203,     0,
       0,   204,   205,   206,   207,     0,     0,   208,   209,  1104,
     211,   212,   213,     0,   214,   215,   216,     0,   217,   218,
     219,     0,   220,   221,   222,   223,     0,   225,   226,   227,
     228,   229,   230,     0,     0,   232,     0,     0,   233,   234,
    1557,   236,     0,   237,     0,   238,  1558,     0,  1559,   241,
     242,  -758,  1560,   245,     0,   246,   247,     0,     0,     0,
     250,   251,     0,   252,   253,   254,   255,   256,   257,   258,
    1561,   260,   261,   262,   263,     0,   264,   265,   266,   267,
     268,   269,   270,     0,   271,  1562,     0,   274,   275,   276,
     277,   278,  1563,  1564,     0,  1565,     0,   282,  1566,  1567,
     285,  1568,   287,   288,   289,     0,   290,   291,   292,     0,
       0,   293,  1569,   295,  1570,     0,   297,     0,     0,   298,
     299,   300,   301,   302,   303,   304,  1571,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,  1572,  1573,
    1574,   330,   331,   332,   333,     0,     0,   335,   336,  1575,
     338,     0,     0,   340,  1576,   342,   343,   344,     0,   345,
     346,     0,     0,   347,   348,   349,     0,     0,   350,   351,
       0,  1577,   354,   355,  1578,     0,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,     0,
       0,     0,     0,   371,   372,     0,  1579,   375,   376,     0,
       0,   378,   379,   380,     0,   381,   382,   383,   384,   385,
       0,   386,     0,   387,   388,   389,   390,   391,  1580,   393,
     394,   395,   396,     0,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,     0,   410,   411,
    1581,   413,   414,   415,  1582,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,     0,  1583,
     430,   431,   432,   433,   434,   435,  1584,   437,   438,     0,
    1585,   440,   441,  1586,   443,     0,   444,   445,   446,   447,
     448,   449,   450,   451,   452,   453,   454,   455,   456,  1587,
     458,     0,     0,     0,   460,   461,     0,   462,  1588,   464,
       0,   465,   466,   467,   468,   469,     0,   470,  1589,  1590,
       0,     0,   473,   474,     0,   476,     0,     0,   478,   479,
    1591,   481,   482,   483,   484,   485,  1592,     0,   486,   487,
     488,  1593,     0,   489,   490,   491,   492,     0,   493,   494,
     495,   496,   497,     0,  1594,   500,     0,   501,  1595,   503,
     504,   505,   506,   507,   508,   509,     0,     0,   510,     0,
       0,   511,   512,   513,   514,   515,   516,   539,     0,   564,
       0,     0,     0,     0,     0,     0,     0,     0,   528,   529,
     530,   531,     0,     0,     0,     0,     0,   120,   121,   122,
     123,   124,   125,   126,   127,   565,   128,   129,   130,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   132,
     133,     0,     0,   135,   136,     0,   138,   139,   140,   141,
     142,     0,   144,   145,     0,   146,   147,   148,   149,   150,
     151,     0,     0,   152,   153,   154,   155,   156,   157,   158,
       0,   159,   160,   161,   162,   163,     0,     0,     0,   165,
     166,   167,   168,   169,   170,     0,   172,   173,   174,     0,
     175,   176,   177,   178,   179,   180,     0,     0,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,     0,   197,     0,   198,   199,   200,   201,
     202,   203,     0,     0,   204,   205,   206,   207,     0,     0,
     208,   209,   210,   211,   212,   213,     0,   214,   215,   216,
       0,   217,   218,   219,     0,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,     0,   232,     0,
       0,   233,   234,   235,   236,     0,   237,     0,   238,     0,
       0,     0,   241,   242,   540,     0,   245,     0,   246,   247,
       0,   248,   249,   250,   251,     0,   252,   253,   254,   255,
     256,   257,   258,     0,   260,   261,   262,   263,     0,   264,
     265,   266,   267,   268,   269,   270,     0,   271,     0,   273,
     274,   275,   276,   277,   278,   279,   280,     0,   281,     0,
     282,     0,     0,   285,     0,   287,   288,   289,     0,   290,
     291,   292,     0,     0,   293,     0,   295,     0,     0,   297,
       0,     0,   298,   299,   300,   301,   302,   303,   304,   541,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,     0,   329,   330,   331,   332,   333,   334,     0,
     335,   336,     0,   338,     0,   339,   340,   341,   342,   343,
     344,     0,   345,   346,     0,     0,   347,   348,   349,     0,
       0,   350,   351,   352,     0,   354,   355,     0,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,     0,     0,     0,     0,   371,   372,   373,     0,
     375,   376,   377,     0,   566,   379,   380,     0,   381,   382,
     383,   384,   385,     0,   386,     0,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,     0,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
       0,   410,   411,     0,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,     0,     0,   430,   431,   432,   433,   434,   435,   436,
     437,   438,     0,     0,   440,   441,   442,   443,     0,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   542,   458,   459,     0,     0,   460,   461,     0,
     462,     0,   464,     0,   465,   466,   467,   468,   469,     0,
     470,   471,   472,     0,     0,   473,   474,   475,   476,   477,
       0,   478,   479,   480,   481,   482,   483,   484,   485,     0,
       0,   486,   487,   488,     0,     0,   489,   490,   491,   492,
       0,   493,   494,   495,   496,   497,   498,   499,   500,     0,
     501,     0,   503,   504,   505,   506,   507,   508,   509,     0,
       0,   510,     0,     0,   511,   512,   513,   514,   515,   516,
     517,   518,   519,   520,   521,   522,   523,   524,   525,   526,
     527,   528,   529,   530,   531,   539,     0,   564,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   120,   121,   122,   123,   124,
     125,   126,   127,     0,   128,   129,   130,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   132,   133,     0,
       0,   135,   136,     0,   138,   139,   140,   141,   142,     0,
     144,   145,     0,   146,   147,   148,   149,   150,   151,     0,
       0,   152,   153,   154,   155,   156,   157,   158,     0,   159,
     160,   161,   162,   163,     0,     0,     0,   165,   166,   167,
     168,   169,   170,     0,   172,   173,   174,     0,   175,   176,
     177,   178,   179,   180,     0,     0,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,     0,   197,     0,   198,   199,   200,   201,   202,   203,
       0,     0,   204,   205,   206,   207,     0,     0,   208,   209,
     210,   211,   212,   213,     0,   214,   215,   216,     0,   217,
     218,   219,     0,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,   231,     0,   232,     0,     0,   233,
     234,   235,   236,     0,   237,     0,   238,     0,     0,     0,
     241,   242,   540,     0,   245,     0,   246,   247,     0,   248,
     249,   250,   251,     0,   252,   253,   254,   255,   256,   257,
     258,     0,   260,   261,   262,   263,     0,   264,   265,   266,
     267,   268,   269,   270,     0,   271,     0,   273,   274,   275,
     276,   277,   278,   279,   280,     0,   281,     0,   282,     0,
       0,   285,     0,   287,   288,   289,     0,   290,   291,   292,
       0,     0,   293,     0,   295,     0,     0,   297,     0,     0,
     298,   299,   300,   301,   302,   303,   304,   541,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
       0,   329,   330,   331,   332,   333,   334,     0,   335,   336,
       0,   338,     0,   339,   340,   341,   342,   343,   344,     0,
     345,   346,     0,   818,   347,   348,   349,     0,     0,   350,
     351,   352,     0,   354,   355,     0,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
       0,     0,     0,     0,   371,   372,   373,     0,   375,   376,
     377,     0,   378,   379,   380,     0,   381,   382,   383,   384,
     385,     0,   386,     0,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,     0,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,     0,   410,
     411,     0,   413,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,     0,
       0,   430,   431,   432,   433,   434,   435,   436,   437,   438,
       0,     0,   440,   441,   442,   443,     0,   444,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     542,   458,   459,     0,     0,   460,   461,     0,   462,     0,
     464,     0,   465,   466,   467,   468,   469,     0,   470,   471,
     472,     0,     0,   473,   474,   475,   476,   477,     0,   478,
     479,   480,   481,   482,   483,   484,   485,     0,     0,   486,
     487,   488,     0,     0,   489,   490,   491,   492,     0,   493,
     494,   495,   496,   497,   498,   499,   500,     0,   501,     0,
     503,   504,   505,   506,   507,   508,   509,     0,     0,   510,
       0,     0,   511,   512,   513,   514,   515,   516,   517,   518,
     519,   520,   521,   522,   523,   524,   525,   526,   527,   528,
     529,   530,   531,   539,     0,   564,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   120,   121,   122,   123,   124,   125,   126,
     127,     0,   128,   129,   130,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   132,   133,     0,     0,   135,
     136,     0,   138,   139,   140,   141,   142,     0,   144,   145,
       0,   146,   147,   148,   149,   150,   151,     0,     0,   152,
     153,   154,   155,   156,   157,   158,     0,   159,   160,   161,
     162,   163,     0,     0,     0,   165,   166,   167,   168,   169,
     170,     0,   172,   173,   174,     0,   175,   176,   177,   178,
     179,   180,     0,     0,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,     0,
     197,     0,   198,   199,   200,   201,   202,   203,     0,     0,
     204,   205,   206,   207,     0,     0,   208,   209,   210,   211,
     212,   213,     0,   214,   215,   216,     0,   217,   218,   219,
       0,   220,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   230,   231,     0,   232,     0,     0,   233,   234,   235,
     236,     0,   237,     0,   238,     0,     0,     0,   241,   242,
     540,     0,   245,     0,   246,   247,     0,   248,   249,   250,
     251,     0,   252,   253,   254,   255,   256,   927,   258,     0,
     260,   261,   262,   263,     0,   264,   265,   266,   267,   268,
     269,   270,     0,   271,     0,   273,   274,   275,   276,   277,
     278,   279,   280,     0,   281,     0,   282,     0,     0,   285,
       0,   287,   288,   289,     0,   290,   291,   292,     0,     0,
     293,     0,   295,     0,     0,   297,     0,     0,   298,   299,
     300,   301,   302,   303,   304,   541,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,     0,   329,
     330,   331,   332,   333,   334,     0,   335,   336,     0,   338,
       0,   339,   340,   341,   342,   343,   344,     0,   345,   346,
       0,   818,   347,   348,   349,     0,     0,   350,   351,   352,
       0,   354,   355,     0,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,     0,     0,
       0,     0,   371,   372,   373,     0,   375,   376,   377,     0,
     378,   379,   380,     0,   381,   382,   383,   384,   385,     0,
     386,     0,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,     0,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,     0,   410,   411,     0,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,     0,     0,   430,
     431,   432,   433,   434,   435,   436,   437,   438,     0,     0,
     440,   441,   442,   443,     0,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   542,   458,
     459,     0,     0,   460,   461,     0,   462,     0,   464,     0,
     465,   466,   467,   468,   469,     0,   470,   471,   472,     0,
       0,   473,   474,   475,   476,   477,     0,   478,   479,   480,
     481,   482,   483,   484,   485,     0,     0,   486,   487,   488,
       0,     0,   489,   490,   491,   492,     0,   493,   494,   495,
     496,   497,   498,   499,   500,     0,   501,     0,   503,   504,
     505,   506,   507,   508,   509,     0,     0,   510,     0,     0,
     511,   512,   513,   514,   515,   516,   517,   518,   519,   520,
     521,   522,   523,   524,   525,   526,   527,   528,   529,   530,
     531,   539,     0,   564,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   120,   121,   122,   123,   124,   125,   126,   127,   978,
     128,   129,   130,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   132,   133,     0,     0,   135,   136,     0,
     138,   139,   140,   141,   142,     0,   144,   145,     0,   146,
     147,   148,   149,   150,   151,     0,     0,   152,   153,   154,
     155,   156,   157,   158,     0,   159,   160,   161,   162,   163,
       0,     0,     0,   165,   166,   167,   168,   169,   170,     0,
     172,   173,   174,     0,   175,   176,   177,   178,   179,   180,
       0,     0,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,     0,   197,     0,
     198,   199,   200,   201,   202,   203,     0,     0,   204,   205,
     206,   207,     0,     0,   208,   209,   210,   211,   212,   213,
       0,   214,   215,   216,     0,   217,   218,   219,     0,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
     231,     0,   232,     0,     0,   233,   234,   235,   236,     0,
     237,     0,   238,     0,     0,     0,   241,   242,   540,     0,
     245,     0,   246,   247,     0,   248,   249,   250,   251,     0,
     252,   253,   254,   255,   256,   257,   258,     0,   260,   261,
     262,   263,     0,   264,   265,   266,   267,   268,   269,   270,
       0,   271,     0,   273,   274,   275,   276,   277,   278,   279,
     280,     0,   281,     0,   282,     0,     0,   285,     0,   287,
     288,   289,     0,   290,   291,   292,     0,     0,   293,     0,
     295,     0,     0,   297,     0,     0,   298,   299,   300,   301,
     302,   303,   304,   541,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,     0,   329,   330,   331,
     332,   333,   334,     0,   335,   336,     0,   338,     0,   339,
     340,   341,   342,   343,   344,     0,   345,   346,     0,     0,
     347,   348,   349,     0,     0,   350,   351,   352,     0,   354,
     355,     0,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,     0,     0,     0,     0,
     371,   372,   373,     0,   375,   376,   377,     0,   378,   379,
     380,     0,   381,   382,   383,   384,   385,     0,   386,     0,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
       0,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,     0,   410,   411,     0,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,     0,     0,   430,   431,   432,
     433,   434,   435,   436,   437,   438,     0,     0,   440,   441,
     442,   443,     0,   444,   445,   446,   447,   448,   449,   450,
     451,   452,   453,   454,   455,   456,   542,   458,   459,     0,
       0,   460,   461,     0,   462,     0,   464,     0,   465,   466,
     467,   468,   469,     0,   470,   471,   472,     0,     0,   473,
     474,   475,   476,   477,     0,   478,   479,   480,   481,   482,
     483,   484,   485,     0,     0,   486,   487,   488,     0,     0,
     489,   490,   491,   492,     0,   493,   494,   495,   496,   497,
     498,   499,   500,     0,   501,     0,   503,   504,   505,   506,
     507,   508,   509,     0,     0,   510,     0,     0,   511,   512,
     513,   514,   515,   516,   517,   518,   519,   520,   521,   522,
     523,   524,   525,   526,   527,   528,   529,   530,   531,   539,
       0,   564,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   120,
     121,   122,   123,   124,   125,   126,   127,     0,   128,   129,
     130,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   132,   133,     0,     0,   135,   136,     0,   138,   139,
     140,   141,   142,     0,   144,   145,     0,   146,   147,   148,
     149,   150,   151,     0,     0,   152,   153,   154,   155,   156,
     157,   158,     0,   159,   160,   161,   162,   163,     0,     0,
       0,   165,   166,   167,   168,   169,   170,     0,   172,   173,
     174,     0,   175,   176,   177,   178,   179,   180,     0,     0,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,     0,   197,     0,   198,   199,
     200,   201,   202,   203,     0,     0,   204,   205,   206,   207,
       0,     0,   208,   209,   210,   211,   212,   213,     0,   214,
     215,   216,     0,   217,   218,   219,     0,   220,   221,   222,
     223,   224,   225,   226,   227,   228,  1218,   230,   231,     0,
     232,     0,     0,   233,   234,   235,   236,     0,   237,     0,
     238,     0,     0,     0,   241,   242,   540,     0,   245,     0,
     246,   247,     0,   248,   249,   250,   251,     0,   252,   253,
     254,   255,   256,   257,   258,     0,   260,   261,   262,   263,
       0,   264,   265,   266,   267,   268,   269,   270,     0,   271,
       0,   273,   274,   275,   276,   277,   278,   279,   280,     0,
     281,     0,   282,     0,     0,   285,     0,   287,   288,   289,
       0,   290,   291,   292,     0,     0,   293,     0,   295,     0,
       0,   297,     0,     0,   298,   299,   300,   301,   302,   303,
     304,   541,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,     0,   329,   330,   331,   332,   333,
     334,     0,   335,   336,     0,   338,     0,   339,   340,   341,
     342,   343,   344,     0,   345,   346,     0,   818,   347,   348,
     349,     0,     0,   350,   351,   352,     0,   354,   355,     0,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,     0,     0,     0,     0,   371,   372,
     373,     0,   375,   376,   377,     0,   378,   379,   380,     0,
     381,   382,   383,   384,   385,     0,   386,     0,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,     0,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,     0,   410,   411,     0,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,     0,     0,   430,   431,   432,   433,   434,
     435,   436,   437,   438,     0,     0,   440,   441,   442,   443,
       0,   444,   445,   446,   447,   448,   449,   450,   451,   452,
     453,   454,   455,   456,   542,   458,   459,     0,     0,   460,
     461,     0,   462,     0,   464,     0,   465,   466,   467,   468,
     469,     0,   470,   471,   472,     0,     0,   473,   474,   475,
     476,   477,     0,   478,   479,   480,   481,   482,   483,   484,
     485,     0,     0,   486,   487,   488,     0,     0,   489,   490,
     491,   492,     0,   493,   494,   495,   496,   497,   498,   499,
     500,     0,   501,     0,   503,   504,   505,   506,   507,   508,
     509,     0,     0,   510,     0,     0,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   539,     0,   564,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   120,   121,   122,
     123,   124,   125,   126,   127,     0,   128,   129,   130,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   132,
     133,     0,     0,   135,   136,     0,   138,   139,   140,   141,
     142,     0,   144,   145,     0,   146,   147,   148,   149,   150,
     151,     0,     0,   152,   153,   154,   155,   156,   157,   158,
       0,   159,   160,   161,   162,   163,     0,     0,     0,   165,
     166,   167,   168,   169,   170,     0,   172,   173,   174,     0,
     175,   176,   177,   178,   179,   180,     0,     0,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,     0,   197,     0,   198,   199,   200,   201,
     202,   203,     0,     0,   204,   205,   206,   207,     0,     0,
     208,   209,   210,   211,   212,   213,     0,   214,   215,   216,
       0,   217,   218,   219,     0,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,     0,   232,     0,
       0,   233,   234,   235,   236,     0,   237,     0,   238,     0,
       0,     0,   241,   242,   540,     0,  2047,     0,   246,   247,
       0,   248,   249,   250,   251,     0,   252,   253,   254,   255,
     256,   257,   258,     0,   260,   261,   262,   263,     0,   264,
     265,   266,   267,   268,   269,   270,     0,   271,     0,   273,
     274,   275,   276,   277,   278,   279,   280,     0,   281,     0,
     282,     0,     0,   285,     0,   287,   288,   289,     0,   290,
     291,   292,     0,     0,   293,     0,   295,     0,     0,   297,
       0,     0,   298,  2048,   300,   301,   302,   303,   304,   541,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,     0,   329,   330,   331,   332,   333,   334,     0,
     335,   336,     0,   338,     0,   339,   340,   341,   342,   343,
     344,     0,   345,   346,     0,     0,   347,   348,   349,     0,
       0,   350,   351,   352,     0,   354,   355,     0,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,     0,     0,     0,     0,   371,   372,   373,     0,
     375,   376,   377,     0,   378,   379,   380,     0,   381,   382,
     383,   384,   385,     0,   386,     0,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,     0,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
       0,   410,   411,     0,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,     0,     0,   430,   431,   432,   433,   434,   435,   436,
     437,   438,     0,     0,   440,   441,   442,   443,     0,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   542,   458,   459,     0,     0,   460,   461,  2049,
     462,     0,   464,     0,   465,  2050,   467,  2051,   469,     0,
     470,   471,   472,     0,     0,   473,   474,   475,   476,   477,
       0,   478,   479,   480,   481,   482,   483,   484,   485,     0,
       0,   486,   487,  2052,     0,     0,   489,   490,   491,   492,
       0,   493,   494,   495,   496,   497,   498,   499,   500,     0,
     501,     0,   503,   504,   505,   506,   507,   508,   509,     0,
       0,   510,     0,     0,   511,   512,   513,   514,   515,   516,
     517,   518,   519,   520,   521,   522,   523,   524,   525,   526,
     527,   528,   529,   530,   531,   539,     0,   564,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   120,   121,   122,   123,   124,
     125,   126,   127,     0,   128,   129,   130,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   132,   133,     0,
       0,   135,   136,     0,   138,   139,   140,   141,   142,     0,
     144,   145,     0,   146,   147,   148,   149,   150,   151,     0,
       0,   152,   153,   154,   155,   156,   157,   158,     0,   159,
     160,   161,   162,   163,     0,     0,     0,   165,   166,   167,
     168,   169,   170,     0,   172,   173,   174,     0,   175,   176,
     177,   178,   179,   180,     0,     0,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,     0,   197,     0,   198,   199,   200,   201,   202,   203,
       0,     0,   204,   205,   206,   207,     0,     0,   208,   209,
     210,   211,   212,   213,     0,   214,   215,   216,     0,   217,
     218,   219,     0,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,   231,     0,   232,     0,     0,   233,
     234,   235,   236,     0,   237,     0,   238,     0,     0,     0,
     241,   242,   540,     0,   245,     0,   246,   247,     0,   248,
     249,   250,   251,     0,   252,   253,   254,   255,   256,   257,
     258,     0,   260,   261,   262,   263,     0,   264,   265,   266,
     267,   268,   269,   270,     0,   271,     0,   273,   274,   275,
     276,   277,   278,   279,   280,     0,   281,     0,   282,     0,
       0,   285,     0,   287,   288,   289,     0,   290,   291,   292,
       0,     0,   293,     0,   295,     0,     0,   297,     0,     0,
     298,   299,   300,   301,   302,   303,   304,   541,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
       0,   329,   330,   331,   332,   333,   334,     0,   335,   336,
       0,   338,     0,   339,   340,   341,   342,   343,   344,     0,
     345,   346,     0,     0,   347,   348,   349,     0,     0,   350,
     351,   352,     0,   354,   355,     0,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
       0,     0,     0,     0,   371,   372,   373,     0,   375,   376,
     377,     0,   378,   379,   380,     0,   381,   382,   383,   384,
     385,     0,   386,     0,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,     0,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,     0,   410,
     411,     0,   413,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,     0,
       0,   430,   431,   432,   433,   434,   435,   436,   437,   438,
       0,     0,   440,   441,   442,   443,     0,   444,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     542,   458,   459,     0,     0,   460,   461,     0,   462,     0,
     464,     0,   465,   466,   467,   468,   469,     0,   470,   471,
     472,     0,     0,   473,   474,   475,   476,   477,     0,   478,
     479,   480,   481,   482,   483,   484,   485,     0,     0,   486,
     487,   488,     0,     0,   489,   490,   491,   492,     0,   493,
     494,   495,   496,   497,   498,   499,   500,     0,   501,     0,
     503,   504,   505,   506,   507,   508,   509,     0,     0,   510,
       0,     0,   511,   512,   513,   514,   515,   516,   517,   518,
     519,   520,   521,   522,   523,   524,   525,   526,   527,   528,
     529,   530,   531,   539,     0,   844,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   120,   121,   122,   123,   124,   125,   126,
     127,     0,   128,   129,   130,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   132,   133,     0,     0,   135,
     136,     0,   138,   139,   140,   141,   142,     0,   144,   145,
       0,   146,   147,   148,   149,   150,   151,     0,     0,   152,
     153,   154,   155,   156,   157,   158,     0,   159,   160,   161,
     162,   163,     0,     0,     0,   165,   166,   167,   168,   169,
     170,     0,   172,   173,   174,     0,   175,   176,   177,   178,
     179,   180,     0,     0,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,     0,
     197,     0,   198,   199,   200,   201,   202,   203,     0,     0,
     204,   205,   206,   207,     0,     0,   208,   209,   210,   211,
     212,   213,     0,   214,   215,   216,     0,   217,   218,   219,
       0,   220,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   230,   231,     0,   232,     0,     0,   233,   234,   235,
     236,     0,   237,     0,   238,     0,     0,     0,   241,   242,
     540,     0,   245,     0,   246,   247,     0,   248,   249,   250,
     251,     0,   252,   253,   254,   255,   256,   257,   258,     0,
     260,   261,   262,   263,     0,   264,   265,   266,   267,   268,
     269,   270,     0,   271,     0,   273,   274,   275,   276,   277,
     278,   279,   280,     0,   281,     0,   282,     0,     0,   285,
       0,   287,   288,   289,     0,   290,   291,   292,     0,     0,
     293,     0,   295,     0,     0,   297,     0,     0,   298,   299,
     300,   301,   302,   303,   304,   541,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,     0,   329,
     330,   331,   332,   333,   334,     0,   335,   336,     0,   338,
       0,   339,   340,   341,   342,   343,   344,     0,   345,   346,
       0,     0,   347,   348,   349,     0,     0,   350,   351,   352,
       0,   354,   355,     0,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,     0,     0,
       0,     0,   371,   372,   373,     0,   375,   376,   377,     0,
     378,   379,   380,     0,   381,   382,   383,   384,   385,     0,
     386,     0,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,     0,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,     0,   410,   411,     0,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,     0,     0,   430,
     431,   432,   433,   434,   435,   436,   437,   438,     0,     0,
     440,   441,   442,   443,     0,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   542,   458,
     459,     0,     0,   460,   461,     0,   462,     0,   464,     0,
     465,   466,   467,   468,   469,     0,   470,   471,   472,     0,
       0,   473,   474,   475,   476,   477,     0,   478,   479,   480,
     481,   482,   483,   484,   485,     0,     0,   486,   487,   488,
       0,     0,   489,   490,   491,   492,     0,   493,   494,   495,
     496,   497,   498,   499,   500,     0,   501,     0,   503,   504,
     505,   506,   507,   508,   509,     0,     0,   510,     0,     0,
     511,   512,   513,   514,   515,   516,   517,   518,   519,   520,
     521,   522,   523,   524,   525,   526,   527,   528,   529,   530,
     531,   539,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   120,   121,   122,   123,   124,   125,   126,   127,   850,
     128,   129,   130,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   132,   133,     0,     0,   135,   136,     0,
     138,   139,   140,   141,   142,     0,   144,   145,     0,   146,
     147,   148,   149,   150,   151,     0,     0,   152,   153,   154,
     155,   156,   157,   158,     0,   159,   160,   161,   162,   163,
       0,     0,     0,   165,   166,   167,   168,   169,   170,     0,
     172,   173,   174,     0,   175,   176,   177,   178,   179,   180,
       0,     0,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,     0,   197,     0,
     198,   199,   200,   201,   202,   203,     0,     0,   204,   205,
     206,   207,     0,     0,   208,   209,   210,   211,   212,   213,
       0,   214,   215,   216,     0,   217,   218,   219,     0,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
     231,     0,   232,     0,     0,   233,   234,   235,   236,     0,
     237,     0,   238,     0,     0,     0,   241,   242,   540,     0,
     851,     0,   246,   247,     0,   248,   249,   250,   251,     0,
     252,   253,   254,   255,   256,   257,   258,     0,   260,   261,
     262,   263,     0,   264,   265,   266,   267,   268,   269,   270,
       0,   271,     0,   273,   274,   275,   276,   277,   278,   279,
     280,     0,   281,     0,   282,     0,     0,   285,     0,   287,
     288,   289,     0,   290,   291,   292,     0,     0,   293,     0,
     295,     0,     0,   297,     0,     0,   298,   852,   300,   301,
     302,   303,   304,   541,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,     0,   329,   330,   331,
     332,   333,   334,     0,   335,   336,     0,   338,     0,   339,
     340,   341,   342,   343,   344,     0,   345,   346,     0,     0,
     347,   348,   349,     0,     0,   350,   351,   352,     0,   354,
     355,     0,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,     0,     0,     0,     0,
     371,   372,   373,     0,   375,   376,   377,     0,   378,   379,
     380,     0,   381,   382,   383,   384,   385,     0,   386,     0,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
       0,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,     0,   410,   411,     0,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,     0,     0,   430,   431,   432,
     433,   853,   435,   436,   437,   438,     0,     0,   440,   441,
     442,   443,     0,   444,   445,   446,   447,   448,   449,   450,
     451,   452,   453,   454,   455,   456,   542,   458,   459,     0,
       0,   460,   461,     0,   462,     0,   464,     0,   465,   466,
     467,   468,   469,     0,   470,   854,   472,     0,     0,   855,
     474,   475,   476,   477,     0,   478,   479,   480,   481,   482,
     483,   484,   485,     0,     0,   486,   487,   488,     0,     0,
     489,   490,   491,   492,     0,   493,   494,   495,   496,   497,
     498,   499,   856,     0,   501,     0,   503,   504,   505,   506,
     507,   508,   509,     0,     0,   510,     0,     0,   511,   512,
     513,   514,   515,   516,   517,   518,   519,   520,   521,   522,
     523,   524,   525,   526,   527,   528,   529,   530,   531,   539,
       0,   564,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   120,
     121,   122,   123,   124,   125,   126,   127,     0,   128,   129,
     130,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   132,   133,     0,     0,   135,   136,     0,   138,   139,
     140,   141,   142,     0,   144,   145,     0,   146,   147,   148,
     149,   150,   151,     0,     0,   152,   153,   154,   155,   156,
     157,   158,     0,   159,   160,   161,   162,   163,     0,     0,
       0,   165,   166,   167,   168,   169,   170,     0,   172,   173,
     174,     0,   175,   176,   177,   178,   179,   180,     0,     0,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,     0,   197,     0,   198,   199,
     200,   201,   202,   203,     0,     0,   204,   205,   206,   207,
       0,     0,   208,   209,   210,   211,   212,   213,     0,   214,
     215,   216,     0,   217,   218,   219,     0,   220,   221,   222,
     223,   224,   225,   226,   227,   228,   229,   230,   231,     0,
     232,     0,     0,   233,   234,   235,   236,     0,   237,     0,
     238,     0,     0,     0,   241,   242,   540,     0,   245,     0,
     246,   247,     0,   248,   249,   250,   251,     0,   252,   253,
     254,   255,   256,   257,   258,     0,   260,   261,   262,   263,
       0,   264,   265,   266,   267,   268,   269,   270,     0,   271,
       0,   273,   274,   275,   276,   277,   278,   279,   280,     0,
     281,     0,   282,     0,     0,   285,     0,   287,   288,   289,
       0,   290,   291,   292,     0,     0,   293,     0,   295,     0,
       0,   297,     0,     0,   298,   299,   300,   301,   302,   303,
     304,   541,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,     0,   329,   330,   331,   332,   333,
     334,     0,   335,   336,     0,   338,     0,   339,   340,   341,
     342,   343,   344,     0,   345,   346,     0,     0,   347,   348,
     349,     0,     0,   350,   351,   352,     0,   354,   355,     0,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,     0,     0,     0,     0,   371,   372,
     373,     0,   375,   376,   377,     0,   378,   379,   380,     0,
     381,   382,   383,   384,   385,     0,   386,     0,   387,   388,
     389,   390,   391,   392,   393,   394,   889,   396,     0,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,     0,   410,   411,     0,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,     0,     0,   430,   431,   432,   433,   434,
     435,   436,   437,   438,     0,     0,   440,   441,   442,   443,
       0,   444,   445,   446,   447,   448,   449,   450,   451,   452,
     453,   454,   455,   456,   542,   458,   459,     0,     0,   460,
     461,     0,   462,     0,   464,     0,   465,   466,   467,   468,
     469,     0,   470,   471,   472,     0,     0,   473,   474,   475,
     476,   477,     0,   478,   479,   480,   481,   482,   483,   484,
     485,     0,     0,   486,   487,   488,     0,     0,   489,   490,
     491,   492,     0,   493,   494,   495,   496,   497,   498,   499,
     500,     0,   501,     0,   503,   504,   505,   506,   507,   508,
     509,     0,     0,   510,     0,     0,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   539,     0,   564,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   120,   121,   122,
     123,   124,   125,   126,   127,     0,   128,   129,   130,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   132,
     133,     0,     0,   135,   136,     0,   138,   139,   140,   141,
     142,     0,   144,   145,     0,   146,   147,   148,   149,   150,
     151,     0,     0,   152,   153,   154,   155,   156,   157,   158,
       0,   159,   160,   161,   162,   163,     0,     0,     0,   165,
     166,   167,   168,   169,   170,     0,   172,   173,   174,     0,
     175,   176,   177,   178,   179,   180,     0,     0,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,     0,   197,     0,   198,   199,   200,   201,
     202,   203,     0,     0,   204,   205,   206,   207,     0,     0,
     208,   209,   210,   211,   212,   213,     0,   214,   215,   216,
       0,   217,   218,   219,     0,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,     0,   232,     0,
       0,   233,   234,   235,   236,     0,   237,     0,   238,     0,
       0,     0,   241,   242,   540,     0,   245,     0,   246,   247,
       0,   248,   249,   250,   251,     0,   252,   253,   254,   255,
     256,   922,   258,     0,   260,   261,   262,   263,     0,   264,
     265,   266,   267,   268,   269,   270,     0,   271,     0,   273,
     274,   275,   276,   277,   278,   279,   280,     0,   281,     0,
     282,     0,     0,   285,     0,   287,   288,   289,     0,   290,
     291,   292,     0,     0,   293,     0,   295,     0,     0,   297,
       0,     0,   298,   299,   300,   301,   302,   303,   304,   541,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,     0,   329,   330,   331,   332,   333,   334,     0,
     335,   336,     0,   338,     0,   339,   340,   341,   342,   343,
     344,     0,   345,   346,     0,     0,   347,   348,   349,     0,
       0,   350,   351,   352,     0,   354,   355,     0,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,     0,     0,     0,     0,   371,   372,   373,     0,
     375,   376,   377,     0,   378,   379,   380,     0,   381,   382,
     383,   384,   385,     0,   386,     0,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,     0,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
       0,   410,   411,     0,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,     0,     0,   430,   431,   432,   433,   434,   435,   436,
     437,   438,     0,     0,   440,   441,   442,   443,     0,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   542,   458,   459,     0,     0,   460,   461,     0,
     462,     0,   464,     0,   465,   466,   467,   468,   469,     0,
     470,   471,   472,     0,     0,   473,   474,   475,   476,   477,
       0,   478,   479,   480,   481,   482,   483,   484,   485,     0,
       0,   486,   487,   488,     0,     0,   489,   490,   491,   492,
       0,   493,   494,   495,   496,   497,   498,   499,   500,     0,
     501,     0,   503,   504,   505,   506,   507,   508,   509,     0,
       0,   510,     0,     0,   511,   512,   513,   514,   515,   516,
     517,   518,   519,   520,   521,   522,   523,   524,   525,   526,
     527,   528,   529,   530,   531,   539,     0,   564,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   120,   121,   122,   123,   124,
     125,   126,   127,     0,   128,   129,   130,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   132,   133,     0,
       0,   135,   136,     0,   138,   139,   140,   141,   142,     0,
     144,   145,     0,   146,   147,   148,   149,   150,   151,     0,
       0,   152,   153,   154,   155,   156,   157,   158,     0,   159,
     160,   161,   162,   163,     0,     0,     0,   165,   166,   167,
     168,   169,   170,     0,   172,   173,   174,     0,   175,   176,
     177,   178,   179,   180,     0,     0,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,     0,   197,     0,   198,   199,   200,   201,   202,   203,
       0,     0,   204,   205,   206,   207,     0,     0,   208,   209,
     210,   211,   212,   213,     0,   214,   215,   216,     0,   217,
     218,   219,     0,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,   231,     0,   232,     0,     0,   233,
     234,   235,   236,     0,   237,     0,   238,     0,     0,     0,
     241,   242,   540,     0,   245,     0,   246,   247,     0,   248,
     249,   250,   251,     0,   252,   253,   254,   255,   256,   925,
     258,     0,   260,   261,   262,   263,     0,   264,   265,   266,
     267,   268,   269,   270,     0,   271,     0,   273,   274,   275,
     276,   277,   278,   279,   280,     0,   281,     0,   282,     0,
       0,   285,     0,   287,   288,   289,     0,   290,   291,   292,
       0,     0,   293,     0,   295,     0,     0,   297,     0,     0,
     298,   299,   300,   301,   302,   303,   304,   541,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
       0,   329,   330,   331,   332,   333,   334,     0,   335,   336,
       0,   338,     0,   339,   340,   341,   342,   343,   344,     0,
     345,   346,     0,     0,   347,   348,   349,     0,     0,   350,
     351,   352,     0,   354,   355,     0,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
       0,     0,     0,     0,   371,   372,   373,     0,   375,   376,
     377,     0,   378,   379,   380,     0,   381,   382,   383,   384,
     385,     0,   386,     0,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,     0,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,     0,   410,
     411,     0,   413,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,     0,
       0,   430,   431,   432,   433,   434,   435,   436,   437,   438,
       0,     0,   440,   441,   442,   443,     0,   444,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     542,   458,   459,     0,     0,   460,   461,     0,   462,     0,
     464,     0,   465,   466,   467,   468,   469,     0,   470,   471,
     472,     0,     0,   473,   474,   475,   476,   477,     0,   478,
     479,   480,   481,   482,   483,   484,   485,     0,     0,   486,
     487,   488,     0,     0,   489,   490,   491,   492,     0,   493,
     494,   495,   496,   497,   498,   499,   500,     0,   501,     0,
     503,   504,   505,   506,   507,   508,   509,     0,     0,   510,
       0,     0,   511,   512,   513,   514,   515,   516,   517,   518,
     519,   520,   521,   522,   523,   524,   525,   526,   527,   528,
     529,   530,   531,   539,     0,   564,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   120,   121,   122,   123,   124,   125,   126,
     127,     0,   128,   129,   130,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   132,   133,     0,     0,   135,
     136,     0,   138,   139,   140,   141,   142,     0,   144,   145,
       0,   146,   147,   148,   149,   150,   151,     0,     0,   152,
     153,   154,   155,   156,   157,   158,     0,   159,   160,   161,
     162,   163,     0,     0,     0,   165,   166,   167,   168,   169,
     170,     0,   172,   173,   174,     0,   175,   176,   177,   178,
     179,   180,     0,     0,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,     0,
     197,     0,   198,   199,   200,   201,   202,   203,     0,     0,
     204,   205,   206,   207,     0,     0,   208,   209,   210,   211,
     212,   213,     0,   214,   215,   216,     0,   217,   218,   219,
       0,   220,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   230,   231,     0,   232,     0,     0,   233,   234,   235,
     236,     0,   237,     0,   238,     0,     0,     0,   241,   242,
     540,     0,   245,     0,   246,   247,     0,   248,   249,   250,
     251,     0,   252,   253,   254,   255,   256,   929,   258,     0,
     260,   261,   262,   263,     0,   264,   265,   266,   267,   268,
     269,   270,     0,   271,     0,   273,   274,   275,   276,   277,
     278,   279,   280,     0,   281,     0,   282,     0,     0,   285,
       0,   287,   288,   289,     0,   290,   291,   292,     0,     0,
     293,     0,   295,     0,     0,   297,     0,     0,   298,   299,
     300,   301,   302,   303,   304,   541,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,     0,   329,
     330,   331,   332,   333,   334,     0,   335,   336,     0,   338,
       0,   339,   340,   341,   342,   343,   344,     0,   345,   346,
       0,     0,   347,   348,   349,     0,     0,   350,   351,   352,
       0,   354,   355,     0,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,     0,     0,
       0,     0,   371,   372,   373,     0,   375,   376,   377,     0,
     378,   379,   380,     0,   381,   382,   383,   384,   385,     0,
     386,     0,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,     0,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,     0,   410,   411,     0,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,     0,     0,   430,
     431,   432,   433,   434,   435,   436,   437,   438,     0,     0,
     440,   441,   442,   443,     0,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   542,   458,
     459,     0,     0,   460,   461,     0,   462,     0,   464,     0,
     465,   466,   467,   468,   469,     0,   470,   471,   472,     0,
       0,   473,   474,   475,   476,   477,     0,   478,   479,   480,
     481,   482,   483,   484,   485,     0,     0,   486,   487,   488,
       0,     0,   489,   490,   491,   492,     0,   493,   494,   495,
     496,   497,   498,   499,   500,     0,   501,     0,   503,   504,
     505,   506,   507,   508,   509,     0,     0,   510,     0,     0,
     511,   512,   513,   514,   515,   516,   517,   518,   519,   520,
     521,   522,   523,   524,   525,   526,   527,   528,   529,   530,
     531,   539,     0,   564,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   120,   121,   122,   123,   124,   125,   126,   127,     0,
     128,   129,   130,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   132,   133,     0,     0,   135,   136,     0,
     138,   139,   140,   141,   142,     0,   144,   145,     0,   146,
     147,   148,   149,   150,   151,     0,     0,   152,   153,   154,
     155,   156,   157,   158,     0,   159,   160,   161,   162,   163,
       0,     0,     0,   165,   166,   167,   168,   169,   170,     0,
     172,   173,   174,     0,   175,   176,   177,   178,   179,   180,
       0,     0,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,     0,   197,     0,
     198,   199,   200,   201,   202,   203,     0,     0,   204,   205,
     206,   207,     0,     0,   208,   209,   210,   211,   212,   213,
       0,   214,   215,   216,     0,   217,   218,   219,     0,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
     231,     0,   232,     0,     0,   233,   234,   235,   236,     0,
     237,     0,   238,     0,     0,     0,   241,   242,   540,     0,
     245,     0,   246,   247,     0,   248,   249,   250,   251,     0,
     252,   253,   254,   255,   256,   961,   258,     0,   260,   261,
     262,   263,     0,   264,   265,   266,   267,   268,   269,   270,
       0,   271,     0,   273,   274,   275,   276,   277,   278,   279,
     280,     0,   281,     0,   282,     0,     0,   285,     0,   287,
     288,   289,     0,   290,   291,   292,     0,     0,   293,     0,
     295,     0,     0,   297,     0,     0,   298,   299,   300,   301,
     302,   303,   304,   541,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,     0,   329,   330,   331,
     332,   333,   334,     0,   335,   336,     0,   338,     0,   339,
     340,   341,   342,   343,   344,     0,   345,   346,     0,     0,
     347,   348,   349,     0,     0,   350,   351,   352,     0,   354,
     355,     0,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,     0,     0,     0,     0,
     371,   372,   373,     0,   375,   376,   377,     0,   378,   379,
     380,     0,   381,   382,   383,   384,   385,     0,   386,     0,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
       0,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,     0,   410,   411,     0,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,     0,     0,   430,   431,   432,
     433,   434,   435,   436,   437,   438,     0,     0,   440,   441,
     442,   443,     0,   444,   445,   446,   447,   448,   449,   450,
     451,   452,   453,   454,   455,   456,   542,   458,   459,     0,
       0,   460,   461,     0,   462,     0,   464,     0,   465,   466,
     467,   468,   469,     0,   470,   471,   472,     0,     0,   473,
     474,   475,   476,   477,     0,   478,   479,   480,   481,   482,
     483,   484,   485,     0,     0,   486,   487,   488,     0,     0,
     489,   490,   491,   492,     0,   493,   494,   495,   496,   497,
     498,   499,   500,     0,   501,     0,   503,   504,   505,   506,
     507,   508,   509,     0,     0,   510,     0,     0,   511,   512,
     513,   514,   515,   516,   517,   518,   519,   520,   521,   522,
     523,   524,   525,   526,   527,   528,   529,   530,   531,   539,
       0,   564,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   120,
     121,   122,   123,   124,   125,   126,   127,     0,   128,   129,
     130,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   132,   133,     0,     0,   135,   136,     0,   138,   139,
     140,   141,   142,     0,   144,   145,     0,   146,   147,   148,
     149,   150,   151,     0,     0,   152,   153,   154,   155,   156,
     157,   158,     0,   159,   160,   161,   162,   163,     0,     0,
       0,   165,   166,   167,   168,   169,   170,     0,   172,   173,
     174,     0,   175,   176,   177,   178,   179,   180,     0,     0,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,     0,   197,     0,   198,   199,
     200,   201,   202,   203,     0,     0,   204,   205,   206,   207,
       0,     0,   208,   209,   210,   211,   212,   213,     0,   214,
     215,   216,     0,   217,   218,   219,     0,   220,   221,   222,
     223,   224,   225,   226,   227,   228,   229,   230,   231,     0,
     232,     0,     0,   233,   234,   235,   236,     0,   237,     0,
     238,     0,     0,     0,   241,   242,   540,     0,   245,     0,
     246,   247,     0,   248,   249,   250,   251,     0,   252,   253,
     254,   255,   256,   994,   258,     0,   260,   261,   262,   263,
       0,   264,   265,   266,   267,   268,   269,   270,     0,   271,
       0,   273,   274,   275,   276,   277,   278,   279,   280,     0,
     281,     0,   282,     0,     0,   285,     0,   287,   288,   289,
       0,   290,   291,   292,     0,     0,   293,     0,   295,     0,
       0,   297,     0,     0,   298,   299,   300,   301,   302,   303,
     304,   541,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,     0,   329,   330,   331,   332,   333,
     334,     0,   335,   336,     0,   338,     0,   339,   340,   341,
     342,   343,   344,     0,   345,   346,     0,     0,   347,   348,
     349,     0,     0,   350,   351,   352,     0,   354,   355,     0,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,     0,     0,     0,     0,   371,   372,
     373,     0,   375,   376,   377,     0,   378,   379,   380,     0,
     381,   382,   383,   384,   385,     0,   386,     0,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,     0,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,     0,   410,   411,     0,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,     0,     0,   430,   431,   432,   433,   434,
     435,   436,   437,   438,     0,     0,   440,   441,   442,   443,
       0,   444,   445,   446,   447,   448,   449,   450,   451,   452,
     453,   454,   455,   456,   542,   458,   459,     0,     0,   460,
     461,     0,   462,     0,   464,     0,   465,   466,   467,   468,
     469,     0,   470,   471,   472,     0,     0,   473,   474,   475,
     476,   477,     0,   478,   479,   480,   481,   482,   483,   484,
     485,     0,     0,   486,   487,   488,     0,     0,   489,   490,
     491,   492,     0,   493,   494,   495,   496,   497,   498,   499,
     500,     0,   501,     0,   503,   504,   505,   506,   507,   508,
     509,     0,     0,   510,     0,     0,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   539,     0,   564,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   120,   121,   122,
     123,   124,   125,   126,   127,     0,   128,   129,   130,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   132,
     133,     0,     0,   135,   136,     0,   138,   139,   140,   141,
     142,     0,   144,   145,     0,   146,   147,   148,   149,   150,
     151,     0,     0,   152,   153,   154,   155,   156,   157,   158,
       0,   159,   160,   161,   162,   163,     0,     0,     0,   165,
     166,   167,   168,   169,   170,     0,   172,   173,   174,     0,
     175,   176,   177,   178,   179,   180,     0,     0,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,     0,   197,     0,   198,   199,   200,   201,
     202,   203,     0,     0,   204,   205,   206,   207,     0,     0,
     208,   209,   210,   211,   212,   213,     0,   214,   215,   216,
       0,   217,   218,   219,     0,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,     0,   232,     0,
       0,   233,   234,   235,   236,     0,   237,     0,   238,     0,
       0,     0,   241,   242,   540,     0,   245,     0,   246,   247,
       0,   248,   249,   250,   251,     0,   252,   253,   254,   255,
     256,   997,   258,     0,   260,   261,   262,   263,     0,   264,
     265,   266,   267,   268,   269,   270,     0,   271,     0,   273,
     274,   275,   276,   277,   278,   279,   280,     0,   281,     0,
     282,     0,     0,   285,     0,   287,   288,   289,     0,   290,
     291,   292,     0,     0,   293,     0,   295,     0,     0,   297,
       0,     0,   298,   299,   300,   301,   302,   303,   304,   541,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,     0,   329,   330,   331,   332,   333,   334,     0,
     335,   336,     0,   338,     0,   339,   340,   341,   342,   343,
     344,     0,   345,   346,     0,     0,   347,   348,   349,     0,
       0,   350,   351,   352,     0,   354,   355,     0,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,     0,     0,     0,     0,   371,   372,   373,     0,
     375,   376,   377,     0,   378,   379,   380,     0,   381,   382,
     383,   384,   385,     0,   386,     0,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,     0,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
       0,   410,   411,     0,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,     0,     0,   430,   431,   432,   433,   434,   435,   436,
     437,   438,     0,     0,   440,   441,   442,   443,     0,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   542,   458,   459,     0,     0,   460,   461,     0,
     462,     0,   464,     0,   465,   466,   467,   468,   469,     0,
     470,   471,   472,     0,     0,   473,   474,   475,   476,   477,
       0,   478,   479,   480,   481,   482,   483,   484,   485,     0,
       0,   486,   487,   488,     0,     0,   489,   490,   491,   492,
       0,   493,   494,   495,   496,   497,   498,   499,   500,     0,
     501,     0,   503,   504,   505,   506,   507,   508,   509,     0,
       0,   510,     0,     0,   511,   512,   513,   514,   515,   516,
     517,   518,   519,   520,   521,   522,   523,   524,   525,   526,
     527,   528,   529,   530,   531,   539,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   120,   121,   122,   123,   124,
     125,   126,   127,     0,   128,   129,   130,     0,     0,     0,
       0,     0,     0,     0,  1041,     0,     0,   132,   133,     0,
       0,   135,   136,     0,   138,   139,   140,   141,   142,     0,
     144,   145,     0,   146,   147,   148,   149,   150,   151,     0,
       0,   152,   153,   154,   155,   156,   157,   158,     0,   159,
     160,   161,   162,   163,     0,     0,     0,   165,   166,   167,
     168,   169,   170,     0,   172,   173,   174,     0,   175,   176,
     177,   178,   179,   180,     0,     0,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,     0,   197,     0,   198,   199,   200,   201,   202,   203,
       0,     0,   204,   205,   206,   207,     0,     0,   208,   209,
     210,   211,   212,   213,     0,   214,   215,   216,     0,   217,
     218,   219,     0,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,   231,     0,   232,     0,     0,   233,
     234,   235,   236,     0,   237,     0,   238,     0,     0,     0,
     241,   242,   540,     0,   245,     0,   246,   247,     0,   248,
     249,   250,   251,     0,   252,   253,   254,   255,   256,   257,
     258,     0,   260,   261,   262,   263,     0,   264,   265,   266,
     267,   268,   269,   270,     0,   271,     0,   273,   274,   275,
     276,   277,   278,   279,   280,     0,   281,     0,   282,     0,
       0,   285,     0,   287,   288,   289,     0,   290,   291,   292,
       0,     0,   293,     0,   295,     0,     0,   297,     0,     0,
     298,   299,   300,   301,   302,   303,   304,   541,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
       0,   329,   330,   331,   332,   333,   334,     0,   335,   336,
       0,   338,     0,   339,   340,   341,   342,   343,   344,     0,
     345,   346,     0,     0,   347,   348,   349,     0,     0,   350,
     351,   352,     0,   354,   355,     0,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
       0,     0,     0,     0,   371,   372,   373,     0,   375,   376,
     377,     0,   378,   379,   380,     0,   381,   382,   383,   384,
     385,     0,   386,     0,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,     0,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,     0,   410,
     411,     0,   413,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,     0,
       0,   430,   431,   432,   433,   434,   435,   436,   437,   438,
       0,     0,   440,   441,   442,   443,     0,   444,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     542,   458,   459,     0,     0,   460,   461,     0,   462,     0,
     464,     0,   465,   466,   467,   468,   469,     0,   470,   471,
     472,     0,     0,   473,   474,   475,   476,   477,     0,   478,
     479,   480,   481,   482,   483,   484,   485,     0,     0,   486,
     487,   488,     0,     0,   489,   490,   491,   492,     0,   493,
     494,   495,   496,   497,   498,   499,   500,     0,   501,     0,
     503,   504,   505,   506,   507,   508,   509,     0,     0,   510,
       0,     0,   511,   512,   513,   514,   515,   516,   517,   518,
     519,   520,   521,   522,   523,   524,   525,   526,   527,   528,
     529,   530,   531,   539,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   120,   121,   122,   123,   124,   125,   126,
     127,     0,   128,   129,   130,     0,     0,     0,     0,     0,
       0,     0,  1068,     0,     0,   132,   133,     0,     0,   135,
     136,     0,   138,   139,   140,   141,   142,     0,   144,   145,
       0,   146,   147,   148,   149,   150,   151,     0,     0,   152,
     153,   154,   155,   156,   157,   158,     0,   159,   160,   161,
     162,   163,     0,     0,     0,   165,   166,   167,   168,   169,
     170,     0,   172,   173,   174,     0,   175,   176,   177,   178,
     179,   180,     0,     0,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,     0,
     197,     0,   198,   199,   200,   201,   202,   203,     0,     0,
     204,   205,   206,   207,     0,     0,   208,   209,   210,   211,
     212,   213,     0,   214,   215,   216,     0,   217,   218,   219,
       0,   220,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   230,   231,     0,   232,     0,     0,   233,   234,   235,
     236,     0,   237,     0,   238,     0,     0,     0,   241,   242,
     540,     0,   245,     0,   246,   247,     0,   248,   249,   250,
     251,     0,   252,   253,   254,   255,   256,   257,   258,     0,
     260,   261,   262,   263,     0,   264,   265,   266,   267,   268,
     269,   270,     0,   271,     0,   273,   274,   275,   276,   277,
     278,   279,   280,     0,   281,     0,   282,     0,     0,   285,
       0,   287,   288,   289,     0,   290,   291,   292,     0,     0,
     293,     0,   295,     0,     0,   297,     0,     0,   298,   299,
     300,   301,   302,   303,   304,   541,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,     0,   329,
     330,   331,   332,   333,   334,     0,   335,   336,     0,   338,
       0,   339,   340,   341,   342,   343,   344,     0,   345,   346,
       0,     0,   347,   348,   349,     0,     0,   350,   351,   352,
       0,   354,   355,     0,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,     0,     0,
       0,     0,   371,   372,   373,     0,   375,   376,   377,     0,
     378,   379,   380,     0,   381,   382,   383,   384,   385,     0,
     386,     0,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,     0,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,     0,   410,   411,     0,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,     0,     0,   430,
     431,   432,   433,   434,   435,   436,   437,   438,     0,     0,
     440,   441,   442,   443,     0,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   542,   458,
     459,     0,     0,   460,   461,     0,   462,     0,   464,     0,
     465,   466,   467,   468,   469,     0,   470,   471,   472,     0,
       0,   473,   474,   475,   476,   477,     0,   478,   479,   480,
     481,   482,   483,   484,   485,     0,     0,   486,   487,   488,
       0,     0,   489,   490,   491,   492,     0,   493,   494,   495,
     496,   497,   498,   499,   500,     0,   501,     0,   503,   504,
     505,   506,   507,   508,   509,     0,     0,   510,     0,     0,
     511,   512,   513,   514,   515,   516,   517,   518,   519,   520,
     521,   522,   523,   524,   525,   526,   527,   528,   529,   530,
     531,   539,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   120,   121,   122,   123,   124,   125,   126,   127,   850,
     128,   129,   130,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   132,   133,     0,     0,   135,   136,     0,
     138,   139,   140,   141,   142,     0,   144,   145,     0,   146,
     147,   148,   149,   150,   151,     0,     0,   152,   153,   154,
     155,   156,   157,   158,     0,   159,   160,   161,   162,   163,
       0,     0,     0,   165,   166,   167,   168,   169,   170,     0,
     172,   173,   174,     0,   175,   176,   177,   178,   179,   180,
       0,     0,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,     0,   197,     0,
     198,   199,   200,   201,   202,   203,     0,     0,   204,   205,
     206,   207,     0,     0,   208,   209,   210,   211,   212,   213,
       0,   214,   215,   216,     0,   217,   218,   219,     0,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
     231,     0,   232,     0,     0,   233,   234,   235,   236,     0,
     237,     0,   238,     0,     0,     0,   241,   242,   540,     0,
     245,     0,   246,   247,     0,   248,   249,   250,   251,     0,
     252,   253,   254,   255,   256,   257,   258,     0,   260,   261,
     262,   263,     0,   264,   265,   266,   267,   268,   269,   270,
       0,   271,     0,   273,   274,   275,   276,   277,   278,   279,
     280,     0,   281,     0,   282,     0,     0,   285,     0,   287,
     288,   289,     0,   290,   291,   292,     0,     0,   293,     0,
     295,     0,     0,   297,     0,     0,   298,   299,   300,   301,
     302,   303,   304,   541,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,     0,   329,   330,   331,
     332,   333,   334,     0,   335,   336,     0,   338,     0,   339,
     340,   341,   342,   343,   344,     0,   345,   346,     0,     0,
     347,   348,   349,     0,     0,   350,   351,   352,     0,   354,
     355,     0,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,     0,     0,     0,     0,
     371,   372,   373,     0,   375,   376,   377,     0,   378,   379,
     380,     0,   381,   382,   383,   384,   385,     0,   386,     0,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
       0,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,     0,   410,   411,     0,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,     0,     0,   430,   431,   432,
     433,   434,   435,   436,   437,   438,     0,     0,   440,   441,
     442,   443,     0,   444,   445,   446,   447,   448,   449,   450,
     451,   452,   453,   454,   455,   456,   542,   458,   459,     0,
       0,   460,   461,     0,   462,     0,   464,     0,   465,   466,
     467,   468,   469,     0,   470,   854,   472,     0,     0,   855,
     474,   475,   476,   477,     0,   478,   479,   480,   481,   482,
     483,   484,   485,     0,     0,   486,   487,   488,     0,     0,
     489,   490,   491,   492,     0,   493,   494,   495,   496,   497,
     498,   499,   500,     0,   501,     0,   503,   504,   505,   506,
     507,   508,   509,     0,     0,   510,     0,     0,   511,   512,
     513,   514,   515,   516,   517,   518,   519,   520,   521,   522,
     523,   524,   525,   526,   527,   528,   529,   530,   531,   539,
       0,   564,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   120,
     121,   122,   123,   124,   125,   126,   127,     0,   128,   129,
     130,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   132,   133,     0,     0,   135,   136,     0,   138,   139,
     140,   141,   142,     0,   144,   145,     0,   146,   147,   148,
     149,   150,   151,     0,     0,   152,   153,   154,   155,   156,
     157,   158,     0,   159,   160,   161,   162,   163,     0,     0,
       0,   165,   166,   167,   168,   169,   170,     0,   172,   173,
     174,     0,   175,   176,   177,   178,   179,   180,     0,     0,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,     0,   197,     0,   198,   199,
     200,   201,   202,   203,     0,     0,   204,   205,   206,   207,
       0,     0,   208,   209,   210,   211,   212,   213,     0,   214,
     215,   216,     0,   217,   218,   219,     0,   220,   221,   222,
     223,   224,   225,   226,   227,   228,   229,   230,   231,     0,
     232,     0,     0,   233,   234,   235,   236,     0,   237,     0,
     238,     0,     0,     0,   241,   242,   540,     0,   245,     0,
     246,   247,     0,   248,   249,   250,   251,     0,   252,   253,
     254,   255,   256,  1358,   258,     0,   260,   261,   262,   263,
       0,   264,   265,   266,   267,   268,   269,   270,     0,   271,
       0,   273,   274,   275,   276,   277,   278,   279,   280,     0,
     281,     0,   282,     0,     0,   285,     0,   287,   288,   289,
       0,   290,   291,   292,     0,     0,   293,     0,   295,     0,
       0,   297,     0,     0,   298,   299,   300,   301,   302,   303,
     304,   541,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,     0,   329,   330,   331,   332,   333,
     334,     0,   335,   336,     0,   338,     0,   339,   340,   341,
     342,   343,   344,     0,   345,   346,     0,     0,   347,   348,
     349,     0,     0,   350,   351,   352,     0,   354,   355,     0,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,     0,     0,     0,     0,   371,   372,
     373,     0,   375,   376,   377,     0,   378,   379,   380,     0,
     381,   382,   383,   384,   385,     0,   386,     0,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,     0,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,     0,   410,   411,     0,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,     0,     0,   430,   431,   432,   433,   434,
     435,   436,   437,   438,     0,     0,   440,   441,   442,   443,
       0,   444,   445,   446,   447,   448,   449,   450,   451,   452,
     453,   454,   455,   456,   542,   458,   459,     0,     0,   460,
     461,     0,   462,     0,   464,     0,   465,   466,   467,   468,
     469,     0,   470,   471,   472,     0,     0,   473,   474,   475,
     476,   477,     0,   478,   479,   480,   481,   482,   483,   484,
     485,     0,     0,   486,   487,   488,     0,     0,   489,   490,
     491,   492,     0,   493,   494,   495,   496,   497,   498,   499,
     500,     0,   501,     0,   503,   504,   505,   506,   507,   508,
     509,     0,     0,   510,     0,     0,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   539,     0,   564,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   120,   121,   122,
     123,   124,   125,   126,   127,     0,   128,   129,   130,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   132,
     133,     0,     0,   135,   136,     0,   138,   139,   140,   141,
     142,     0,   144,   145,     0,   146,   147,   148,   149,   150,
     151,     0,     0,   152,   153,   154,   155,   156,   157,   158,
       0,   159,   160,   161,   162,   163,     0,     0,     0,   165,
     166,   167,   168,   169,   170,     0,   172,   173,   174,     0,
     175,   176,   177,   178,   179,   180,     0,     0,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,     0,   197,     0,   198,   199,   200,   201,
     202,   203,     0,     0,   204,   205,   206,   207,     0,     0,
     208,   209,   210,   211,   212,   213,     0,   214,   215,   216,
       0,   217,   218,   219,     0,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,     0,   232,     0,
       0,   233,   234,   235,   236,     0,   237,     0,   238,     0,
       0,     0,   241,   242,   540,     0,   245,     0,   246,   247,
       0,   248,   249,   250,   251,     0,   252,   253,   254,   255,
     256,  1360,   258,     0,   260,   261,   262,   263,     0,   264,
     265,   266,   267,   268,   269,   270,     0,   271,     0,   273,
     274,   275,   276,   277,   278,   279,   280,     0,   281,     0,
     282,     0,     0,   285,     0,   287,   288,   289,     0,   290,
     291,   292,     0,     0,   293,     0,   295,     0,     0,   297,
       0,     0,   298,   299,   300,   301,   302,   303,   304,   541,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,     0,   329,   330,   331,   332,   333,   334,     0,
     335,   336,     0,   338,     0,   339,   340,   341,   342,   343,
     344,     0,   345,   346,     0,     0,   347,   348,   349,     0,
       0,   350,   351,   352,     0,   354,   355,     0,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,     0,     0,     0,     0,   371,   372,   373,     0,
     375,   376,   377,     0,   378,   379,   380,     0,   381,   382,
     383,   384,   385,     0,   386,     0,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,     0,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
       0,   410,   411,     0,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,     0,     0,   430,   431,   432,   433,   434,   435,   436,
     437,   438,     0,     0,   440,   441,   442,   443,     0,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   542,   458,   459,     0,     0,   460,   461,     0,
     462,     0,   464,     0,   465,   466,   467,   468,   469,     0,
     470,   471,   472,     0,     0,   473,   474,   475,   476,   477,
       0,   478,   479,   480,   481,   482,   483,   484,   485,     0,
       0,   486,   487,   488,     0,     0,   489,   490,   491,   492,
       0,   493,   494,   495,   496,   497,   498,   499,   500,     0,
     501,     0,   503,   504,   505,   506,   507,   508,   509,     0,
       0,   510,     0,     0,   511,   512,   513,   514,   515,   516,
     517,   518,   519,   520,   521,   522,   523,   524,   525,   526,
     527,   528,   529,   530,   531,   539,     0,   564,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   120,   121,   122,   123,   124,
     125,   126,   127,     0,   128,   129,   130,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   132,   133,     0,
       0,   135,   136,     0,   138,   139,   140,   141,   142,     0,
     144,   145,     0,   146,   147,   148,   149,   150,   151,     0,
       0,   152,   153,   154,   155,   156,   157,   158,     0,   159,
     160,   161,   162,   163,     0,     0,     0,   165,   166,   167,
     168,   169,   170,     0,   172,   173,   174,     0,   175,   176,
     177,   178,   179,   180,     0,     0,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,     0,   197,     0,   198,   199,   200,   201,   202,   203,
       0,     0,   204,   205,   206,   207,     0,     0,   208,   209,
     210,   211,   212,   213,     0,   214,   215,   216,     0,   217,
     218,   219,     0,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,   231,     0,   232,     0,     0,   233,
     234,   235,   236,     0,   237,     0,   238,     0,     0,     0,
     241,   242,   540,     0,   245,     0,   246,   247,     0,   248,
     249,   250,   251,     0,   252,   253,   254,   255,   256,  1363,
     258,     0,   260,   261,   262,   263,     0,   264,   265,   266,
     267,   268,   269,   270,     0,   271,     0,   273,   274,   275,
     276,   277,   278,   279,   280,     0,   281,     0,   282,     0,
       0,   285,     0,   287,   288,   289,     0,   290,   291,   292,
       0,     0,   293,     0,   295,     0,     0,   297,     0,     0,
     298,   299,   300,   301,   302,   303,   304,   541,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
       0,   329,   330,   331,   332,   333,   334,     0,   335,   336,
       0,   338,     0,   339,   340,   341,   342,   343,   344,     0,
     345,   346,     0,     0,   347,   348,   349,     0,     0,   350,
     351,   352,     0,   354,   355,     0,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
       0,     0,     0,     0,   371,   372,   373,     0,   375,   376,
     377,     0,   378,   379,   380,     0,   381,   382,   383,   384,
     385,     0,   386,     0,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,     0,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,     0,   410,
     411,     0,   413,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,     0,
       0,   430,   431,   432,   433,   434,   435,   436,   437,   438,
       0,     0,   440,   441,   442,   443,     0,   444,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     542,   458,   459,     0,     0,   460,   461,     0,   462,     0,
     464,     0,   465,   466,   467,   468,   469,     0,   470,   471,
     472,     0,     0,   473,   474,   475,   476,   477,     0,   478,
     479,   480,   481,   482,   483,   484,   485,     0,     0,   486,
     487,   488,     0,     0,   489,   490,   491,   492,     0,   493,
     494,   495,   496,   497,   498,   499,   500,     0,   501,     0,
     503,   504,   505,   506,   507,   508,   509,     0,     0,   510,
       0,     0,   511,   512,   513,   514,   515,   516,   517,   518,
     519,   520,   521,   522,   523,   524,   525,   526,   527,   528,
     529,   530,   531,   539,     0,   564,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   120,   121,   122,   123,   124,   125,   126,
     127,     0,   128,   129,   130,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   132,   133,     0,     0,   135,
     136,     0,   138,   139,   140,   141,   142,     0,   144,   145,
       0,   146,   147,   148,   149,   150,   151,     0,     0,   152,
     153,   154,   155,   156,   157,   158,     0,   159,   160,   161,
     162,   163,     0,     0,     0,   165,   166,   167,   168,   169,
     170,     0,   172,   173,   174,     0,   175,   176,   177,   178,
     179,   180,     0,     0,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,     0,
     197,     0,   198,   199,   200,   201,   202,   203,     0,     0,
     204,   205,   206,   207,     0,     0,   208,   209,   210,   211,
     212,   213,     0,   214,   215,   216,     0,   217,   218,   219,
       0,   220,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   230,   231,     0,   232,     0,     0,   233,   234,   235,
     236,     0,   237,     0,   238,     0,     0,     0,   241,   242,
     540,     0,   245,     0,   246,   247,     0,   248,   249,   250,
     251,     0,   252,   253,   254,   255,   256,  1365,   258,     0,
     260,   261,   262,   263,     0,   264,   265,   266,   267,   268,
     269,   270,     0,   271,     0,   273,   274,   275,   276,   277,
     278,   279,   280,     0,   281,     0,   282,     0,     0,   285,
       0,   287,   288,   289,     0,   290,   291,   292,     0,     0,
     293,     0,   295,     0,     0,   297,     0,     0,   298,   299,
     300,   301,   302,   303,   304,   541,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,     0,   329,
     330,   331,   332,   333,   334,     0,   335,   336,     0,   338,
       0,   339,   340,   341,   342,   343,   344,     0,   345,   346,
       0,     0,   347,   348,   349,     0,     0,   350,   351,   352,
       0,   354,   355,     0,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,     0,     0,
       0,     0,   371,   372,   373,     0,   375,   376,   377,     0,
     378,   379,   380,     0,   381,   382,   383,   384,   385,     0,
     386,     0,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,     0,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,     0,   410,   411,     0,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,     0,     0,   430,
     431,   432,   433,   434,   435,   436,   437,   438,     0,     0,
     440,   441,   442,   443,     0,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   542,   458,
     459,     0,     0,   460,   461,     0,   462,     0,   464,     0,
     465,   466,   467,   468,   469,     0,   470,   471,   472,     0,
       0,   473,   474,   475,   476,   477,     0,   478,   479,   480,
     481,   482,   483,   484,   485,     0,     0,   486,   487,   488,
       0,     0,   489,   490,   491,   492,     0,   493,   494,   495,
     496,   497,   498,   499,   500,     0,   501,     0,   503,   504,
     505,   506,   507,   508,   509,     0,     0,   510,     0,     0,
     511,   512,   513,   514,   515,   516,   517,   518,   519,   520,
     521,   522,   523,   524,   525,   526,   527,   528,   529,   530,
     531,   539,     0,   564,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   120,   121,   122,   123,   124,   125,   126,   127,     0,
     128,   129,   130,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   132,   133,     0,     0,   135,   136,     0,
     138,   139,   140,   141,   142,     0,   144,   145,     0,   146,
     147,   148,   149,   150,   151,     0,     0,   152,   153,   154,
     155,   156,   157,   158,     0,   159,   160,   161,   162,   163,
       0,     0,     0,   165,   166,   167,   168,   169,   170,     0,
     172,   173,   174,     0,   175,   176,   177,   178,   179,   180,
       0,     0,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,     0,   197,     0,
     198,   199,   200,   201,   202,   203,     0,     0,   204,   205,
     206,   207,     0,     0,   208,   209,   210,   211,   212,   213,
       0,   214,   215,   216,     0,   217,   218,   219,     0,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
     231,     0,   232,     0,     0,   233,   234,   235,   236,     0,
     237,     0,   238,     0,     0,     0,   241,   242,   540,     0,
     245,     0,   246,   247,     0,   248,   249,   250,   251,     0,
     252,   253,   254,   255,   256,  1367,   258,     0,   260,   261,
     262,   263,     0,   264,   265,   266,   267,   268,   269,   270,
       0,   271,     0,   273,   274,   275,   276,   277,   278,   279,
     280,     0,   281,     0,   282,     0,     0,   285,     0,   287,
     288,   289,     0,   290,   291,   292,     0,     0,   293,     0,
     295,     0,     0,   297,     0,     0,   298,   299,   300,   301,
     302,   303,   304,   541,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,     0,   329,   330,   331,
     332,   333,   334,     0,   335,   336,     0,   338,     0,   339,
     340,   341,   342,   343,   344,     0,   345,   346,     0,     0,
     347,   348,   349,     0,     0,   350,   351,   352,     0,   354,
     355,     0,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,     0,     0,     0,     0,
     371,   372,   373,     0,   375,   376,   377,     0,   378,   379,
     380,     0,   381,   382,   383,   384,   385,     0,   386,     0,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
       0,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,     0,   410,   411,     0,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,     0,     0,   430,   431,   432,
     433,   434,   435,   436,   437,   438,     0,     0,   440,   441,
     442,   443,     0,   444,   445,   446,   447,   448,   449,   450,
     451,   452,   453,   454,   455,   456,   542,   458,   459,     0,
       0,   460,   461,     0,   462,     0,   464,     0,   465,   466,
     467,   468,   469,     0,   470,   471,   472,     0,     0,   473,
     474,   475,   476,   477,     0,   478,   479,   480,   481,   482,
     483,   484,   485,     0,     0,   486,   487,   488,     0,     0,
     489,   490,   491,   492,     0,   493,   494,   495,   496,   497,
     498,   499,   500,     0,   501,     0,   503,   504,   505,   506,
     507,   508,   509,     0,     0,   510,     0,     0,   511,   512,
     513,   514,   515,   516,   517,   518,   519,   520,   521,   522,
     523,   524,   525,   526,   527,   528,   529,   530,   531,  1540,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   120,
     121,   122,   123,   124,   125,   126,   127,     0,   128,   129,
     130,     0,     0,     0,  1541,     0,     0,     0,     0,     0,
    1542,   132,   133,     0,  1543,   135,   136,  1544,   138,   139,
     140,     0,  1545,  1546,  1547,  1548,     0,   146,   147,   148,
     149,   150,   151,     0,     0,   152,   153,   154,   155,  1549,
    1550,   158,     0,   159,   160,   161,   162,     0,     0,  1551,
       0,  1552,   166,   167,   168,   169,   170,  1553,   172,   173,
     174,     0,   175,   176,   177,   178,   179,   180,     0,  1554,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
    1555,   193,   194,  1556,   196,     0,   197,     0,   198,   199,
     200,   201,   202,   203,     0,     0,   204,   205,   206,   207,
       0,     0,   208,   209,  1104,   211,   212,   213,     0,   214,
     215,   216,     0,   217,   218,   219,     0,   220,   221,   222,
     223,     0,   225,   226,   227,   228,   229,   230,     0,     0,
     232,     0,     0,   233,   234,  1557,   236,     0,   237,     0,
     238,  1558,     0,  1559,   241,   242,     0,  1560,   245,     0,
     246,   247,     0,     0,     0,   250,   251,     0,   252,   253,
     254,   255,   256,   257,   258,  1561,   260,   261,   262,   263,
       0,   264,   265,   266,   267,   268,   269,   270,     0,   271,
    1562,     0,   274,   275,   276,   277,   278,  1563,  1564,     0,
    1565,     0,   282,  1566,  1567,   285,  1568,   287,   288,   289,
       0,   290,   291,   292,     0,     0,   293,  1569,   295,  1570,
       0,   297,     0,     0,   298,   299,   300,   301,   302,   303,
     304,  1571,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,  1572,  1573,  1574,   330,   331,   332,   333,
       0,     0,   335,   336,  1575,   338,     0,     0,   340,  1576,
     342,   343,   344,     0,   345,   346,     0,     0,   347,   348,
     349,     0,     0,   350,   351,     0,  1577,   354,   355,  1578,
       0,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,     0,     0,     0,     0,   371,   372,
       0,  1579,   375,   376,     0,     0,   378,   379,   380,     0,
     381,   382,   383,   384,   385,     0,   386,     0,   387,   388,
     389,   390,   391,  1580,   393,   394,   395,   396,     0,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,     0,   410,   411,  1581,   413,   414,   415,  1582,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,     0,  1583,   430,   431,   432,   433,   434,
     435,  1584,   437,   438,     0,  1585,   440,   441,  1586,   443,
       0,   444,   445,   446,   447,   448,   449,   450,   451,   452,
     453,   454,   455,   456,  1587,   458,     0,     0,     0,   460,
     461,     0,   462,  1588,   464,     0,   465,   466,   467,   468,
     469,     0,   470,  1589,  1590,     0,     0,   473,   474,     0,
     476,     0,     0,   478,   479,  1591,   481,   482,   483,   484,
     485,  1592,     0,   486,   487,   488,  1593,     0,   489,   490,
     491,   492,     0,   493,   494,   495,   496,   497,     0,  1594,
     500,     0,   501,  1595,   503,   504,   505,   506,   507,   508,
     509,     0,     0,   510,     0,     0,   511,   512,   513,   514,
     515,   516,   539,     0,   564,     0,     0,     0,     0,     0,
       0,     0,     0,   528,   529,   530,   531,     0,     0,     0,
       0,     0,   120,   121,   122,   123,   124,   125,   126,   127,
       0,   128,   129,   130,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   132,   133,     0,     0,   135,   136,
       0,   138,   139,   140,   141,   142,     0,   144,   145,     0,
     146,   147,   148,   149,   150,   151,     0,     0,   152,   153,
     154,   155,   156,   157,   158,     0,   159,   160,   161,   162,
     163,     0,     0,     0,   165,   166,   167,   168,   169,   170,
       0,   172,   173,   174,     0,   175,   176,   177,   178,   179,
     180,     0,     0,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,     0,   197,
       0,   198,   199,   200,   201,   202,   203,     0,     0,   204,
     205,   206,   207,     0,     0,   208,   209,   210,   211,   212,
     213,     0,   214,   215,   216,     0,   217,   218,   219,     0,
     220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     230,   231,     0,   232,     0,     0,   233,   234,   235,   236,
       0,   237,     0,   238,     0,     0,     0,   241,   242,   540,
       0,   245,     0,   246,   247,     0,   248,   249,   250,   251,
       0,   252,   253,   254,   255,   256,  1936,   258,     0,   260,
     261,   262,   263,     0,   264,   265,   266,   267,   268,   269,
     270,     0,   271,     0,   273,   274,   275,   276,   277,   278,
     279,   280,     0,   281,     0,   282,     0,     0,   285,     0,
     287,   288,   289,     0,   290,   291,   292,     0,     0,   293,
       0,   295,     0,     0,   297,     0,     0,   298,   299,   300,
     301,   302,   303,   304,   541,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,     0,   329,   330,
     331,   332,   333,   334,     0,   335,   336,     0,   338,     0,
     339,   340,   341,   342,   343,   344,     0,   345,   346,     0,
       0,   347,   348,   349,     0,     0,   350,   351,   352,     0,
     354,   355,     0,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,     0,     0,     0,
       0,   371,   372,   373,     0,   375,   376,   377,     0,   378,
     379,   380,     0,   381,   382,   383,   384,   385,     0,   386,
       0,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,     0,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,     0,   410,   411,     0,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,     0,     0,   430,   431,
     432,   433,   434,   435,   436,   437,   438,     0,     0,   440,
     441,   442,   443,     0,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   542,   458,   459,
       0,     0,   460,   461,     0,   462,     0,   464,     0,   465,
     466,   467,   468,   469,     0,   470,   471,   472,     0,     0,
     473,   474,   475,   476,   477,     0,   478,   479,   480,   481,
     482,   483,   484,   485,     0,     0,   486,   487,   488,     0,
       0,   489,   490,   491,   492,     0,   493,   494,   495,   496,
     497,   498,   499,   500,     0,   501,     0,   503,   504,   505,
     506,   507,   508,   509,     0,     0,   510,     0,     0,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520,   521,
     522,   523,   524,   525,   526,   527,   528,   529,   530,   531,
     539,     0,   564,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     120,   121,   122,   123,   124,   125,   126,   127,     0,   128,
     129,   130,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   132,   133,     0,     0,   135,   136,     0,   138,
     139,   140,   141,   142,     0,   144,   145,     0,   146,   147,
     148,   149,   150,   151,     0,     0,   152,   153,   154,   155,
     156,   157,   158,     0,   159,   160,   161,   162,   163,     0,
       0,     0,   165,   166,   167,   168,   169,   170,     0,   172,
     173,   174,     0,   175,   176,   177,   178,   179,   180,     0,
       0,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,     0,   197,     0,   198,
     199,   200,   201,   202,   203,     0,     0,   204,   205,   206,
     207,     0,     0,   208,   209,   210,   211,   212,   213,     0,
     214,   215,   216,     0,   217,   218,   219,     0,   220,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,   231,
       0,   232,     0,     0,   233,   234,   235,   236,     0,   237,
       0,   238,     0,     0,     0,   241,   242,   540,     0,   245,
       0,   246,   247,     0,   248,   249,   250,   251,     0,   252,
     253,   254,   255,   256,  2344,   258,     0,   260,   261,   262,
     263,     0,   264,   265,   266,   267,   268,   269,   270,     0,
     271,     0,   273,   274,   275,   276,   277,   278,   279,   280,
       0,   281,     0,   282,     0,     0,   285,     0,   287,   288,
     289,     0,   290,   291,   292,     0,     0,   293,     0,   295,
       0,     0,   297,     0,     0,   298,   299,   300,   301,   302,
     303,   304,   541,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,     0,   329,   330,   331,   332,
     333,   334,     0,   335,   336,     0,   338,     0,   339,   340,
     341,   342,   343,   344,     0,   345,   346,     0,     0,   347,
     348,   349,     0,     0,   350,   351,   352,     0,   354,   355,
       0,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,     0,     0,     0,     0,   371,
     372,   373,     0,   375,   376,   377,     0,   378,   379,   380,
       0,   381,   382,   383,   384,   385,     0,   386,     0,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,     0,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,     0,   410,   411,     0,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,     0,     0,   430,   431,   432,   433,
     434,   435,   436,   437,   438,     0,     0,   440,   441,   442,
     443,     0,   444,   445,   446,   447,   448,   449,   450,   451,
     452,   453,   454,   455,   456,   542,   458,   459,     0,     0,
     460,   461,     0,   462,     0,   464,     0,   465,   466,   467,
     468,   469,     0,   470,   471,   472,     0,     0,   473,   474,
     475,   476,   477,     0,   478,   479,   480,   481,   482,   483,
     484,   485,     0,     0,   486,   487,   488,     0,     0,   489,
     490,   491,   492,     0,   493,   494,   495,   496,   497,   498,
     499,   500,     0,   501,     0,   503,   504,   505,   506,   507,
     508,   509,     0,     0,   510,     0,     0,   511,   512,   513,
     514,   515,   516,   517,   518,   519,   520,   521,   522,   523,
     524,   525,   526,   527,   528,   529,   530,   531,  1540,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   120,   121,
     122,   123,   124,   125,   126,   127,     0,   128,   129,   130,
       0,     0,     0,  1541,     0,     0,     0,     0,     0,  1542,
     132,   133,     0,  1543,   135,   136,  1544,   138,   139,   140,
       0,  1545,  1546,  1547,  1548,     0,   146,   147,   148,   149,
     150,   151,     0,     0,   152,   153,   154,   155,  1549,  1550,
     158,     0,   159,   160,   161,   162,     0,     0,  1551,     0,
    1552,   166,   167,   168,   169,   170,  1553,   172,   173,   174,
       0,   175,   176,   177,   178,   179,   180,     0,  1554,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,  1555,
     193,   194,  1556,   196,     0,   197,     0,   198,   199,   200,
     201,   202,   203,     0,     0,   204,   205,   206,   207,     0,
       0,   208,   209,  1104,   211,   212,   213,     0,   214,   215,
     216,     0,  2450,   218,   219,     0,   220,   221,   222,   223,
       0,   225,   226,   227,   228,   229,   230,     0,     0,   232,
       0,     0,   233,   234,  1557,   236,     0,   237,     0,   238,
    1558,     0,  1559,   241,   242,     0,  1560,   245,     0,   246,
     247,     0,     0,     0,   250,   251,     0,   252,   253,   254,
     255,   256,   257,   258,  1561,   260,   261,   262,   263,     0,
     264,   265,   266,   267,   268,   269,   270,     0,   271,  1562,
       0,   274,   275,   276,   277,   278,  1563,  1564,     0,  1565,
       0,   282,  1566,  1567,   285,  1568,   287,   288,   289,     0,
     290,   291,   292,     0,     0,   293,  1569,   295,  1570,     0,
     297,     0,     0,   298,   299,   300,   301,   302,   303,   304,
    1571,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,  1572,  1573,  1574,   330,   331,   332,   333,     0,
       0,   335,   336,  1575,   338,     0,     0,   340,  1576,   342,
     343,   344,     0,   345,   346,     0,     0,   347,   348,   349,
       0,     0,   350,   351,     0,  1577,   354,   355,  1578,     0,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,     0,     0,     0,     0,   371,   372,     0,
    1579,   375,   376,     0,     0,   378,   379,   380,     0,   381,
     382,   383,   384,   385,     0,   386,     0,   387,   388,   389,
     390,   391,  1580,   393,   394,   395,   396,     0,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,     0,   410,   411,  1581,   413,   414,   415,  1582,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,     0,  1583,   430,   431,   432,   433,   434,   435,
    1584,   437,   438,     0,  1585,   440,   441,  1586,   443,     0,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,   455,   456,  1587,   458,     0,     0,     0,   460,   461,
       0,   462,  1588,   464,     0,   465,   466,   467,   468,   469,
       0,   470,  1589,  1590,     0,     0,   473,   474,     0,   476,
       0,     0,   478,   479,  1591,   481,   482,   483,   484,   485,
    1592,     0,   486,   487,   488,  1593,     0,   489,   490,   491,
     492,     0,   493,   494,   495,   496,   497,     0,  1594,   500,
       0,   501,  1595,   503,   504,   505,   506,   507,   508,   509,
       0,     0,   510,     0,     0,   511,   512,   513,   514,   515,
     516,   539,     0,   564,     0,     0,     0,     0,     0,     0,
       0,     0,   528,   529,   530,   531,     0,     0,     0,     0,
       0,   120,   121,   122,   123,   124,   125,   126,   127,     0,
     128,   129,   130,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   132,   133,     0,     0,   135,   136,     0,
     138,   139,   140,   141,   142,     0,   144,   145,     0,   146,
     147,   148,   149,   150,   151,     0,     0,   152,   153,   154,
     155,   156,   157,   158,     0,   159,   160,   161,   162,   163,
       0,     0,     0,   165,   166,   167,   168,   169,   170,     0,
     172,   173,   174,     0,   175,   176,   177,   178,   179,   180,
       0,     0,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,     0,   197,     0,
     198,   199,   200,   201,   202,   203,     0,     0,   204,   205,
     206,   207,     0,     0,   208,   209,   210,   211,   212,   213,
       0,   214,   215,   216,     0,   217,   218,   219,     0,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
     231,     0,   232,     0,     0,   233,   234,   235,   236,     0,
     237,     0,   238,     0,     0,     0,   241,   242,   540,     0,
     245,     0,   246,   247,     0,   248,   249,   250,   251,     0,
     252,   253,   254,   255,   256,  3157,   258,     0,   260,   261,
     262,   263,     0,   264,   265,   266,   267,   268,   269,   270,
       0,   271,     0,   273,   274,   275,   276,   277,   278,   279,
     280,     0,   281,     0,   282,     0,     0,   285,     0,   287,
     288,   289,     0,   290,   291,   292,     0,     0,   293,     0,
     295,     0,     0,   297,     0,     0,   298,   299,   300,   301,
     302,   303,   304,   541,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,     0,   329,   330,   331,
     332,   333,   334,     0,   335,   336,     0,   338,     0,   339,
     340,   341,   342,   343,   344,     0,   345,   346,     0,     0,
     347,   348,   349,     0,     0,   350,   351,   352,     0,   354,
     355,     0,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,     0,     0,     0,     0,
     371,   372,   373,     0,   375,   376,   377,     0,   378,   379,
     380,     0,   381,   382,   383,   384,   385,     0,   386,     0,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
       0,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,     0,   410,   411,     0,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,     0,     0,   430,   431,   432,
     433,   434,   435,   436,   437,   438,     0,     0,   440,   441,
     442,   443,     0,   444,   445,   446,   447,   448,   449,   450,
     451,   452,   453,   454,   455,   456,   542,   458,   459,     0,
       0,   460,   461,     0,   462,     0,   464,     0,   465,   466,
     467,   468,   469,     0,   470,   471,   472,     0,     0,   473,
     474,   475,   476,   477,     0,   478,   479,   480,   481,   482,
     483,   484,   485,     0,     0,   486,   487,   488,     0,     0,
     489,   490,   491,   492,     0,   493,   494,   495,   496,   497,
     498,   499,   500,     0,   501,     0,   503,   504,   505,   506,
     507,   508,   509,     0,     0,   510,     0,     0,   511,   512,
     513,   514,   515,   516,   517,   518,   519,   520,   521,   522,
     523,   524,   525,   526,   527,   528,   529,   530,   531,   539,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   120,
     121,   122,   123,   124,   125,   126,   127,     0,   128,   129,
     130,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   132,   133,     0,     0,   135,   136,     0,   138,   139,
     140,   141,   142,     0,   144,   145,     0,   146,   147,   148,
     149,   150,   151,     0,     0,   152,   153,   154,   155,   156,
     157,   158,     0,   159,   160,   161,   162,   163,     0,     0,
       0,   165,   166,   167,   168,   169,   170,     0,   172,   173,
     174,     0,   175,   176,   177,   178,   179,   180,     0,     0,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,     0,   197,     0,   198,   199,
     200,   201,   202,   203,     0,     0,   204,   205,   206,   207,
       0,     0,   208,   209,   210,   211,   212,   213,     0,   214,
     215,   216,     0,   217,   218,   219,     0,   220,   221,   222,
     223,   224,   225,   226,   227,   228,   229,   230,   231,     0,
     232,     0,     0,   233,   234,   235,   236,     0,   237,     0,
     238,     0,     0,     0,   241,   242,   540,     0,   245,     0,
     246,   247,     0,   248,   249,   250,   251,     0,   252,   253,
     254,   255,   256,   257,   258,     0,   260,   261,   262,   263,
       0,   264,   265,   266,   267,   268,   269,   270,     0,   271,
       0,   273,   274,   275,   276,   277,   278,   279,   280,     0,
     281,     0,   282,     0,     0,   285,     0,   287,   288,   289,
       0,   290,   291,   292,     0,     0,   293,     0,   295,     0,
       0,   297,     0,     0,   298,   299,   300,   301,   302,   303,
     304,   541,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,     0,   329,   330,   331,   332,   333,
     334,     0,   335,   336,     0,   338,     0,   339,   340,   341,
     342,   343,   344,     0,   345,   346,     0,     0,   347,   348,
     349,     0,     0,   350,   351,   352,     0,   354,   355,     0,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,     0,     0,     0,     0,   371,   372,
     373,     0,   375,   376,   377,     0,   378,   379,   380,     0,
     381,   382,   383,   384,   385,     0,   386,     0,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,     0,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,     0,   410,   411,     0,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,     0,     0,   430,   431,   432,   433,   434,
     435,   436,   437,   438,     0,     0,   440,   441,   442,   443,
       0,   444,   445,   446,   447,   448,   449,   450,   451,   452,
     453,   454,   455,   456,   542,   458,   459,     0,     0,   460,
     461,     0,   462,     0,   464,     0,   465,   466,   467,   468,
     469,     0,   470,   471,   472,     0,     0,   473,   474,   475,
     476,   477,     0,   478,   479,   480,   481,   482,   483,   484,
     485,     0,     0,   486,   487,   488,     0,     0,   489,   490,
     491,   492,     0,   493,   494,   495,   496,   497,   498,   499,
     500,     0,   501,     0,   503,   504,   505,   506,   507,   508,
     509,     0,     0,   510,     0,     0,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   539,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   120,   121,   122,
     123,   124,   125,   126,   127,     0,   128,   129,   130,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   132,
     133,     0,     0,   135,   136,     0,   138,   139,   140,   141,
     142,     0,   144,   145,     0,   146,   147,   148,   149,   150,
     151,     0,     0,   152,   153,   154,   155,   156,   157,   158,
       0,   159,   160,   161,   162,   163,     0,     0,     0,   165,
     166,   167,   168,   169,   170,     0,   172,   173,   174,     0,
     175,   176,   177,   178,   179,   180,     0,     0,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,     0,   197,     0,   198,   199,   200,   201,
     202,   203,     0,     0,   204,   205,   206,   207,     0,     0,
     208,   209,   210,   211,   212,   213,     0,   214,   215,   216,
       0,   217,   218,   219,     0,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,     0,   232,     0,
       0,   233,   234,   235,   236,     0,   237,     0,   238,     0,
       0,     0,   241,   242,   540,     0,   866,     0,   246,   247,
       0,   248,   249,   250,   251,     0,   252,   253,   254,   255,
     256,   257,   258,     0,   260,   261,   262,   263,     0,   264,
     265,   266,   267,   268,   269,   270,     0,   271,     0,   273,
     274,   275,   276,   277,   278,   279,   280,     0,   281,     0,
     282,     0,     0,   285,     0,   287,   288,   289,     0,   290,
     291,   292,     0,     0,   293,     0,   295,     0,     0,   297,
       0,     0,   298,   867,   300,   301,   302,   303,   304,   541,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,     0,   329,   330,   331,   332,   333,   334,     0,
     335,   336,     0,   338,     0,   339,   340,   341,   342,   343,
     344,     0,   345,   346,     0,     0,   347,   348,   349,     0,
       0,   350,   351,   352,     0,   354,   355,     0,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,     0,     0,     0,     0,   371,   372,   373,     0,
     375,   376,   377,     0,   378,   379,   380,     0,   381,   382,
     383,   384,   385,     0,   386,     0,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,     0,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
       0,   410,   411,     0,   413,   414,   415,   416,   417,   418,
     419,   420,   868,   422,   423,   424,   425,   426,   427,   428,
     429,     0,     0,   430,   431,   432,   433,   869,   435,   436,
     437,   438,     0,     0,   440,   441,   442,   443,     0,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   542,   458,   459,     0,     0,   460,   461,     0,
     462,     0,   464,     0,   465,   466,   467,   468,   469,     0,
     470,   870,   472,     0,     0,   473,   474,   475,   476,   477,
       0,   478,   479,   480,   481,   482,   483,   484,   485,     0,
       0,   486,   487,   488,     0,     0,   489,   490,   491,   492,
       0,   493,   494,   495,   496,   497,   498,   499,   871,     0,
     501,     0,   503,   504,   505,   506,   507,   508,   509,     0,
       0,   510,     0,     0,   511,   512,   513,   514,   515,   516,
     517,   518,   519,   520,   521,   522,   523,   524,   525,   526,
     527,   528,   529,   530,   531,   539,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   120,   121,   122,   123,   124,
     125,   126,   127,     0,   128,   129,   130,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   132,   133,     0,
       0,   135,   136,     0,   138,   139,   140,   141,   142,     0,
     144,   145,     0,   146,   147,   148,   149,   150,   151,     0,
       0,   152,   153,   154,   155,   156,   157,   158,     0,   159,
     160,   161,   162,   163,     0,     0,     0,   165,   166,   167,
     168,   169,   170,     0,   172,   173,   174,     0,   175,   176,
     177,   178,   179,   180,     0,     0,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,     0,   197,     0,   198,   199,   200,   201,   202,   203,
       0,     0,   204,   205,   206,   207,     0,     0,   208,   209,
     210,   211,   212,   213,     0,   214,   215,   216,     0,   217,
     218,   219,     0,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,   231,     0,   232,     0,     0,   233,
     234,   235,   236,     0,   237,     0,   238,     0,     0,     0,
     241,   242,   540,     0,   245,     0,   246,   247,     0,   248,
     249,   250,   251,     0,   252,   253,   254,   255,   256,   990,
     258,     0,   260,   261,   262,   263,     0,   264,   265,   266,
     267,   268,   269,   270,     0,   271,     0,   273,   274,   275,
     276,   277,   278,   279,   280,     0,   281,     0,   282,     0,
       0,   285,     0,   287,   288,   289,     0,   290,   291,   292,
       0,     0,   293,     0,   295,     0,     0,   297,     0,     0,
     298,   299,   300,   301,   302,   303,   304,   541,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
       0,   329,   330,   331,   332,   333,   334,     0,   335,   336,
       0,   338,     0,   339,   340,   341,   342,   343,   344,     0,
     345,   346,     0,     0,   347,   348,   349,     0,     0,   350,
     351,   352,     0,   354,   355,     0,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
       0,     0,     0,     0,   371,   372,   373,     0,   375,   376,
     377,     0,   378,   379,   380,     0,   381,   382,   383,   384,
     385,     0,   386,     0,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,     0,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,     0,   410,
     411,     0,   413,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,     0,
       0,   430,   431,   432,   433,   434,   435,   436,   437,   438,
       0,     0,   440,   441,   442,   443,     0,   444,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     542,   458,   459,     0,     0,   460,   461,     0,   462,     0,
     464,     0,   465,   466,   467,   468,   469,     0,   470,   471,
     472,     0,     0,   473,   474,   475,   476,   477,     0,   478,
     479,   480,   481,   482,   483,   484,   485,     0,     0,   486,
     487,   488,     0,     0,   489,   490,   491,   492,     0,   493,
     494,   495,   496,   497,   498,   499,   500,     0,   501,     0,
     503,   504,   505,   506,   507,   508,   509,     0,     0,   510,
       0,     0,   511,   512,   513,   514,   515,   516,   517,   518,
     519,   520,   521,   522,   523,   524,   525,   526,   527,   528,
     529,   530,   531,   539,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   120,   121,   122,   123,   124,   125,   126,
     127,     0,   128,   129,   130,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   132,   133,     0,     0,   135,
     136,     0,   138,   139,   140,   141,   142,     0,   144,   145,
       0,   146,   147,   148,   149,   150,   151,     0,     0,   152,
     153,   154,   155,   156,   157,   158,     0,   159,   160,   161,
     162,   163,     0,     0,     0,   165,   166,   167,   168,   169,
     170,     0,   172,   173,   174,     0,   175,   176,   177,   178,
     179,   180,     0,     0,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,     0,
     197,     0,   198,   199,   200,   201,   202,   203,     0,     0,
     204,   205,   206,   207,     0,     0,   208,   209,   210,   211,
     212,   213,     0,   214,   215,   216,     0,   217,   218,   219,
       0,   220,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   230,   231,     0,   232,     0,     0,   233,   234,   235,
     236,     0,   237,     0,   238,     0,     0,     0,   241,   242,
     540,     0,   245,     0,   246,   247,     0,   248,   249,   250,
     251,     0,   252,   253,   254,   255,   256,   257,   258,     0,
     260,   261,   262,   263,     0,   264,   265,   266,   267,   268,
     269,   270,     0,   271,     0,   273,   274,   275,   276,   277,
     278,   279,   280,     0,   281,     0,   282,     0,     0,   285,
       0,   287,   288,   289,     0,   290,   291,   292,     0,     0,
     293,     0,   295,     0,     0,   297,     0,     0,   298,   299,
     300,   301,   302,   303,   304,   541,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,     0,   329,
     330,   331,   332,   333,   334,     0,   335,   336,     0,   338,
       0,   339,   340,   341,   342,   343,   344,     0,   345,   346,
       0,     0,   347,   348,   349,     0,     0,   350,   351,   352,
       0,   354,   355,     0,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,     0,     0,
       0,     0,   371,   372,   373,     0,   375,   376,   377,     0,
     378,   379,   380,     0,   381,   382,   383,   384,   385,     0,
     386,     0,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,     0,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,     0,   410,   411,     0,
     413,   414,   415,   416,   417,   418,   419,   420,   868,   422,
     423,   424,   425,   426,   427,   428,   429,     0,     0,   430,
     431,   432,   433,   434,   435,   436,   437,   438,     0,     0,
     440,   441,   442,   443,     0,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   542,   458,
     459,     0,     0,   460,   461,     0,   462,     0,   464,     0,
     465,   466,   467,   468,   469,     0,   470,   870,   472,     0,
       0,   473,   474,   475,   476,   477,     0,   478,   479,   480,
     481,   482,   483,   484,   485,     0,     0,   486,   487,   488,
       0,     0,   489,   490,   491,   492,     0,   493,   494,   495,
     496,   497,   498,   499,   500,     0,   501,     0,   503,   504,
     505,   506,   507,   508,   509,     0,     0,   510,     0,     0,
     511,   512,   513,   514,   515,   516,   517,   518,   519,   520,
     521,   522,   523,   524,   525,   526,   527,   528,   529,   530,
     531,   539,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   120,   121,   122,   123,   124,   125,   126,   127,     0,
     128,   129,   130,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   132,   133,     0,     0,   135,   136,     0,
     138,   139,   140,   141,   142,     0,   144,   145,     0,   146,
     147,   148,   149,   150,   151,     0,     0,   152,   153,   154,
     155,   156,   157,   158,     0,   159,   160,   161,   162,   163,
       0,     0,     0,   165,   166,   167,   168,   169,   170,     0,
     172,   173,   174,     0,   175,   176,   177,   178,   179,   180,
       0,     0,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,     0,   197,     0,
     198,   199,   200,   201,   202,   203,     0,     0,   204,   205,
     206,   207,     0,     0,   208,   209,   210,   211,   212,   213,
       0,   214,   215,   216,     0,   217,   218,   219,     0,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
     231,     0,   232,     0,     0,   233,   234,   235,   236,     0,
     237,     0,   238,     0,     0,     0,   241,   242,   540,     0,
     245,     0,   246,   247,     0,   248,   249,   250,   251,     0,
     252,   253,   254,   255,   256,  1370,   258,     0,   260,   261,
     262,   263,     0,   264,   265,   266,   267,   268,   269,   270,
       0,   271,     0,   273,   274,   275,   276,   277,   278,   279,
     280,     0,   281,     0,   282,     0,     0,   285,     0,   287,
     288,   289,     0,   290,   291,   292,     0,     0,   293,     0,
     295,     0,     0,   297,     0,     0,   298,   299,   300,   301,
     302,   303,   304,   541,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,     0,   329,   330,   331,
     332,   333,   334,     0,   335,   336,     0,   338,     0,   339,
     340,   341,   342,   343,   344,     0,   345,   346,     0,     0,
     347,   348,   349,     0,     0,   350,   351,   352,     0,   354,
     355,     0,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,     0,     0,     0,     0,
     371,   372,   373,     0,   375,   376,   377,     0,   378,   379,
     380,     0,   381,   382,   383,   384,   385,     0,   386,     0,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
       0,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,     0,   410,   411,     0,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,     0,     0,   430,   431,   432,
     433,   434,   435,   436,   437,   438,     0,     0,   440,   441,
     442,   443,     0,   444,   445,   446,   447,   448,   449,   450,
     451,   452,   453,   454,   455,   456,   542,   458,   459,     0,
       0,   460,   461,     0,   462,     0,   464,     0,   465,   466,
     467,   468,   469,     0,   470,   471,   472,     0,     0,   473,
     474,   475,   476,   477,     0,   478,   479,   480,   481,   482,
     483,   484,   485,     0,     0,   486,   487,   488,     0,     0,
     489,   490,   491,   492,     0,   493,   494,   495,   496,   497,
     498,   499,   500,     0,   501,     0,   503,   504,   505,   506,
     507,   508,   509,     0,     0,   510,     0,     0,   511,   512,
     513,   514,   515,   516,   517,   518,   519,   520,   521,   522,
     523,   524,   525,   526,   527,   528,   529,   530,   531,   539,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   120,
     121,   122,   123,   124,   125,   126,   127,     0,   128,   129,
     130,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   132,   133,     0,     0,   135,   136,     0,   138,   139,
     140,   141,   142,     0,   144,   145,     0,   146,   147,   148,
     149,   150,   151,     0,     0,   152,   153,   154,   155,   156,
     157,   158,     0,   159,   160,   161,   162,   163,     0,     0,
       0,   165,   166,   167,   168,   169,   170,     0,   172,   173,
     174,     0,   175,   176,   177,   178,   179,   180,     0,     0,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,     0,   197,     0,   198,   199,
     200,   201,   202,   203,     0,     0,   204,   205,   206,   207,
       0,     0,   208,   209,   210,   211,   212,   213,     0,   214,
     215,   216,     0,   217,   218,   219,     0,   220,   221,   222,
     223,   224,   225,   226,   227,   228,   229,   230,   231,     0,
     232,     0,     0,   233,   234,   235,   236,     0,   237,     0,
     238,     0,     0,     0,   241,   242,   540,     0,   245,     0,
     246,   247,     0,   248,   249,   250,   251,     0,   252,   253,
     254,   255,   256,  1381,   258,     0,   260,   261,   262,   263,
       0,   264,   265,   266,   267,   268,   269,   270,     0,   271,
       0,   273,   274,   275,   276,   277,   278,   279,   280,     0,
     281,     0,   282,     0,     0,   285,     0,   287,   288,   289,
       0,   290,   291,   292,     0,     0,   293,     0,   295,     0,
       0,   297,     0,     0,   298,   299,   300,   301,   302,   303,
     304,   541,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,     0,   329,   330,   331,   332,   333,
     334,     0,   335,   336,     0,   338,     0,   339,   340,   341,
     342,   343,   344,     0,   345,   346,     0,     0,   347,   348,
     349,     0,     0,   350,   351,   352,     0,   354,   355,     0,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,     0,     0,     0,     0,   371,   372,
     373,     0,   375,   376,   377,     0,   378,   379,   380,     0,
     381,   382,   383,   384,   385,     0,   386,     0,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,     0,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,     0,   410,   411,     0,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,     0,     0,   430,   431,   432,   433,   434,
     435,   436,   437,   438,     0,     0,   440,   441,   442,   443,
       0,   444,   445,   446,   447,   448,   449,   450,   451,   452,
     453,   454,   455,   456,   542,   458,   459,     0,     0,   460,
     461,     0,   462,     0,   464,     0,   465,   466,   467,   468,
     469,     0,   470,   471,   472,     0,     0,   473,   474,   475,
     476,   477,     0,   478,   479,   480,   481,   482,   483,   484,
     485,     0,     0,   486,   487,   488,     0,     0,   489,   490,
     491,   492,     0,   493,   494,   495,   496,   497,   498,   499,
     500,     0,   501,     0,   503,   504,   505,   506,   507,   508,
     509,     0,     0,   510,     0,     0,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   539,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   120,   121,   122,
     123,   124,   125,   126,   127,     0,   128,   129,   130,     0,
       0,     0,     0,     0,     0,     0,  1740,     0,     0,   132,
     133,     0,     0,   135,   136,     0,   138,   139,   140,   141,
     142,     0,   144,   145,     0,   146,   147,   148,   149,   150,
     151,     0,     0,   152,   153,   154,   155,   156,   157,   158,
       0,   159,   160,   161,   162,   163,     0,     0,     0,   165,
     166,   167,   168,   169,   170,     0,   172,   173,   174,     0,
     175,   176,   177,   178,   179,   180,     0,     0,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,     0,   197,     0,   198,   199,   200,   201,
     202,   203,     0,     0,   204,   205,   206,   207,     0,     0,
     208,   209,   210,   211,   212,   213,     0,   214,   215,   216,
       0,   217,   218,   219,     0,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,     0,   232,     0,
       0,   233,   234,   235,   236,     0,   237,     0,   238,     0,
       0,     0,   241,   242,   540,     0,   245,     0,   246,   247,
       0,   248,   249,   250,   251,     0,   252,   253,   254,   255,
     256,   257,   258,     0,   260,   261,   262,   263,     0,   264,
     265,   266,   267,   268,   269,   270,     0,   271,     0,   273,
     274,   275,   276,   277,   278,   279,   280,     0,   281,     0,
     282,     0,     0,   285,     0,   287,   288,   289,     0,   290,
     291,   292,     0,     0,   293,     0,   295,     0,     0,   297,
       0,     0,   298,   299,   300,   301,   302,   303,   304,   541,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,     0,   329,   330,   331,   332,   333,   334,     0,
     335,   336,     0,   338,     0,   339,   340,   341,   342,   343,
     344,     0,   345,   346,     0,     0,   347,   348,   349,     0,
       0,   350,   351,   352,     0,   354,   355,     0,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,     0,     0,     0,     0,   371,   372,   373,     0,
     375,   376,   377,     0,   378,   379,   380,     0,   381,   382,
     383,   384,   385,     0,   386,     0,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,     0,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
       0,   410,   411,     0,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,     0,     0,   430,   431,   432,   433,   434,     0,   436,
     437,   438,     0,     0,   440,   441,   442,   443,     0,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   542,   458,   459,     0,     0,   460,   461,     0,
     462,     0,   464,     0,   465,   466,   467,   468,   469,     0,
     470,   471,   472,     0,     0,   473,   474,   475,   476,   477,
       0,   478,   479,   480,   481,   482,   483,   484,   485,     0,
       0,   486,   487,   488,     0,     0,   489,   490,   491,   492,
       0,   493,   494,   495,   496,   497,   498,   499,   500,     0,
     501,     0,   503,   504,   505,   506,   507,   508,   509,     0,
       0,   510,     0,     0,   511,   512,   513,   514,   515,   516,
     517,   518,   519,   520,   521,   522,   523,   524,   525,   526,
     527,   528,   529,   530,   531,   539,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   120,   121,   122,   123,   124,
     125,   126,   127,     0,   128,   129,   130,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   132,   133,     0,
       0,   135,   136,     0,   138,   139,   140,   141,   142,     0,
     144,   145,     0,   146,   147,   148,   149,   150,   151,     0,
       0,   152,   153,   154,   155,   156,   157,   158,     0,   159,
     160,   161,   162,   163,     0,     0,     0,   165,   166,   167,
     168,   169,   170,     0,   172,   173,   174,     0,   175,   176,
     177,   178,   179,   180,     0,     0,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,     0,   197,     0,   198,   199,   200,   201,   202,   203,
       0,     0,   204,   205,   206,   207,     0,     0,   208,   209,
     210,   211,   212,   213,     0,   214,   215,   216,     0,   217,
     218,   219,     0,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,   231,     0,   232,     0,     0,   233,
     234,   235,   236,     0,   237,     0,   238,     0,     0,     0,
     241,   242,   540,     0,   245,     0,   246,   247,     0,   248,
     249,   250,   251,     0,   252,   253,   254,   255,   256,  1941,
     258,     0,   260,   261,   262,   263,     0,   264,   265,   266,
     267,   268,   269,   270,     0,   271,     0,   273,   274,   275,
     276,   277,   278,   279,   280,     0,   281,     0,   282,     0,
       0,   285,     0,   287,   288,   289,     0,   290,   291,   292,
       0,     0,   293,     0,   295,     0,     0,   297,     0,     0,
     298,   299,   300,   301,   302,   303,   304,   541,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
       0,   329,   330,   331,   332,   333,   334,     0,   335,   336,
       0,   338,     0,   339,   340,   341,   342,   343,   344,     0,
     345,   346,     0,     0,   347,   348,   349,     0,     0,   350,
     351,   352,     0,   354,   355,     0,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
       0,     0,     0,     0,   371,   372,   373,     0,   375,   376,
     377,     0,   378,   379,   380,     0,   381,   382,   383,   384,
     385,     0,   386,     0,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,     0,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,     0,   410,
     411,     0,   413,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,     0,
       0,   430,   431,   432,   433,   434,   435,   436,   437,   438,
       0,     0,   440,   441,   442,   443,     0,   444,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     542,   458,   459,     0,     0,   460,   461,     0,   462,     0,
     464,     0,   465,   466,   467,   468,   469,     0,   470,   471,
     472,     0,     0,   473,   474,   475,   476,   477,     0,   478,
     479,   480,   481,   482,   483,   484,   485,     0,     0,   486,
     487,   488,     0,     0,   489,   490,   491,   492,     0,   493,
     494,   495,   496,   497,   498,   499,   500,     0,   501,     0,
     503,   504,   505,   506,   507,   508,   509,     0,     0,   510,
       0,     0,   511,   512,   513,   514,   515,   516,   517,   518,
     519,   520,   521,   522,   523,   524,   525,   526,   527,   528,
     529,   530,   531,   539,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   120,   121,   122,   123,   124,   125,   126,
     127,     0,   128,   129,   130,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   132,   133,     0,     0,   135,
     136,     0,   138,   139,   140,   141,   142,     0,   144,   145,
       0,   146,   147,   148,   149,   150,   151,     0,     0,   152,
     153,   154,   155,   156,   157,   158,     0,   159,   160,   161,
     162,   163,     0,     0,     0,   165,   166,   167,   168,   169,
     170,     0,   172,   173,   174,     0,   175,   176,   177,   178,
     179,   180,     0,     0,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,     0,
     197,     0,   198,   199,   200,   201,   202,   203,     0,     0,
     204,   205,   206,   207,     0,     0,   208,   209,   210,   211,
     212,   213,     0,   214,   215,   216,     0,   217,   218,   219,
       0,   220,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   230,   231,     0,   232,     0,     0,   233,   234,   235,
     236,     0,   237,     0,   238,     0,     0,     0,   241,   242,
     540,     0,   245,     0,   246,   247,     0,   248,   249,   250,
     251,     0,   252,   253,   254,   255,   256,  2326,   258,     0,
     260,   261,   262,   263,     0,   264,   265,   266,   267,   268,
     269,   270,     0,   271,     0,   273,   274,   275,   276,   277,
     278,   279,   280,     0,   281,     0,   282,     0,     0,   285,
       0,   287,   288,   289,     0,   290,   291,   292,     0,     0,
     293,     0,   295,     0,     0,   297,     0,     0,   298,   299,
     300,   301,   302,   303,   304,   541,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,     0,   329,
     330,   331,   332,   333,   334,     0,   335,   336,     0,   338,
       0,   339,   340,   341,   342,   343,   344,     0,   345,   346,
       0,     0,   347,   348,   349,     0,     0,   350,   351,   352,
       0,   354,   355,     0,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,     0,     0,
       0,     0,   371,   372,   373,     0,   375,   376,   377,     0,
     378,   379,   380,     0,   381,   382,   383,   384,   385,     0,
     386,     0,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,     0,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,     0,   410,   411,     0,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,     0,     0,   430,
     431,   432,   433,   434,   435,   436,   437,   438,     0,     0,
     440,   441,   442,   443,     0,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   542,   458,
     459,     0,     0,   460,   461,     0,   462,     0,   464,     0,
     465,   466,   467,   468,   469,     0,   470,   471,   472,     0,
       0,   473,   474,   475,   476,   477,     0,   478,   479,   480,
     481,   482,   483,   484,   485,     0,     0,   486,   487,   488,
       0,     0,   489,   490,   491,   492,     0,   493,   494,   495,
     496,   497,   498,   499,   500,     0,   501,     0,   503,   504,
     505,   506,   507,   508,   509,     0,     0,   510,     0,     0,
     511,   512,   513,   514,   515,   516,   517,   518,   519,   520,
     521,   522,   523,   524,   525,   526,   527,   528,   529,   530,
     531,   539,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   120,   121,   122,   123,   124,   125,   126,   127,     0,
     128,   129,   130,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   132,   133,     0,     0,   135,   136,     0,
     138,   139,   140,   141,   142,     0,   144,   145,     0,   146,
     147,   148,   149,   150,   151,     0,     0,   152,   153,   154,
     155,   156,   157,   158,     0,   159,   160,   161,   162,   163,
       0,     0,     0,   165,   166,   167,   168,   169,   170,     0,
     172,   173,   174,     0,   175,   176,   177,   178,   179,   180,
       0,     0,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,     0,   197,     0,
     198,   199,   200,   201,   202,   203,     0,     0,   204,   205,
     206,   207,     0,     0,   208,   209,   210,   211,   212,   213,
       0,   214,   215,   216,     0,   217,   218,   219,     0,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
     231,     0,   232,     0,     0,   233,   234,   235,   236,     0,
     237,     0,   238,     0,     0,     0,   241,   242,   540,     0,
     245,     0,   246,   247,     0,   248,   249,   250,   251,     0,
     252,   253,   254,   255,   256,  2346,   258,     0,   260,   261,
     262,   263,     0,   264,   265,   266,   267,   268,   269,   270,
       0,   271,     0,   273,   274,   275,   276,   277,   278,   279,
     280,     0,   281,     0,   282,     0,     0,   285,     0,   287,
     288,   289,     0,   290,   291,   292,     0,     0,   293,     0,
     295,     0,     0,   297,     0,     0,   298,   299,   300,   301,
     302,   303,   304,   541,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,     0,   329,   330,   331,
     332,   333,   334,     0,   335,   336,     0,   338,     0,   339,
     340,   341,   342,   343,   344,     0,   345,   346,     0,     0,
     347,   348,   349,     0,     0,   350,   351,   352,     0,   354,
     355,     0,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,     0,     0,     0,     0,
     371,   372,   373,     0,   375,   376,   377,     0,   378,   379,
     380,     0,   381,   382,   383,   384,   385,     0,   386,     0,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
       0,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,     0,   410,   411,     0,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,     0,     0,   430,   431,   432,
     433,   434,   435,   436,   437,   438,     0,     0,   440,   441,
     442,   443,     0,   444,   445,   446,   447,   448,   449,   450,
     451,   452,   453,   454,   455,   456,   542,   458,   459,     0,
       0,   460,   461,     0,   462,     0,   464,     0,   465,   466,
     467,   468,   469,     0,   470,   471,   472,     0,     0,   473,
     474,   475,   476,   477,     0,   478,   479,   480,   481,   482,
     483,   484,   485,     0,     0,   486,   487,   488,     0,     0,
     489,   490,   491,   492,     0,   493,   494,   495,   496,   497,
     498,   499,   500,     0,   501,     0,   503,   504,   505,   506,
     507,   508,   509,     0,     0,   510,     0,     0,   511,   512,
     513,   514,   515,   516,   517,   518,   519,   520,   521,   522,
     523,   524,   525,   526,   527,   528,   529,   530,   531,  3353,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   120,
     121,   122,   123,   124,   125,   126,   127,     0,   128,   129,
     130,     0,     0,     0,  3074,     0,     0,     0,     0,     0,
    3075,   132,   133,     0,  3076,   135,   136,  3077,   138,   139,
     140,     0,  1545,  3078,  1547,  1548,     0,   146,   147,   148,
     149,   150,   151,     0,     0,   152,   153,   154,   155,  1549,
    1550,   158,     0,   159,   160,   161,   162,     0,     0,  3079,
       0,  3080,   166,   167,   168,   169,   170,  3081,   172,   173,
     174,     0,   175,   176,   177,   178,   179,   180,     0,  3082,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
    1555,   193,   194,  1556,   196,     0,   197,     0,   198,   199,
     200,   201,   202,   203,     0,     0,   204,   205,   206,   207,
       0,     0,   208,   209,  1104,   211,   212,   213,     0,   214,
     215,   216,     0,   217,   218,   219,     0,   220,   221,   222,
     223,     0,   225,   226,   227,   228,   229,   230,     0,     0,
     232,     0,     0,   233,   234,  1557,   236,     0,   237,     0,
     238,  3083,     0,  3084,   241,   242,  3085,  3086,   245,     0,
     246,   247,     0,     0,     0,   250,   251,     0,   252,   253,
     254,   255,   256,   257,   258,  3087,   260,   261,   262,   263,
       0,   264,   265,   266,   267,   268,   269,   270,     0,   271,
    3088,     0,   274,   275,   276,   277,   278,  1563,  1564,     0,
    1565,     0,   282,  3089,  3090,   285,  3091,   287,   288,   289,
       0,   290,   291,   292,     0,     0,   293,  3092,   295,  3093,
       0,   297,     0,     0,   298,   299,   300,   301,   302,   303,
     304,  3354,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,  1572,  3095,  1574,   330,   331,   332,   333,
       0,     0,   335,   336,  3097,   338,     0,     0,   340,  1576,
     342,   343,   344,     0,   345,   346,     0,     0,   347,   348,
     349,     0,     0,   350,   351,     0,  3099,   354,   355,  3100,
       0,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,     0,     0,     0,     0,   371,   372,
       0,  3101,   375,   376,     0,     0,   378,   379,   380,     0,
     381,   382,   383,   384,   385,     0,   386,     0,   387,   388,
     389,   390,   391,  1580,   393,   394,   395,   396,     0,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,     0,   410,   411,  3102,   413,   414,   415,     0,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,     0,  3103,   430,   431,   432,   433,   434,
     435,     0,   437,   438,     0,  3105,   440,   441,  1586,   443,
       0,   444,   445,   446,   447,   448,   449,   450,   451,   452,
     453,   454,   455,   456,  3355,   458,     0,     0,     0,   460,
     461,     0,   462,  3107,   464,     0,   465,   466,   467,   468,
     469,     0,   470,  1589,  1590,     0,     0,   473,   474,     0,
     476,     0,     0,   478,   479,  3108,   481,   482,   483,   484,
     485,     0,     0,   486,   487,   488,  3110,     0,   489,   490,
     491,   492,     0,   493,   494,   495,   496,   497,     0,  1594,
     500,     0,   501,  3111,   503,   504,   505,   506,   507,   508,
     509,     0,     0,   510,     0,     0,   511,   512,   513,   514,
     515,   516,  1845,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   528,   529,   530,   531,     0,     0,     0,
       0,     0,   120,   121,   122,   123,   124,   125,   126,   127,
       0,   128,   129,   130,     0,     0,     0,  1541,     0,     0,
       0,     0,     0,  1542,   132,   133,     0,  1543,   135,   136,
    1544,   138,   139,   140,     0,  1545,  1546,  1547,  1548,     0,
     146,   147,   148,   149,   150,   151,     0,     0,   152,   153,
     154,   155,  1549,  1550,   158,     0,   159,   160,   161,   162,
       0,     0,  1551,     0,  1552,   166,   167,   168,   169,   170,
    1553,   172,   173,   174,     0,   175,   176,   177,   178,   179,
     180,     0,  1554,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,  1555,   193,   194,  1556,   196,     0,   197,
       0,   198,   199,   200,   201,   202,   203,     0,     0,   204,
     205,   206,   207,     0,     0,   208,   209,  1104,   211,   212,
     213,     0,   214,   215,   216,     0,   217,   218,   219,     0,
     220,   221,   222,   223,     0,   225,   226,   227,   228,   229,
     230,     0,     0,   232,     0,     0,   233,   234,  1557,   236,
       0,   237,     0,   238,  1558,     0,  1559,   241,   242,     0,
    1560,   245,     0,   246,   247,     0,     0,     0,   250,   251,
       0,   252,   253,   254,   255,   256,   257,   258,  1561,   260,
     261,   262,   263,     0,   264,   265,   266,   267,   268,   269,
     270,     0,   271,  1562,     0,   274,   275,   276,   277,   278,
    1563,  1564,     0,  1565,     0,   282,  1566,  1567,   285,  1568,
     287,   288,   289,     0,   290,   291,   292,     0,     0,   293,
    1569,   295,  1570,     0,   297,     0,     0,   298,   299,   300,
     301,   302,   303,   304,     0,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,  1572,  1573,  1574,   330,
     331,   332,   333,     0,     0,   335,   336,  1575,   338,     0,
       0,   340,  1576,   342,   343,   344,     0,   345,   346,     0,
       0,   347,   348,   349,     0,     0,   350,   351,     0,  1577,
     354,   355,  1578,     0,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,     0,     0,     0,
       0,   371,   372,     0,  1579,   375,   376,     0,     0,   378,
     379,   380,     0,   381,   382,   383,   384,   385,     0,   386,
       0,   387,   388,   389,   390,   391,  1580,   393,   394,   395,
     396,     0,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,     0,   410,   411,  1581,   413,
     414,   415,     0,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,     0,  1583,   430,   431,
     432,   433,   434,   435,     0,   437,   438,     0,  1585,   440,
     441,  1586,   443,     0,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   453,   454,   455,   456,     0,   458,     0,
       0,     0,   460,   461,     0,   462,  1588,   464,     0,   465,
     466,   467,   468,   469,     0,   470,  1589,  1590,     0,     0,
     473,   474,     0,   476,     0,     0,   478,   479,  1591,   481,
     482,   483,   484,   485,     0,     0,   486,   487,   488,  1593,
       0,   489,   490,   491,   492,     0,   493,   494,   495,   496,
     497,     0,  1594,   500,     0,   501,  1595,   503,   504,   505,
     506,   507,   508,   509,     0,     0,   510,     0,     0,   511,
     512,   513,   514,   515,   516,   539,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   528,   529,   530,   531,
       0,     0,     0,     0,     0,   120,   121,   122,   123,   124,
     125,   126,   127,     0,   128,   129,   130,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   132,   133,     0,
       0,   135,   136,     0,   138,   139,   140,   141,   142,     0,
     144,   145,     0,   146,   147,   148,   149,   150,   151,     0,
       0,   152,   153,   154,   155,   156,   157,   158,     0,   159,
     160,   161,   162,   163,     0,     0,     0,   165,   166,   167,
     168,   169,   170,     0,   172,   173,   174,     0,   175,   176,
     177,   178,   179,   180,     0,     0,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,     0,   197,     0,   198,   199,   200,   201,   202,   203,
       0,     0,   204,   205,   206,   207,     0,     0,   208,   209,
     210,   211,   212,   213,     0,   214,   215,   216,     0,   217,
     218,   219,     0,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,   231,     0,   232,     0,     0,   233,
     234,   235,   236,     0,   237,     0,   238,     0,     0,     0,
     241,   242,   540,     0,   245,     0,   246,   247,     0,   248,
     249,     0,   251,     0,   252,   253,   254,   255,   256,   257,
     258,     0,   260,   261,   262,   263,     0,   264,   265,   266,
     267,   268,   269,   270,     0,   271,     0,   273,   274,   275,
     276,   277,   278,   279,   280,     0,   281,     0,   282,     0,
       0,   285,     0,   287,   288,   289,     0,   290,   291,   292,
       0,     0,   293,     0,   295,     0,     0,   297,     0,     0,
     298,   299,   300,   301,   302,   303,   304,   541,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
       0,   329,   330,   331,   332,   333,   334,     0,   335,   336,
       0,   338,     0,   339,   340,   341,   342,   343,   344,     0,
     345,   346,     0,     0,   347,   348,   349,     0,     0,   350,
     351,   352,     0,   354,   355,     0,   357,   358,   359,   360,
     361,   362,   363,     0,   365,   366,   367,   368,   369,   370,
       0,     0,     0,     0,   371,   372,   373,     0,   375,   376,
     377,     0,   378,   379,   380,     0,   381,   382,   383,   384,
     385,     0,   386,     0,   387,   388,   389,     0,   391,   392,
     393,   394,   395,   396,     0,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,     0,   410,
     411,     0,   413,   414,   415,   416,     0,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,     0,
       0,   430,   431,   432,   433,   434,   435,   436,   437,   438,
       0,     0,   440,   441,   442,   443,     0,   444,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     542,   458,   459,     0,     0,   460,   461,     0,   462,     0,
     464,     0,   465,   466,   467,   468,   469,     0,   470,   471,
     472,     0,     0,   473,   474,   475,   476,   477,     0,   478,
     479,   480,   481,   482,   483,   484,   485,     0,     0,   486,
     487,   488,     0,     0,   489,   490,   491,   492,     0,   493,
     494,   495,   496,   497,   498,   499,   500,     0,   501,     0,
     503,   504,   505,   506,   507,   508,   509,     0,     0,   510,
       0,     0,   511,   512,   513,   514,   515,   516,   517,   518,
     519,   520,   521,   522,   523,   524,   525,   526,   527,   528,
     529,   530,   531,     1,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,     0,     3,     4,     0,     0,     0,
       0,     0,     1,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,     0,     6,     0,     0,     0,     0,     0,
       0,     0,     0,     7,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     6,     0,     0,     0,     8,     0,     0,
       0,     0,     7,     0,     0,     0,     0,     0,    10,     0,
       0,     0,     0,     0,     0,     0,     8,     0,     0,     0,
      11,     0,   772,     0,     0,     0,     0,    10,     0,     0,
       0,     0,     0,    13,     0,     0,     0,     0,     0,    11,
       0,   772,     0,     0,     0,     0,     0,     0,    14,    15,
       0,     0,    13,     0,     0,     0,     0,     0,     0,   773,
       0,     0,     0,     0,     0,     0,    18,    14,    15,     0,
       0,     0,     0,     0,    19,     0,     0,     0,   773,     0,
       0,     0,     0,     0,     0,    18,     0,     0,     0,     0,
       0,     0,    22,    19,     0,     0,    23,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    22,     0,     0,     0,    23,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0, -1471,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0, -1471,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    25,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    25,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    26,    27,
      28,     0,     0,     0,     0,     0,    29,     0,     0,     0,
      30,     0,     0,     0,     0,     0,     0,    26,    27,    28,
       0,     0,     0,     0,     0,    29,     0,     0,     0,    30,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    31,     0,     0,     0,     0,     0,     0,     0,
       0,    32,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    31,     0,     0,     0,     0,     0,    33,     0,     0,
      32,     0,     0,     0,    34,     0,     0,     0,    35,     0,
       0,     0,     0,     0,     0,     0,    33,     0,     0,    36,
       0,     0,     0,    34,     0,     0,     0,    35,     0,     0,
       0,    37,     0,     0,     0,    38,     0,     0,    36,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      37,     0,     0,     0,    38,     0,     0,    39,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    40,     0,     0,     0,     0,    39,    42,     0,     0,
       0,     0,    43,     0,     0,     0,     0,   774,     0,     0,
      40,     0,     0,     0,     0,     0,    42,     0,     0,    44,
       0,    43,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    44,     0,
       0,     0,     0,    45,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   775,     0,     0,
       0,     0,    45,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    46
};

static const yytype_int16 yycheck[] =
{
       7,     8,     0,     0,     0,  1030,    13,   532,     0,   767,
       0,     0,    19,   838,     0,     0,    23,     0,    25,    46,
     926,     0,    29,    30,    31,   864,    88,    34,     0,   955,
      37,    38,  1767,   960,    41,   938,     0,    44,    45,    90,
      91,    37,  1498,   775,     7,   914,  1276,  1290,    20,  1263,
    1725,    16,  1353,  1275,  1877,  1010,    20,  1020,  1125,    20,
      23,  1020,    92,  1020,  1614,  1814,  1482,  2174,  1654,  1020,
    1076,   768,    38,  1641,  2282,   995,  1255,  2342,  1208,  1533,
    1885,  1077,     7,    90,    91,  1252,  1697,  1214,  2268,    92,
    1678,  1679,  1334,  1682,   999,    17,  2760,   104,    23,  1010,
    2085,  2267,   109,   110,   111,   112,   113,  1384,   104,  1134,
    2800,  2815,  2626,  1280,    45,     0,  2797,   926,    23,   928,
    2760,   930,  1829,   775,   774,     0,     0,    90,    91,  2822,
      23,  2415,  2248,     0,  2250,  2333,  1039,  2214,    34,  2714,
    1906,     0,     0,  2718,     5,     0,   112,  1173,     0,     0,
       0,     0,  1178,  1729,  1697,    19,     0,     0,  2086,     0,
    1867,     0,     0,     0,  1898,    90,    91,     0,     0,     0,
       0,     0,     0,   833,     0,     0,     0,     4,  1901,   839,
      82,  3164,     9,    10,  2429,    90,    91,     5,  1184,  1873,
       5,   794,     5,     9,     5,     5,  1021,    90,    91,  2422,
      13,    14,    13,    14,  1785,     5,     5,  1098,  1099,     5,
       9,     5,     5,    13,    14,     5,  2022,    13,    14,     5,
     888,     5,  2427,     5,  3151,  1116,     5,    13,    14,  1184,
       9,  1820,     5,     5,     5,  2433,    19,    11,  1787,     5,
       5,  3168,    16,    13,    14,  2060,  2799,   176,     3,  1077,
       3,     4,     5,   102,    13,    14,     9,    19,  2073,     3,
      47,     5,    47,     8,   121,   102,    11,  1263,     4,  2427,
      15,    16,    19,     9,    48,    20,    21,    22,  1010,     9,
      35,    36,   909,    11,   932,    42,   196,  1190,    16,    31,
     204,   177,  1218,  1299,  2943,  2571,   142,    39,  2496,  2497,
     176,  2499,   883,  1309,    92,   830,  3358,    38,    82,  1264,
     909,   176,  1267,  1268,  2050,  2051,  2052,    11,   109,    65,
    3002,    15,    16,   186,   208,    65,    31,   298,    65,     5,
     165,  3155,    31,    42,    39,  1924,  3120,   306,   306,   301,
      39,   109,    13,   131,    76,   300,   828,   286,    19,   301,
    1018,   109,   877,    62,    48,   124,     4,  3538,   110,    30,
      57,     9,  1022,  1013,   397,   170,   119,  1497,   177,   189,
    1584,   121,  3546,    44,    45,  1035,   124,  2978,  2672,  2980,
    2674,    55,  1045,  3377,   119,    66,   198,  1050,    82,  1052,
     198,   139,   383,   168,  1983,    76,    43,  3505,   406,   108,
     289,  1240,  1241,  1533,    11,    42,  1995,   126,  1071,  1102,
     134,  3634,    85,    31,  2237,   119,  1113,   166,   300,   122,
     175,   425,   177,   166,   124,  3285,  1119,  3287,  3581,    11,
    2728,    84,   476,   434,  2550,  1263,   448,  2026,    31,   110,
    1366,   173,    95,    84,  2033,   197,   177,   476,   283,   218,
    3728,   300,   451,   538,    95,   122,  1991,   526,  3385,   204,
     110,   546,  2727,   300,  3104,  1133,    48,   501,   537,  3159,
    1339,   224,  1399,   124,   475,    82,   488,   322,   151,   176,
    3161,   128,   227,   214,    42,  3175,  2075,   491,  2023,   523,
    2079,  3626,   196,   537,  2702,   244,   249,   200,   207,   230,
      82,   244,  3610,   502,   388,  3613,   281,   181,   537,  3732,
     241,   320,  3790,   546,   349,   399,   134,  3691,   218,  2108,
     449,  3504,   411,  1590,   282,   199,  2724,   376,  2726,   537,
     204,   319,   337,   200,   473,   355,  2613,  3690,  3532,   376,
     290,   134,   504,   180,   551,  3726,   537,  2845,   297,   556,
     259,   435,   526,   305,   550,   290,  3048,   302,   150,   566,
     269,   373,   370,  3423,   384,   539,   537,  1049,   249,   243,
     415,   295,  3356,   282,   166,  2161,  1244,   546,   546,   171,
      77,   285,   537,  3407,   449,   537,  2809,  2881,  1584,    25,
    2395,  2396,  2397,  3728,   342,  3730,  2841,   526,  1201,    11,
     435,   410,   110,    15,    16,   489,  3658,   316,  3209,  2220,
     539,   343,   488,   476,   290,  1242,  1141,  3725,  3171,  3301,
     388,   478,   180,  2899,  2078,  1383,  2831,   537,  3611,   375,
    1388,   223,   546,   535,  1215,   375,  1394,   539,   375,  1287,
     605,     0,  1884,  1242,   435,   432,  2214,   432,   379,   495,
     499,   537,   244,   540,   442,  3790,    11,  2855,  1549,  1550,
      15,    16,   499,  1502,  2252,   374,  2651,   398,   486,  1401,
    3374,   535,   414,  2831,  1951,   539,   537,  2220,   422,   423,
     541,   117,   540,  1574,  1523,  3612,  1682,  1917,   546,   538,
     399,   540,   537,  1390,  3358,  2271,  2430,   540,  2464,   537,
    2506,   538,   540,   540,   473,   297,  2390,  2288,   501,   414,
     419,   501,  2435,  2281,   306,   414,   543,   544,  3358,   537,
     536,  1727,   537,  1966,   537,   535,   537,   537,   541,   539,
     523,  3306,   487,   523,   466,   409,  3311,   537,   537,  3253,
    2289,   537,  3026,   537,   537,  1636,  1637,   537,   775,  1401,
    1400,   537,  2567,   537,  3019,   537,  1584,   476,   537,   533,
     767,   768,   769,   546,   537,   537,   537,   537,  1671,  1672,
    1673,   537,   537,   473,   536,   528,   529,   828,   537,   524,
     525,   526,   539,   528,   529,   530,   531,   532,   533,   536,
      11,   435,   528,   529,    15,    16,   449,  3446,   528,   529,
     546,   828,   774,   810,   811,   533,   546,  3511,   449,   816,
     774,   818,   275,  3503,   775,  2551,  2552,  2553,  2554,  3512,
    1488,   828,   473,  3315,  1820,   832,   833,    48,   835,   538,
     537,   838,   839,   487,  3000,  1495,   530,   531,   532,   533,
     537,  2083,  3334,   258,   851,   852,   853,  1510,  2437,   856,
     880,   499,   914,   816,  1682,   168,   219,   864,   865,   866,
     867,    82,   869,  1556,   871,   828,   151,  1530,  2673,   835,
     285,   334,   835,   465,    84,   523,   883,   880,   940,   285,
     528,   529,   889,  1576,  2869,    95,   326,    65,  3462,    34,
    3464,   816,    27,   900,  1849,   566,   903,   904,    33,   106,
     898,   898,   898,   828,  1859,  2035,   898,  1862,   898,   898,
     835,   816,   898,   898,   152,   898,    61,   883,  1611,   898,
     205,   546,  1928,   828,   237,   886,   898,  3608,  1924,  3006,
     835,   370,    13,    14,   898,   828,  1694,   903,  1844,  3574,
    3575,  3736,  3632,   535,   384,   952,   953,   539,  2078,  1617,
    1618,  3149,    27,   499,   374,  2778,  2779,     5,   889,  1627,
    2571,  2238,   969,   970,    84,   972,   973,   974,   206,   976,
     866,   867,  2957,   869,  1642,   871,  2725,   523,  3552,   186,
    2908,  1908,   989,  2911,   404,  2913,     4,  1983,   356,  3784,
     110,     9,  1820,   532,  3658,  3676,  1047,  2586,  1049,  1995,
     539,   108,  3637,  1812,   139,    84,  1674,  1058,   150,  1878,
    1879,  1880,  1967,   898,  1021,  1022,    95,  1024,  3658,  2045,
    1027,  1028,  1049,   898,   898,    61,    31,  1034,  1035,  1949,
    2026,   898,   537,  1953,  1041,  1844,  1956,  2033,   960,   898,
    1047,  1013,  1049,   898,  2751,  2613,   898,   898,   898,  1013,
    2638,  1058,  3317,  1958,   898,  1864,  1967,   898,   178,   898,
    1869,  1068,  2339,  2770,   139,   898,   898,   898,   898,   898,
     898,  3761,   898,   898,   898,   282,   267,   268,  1085,  2075,
     134,   223,    87,  2079,  1047,   537,  1049,   134,   208,  2085,
     171,    96,   532,  2549,   816,  1058,  1924,  1855,   769,  1618,
     134,   253,  1860,   530,   282,   370,  1113,  1134,  1627,   163,
     537,   232,  2108,   835,  2530,   120,     5,  3297,   530,   531,
     532,   533,  1047,   183,  1049,   532,   121,  2254,  1135,   163,
    2257,     4,   539,  1058,   254,  1660,     9,  3729,   285,  2369,
     176,    27,  1047,   290,  1049,   110,  2969,    33,  2391,   232,
     538,   271,   259,  1058,  1047,  1983,  1049,  1054,   546,  2401,
     538,   282,   269,  1060,   306,  1058,   395,  1995,   546,   304,
     322,  2760,  1137,   528,   529,   530,   531,   532,   533,   208,
       5,  2311,   538,     4,   395,  1192,   246,   247,     9,  3781,
     546,   196,  2760,  1223,  1224,   260,  1226,   375,  2026,   282,
    1207,  1208,   393,   394,   209,  2033,  3798,   354,  1215,  1974,
    2799,  2378,   454,  1978,  3479,  3200,  1981,   212,   889,  2244,
    1223,  1224,   435,  1226,   501,   441,   404,   443,   182,   304,
     501,   285,  1239,  1240,  1241,  1967,   290,   372,   285,   446,
     489,   295,  1249,  1250,    27,   134,   523,  2075,   295,  1215,
      33,  2079,   523,   139,   535,  1262,   290,  2085,   539,   538,
     537,   295,    76,   415,   392,  2444,   537,   546,   388,   404,
     538,  3020,  1279,   356,   163,  2454,  1283,   538,   546,   399,
    2108,  1010,  1289,   538,   395,   546,   407,   282,  2899,   537,
     285,   546,   328,   329,   330,   249,   253,   372,   538,   374,
     360,    73,    74,   128,   129,   119,   546,   528,   529,   530,
     531,   532,   533,  1279,    76,   435,   176,   469,   538,   538,
      82,    13,    14,   465,   407,   166,   546,   546,    42,   404,
     171,   194,   195,    95,   535,   537,   537,   535,  3143,   399,
     460,   539,     6,  1350,   479,  1352,    10,  3053,    62,  2935,
    1357,   176,   473,   182,    18,  3061,   139,   119,  1356,   121,
     535,   397,  1369,  2031,   539,   322,  1356,  1374,    32,   489,
    1356,   537,    36,  1356,   810,   435,  1383,  1356,   171,   439,
    2249,  1388,   537,  1390,  1391,   537,  1393,  1394,    19,   538,
     473,   441,   538,   443,   108,    38,   285,   546,   537,   435,
     546,   290,   456,   244,   267,   268,   295,   843,   530,   538,
    1375,   537,   499,   467,   501,   538,   421,   546,   304,   424,
     249,  2875,   456,   546,  1153,  2345,  3533,  2347,  1400,   489,
     523,   388,   868,   467,   388,   471,  1400,  2987,  3006,  2569,
    1401,  2437,  2572,   538,  1059,   441,   482,   443,  1063,   538,
     212,   546,  2120,  1418,   520,  1184,   297,   546,   415,   851,
     852,   853,  1513,   537,   856,  1516,  1473,  1474,   904,  2166,
    1521,   285,  1479,  1524,   537,  1482,   290,  2316,  1529,   441,
    3069,   443,   368,  3748,    13,    14,   372,   441,  1495,   443,
    1497,  1498,   537,   207,   538,  1502,  1503,   537,  1505,   538,
    2426,   537,   546,   328,   329,   330,  1513,   546,  2348,  1516,
    2350,   537,   469,  2743,  1521,   469,  1523,  1524,   404,  1482,
    2742,   304,  1529,   285,  1531,  3733,  1533,  3735,   290,   343,
     393,   394,  2200,  2776,   177,  1264,  1207,   166,  1267,  1268,
     176,   538,   171,    13,    14,   259,   538,   537,   362,   546,
    1513,  2618,  2619,  1516,   546,   269,   537,  1482,  1521,    13,
      14,  1524,  2741,   229,  2743,   538,  1529,   456,   282,   539,
    2792,   214,   397,   546,  1010,  3783,  3165,  1482,   467,  3695,
     537,   343,  3171,   408,  1020,   368,    38,   230,  1513,   372,
    2586,  1516,    44,   479,  3710,   300,  1521,    27,   241,  1524,
     362,  2626,   316,    33,  1529,   538,   431,   520,  1513,  2437,
     435,  1516,   441,   546,   443,   244,  1521,  1614,  1614,  1524,
    1513,   404,  1614,  1516,  1529,  1614,    13,    14,  1521,  1614,
    2593,  1524,  3455,  3456,  1641,  2594,  1529,  2594,  2595,  2596,
     469,   538,  1614,  2594,  2595,   538,   471,  1654,   538,   546,
    1614,   103,   466,   546,   175,  2651,   546,   482,  3247,  3775,
     374,   538,   476,   538,   538,  1727,  3782,   538,   297,   546,
     546,   546,   546,   538,   499,   546,   538,  1406,  1407,   538,
     538,   546,   538,   538,   546,   399,   537,  1694,   546,   538,
    1697,   546,   328,   329,   330,   538,   479,   546,   523,   538,
     538,    13,    14,   546,   466,   419,   305,  1143,   546,   139,
     866,   867,   537,   869,   476,   871,  2474,  1153,  1725,   535,
    1391,   537,  1393,   539,    61,   177,  1691,  1487,   176,  1489,
    1490,   537,   183,  1740,  1697,  1742,   379,  1744,   436,  1175,
    1770,  2724,   906,  2726,   908,    13,    14,   520,  1184,  1756,
    2482,  1758,  1759,  1760,    27,   398,    13,    14,  2586,   155,
      33,   397,   214,   253,  2760,   229,  1773,  1770,    27,  3358,
      13,    14,     8,   368,    33,    11,    13,    14,   230,    15,
      16,   155,  1743,   155,    20,    21,    22,   155,  2691,   241,
    3358,  1798,  3467,  1800,   155,   246,   247,   110,   253,   435,
      13,    14,    42,  2799,    13,    14,   538,  1814,  1815,    13,
      14,   435,   150,  2481,    13,    14,    13,    14,   537,  1826,
    1827,  1828,  1829,  2651,  1831,   271,   278,   285,   166,    13,
      14,   489,   322,   171,  1841,   471,  1843,  3067,    13,    14,
      13,    14,    13,    14,    13,    14,   482,    91,  1855,  1856,
     155,    27,  1288,  1860,  1861,  3156,   503,    33,  1865,  1866,
    1867,  1868,   155,  1870,  1871,  1830,   139,   322,   539,  1834,
      13,    14,   155,  2869,   304,   155,   328,  2716,   300,  2806,
     139,    13,    14,   335,  1891,   223,    38,    13,    14,   370,
    3104,   449,    44,  1900,  1901,  1902,  1903,  1904,   388,  1906,
    1907,   537,  2828,  1632,  3147,   537,   244,    13,    14,   360,
      13,    14,   537,  1920,   537,  2784,  1645,   538,  1647,    13,
      14,   383,   384,   383,   384,   415,  1922,   379,  2848,   537,
     383,   384,  2760,   388,   383,   384,   272,   273,   368,  1946,
     481,   482,   372,   393,   394,   437,   398,  1676,   399,  2459,
    2460,   103,  2273,  2274,  3705,  3706,  3742,  3743,  3693,   297,
     415,  2957,  3697,   139,  2970,  2016,   230,   225,   306,  1187,
    1188,  2799,    48,   537,   404,   310,   230,   230,   537,   469,
     307,  1417,    42,   537,   435,     5,   242,     5,   439,  1996,
    1997,  1998,  1999,  2000,  2001,   537,  3412,  2004,  2005,  2006,
    2007,  2008,  2009,  2010,  2011,  2012,  2013,   338,     5,  2016,
    2061,   537,   537,   537,   469,     5,  2067,   537,   182,   471,
       5,   537,     8,     5,   537,   177,     9,  3762,  2035,    15,
      16,   304,   537,   537,    20,    21,    22,   500,   489,   313,
     546,  2869,  2049,   253,   208,   304,  2871,   537,   106,   479,
     546,   538,   476,  2016,  2061,  1784,  1785,   225,   404,   171,
    2067,   171,   214,   297,   295,  2072,   302,   150,  1077,  3658,
      61,  2078,   242,  3069,   449,   546,   537,    61,   230,    95,
    2087,  2088,   537,   166,   449,   249,   538,    61,   171,   241,
    3658,  2016,   449,   275,   546,   368,  2764,   449,  2061,   372,
     182,    19,   227,  3058,  2067,   449,   449,   499,  3104,   368,
     395,  2016,   322,   372,   155,   102,   537,    42,   285,   285,
    1849,    42,   285,  2016,   285,   285,   278,   465,   304,  2957,
    1859,   404,   537,  1862,   285,    57,  2061,   204,   155,   176,
     223,   305,  2067,    13,  1815,   404,  2904,   176,   539,  3371,
    3070,  3071,   538,   538,  2161,  1826,  2061,  1828,   538,  2166,
    1831,   244,  2067,   327,  2171,  3581,   537,   249,  2061,  3165,
    1841,   538,  1843,  2200,  2067,  3171,   328,   546,   388,   538,
     546,   496,   104,   335,   538,  1856,   537,  3643,  2195,  2196,
    1861,   538,   368,  3218,  1865,  1866,   372,  1868,   538,  1870,
    1871,   292,   230,   125,  3200,   415,   479,  2214,   230,   253,
     539,   292,   537,  2220,   297,   537,   182,  3633,   546,   486,
     479,   537,   144,   306,   388,   539,   148,   379,   404,   253,
     537,   395,    41,   537,   537,   537,   537,     9,  1967,   447,
    2247,  3069,   208,    11,   495,   327,   398,   447,   537,   370,
     172,  3247,  2259,   175,  1263,   536,  2263,  2220,  3501,   469,
    2267,    19,   546,   542,   546,   290,   447,   537,   167,   449,
     192,   186,   176,   538,  3690,   546,  3104,   441,   322,   443,
     232,  3039,    42,   249,  2247,  1027,   476,   223,   524,   525,
     526,   546,   528,   529,   530,   531,   532,   533,   322,  1735,
    2263,   232,   466,   479,  2311,   469,   388,  2314,  3438,  2316,
    2317,   275,   407,   395,   326,   326,   302,   546,   546,   471,
     301,   186,  2247,  1759,  1760,   225,  2333,   537,   285,   232,
     232,   538,   537,     8,    61,    61,    11,  3165,  2263,   305,
      15,    16,  2247,  3171,   388,    20,    21,    22,   539,    61,
      61,   182,   306,   292,  2247,   292,   348,   298,  2263,   441,
     538,   443,  3358,  2092,   388,   489,   271,   155,   290,   155,
    2263,   415,  3200,    48,   155,   537,   298,   208,   155,   499,
      55,   155,   465,  2348,  2349,  2350,   538,   469,   546,   546,
      42,   415,   285,   325,   155,     3,    42,   537,   285,   321,
       3,    42,   300,   300,  3534,    61,   176,    82,  2415,  3335,
      11,    42,   171,   186,  2421,   538,    62,   171,   249,  3247,
     538,  2428,  2420,   538,   538,   469,  2433,  2434,  2435,  2436,
    2420,  3661,   354,   537,  2420,   537,  1872,  2420,   537,     3,
    2447,  2420,  2449,    41,     3,   469,  2453,   535,   535,  2456,
     449,   449,   535,  1889,  1890,   538,   539,  2464,   538,   536,
     449,  2468,   108,   109,  3196,   538,   538,  2474,   546,   449,
       7,   542,   538,   119,   305,   441,   539,   443,   520,    16,
     520,   538,   538,   538,   368,   539,    23,   151,  3013,  2496,
    2497,   538,  2499,   537,   520,   538,   176,   158,   537,   449,
     466,  2466,   537,   469,   537,   537,   181,   537,   496,    42,
      61,   526,   546,   537,   522,   488,   301,   301,   473,   546,
     252,    61,  2251,  2530,   199,  2490,    61,   275,   285,   204,
    3358,  1967,   449,   537,   180,   155,   208,  1973,   524,   525,
     526,  2548,   528,   529,   530,   531,   532,   533,   155,  2556,
    2557,  2558,    42,    90,    91,   155,    42,   388,  2287,  2288,
     537,   207,  2569,   449,  2571,  2572,  3469,  2530,   243,     8,
     537,  2578,    11,   449,   449,  1584,    15,    16,   449,   538,
     370,    20,    21,    22,   537,   546,   537,   300,  2259,   538,
     298,  2598,   499,  3418,   537,   537,    42,  3436,    37,  2626,
     155,     5,   155,   541,  2666,  2530,  2613,   290,   538,   176,
     441,   537,   443,   259,  3439,     5,  3441,   537,  2625,   538,
      61,   191,  2629,   269,  3649,  2530,   538,   302,   538,    14,
     538,    82,  2598,   171,  2661,   466,   282,   538,   469,   285,
     535,   146,   538,    19,   176,   312,   538,     8,  2655,  2656,
      11,   376,   546,   538,    15,    16,   537,  3583,   538,    20,
      21,    22,  3658,   537,   546,   538,   258,   301,   537,   537,
     316,   538,  2679,  1682,   186,   155,   538,   537,   180,  2686,
     546,   460,   538,   538,   538,  2692,  3592,     8,   539,  2716,
      11,   537,  2688,   325,    15,    16,   537,   537,    42,    20,
      21,    22,    88,  2710,  3573,    42,    42,  2714,    42,  2716,
     300,  2718,  2719,  2720,   476,   176,    37,  2724,  2725,  2726,
     546,  2728,   537,  3548,   546,   538,   538,  3566,   374,   498,
     204,  1473,  1474,   538,   409,   536,   536,  1479,   546,   538,
     538,   538,  2749,   538,  2751,   482,   300,    61,   526,   538,
     546,   538,   499,   399,   210,   538,  3424,   119,  3426,  2766,
    2767,  2768,  2769,  2770,  2771,  2772,  2773,  2774,  2775,    42,
     232,   538,   537,   419,    90,   421,  2447,   197,   424,   290,
     290,   449,    42,   539,   539,   526,   539,   539,   227,   539,
    2797,   449,  2757,   539,   539,   539,  2761,   539,  2763,  2826,
    2807,   539,  2798,   539,   539,   539,   539,  2805,   539,  2816,
    2837,  1820,     5,   285,   538,  2805,   539,   539,   539,  2805,
     539,  2872,  2805,   539,   539,  1077,  2805,   536,   109,   539,
    3658,   536,  2839,   539,  2830,   539,   539,   539,  2845,   539,
     539,   539,   539,   204,   539,   539,   521,   539,  2855,   524,
     525,   526,   538,   528,   529,   530,   531,   532,   533,  2866,
     538,  2590,  2591,   302,  2871,  2872,   227,   538,  2875,  2896,
     546,   537,  3630,   538,   499,  2882,  2883,  2884,  2885,   435,
     325,   300,   537,   537,     9,   369,   537,   537,   351,  2896,
      61,   537,  2899,   546,   538,   178,  2903,  2904,   546,   538,
     183,   204,   538,   536,   546,  2912,   227,   197,   538,  2872,
     481,   546,    93,   362,   538,  1924,   537,   155,    42,  2355,
     539,   538,   126,   155,    42,   538,  2977,   384,  2935,   384,
      42,     5,    40,   154,   311,  2942,  2943,    42,   321,   538,
     537,   302,   537,    38,   546,   476,   537,  2872,   537,    44,
     290,   257,   196,   476,   460,   176,   537,    76,   303,    76,
     165,   178,     5,   246,   247,   304,   183,  2872,  2975,  2996,
    2977,   254,   537,    82,  1983,   538,     9,  2413,   538,  2872,
     537,   302,  2989,   386,   536,    61,  1995,   536,   538,  2996,
    2987,  2987,    95,  3000,   135,  2987,   526,   282,  2987,  3006,
     300,   460,  2987,    42,   303,   303,   141,   541,   103,   537,
     311,  1263,   538,  3020,  2977,  2987,   537,  2026,  3543,  3026,
     538,   538,   538,  2987,  2033,   210,   300,   481,   300,   246,
     247,  2760,  3039,  3040,  3041,   538,   537,   254,   546,   538,
    3047,   404,   124,   473,   542,   383,  2482,   151,  2719,  2720,
      26,   538,  2977,   311,    37,   537,  2492,  3064,  2494,   383,
     308,   538,  2498,   898,  2500,  2744,  2075,  2340,   605,  3063,
    2079,  1842,  2977,  2757,  2343,  1744,  2085,   360,  2749,  1890,
    2419,   811,   177,  3196,  2977,   524,   525,   526,  2490,   528,
     529,   530,   531,   532,   533,  2766,  2767,  2768,  2769,  2108,
    2771,  2772,  2773,  2774,  2775,    27,  2794,   328,   329,   330,
    3598,    33,  3720,  3328,  3662,  3671,   399,  3713,  3387,   214,
      42,  1250,  2331,  2349,  1820,  1820,  2816,  3660,  2734,  3669,
    2763,  2328,  2459,  3657,  2460,   230,  1353,  3184,  3190,  3146,
      62,  2693,  3149,   360,  1383,  2469,   241,  3541,  1958,  3471,
    2692,  3202,   435,  1401,  3161,  3633,   439,  3577,  3747,  1207,
    2314,   904,  2765,   524,   525,   526,  3162,   528,   529,   530,
     531,   532,   533,  2987,  1046,  2280,   397,   460,  2549,  1809,
    2909,  1233,   399,   278,  3643,  3192,   108,  1046,  1067,  2297,
    3155,  3218,  3199,  1773,  1232,  3202,  3554,  3428,  1808,  1235,
      23,  2263,  2072,   524,   525,   526,   489,   528,   529,   530,
     531,   532,   533,  2899,   435,  1022,  3242,   139,   435,  2530,
    2529,  3228,   439,  3349,  2578,  3190,  1020,  2088,  3235,  3069,
    1967,  1967,  1967,   328,  3558,  3242,  2171,  3557,   775,  3202,
     335,  3685,  2611,   460,  1020,  1020,  2281,  3290,  2220,  1020,
     471,  2217,  3259,  2122,  1996,  1997,  1998,  1999,  2000,  2001,
    2635,   482,  2004,  2005,  2006,  2007,  2008,  2009,  2010,  2011,
    2012,  2013,   489,  1503,  2989,  3282,  2948,  3202,   499,   816,
    1020,  1020,   875,  3290,   379,   207,  1743,  2081,    -1,    -1,
      -1,   828,  1020,    -1,    -1,    -1,    -1,  3202,   835,  3306,
    1020,    -1,   523,   398,  3311,    -1,  1020,    -1,    38,  3202,
      -1,    -1,    -1,    -1,    44,    -1,   537,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2760,    -1,    -1,   864,   865,  3058,
    3337,    -1,  1584,    -1,  3063,    -1,    -1,   259,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   269,    -1,    -1,
      -1,   888,    -1,    -1,  3361,  3362,    -1,    -1,  2794,    -1,
     282,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3040,
      -1,    -1,  3379,   103,  3381,    -1,   471,  3384,    -1,    -1,
    3376,    -1,   304,  3112,  3113,    -1,  1077,    -1,    -1,    -1,
    2826,    -1,    -1,    -1,   316,    -1,  3403,    -1,  3405,   936,
     937,    -1,  3409,   940,   941,  3412,    -1,    -1,    -1,    -1,
      -1,  3418,    -1,    -1,    -1,    -1,    -1,    -1,  1077,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3434,  2437,  3436,
    1682,  3438,  3439,    -1,  3441,    -1,    -1,    -1,    -1,  3446,
      -1,    -1,  3407,   538,    -1,    -1,   368,   177,    -1,  3412,
     372,    -1,   374,  2195,  2196,    -1,   186,    -1,    -1,    -1,
    3467,    -1,   999,    -1,  3471,    -1,    -1,    -1,    -1,    -1,
      -1,  3478,  3468,  1010,  3470,    -1,    -1,   399,    -1,    -1,
    1017,  1018,   404,    -1,   214,    -1,  1023,  3412,    -1,  1026,
    1027,    -1,    -1,  1030,  1031,  1032,  1033,   419,    -1,    -1,
     230,    -1,  3509,    -1,    -1,    -1,    -1,  3412,    -1,    -1,
    1047,   241,  1049,    -1,  3510,  3480,    -1,    42,    -1,    -1,
      -1,  1058,    -1,    -1,    -1,    -1,    -1,  3534,    -1,    -1,
      -1,  3527,    -1,    -1,    -1,    -1,    -1,    62,  1075,  1076,
    1077,  3548,    -1,    -1,    -1,  2981,    -1,    -1,   278,    -1,
      -1,  3558,    -1,    -1,    -1,    -1,    -1,   479,    -1,  3566,
    1097,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1820,    -1,
     300,    -1,  1263,    -1,  3581,    -1,    -1,  2586,    -1,    38,
    1117,    -1,    -1,   108,    -1,    44,    -1,    -1,    -1,    -1,
      -1,    -1,  1129,  1130,  1131,    -1,  1133,  1134,   328,    -1,
    1137,  3608,    -1,    -1,  1263,   335,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3345,  3346,  3581,  3626,
      -1,    -1,    -1,  3630,  3631,    -1,  3633,  3634,    -1,  3358,
      -1,    -1,  1169,   100,    -1,    -1,  3643,    -1,    -1,    -1,
      -1,    -1,  2651,    -1,   103,    -1,    -1,  3654,    -1,   379,
    1187,  1188,    -1,    -1,    -1,   180,  3581,   119,    -1,    -1,
      -1,   128,   129,    -1,    -1,    -1,  3337,    -1,   398,  3676,
    3633,    -1,  1924,    -1,    -1,    -1,  3581,  3684,  3685,  3675,
      -1,    -1,   207,  3690,    -1,    -1,    -1,    -1,  1225,    -1,
    3361,  3362,  1229,  1230,    -1,  3660,    -1,    -1,    -1,    -1,
      -1,    -1,  1239,  1240,  1241,    -1,    -1,  1244,  3633,   176,
      -1,    -1,  3708,  3384,   176,    -1,    -1,    -1,   177,    -1,
      -1,  3728,    -1,  3730,    -1,  3732,  1263,  3690,  3633,    -1,
      -1,  1983,    -1,     0,   259,    -1,    -1,    -1,    -1,    -1,
    3747,   471,    -1,  1995,   269,    -1,   476,    -1,    -1,    -1,
      -1,  2760,    -1,    -1,    -1,   214,    -1,   282,    -1,    -1,
    3196,    -1,  1299,    -1,    -1,  3690,    -1,    -1,    -1,    -1,
      -1,   230,  1309,    -1,  2026,    -1,    -1,    -1,    -1,    -1,
       0,  2033,   241,  3790,    -1,  3690,    -1,    -1,    -1,    -1,
    2799,   316,    -1,    -1,    -1,    -1,    -1,  1334,     8,    -1,
      20,    11,    -1,    23,    -1,    15,    16,    -1,    -1,    -1,
      20,    21,    22,    -1,    -1,    -1,    -1,    37,    -1,   278,
      -1,    -1,    -1,  2075,    38,    -1,    46,  2079,    -1,    -1,
      44,    -1,    -1,  2085,    -1,   102,    -1,    -1,  1375,    -1,
      -1,   300,    -1,    -1,    -1,    -1,    -1,  1384,    -1,   374,
    3286,    -1,    -1,   315,    -1,    -1,  2108,    -1,    -1,    -1,
    2869,   328,   329,   330,  1401,    -1,   328,   329,   330,   328,
      90,    91,    92,    -1,   399,    -1,   335,    -1,    -1,    -1,
      -1,  1418,    -1,   150,   104,    -1,  1423,    -1,     8,   103,
      -1,    11,    -1,  1584,   419,    15,    16,    -1,    -1,   166,
      20,    21,    22,    -1,   171,   176,    -1,    -1,    -1,   176,
      -1,    -1,    -1,  2655,  2656,    -1,    -1,    37,    -1,   186,
     379,    -1,  3358,    -1,   191,  1584,    -1,    -1,    -1,  3658,
     397,    -1,    -1,    -1,    -1,   397,  1473,  1474,    -1,   398,
      -1,   408,  1479,    -1,    -1,  1482,    -1,    -1,  2957,    -1,
    1487,  1488,  1489,  1490,    -1,    -1,   223,    -1,    -1,    -1,
    3396,    -1,    -1,   177,   431,  1502,  1503,    -1,   435,    -1,
      -1,    -1,    -1,   435,    -1,    -1,  1513,   244,    -1,  1516,
      -1,    -1,   176,  3654,  1521,    -1,  1523,  1524,    -1,    -1,
     457,  1682,  1529,  1027,    -1,    -1,    -1,    -1,    -1,    -1,
     214,    -1,    -1,    -1,   471,    -1,    -1,    -1,    -1,   471,
      -1,    -1,   471,    -1,    -1,   482,   230,   227,    -1,    -1,
     482,    -1,    -1,  1682,    -1,    -1,    -1,   241,    -1,    -1,
     297,    -1,   499,   300,    -1,    -1,    -1,   499,    -1,   306,
      -1,    -1,    -1,    -1,   315,    -1,  1027,  1584,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   523,   328,   329,   330,
    3069,   523,    -1,    -1,   278,    -1,  3502,    -1,    -1,    -1,
     537,    -1,    -1,    -1,    -1,   537,    -1,    -1,    -1,    -1,
    1617,  1618,    -1,    -1,   351,    -1,   300,    -1,    -1,  1626,
    1627,    -1,   302,    -1,    -1,  3104,    -1,    -1,  1635,    -1,
      -1,    -1,    -1,    -1,    -1,  1642,    -1,   227,    -1,   376,
      -1,    -1,  1649,    -1,   328,    -1,    -1,    -1,    -1,    -1,
      -1,   335,    -1,    -1,  2866,    -1,   397,    -1,    -1,  1820,
      -1,    -1,  1669,  1670,   328,   329,   330,  1674,    -1,    -1,
    1677,    -1,    -1,    -1,    -1,  1682,  1683,  1684,  1685,  1686,
    1687,  1688,  1689,  1690,  1691,    -1,  3165,    -1,  1695,  1696,
    1697,  1820,  3171,  1700,   435,   379,    -1,  1704,   435,    -1,
    1707,  1708,  1709,  1710,  1711,  1712,  1713,  1714,  1715,    -1,
      -1,  1718,   302,    -1,   398,  2437,    -1,    -1,  1725,    -1,
    1727,  3200,    -1,    -1,    -1,    -1,  1230,    -1,   465,    -1,
     471,    -1,    -1,   397,   154,  1239,    -1,    -1,  1745,   476,
       0,   482,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3658,    -1,    -1,    -1,   176,    -1,   499,   496,
      -1,   498,   499,  1924,    -1,    -1,  1773,    -1,  3247,    -1,
      -1,   435,    -1,    -1,    -1,    -1,    -1,  1784,  1785,    -1,
      -1,    -1,   523,    -1,    -1,    -1,    -1,   471,  1239,    -1,
      -1,    -1,   476,    -1,    -1,  1924,   537,    -1,   535,  1077,
      -1,   538,   539,   540,    -1,    -1,    -1,   471,    -1,    -1,
      -1,    -1,    -1,  1820,    -1,    -1,    -1,    -1,   482,    -1,
      -1,    -1,  1983,  1830,    -1,    -1,    -1,  1834,    -1,  3041,
      -1,    -1,    -1,    -1,  1995,   499,    -1,    -1,    -1,    -1,
      -1,    -1,   102,    -1,   524,   525,   526,    -1,   528,   529,
     530,   531,   532,   533,  1983,    -1,    -1,    -1,    -1,   523,
     550,    -1,    -1,    -1,  2586,  2026,  1995,    -1,    -1,    -1,
    1877,    -1,  2033,   537,    -1,    -1,    -1,  1884,    -1,  3358,
    1887,  1888,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     150,    -1,    -1,    -1,    -1,    -1,    -1,  2026,    -1,    -1,
      -1,    -1,    -1,    -1,  2033,    -1,   166,    -1,   328,   329,
     330,   171,    -1,    -1,  2075,    -1,   176,  1924,  2079,    -1,
      -1,  1928,    -1,    -1,  2085,    -1,   186,    -1,    -1,  2651,
      -1,   191,    -1,    -1,   524,   525,   526,    -1,   528,   529,
     530,   531,   532,   533,  1951,    -1,  2075,  2108,    -1,    -1,
    2079,  1958,  1959,    -1,    -1,    -1,  2085,    -1,    -1,    -1,
    1967,    -1,    -1,   223,    -1,    -1,    -1,    -1,    -1,  1473,
    1474,    -1,    -1,    -1,    -1,  1479,  1983,   397,    -1,  2108,
    1987,  1988,    -1,  1990,   244,  1263,    -1,  3199,  1995,  1996,
    1997,  1998,  1999,  2000,  2001,    -1,    -1,  2004,  2005,  2006,
    2007,  2008,  2009,  2010,  2011,  2012,  2013,    -1,    -1,  2016,
      -1,    -1,    -1,  2020,  2021,   435,    -1,  2024,    -1,  2026,
      -1,    -1,  1473,  1474,  2031,    -1,  2033,    -1,  1479,    -1,
      -1,    -1,    -1,    13,    -1,    -1,    -1,   297,  2760,    19,
     300,    -1,    -1,    23,    -1,    -1,   306,    -1,  2055,    -1,
      30,   471,    -1,    -1,  2061,    -1,  2063,    -1,    -1,    -1,
    2067,    -1,   482,    -1,    44,    45,    -1,    -1,  2075,    -1,
      -1,    -1,  2079,    -1,  2081,    -1,  2083,  2799,  2085,   499,
      -1,    -1,    -1,    -1,   774,   775,    -1,    -1,    -1,    -1,
      -1,   351,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,
      16,  2108,    -1,   523,    20,    21,    22,    -1,    -1,    -1,
      90,    91,    -1,  2120,  2121,    -1,   376,   537,    -1,    -1,
    2127,    37,    -1,    -1,    -1,    -1,   816,    -1,    -1,    -1,
     110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   828,    -1,
      -1,    -1,    -1,    -1,    -1,   835,    -1,  2869,    -1,    -1,
      -1,    -1,    -1,  2160,    -1,    -1,    -1,  2164,    38,    -1,
      -1,    -1,  2169,  2170,    44,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   435,    -1,    -1,    -1,  3658,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,  2195,  2196,
     880,    41,    -1,  2200,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   465,    -1,    -1,   898,  2216,
      -1,    -1,  2219,  2220,  2221,    -1,   476,    -1,    -1,    -1,
      -1,    -1,    -1,   103,    -1,    -1,    -1,    -1,    -1,    -1,
    2237,  2238,    -1,    -1,    -1,  2957,   496,  2244,   498,   499,
    2247,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   104,    -1,  2263,    -1,    -1,   109,
      -1,   111,    -1,   113,    -1,    -1,    -1,    -1,    -1,  1773,
      -1,    -1,  1723,  2280,    -1,   535,  2437,    -1,   538,   539,
     540,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2297,  2298,    -1,     8,    -1,    -1,    11,   177,    -1,    -1,
      15,    16,    -1,    -1,    -1,    -1,  1584,  2314,  2437,  2316,
      -1,   227,    -1,    -1,    -1,    -1,    -1,    -1,  2325,    -1,
      -1,    -1,  1773,  1013,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2339,    48,   214,    -1,    -1,    -1,    -1,    -1,
      55,  2348,  2349,  2350,    -1,    -1,    -1,  3069,     8,    -1,
     230,    11,    -1,    -1,    -1,    15,    16,  1047,    -1,  1049,
      -1,   241,    -1,    -1,    -1,    -1,    -1,    82,  1058,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3104,    -1,    -1,  2392,   302,    -1,    48,    -1,
      -1,    -1,    -1,    -1,  2401,    55,    -1,    -1,   278,    -1,
      -1,    -1,    -1,  1093,  1682,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1105,    -1,    -1,    -1,    -1,
      -1,    -1,    82,    -1,    -1,  2586,    -1,    -1,    -1,    -1,
    2437,    -1,    -1,   148,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3165,  1134,    -1,    -1,    -1,   328,  3171,
      -1,    -1,    -1,    -1,  2461,   335,    -1,  2586,    -1,  2466,
      -1,    -1,    -1,    -1,    -1,    -1,   181,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2481,  2482,    -1,    -1,  3200,    -1,
      -1,    -1,    -1,  2490,   199,    -1,    -1,    -1,   148,   204,
    2651,    -1,  1996,  1997,  1998,  1999,  2000,  2001,    -1,   379,
    2004,  2005,  2006,  2007,  2008,  2009,  2010,  2011,  2012,  2013,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   398,    -1,
      -1,   181,  2651,  2530,    -1,  3247,    -1,    -1,   243,    -1,
      -1,    -1,    -1,  1223,  1224,    -1,  1226,    -1,    -1,   199,
      -1,    -1,  1820,    -1,   204,  1996,  1997,  1998,  1999,  2000,
    2001,    -1,    -1,  2004,  2005,  2006,  2007,  2008,  2009,  2010,
    2011,  2012,  2013,    -1,  2571,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2586,
      -1,    -1,    -1,   243,    -1,    -1,   566,   302,    -1,    -1,
      -1,   471,    -1,    -1,    -1,    -1,  2603,    -1,    -1,  2760,
      -1,    -1,    -1,  2610,  2611,    -1,    -1,    -1,   524,   525,
     526,    -1,   528,   529,   530,   531,   532,   533,    -1,  2626,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2760,  2639,    -1,    -1,  2642,  3358,  2644,  2799,    -1,
      -1,    -1,   302,    -1,  2651,  2652,  1924,    -1,  2655,  2656,
      -1,    -1,    -1,  2660,  2661,    -1,    -1,    -1,    -1,    -1,
    2667,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2799,    -1,    -1,    -1,    -1,    -1,    -1,  2684,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2694,    -1,    -1,
      -1,  2195,  2196,    -1,   409,    -1,    -1,    -1,    -1,    -1,
      -1,   551,    -1,    -1,    -1,  1983,   556,    -1,  2869,  2716,
    1400,    -1,    -1,    -1,    -1,    -1,    -1,  1995,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     8,    -1,    -1,    11,    -1,    -1,
    2869,    15,    16,    -1,  2195,  2196,    -1,    -1,  2026,   409,
    2757,    -1,    -1,  2760,  2761,  2033,  2763,  2764,  2765,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2778,  2779,    -1,    48,    -1,    -1,    -1,    -1,    -1,
      -1,    55,    -1,    -1,    -1,     0,    -1,    -1,   768,   769,
      -1,    -1,  2799,    -1,    -1,    -1,  2957,  2075,    -1,    -1,
      -1,  2079,    -1,    -1,    -1,    -1,   521,  2085,    82,    -1,
    2314,    -1,    -1,   528,   529,   530,   531,   532,   533,    -1,
      -1,    -1,    -1,  1513,    -1,    -1,  1516,    -1,  2957,    -1,
    2108,  1521,    -1,    -1,  1524,  2842,    -1,    -1,    -1,  1529,
      -1,    -1,    -1,    -1,     8,    -1,    -1,    11,   828,    -1,
      -1,    15,    16,    -1,    -1,    -1,    -1,    -1,    -1,  2866,
      -1,   521,  2869,  2314,    -1,  2872,    -1,    -1,   528,   529,
     530,   531,   532,   533,   148,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2889,  2890,    48,  2892,    -1,   102,    -1,  2896,
      -1,    55,  2899,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   181,  3069,   889,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    82,  2926,
      -1,    -1,    -1,    -1,  1614,   199,    -1,    -1,    -1,    -1,
     204,    -1,    -1,    -1,    -1,   150,  3658,    -1,    -1,  2946,
    3069,    -1,    -1,  3104,  2951,  2952,    -1,    -1,    -1,  2956,
    2957,   166,    -1,    -1,  2961,    -1,   171,  2964,  2965,    -1,
      -1,   176,  2969,  2970,    -1,    -1,  2973,    -1,   818,   243,
    2977,   186,    -1,    -1,    -1,  3104,   191,    -1,    -1,    -1,
      -1,    -1,  2989,    -1,   148,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3165,    -1,    -1,  1697,   223,    -1,
    3171,    -1,    -1,    -1,    -1,    -1,    -1,   181,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3033,    -1,   302,   244,
      -1,    -1,    -1,    -1,  3041,   199,  3165,    -1,    -1,  3200,
     204,    -1,  3171,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     900,    -1,    -1,  3060,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1041,  3069,    -1,    -1,    -1,    -1,  1047,    -1,  1049,
      -1,  3200,    -1,    -1,    -1,    -1,    -1,    -1,  1058,   243,
    1770,    -1,   297,    -1,    -1,   300,  3247,    -1,  1068,    -1,
      -1,   306,    -1,     8,    -1,    -1,    11,  3104,    -1,    -1,
      15,    16,   952,    -1,    -1,    20,    21,    22,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3247,   969,
     970,    -1,   972,   973,   974,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1113,    -1,   409,   351,    -1,   302,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3155,    -1,
      -1,  2655,  2656,    -1,    -1,  1135,    -1,    -1,  3165,  2437,
      -1,   376,    -1,    -1,  3171,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3180,  1024,    -1,    -1,    -1,  1028,    -1,
      -1,    -1,    -1,  3190,    -1,    -1,    -1,    -1,    -1,  3196,
      -1,    -1,  3199,  3200,    -1,  3202,    -1,  3358,    -1,    -1,
      -1,    -1,    -1,    -1,  2655,  2656,    -1,    -1,    -1,    -1,
      -1,  3218,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     435,    -1,    -1,    -1,    -1,    -1,    -1,  1207,  1208,  3358,
      -1,    -1,  1922,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3247,    -1,    -1,    -1,    -1,   409,  3253,   521,    -1,    -1,
     465,    -1,    -1,    -1,   528,   529,   530,   531,   532,   533,
      -1,   476,  3269,  3270,    -1,    -1,  3273,    -1,  3275,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   496,    -1,   498,   499,    -1,    -1,    -1,    -1,     8,
      -1,    -1,    11,    -1,    -1,  3302,    15,    16,    17,    18,
      -1,    20,    21,    22,    -1,    -1,    -1,    -1,  2586,    -1,
      -1,    -1,   227,    -1,    -1,    -1,    -1,    -1,    37,  3326,
     535,    -1,    -1,   538,   539,   540,  2016,    -1,    -1,    48,
      -1,    -1,    -1,    -1,    -1,    -1,    55,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3358,    -1,    -1,    -1,    -1,    -1,   521,    -1,    -1,
      -1,    -1,  2866,    82,   528,   529,   530,   531,   532,   533,
      -1,  2061,    -1,  2651,    -1,    -1,    -1,  2067,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   302,    -1,    -1,
      -1,    -1,  2896,    -1,    -1,    -1,    -1,    -1,    -1,  1249,
    3407,    -1,    -1,    -1,    -1,  3412,    -1,    -1,    -1,    -1,
    1390,  1391,  1262,  1393,    -1,  2866,    -1,  3424,    -1,  3426,
      -1,  3428,    -1,    -1,    -1,  3432,    -1,  3434,    -1,  3436,
      -1,    -1,     8,  1283,    -1,    11,    -1,    -1,    -1,    15,
      16,    -1,  2946,  3450,    -1,  2896,    -1,    -1,  3455,  3456,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3467,    -1,   181,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    48,  3480,    -1,    -1,    -1,    -1,  3485,    55,
     199,    -1,  2760,    -1,    -1,   204,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3658,    -1,    -1,
      -1,    -1,  1352,    -1,    -1,    -1,    82,  1357,   227,   228,
    2200,    -1,    -1,    -1,    -1,    -1,    -1,  1497,    -1,  1369,
      -1,  2799,    -1,    -1,   243,    -1,    -1,    -1,    -1,  3658,
    2220,    -1,    -1,  1513,    -1,  3542,  1516,  3041,    -1,    -1,
      -1,  1521,    -1,    -1,  1524,    -1,  2236,  3554,    -1,  1529,
      -1,  1531,    -1,  1533,    -1,    -1,    -1,  2247,    -1,  3566,
      -1,    -1,    -1,    -1,    -1,    -1,   285,    -1,    -1,   288,
      -1,    -1,   148,  2263,  3581,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   302,    -1,    -1,   305,    -1,    -1,     0,
    3041,  2869,  3599,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   181,    -1,    -1,    -1,   524,
     525,   526,    23,   528,   529,   530,   531,   532,   533,    -1,
      -1,    -1,    33,   199,    35,    36,  3633,    -1,   204,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    49,    -1,
      -1,    -1,  3649,    54,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3658,    63,  3660,    -1,  1505,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    77,   243,    -1,    -1,
      -1,    -1,    -1,    -1,  1654,    86,    -1,    88,    -1,  2957,
      -1,    -1,    -1,  3690,    -1,    -1,    -1,    -1,    -1,   100,
     409,   102,    -1,    -1,    -1,  3199,    -1,  3704,  3705,  3706,
      -1,    -1,   113,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   128,   129,   130,
      -1,    -1,    -1,    -1,    -1,    -1,   302,    -1,   139,  3736,
      -1,    -1,    -1,    -1,    -1,   146,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   154,    -1,   156,   157,    -1,  3199,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    27,    -1,
    2450,   172,    -1,    -1,    33,   176,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    42,    -1,    -1,    -1,  3784,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3069,   203,    62,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   521,    -1,    -1,   524,   525,   526,   219,   528,
     529,   530,   531,   532,   533,    -1,    -1,    -1,    -1,    -1,
    1800,    -1,    -1,    -1,    -1,    -1,  3104,   546,    -1,    -1,
      -1,    -1,    -1,   409,    -1,  1815,    -1,   248,    -1,   108,
      -1,    -1,    -1,    -1,    -1,    -1,  1826,    -1,  1828,     8,
      -1,  1831,    11,    -1,    -1,    -1,    15,    16,    -1,    -1,
      -1,  1841,    -1,  1843,    -1,    -1,    -1,    -1,    -1,    -1,
     139,    -1,    -1,    -1,    -1,    -1,  1856,    -1,    -1,    -1,
      -1,  1861,    -1,    -1,    -1,  1865,  1866,  3165,  1868,    48,
    1870,  1871,  1742,  3171,  1744,    -1,    55,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1756,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   328,   329,   330,
      -1,    -1,  3200,    82,    -1,   336,    -1,    -1,    -1,   340,
    3434,    -1,    -1,    -1,    -1,    -1,  2626,    -1,   207,    -1,
      -1,    -1,    -1,    -1,    -1,   521,    -1,    -1,  1798,    -1,
      -1,    -1,   528,   529,   530,   531,   532,   533,    -1,    -1,
       3,   372,    -1,    -1,    -1,     8,    -1,    -1,    11,  3247,
     381,  2661,    15,    16,    17,    18,    -1,    20,    21,    22,
      -1,    -1,    -1,  3434,    -1,    -1,   397,    -1,    -1,   148,
     259,    -1,    -1,   404,    37,    -1,    -1,   408,  2688,    42,
     269,    -1,    -1,    -1,    -1,    48,    -1,    -1,   419,    -1,
      -1,    -1,    55,   282,    -1,    -1,    -1,    -1,    -1,    -1,
     431,    -1,   181,    -1,   435,    -1,  2716,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   304,  2016,    -1,    -1,    82,
     199,    -1,    -1,    -1,    -1,   204,   457,   316,    -1,    -1,
    1900,  1901,  1902,  1903,  1904,  2035,    -1,  1907,    -1,    -1,
     471,    -1,    -1,   474,    -1,    -1,   477,    -1,    -1,    -1,
      -1,   482,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3358,  2061,    -1,    -1,   243,    -1,    -1,  2067,   499,    -1,
      -1,    -1,  2072,    -1,    -1,    -1,    -1,    -1,  2078,   368,
      -1,    -1,    -1,   372,    -1,   374,    -1,    -1,  2798,    -1,
      -1,    -1,   523,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    70,    71,    -1,    -1,   537,    -1,    -1,   540,
     399,    -1,    -1,    -1,    -1,   404,  2826,    -1,   181,    -1,
    2830,    -1,    -1,   302,    -1,    -1,    -1,  2837,    -1,    -1,
     419,    -1,    -1,    -1,    -1,    -1,   199,    -1,    -1,    -1,
      -1,   204,    -1,   111,   112,    -1,    -1,   115,   116,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2161,  2872,    -1,   227,   228,  2166,    -1,    -1,    -1,
      -1,  2171,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2049,
     243,    -1,    -1,    -1,     8,    -1,  2896,    11,    -1,    -1,
     479,    15,    16,    -1,    -1,    -1,    20,    21,    22,    -1,
      -1,    -1,    -1,    -1,     8,    -1,    -1,    11,    -1,    -1,
      -1,    15,    16,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   285,    -1,    48,   288,   194,   195,    -1,    -1,
     409,    55,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   302,
      -1,    -1,   305,    -1,    48,    -1,    -1,  2247,    -1,    -1,
      -1,    55,    -1,    -1,    -1,    -1,    -1,    -1,    82,  2259,
      -1,    -1,    -1,  2263,    -1,    -1,    -1,  2977,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2987,    82,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2996,    -1,    -1,    -1,
      -1,    -1,    -1,   261,   262,   263,   264,   265,   266,   267,
     268,    -1,    -1,    -1,   272,   273,    -1,    -1,    -1,    -1,
      -1,  2311,    -1,    -1,    -1,    -1,    -1,  2317,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   521,    -1,    -1,    -1,   409,    -1,    -1,   528,
     529,   530,   531,   532,   533,    -1,    -1,   181,    -1,    -1,
    3658,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   864,
     865,    -1,    -1,    -1,    -1,   199,    -1,   181,    -1,    -1,
     204,    -1,    -1,    -1,   352,   353,    -1,    -1,   128,   129,
      -1,    -1,    -1,    -1,    -1,   199,    -1,    -1,    -1,    -1,
     204,    -1,    -1,   227,   228,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   243,
      -1,    -1,    -1,    -1,    -1,   393,   394,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   176,    -1,    -1,   243,
      -1,   936,    -1,    -1,    -1,   940,   941,  2447,    -1,    -1,
      -1,    -1,  3162,    -1,    -1,    -1,    -1,    -1,   521,    -1,
      -1,   524,   525,   526,   288,   528,   529,   530,   531,   532,
     533,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   302,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3202,    -1,    -1,    -1,    -1,    -1,   302,    -1,
      -1,    -1,    -1,    -1,   999,    -1,    -1,    -1,  3218,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1017,    -1,    -1,   493,   494,    -1,  1023,    -1,
      -1,  1026,    -1,    -1,    -1,  1030,  1031,  1032,  1033,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   517,
     518,  2421,    -1,    -1,    -1,    -1,    -1,    -1,  2428,    -1,
      -1,    -1,    -1,    -1,  2434,  2435,  2436,    -1,    -1,  2569,
      -1,    -1,  2572,    -1,    -1,    -1,    -1,    -1,  2578,  2449,
    1075,  1076,    -1,  2453,    -1,   409,  2456,    -1,   328,   329,
     330,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2468,    -1,
      -1,    -1,  1097,     8,    -1,   409,    11,    -1,    -1,    -1,
      15,    16,    17,    18,    -1,    20,    21,    22,    -1,    -1,
      -1,    -1,  1117,    -1,    -1,  2625,    -1,    -1,    -1,  2629,
      -1,    -1,    37,    -1,  1129,  1130,  1131,    42,  1133,  1134,
      -1,    -1,    -1,    48,    -1,    -1,    -1,    -1,    -1,    -1,
      55,    -1,    -1,    -1,    -1,    -1,    -1,   397,    25,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3376,    -1,   408,    -1,
      -1,    -1,    -1,    -1,  1169,    -1,    -1,    82,    25,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2556,  2557,  2558,    -1,
    3400,   431,  1187,  1188,    -1,   435,    -1,   521,    -1,    -1,
     524,   525,   526,    -1,   528,   529,   530,   531,   532,   533,
      -1,    -1,    -1,    -1,  2714,    -1,    83,   521,  2718,  2719,
    2720,    -1,    -1,    -1,   528,   529,   530,   531,   532,   533,
    1225,   471,    99,    -1,  1229,  1230,    83,    -1,    -1,    -1,
      -1,    -1,   482,    -1,    -1,  1240,  1241,    -1,    -1,  2749,
      -1,    -1,    99,    -1,    -1,    -1,    -1,    -1,  3468,   499,
    3470,    -1,    -1,    -1,    -1,    -1,  2766,  2767,  2768,  2769,
      -1,  2771,  2772,  2773,  2774,  2775,   181,    -1,    -1,    -1,
      -1,    -1,   149,   523,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   159,    -1,   199,    -1,    -1,   537,    -1,   204,
    3510,    -1,   149,    -1,  1299,    -1,   173,    -1,    -1,    -1,
      -1,   178,   159,    -1,  1309,    -1,    -1,  3527,    -1,    -1,
      -1,    -1,   227,   228,    -1,    -1,   173,    -1,    -1,    -1,
      -1,   178,    -1,    -1,    -1,    -1,    -1,    -1,   243,  1334,
    2710,   208,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   208,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2872,    -1,    -1,  2875,    -1,    -1,    -1,    -1,
     285,    -1,    -1,   288,    -1,    -1,    -1,   254,    -1,    -1,
      -1,   258,    -1,    -1,    -1,    -1,    -1,   302,    -1,    -1,
     305,    -1,    -1,  2903,   271,    -1,    -1,   254,    -1,    -1,
      -1,   258,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   271,    -1,    -1,    -1,  1423,    -1,
      -1,    -1,    -1,    -1,    -1,  2935,    -1,  2807,    -1,    -1,
      -1,    -1,    -1,  2943,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     327,    -1,    -1,    -1,    -1,  3675,   333,    -1,    -1,  2839,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2977,    -1,    -1,
      -1,    -1,    -1,   350,    -1,    -1,   333,    -1,    -1,    -1,
      -1,    -1,  1487,    -1,  1489,  1490,    -1,    -1,  3708,    -1,
      -1,    -1,    -1,   350,   409,    -1,    -1,  1502,  1503,    -1,
      -1,    -1,  2882,  2883,  2884,  2885,    -1,    -1,   385,    -1,
      -1,   388,    -1,    -1,    -1,    -1,    -1,    -1,  1523,    -1,
      -1,    -1,   399,    -1,    -1,   402,    -1,    -1,   385,    -1,
    3040,   388,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   399,    -1,   421,   402,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   435,    -1,
      -1,    -1,    -1,    -1,   421,    -1,   443,   444,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   454,   435,    -1,
      -1,    -1,    -1,   460,    -1,    -1,    -1,   444,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   454,    -1,    -1,
      -1,    -1,    -1,   460,    -1,    -1,   521,    -1,    -1,   524,
     525,   526,   489,   528,   529,   530,   531,   532,   533,    -1,
      -1,  1626,    -1,   538,    -1,    -1,    -1,    -1,    -1,    -1,
    1635,    -1,   489,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1649,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1669,    -1,    -1,  3047,    -1,    -1,
      -1,    -1,  1677,    -1,    -1,    -1,    -1,    -1,  1683,  1684,
    1685,  1686,  1687,  1688,  1689,  1690,    -1,    -1,    -1,    -1,
    1695,  1696,  3202,    -1,    -1,  1700,    -1,    -1,    -1,  1704,
      -1,    -1,  1707,  1708,  1709,  1710,  1711,  1712,  1713,  1714,
    1715,    -1,    -1,  1718,    -1,    -1,    -1,    -1,    -1,    -1,
    1725,    -1,  1727,    -1,    -1,  3235,    -1,    -1,    -1,    -1,
      -1,    -1,  3242,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1745,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,
      17,    18,    -1,    20,    21,    22,    -1,    -1,    -1,    -1,
       8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,    -1,
      37,    -1,    20,    21,    22,    -1,    -1,    -1,    -1,  1784,
    1785,    48,    -1,    -1,    -1,    -1,    -1,    -1,    55,    37,
      -1,    -1,    -1,    -1,    -1,    -1,  3306,    -1,    -1,    -1,
      48,  3311,    -1,    -1,    -1,    -1,    -1,    55,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    82,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3337,    -1,    -1,
      -1,    -1,    -1,    -1,    82,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3361,  3362,    -1,    -1,     8,    -1,    -1,    11,    -1,
      -1,    -1,    15,    16,    17,    18,    -1,    20,    21,    22,
      -1,    -1,  1877,    -1,  3384,    -1,    -1,    -1,    -1,  1884,
      -1,    -1,  1887,  1888,    37,  1027,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    48,    -1,    -1,    -1,    -1,
      -1,    -1,    55,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   181,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1928,    -1,    -1,    -1,    -1,  3438,    82,
      -1,    -1,   199,   181,    -1,    -1,  3446,   204,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   199,    -1,  1958,  1959,    -1,   204,    -1,    -1,    -1,
     227,   228,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   243,    -1,    -1,   227,
     228,    -1,  1987,  1988,    -1,  1990,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   243,    -1,    -1,    -1,  3379,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1154,    -1,    -1,  2020,  2021,    -1,   285,  2024,
      -1,   288,    -1,  3403,  3534,  3405,    -1,    -1,   181,  3409,
      -1,    -1,    -1,    -1,    -1,   302,    -1,   285,   305,    -1,
     288,    -1,    -1,    -1,    -1,    -1,   199,    -1,    -1,    -1,
    2055,   204,    -1,    -1,   302,    -1,    -1,   305,  2063,    -1,
      -1,  1203,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   227,   228,  2081,    -1,  2083,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     243,    -1,    -1,    -1,    -1,    -1,    -1,  1239,  3478,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2121,    -1,    -1,    -1,
      -1,    -1,  2127,    -1,    -1,    -1,    -1,    -1,    -1,  3509,
      -1,    -1,   285,    -1,    -1,   288,    -1,    -1,    -1,    -1,
      -1,    -1,   409,    -1,  3654,    -1,    -1,    -1,    -1,   302,
      -1,  1293,   305,    -1,    -1,  2160,    -1,    -1,    -1,  2164,
      -1,   409,    -1,    -1,  2169,  2170,    -1,    -1,    -1,    -1,
       8,    -1,    -1,    11,    -1,  3685,    -1,    15,    16,    17,
      18,    -1,    20,    21,    22,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1338,    -1,    -1,    37,
      -1,    -1,    -1,  1345,    -1,    -1,    -1,    -1,    -1,    -1,
      48,  2216,    -1,    -1,  2219,    -1,  2221,    55,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2237,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    82,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   521,  1397,   409,   524,   525,   526,
      -1,   528,   529,   530,   531,   532,   533,    -1,    -1,    -1,
      -1,   538,    -1,   521,    -1,  2280,   524,   525,   526,  1421,
     528,   529,   530,   531,   532,   533,    -1,    -1,    -1,    -1,
      -1,    -1,  2297,  2298,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3684,    -1,    -1,    -1,    -1,    -1,
      -1,  2316,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2325,    -1,    -1,    -1,    -1,    -1,    -1,  1469,    -1,  1471,
      -1,  1473,  1474,    -1,  1476,    -1,    -1,  1479,    -1,    -1,
      -1,  1483,    -1,   181,  1486,    -1,    -1,    -1,    -1,  1491,
      -1,    -1,  1494,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   199,    -1,    -1,    -1,    -1,   204,    -1,   521,    -1,
      -1,   524,   525,   526,    -1,   528,   529,   530,   531,   532,
     533,    -1,    -1,    -1,    -1,   538,    -1,  2392,    -1,   227,
     228,    -1,    -1,    -1,  1536,    -1,  2401,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   243,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   285,    -1,    -1,
     288,    -1,    -1,    -1,    -1,    -1,  2461,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   302,    -1,    -1,   305,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,
    1622,    11,    -1,    -1,    -1,    15,    16,    17,    18,    -1,
      20,    21,    22,    -1,    -1,    -1,    -1,  1639,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,  1650,  1651,
    1652,    -1,    -1,    -1,    -1,  1657,    -1,    -1,    48,  1661,
      -1,    -1,    -1,    -1,    -1,    55,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    82,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   409,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1724,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2603,    -1,
      -1,    -1,    -1,    -1,    -1,  2610,  2611,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2626,    -1,    -1,    -1,  1767,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2639,    -1,    -1,  2642,    -1,  2644,
      -1,  1783,    -1,    -1,    -1,    -1,  1788,  2652,    -1,    -1,
      -1,   181,    -1,    -1,    -1,  2660,  2661,    -1,    -1,    -1,
      -1,    -1,  2667,  1805,    -1,    -1,    -1,    -1,    -1,   199,
      -1,    -1,    -1,    -1,   204,    -1,    -1,    -1,    -1,  2684,
      -1,    -1,    -1,   521,    -1,    -1,   524,   525,   526,  2694,
     528,   529,   530,   531,   532,   533,    -1,   227,   228,    -1,
     538,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2716,    -1,   243,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   285,    -1,    -1,   288,    -1,
    2765,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   302,  2778,  2779,   305,    -1,    -1,    70,    71,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,
     112,    -1,    -1,   115,   116,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2842,    -1,    -1,
      -1,    -1,    -1,  1985,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1993,  1994,    -1,  1996,  1997,  1998,  1999,  2000,  2001,
      -1,    -1,  2004,  2005,  2006,  2007,  2008,  2009,  2010,  2011,
    2012,  2013,  2014,    -1,    -1,    -1,    -1,    -1,    -1,   409,
      -1,    -1,    -1,    -1,  2889,  2890,    -1,  2892,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   194,   195,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2926,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2946,    -1,    -1,    -1,    -1,  2951,  2952,    -1,    -1,
      -1,  2956,    -1,    -1,    -1,    -1,  2961,    -1,    -1,  2964,
    2965,    -1,    -1,    -1,  2969,  2970,    -1,    -1,  2973,   261,
     262,   263,   264,   265,   266,   267,   268,    -1,    -1,    -1,
     272,   273,  2124,    -1,  2989,    -1,  2128,    -1,    -1,    -1,
      -1,   521,    -1,    -1,   524,   525,   526,    -1,   528,   529,
     530,   531,   532,   533,    -1,    -1,    -1,    -1,   538,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2159,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3033,    -1,
      -1,  2173,    -1,    -1,    -1,    -1,  2178,    -1,    -1,    -1,
    2182,  2183,  2184,  2185,  2186,  2187,  2188,  2189,    -1,    -1,
      -1,    -1,    -1,  2195,  2196,  3060,  2198,  2199,    -1,    -1,
     352,   353,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2212,    -1,    -1,  2215,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2223,  2224,  2225,  2226,  2227,  2228,  2229,  2230,  2231,
    2232,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   393,   394,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       8,    -1,    -1,    11,    -1,    -1,  2258,    15,    16,    17,
      18,    -1,    20,    21,    22,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      48,    -1,    -1,     8,    -1,    -1,    11,    55,    -1,    -1,
      15,    16,    -1,    -1,    -1,    20,    21,    22,    -1,    -1,
      -1,    -1,  2314,    -1,    -1,  3180,    -1,    -1,    -1,    -1,
      -1,    -1,    37,    -1,    82,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    48,    -1,    -1,    -1,    -1,    -1,    -1,
      55,   493,   494,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3218,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   517,   518,    82,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   537,     8,    -1,  3253,    11,
      -1,  2393,    -1,    15,    16,    17,    18,    -1,    20,    21,
      22,    -1,  2404,  2405,  3269,  3270,    -1,    -1,  3273,    -1,
    3275,    -1,    -1,    -1,    -1,    37,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   181,    -1,    -1,    48,    -1,    -1,    -1,
      -1,    -1,    -1,    55,    -1,    -1,    -1,  3302,    -1,    -1,
      -1,   199,    -1,    -1,    -1,    -1,   204,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      82,  3326,    -1,    -1,    -1,    -1,   181,    -1,    -1,   227,
     228,    -1,    -1,    -1,    -1,  2477,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   199,   243,    -1,    -1,    -1,   204,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2503,  2504,  2505,    -1,    -1,  2508,  2509,  2510,  2511,
    2512,  2513,   227,   228,    -1,  2517,  2518,  2519,  2520,  2521,
    2522,  2523,  2524,  2525,  2526,    -1,    -1,   285,   243,    -1,
     288,  2533,  2534,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   302,    -1,    -1,   305,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2559,    -1,   181,
      -1,    -1,    -1,  3428,    -1,    -1,  2568,  3432,    -1,    -1,
     285,  3436,    -1,   288,    -1,    -1,    -1,   199,    -1,    -1,
      -1,    -1,   204,    -1,    -1,  3450,    -1,   302,    -1,    -1,
    3455,  3456,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2602,    -1,  3467,    -1,    -1,   227,   228,  2609,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2621,
    3485,   243,    -1,    -1,    -1,  2627,    -1,    -1,    -1,    -1,
    2632,  2633,    -1,    -1,    -1,    -1,    -1,    -1,  2640,  2641,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   409,  2654,  2655,  2656,  2657,    -1,  2659,    -1,    -1,
      -1,  2663,    -1,   285,    -1,    -1,   288,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3542,    -1,    -1,
     302,    -1,    -1,   305,    -1,    -1,    -1,    -1,    -1,  3554,
      -1,    -1,    -1,    -1,   409,    -1,    -1,    -1,    -1,    -1,
      -1,  3566,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2721,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3599,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   521,    -1,    -1,   524,   525,   526,    -1,
     528,   529,   530,   531,   532,   533,    -1,    -1,    -1,    -1,
     538,    -1,    -1,     8,    -1,    -1,    11,   409,    -1,    -1,
      15,    16,    17,    18,    -1,    20,    21,    22,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   521,    -1,    -1,   524,
     525,   526,    37,   528,   529,   530,   531,   532,   533,    -1,
      -1,    -1,    -1,    48,    -1,    -1,    -1,    -1,    -1,    -1,
      55,    -1,    -1,    -1,    -1,    -1,  2838,    -1,    -1,  3704,
    3705,  3706,    -1,    -1,    -1,    -1,     8,    -1,    -1,    11,
      -1,    -1,    -1,    15,    16,    17,    18,    82,    20,    21,
      22,    -1,    -1,    -1,  2866,    -1,    -1,    -1,    -1,    -1,
      -1,  3736,    -1,    -1,    -1,    37,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    48,    -1,    -1,    -1,
      -1,    -1,    -1,    55,    -1,    -1,    -1,    -1,    -1,   521,
      -1,    -1,   524,   525,   526,    -1,   528,   529,   530,   531,
     532,   533,    -1,    -1,    -1,    -1,   538,    -1,    -1,  3784,
      82,    -1,    -1,    -1,    -1,  2927,    -1,  2929,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2938,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2950,    -1,
      -1,  2953,    -1,  2955,    -1,    -1,   181,  2959,    -1,    -1,
    2962,  2963,    -1,    -1,  2966,  2967,    -1,    -1,    -1,    -1,
      -1,    -1,  2974,    -1,   199,    -1,    -1,    -1,    -1,   204,
       8,    -1,    -1,    11,    -1,    -1,  2988,    15,    16,    17,
      18,    -1,    20,    21,    22,    -1,    -1,    -1,    -1,    -1,
      -1,  3003,   227,   228,    -1,    -1,    -1,    -1,    -1,    37,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   243,   181,
      48,    -1,    -1,    -1,    -1,    -1,    -1,    55,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   199,    -1,  3041,
      -1,    -1,   204,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    82,    -1,    -1,    -1,    -1,    -1,
     285,    -1,    -1,   288,    -1,   227,   228,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   302,    -1,    -1,
     305,   243,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,
      -1,    11,    -1,    -1,    -1,    15,    16,    17,    18,    -1,
      20,    21,    22,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   285,    -1,    -1,   288,    37,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    48,    -1,
     302,    -1,    -1,   305,    -1,    55,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   181,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   199,    82,    -1,    -1,    -1,   204,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   409,    -1,  3188,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3198,  3199,    -1,   227,
     228,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   243,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3226,  3227,    -1,    -1,  3230,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   409,    -1,  3251,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   285,  3260,    -1,
     288,  3263,  3264,  3265,    -1,    -1,  3268,    -1,    -1,  3271,
    3272,   181,    -1,    -1,   302,    -1,    -1,   305,  3280,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   199,
      -1,    -1,    -1,    -1,   204,    -1,   521,    -1,    -1,   524,
     525,   526,    -1,   528,   529,   530,   531,   532,   533,    -1,
      -1,    -1,    -1,   538,    -1,    -1,    -1,   227,   228,    -1,
      -1,  3323,    -1,    -1,    -1,    -1,    -1,  3329,    -1,    -1,
      -1,    -1,    -1,   243,    -1,    -1,    -1,    -1,    -1,    -1,
    3342,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   521,
      -1,    -1,   524,   525,   526,    -1,   528,   529,   530,   531,
     532,   533,    -1,    -1,    -1,   285,   538,    -1,   288,    -1,
      -1,   409,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   302,    -1,    -1,   305,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3414,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3452,  3453,  3454,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3474,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3486,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   521,    -1,    -1,   524,   525,   526,   409,
     528,   529,   530,   531,   532,   533,    -1,    -1,    -1,    -1,
     538,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3559,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3569,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3594,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   521,    -1,    -1,   524,   525,   526,    -1,   528,   529,
     530,   531,   532,   533,    -1,    -1,    -1,  3629,   538,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    23,    24,
      25,    26,    27,    28,    29,    30,    -1,    32,    33,    34,
      -1,  3673,    -1,    -1,    -1,    -1,    41,    -1,    -1,    44,
      45,    46,    -1,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    -1,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    -1,    77,    78,    79,    80,    81,    -1,    83,    -1,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      -1,    96,    97,    98,    99,   100,   101,  3739,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,    -1,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,    -1,
      -1,   136,   137,   138,   139,   140,   141,    -1,   143,   144,
     145,    -1,   147,   148,   149,    -1,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
      -1,    -1,   167,   168,   169,   170,    -1,   172,    -1,   174,
     175,   176,   177,   178,   179,   180,   181,   182,    -1,   184,
     185,    -1,   187,   188,   189,   190,    -1,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,    -1,
     205,   206,   207,   208,   209,   210,   211,    -1,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,    -1,   224,
      -1,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,    -1,    -1,   240,   241,   242,   243,    -1,
     245,    -1,    -1,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,    -1,   298,   299,    -1,    -1,   302,   303,   304,
      -1,    -1,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,    -1,   332,   333,   334,
     335,   336,   337,   338,    -1,   340,   341,   342,    -1,   344,
     345,   346,   347,   348,    -1,   350,    -1,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,    -1,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,    -1,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,    -1,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,    -1,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,    -1,   433,   434,
     435,   436,   437,   438,    -1,   440,   441,   442,   443,   444,
      -1,   446,   447,   448,    -1,    -1,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
      -1,    -1,   467,   468,   469,   470,   471,   472,   473,   474,
     475,    -1,   477,   478,   479,   480,   481,   482,   483,   484,
      -1,   486,   487,   488,   489,   490,   491,   492,   493,   494,
      -1,    -1,   497,    -1,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,    -1,   523,    -1,
      -1,    -1,    -1,   528,   529,   530,    -1,    -1,    -1,    -1,
     535,    -1,   537,   538,    -1,    -1,   541,    -1,   543,   544,
     545,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    41,
      -1,    -1,    44,    45,    46,    -1,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    -1,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    -1,    77,    78,    79,    80,    81,
      -1,    83,    -1,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    97,    98,    99,   100,   101,
      -1,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,    -1,
     122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
     132,   133,    -1,    -1,   136,   137,   138,   139,   140,   141,
      -1,   143,   144,   145,    -1,   147,   148,   149,    -1,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,   164,    -1,    -1,   167,   168,   169,   170,    -1,
     172,    -1,   174,   175,   176,   177,   178,   179,   180,   181,
     182,    -1,   184,   185,    -1,   187,   188,   189,   190,    -1,
     192,   193,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   203,    -1,   205,   206,   207,   208,   209,   210,   211,
      -1,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,    -1,   224,    -1,   226,   227,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,    -1,    -1,   240,   241,
     242,   243,    -1,   245,    -1,    -1,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,    -1,   298,   299,    -1,    -1,
     302,   303,   304,    -1,    -1,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,    -1,
     332,   333,   334,   335,   336,   337,   338,    -1,   340,   341,
     342,    -1,   344,   345,   346,   347,   348,    -1,   350,    -1,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
      -1,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,    -1,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,    -1,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,    -1,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
      -1,   433,   434,   435,   436,   437,   438,    -1,   440,   441,
     442,   443,   444,    -1,   446,   447,   448,    -1,    -1,   451,
     452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
     462,   463,   464,    -1,    -1,   467,   468,   469,   470,   471,
     472,   473,   474,   475,    -1,   477,   478,   479,   480,   481,
     482,   483,   484,    -1,   486,   487,   488,   489,   490,   491,
     492,   493,   494,    -1,    -1,   497,    -1,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520,   521,
      -1,   523,    -1,    -1,    -1,    -1,   528,   529,   530,    -1,
      -1,    -1,    -1,   535,    -1,   537,    -1,    -1,    -1,   541,
      -1,   543,   544,   545,     3,     4,     5,     6,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    23,    24,    25,    26,    27,    28,
      29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,
      -1,    -1,    41,    -1,    -1,    44,    45,    46,    -1,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    -1,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    75,    -1,    77,    78,
      79,    80,    81,    -1,    83,    -1,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    -1,    96,    97,    98,
      99,   100,   101,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,    -1,   122,   123,   124,   125,   126,   127,    -1,
      -1,   130,   131,   132,   133,    -1,    -1,   136,   137,   138,
     139,   140,   141,    -1,   143,   144,   145,    -1,   147,   148,
     149,    -1,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,   164,    -1,    -1,   167,   168,
     169,   170,    -1,   172,    -1,   174,   175,   176,   177,   178,
     179,   180,   181,   182,    -1,   184,   185,    -1,   187,   188,
     189,   190,    -1,   192,   193,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,    -1,   213,   214,   215,   216,   217,   218,
     219,   220,   221,   222,    -1,   224,    -1,   226,   227,   228,
     229,   230,   231,   232,   233,   234,   235,   236,   237,    -1,
      -1,   240,   241,   242,   243,    -1,   245,    -1,    -1,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,    -1,   298,
     299,    -1,    -1,   302,   303,   304,    -1,    -1,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,    -1,   332,   333,   334,   335,   336,   337,   338,
      -1,   340,   341,   342,    -1,   344,   345,   346,   347,   348,
      -1,   350,    -1,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,    -1,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,    -1,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,    -1,
     399,   400,   401,   402,   403,   404,   405,   406,   407,    -1,
     409,   410,   411,   412,   413,    -1,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,    -1,    -1,   433,   434,   435,   436,   437,   438,
      -1,   440,   441,   442,   443,   444,    -1,   446,   447,   448,
      -1,    -1,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   463,   464,    -1,    -1,   467,   468,
     469,   470,   471,   472,   473,   474,   475,    -1,   477,   478,
     479,   480,   481,   482,   483,   484,    -1,   486,   487,   488,
     489,   490,   491,   492,   493,   494,    -1,    -1,   497,    -1,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,   518,
     519,   520,   521,    -1,   523,    -1,    -1,    -1,    -1,   528,
     529,   530,    -1,    -1,    -1,    -1,   535,    -1,   537,    -1,
      -1,    -1,   541,    -1,   543,   544,   545,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    -1,
      -1,    -1,    38,    -1,    -1,    41,    -1,    -1,    44,    45,
      46,    -1,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    -1,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      -1,    77,    78,    79,    80,    81,    -1,    83,    -1,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    97,    98,    99,   100,   101,    -1,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,    -1,   122,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,
     136,   137,   138,   139,   140,   141,    -1,   143,   144,   145,
      -1,   147,   148,   149,    -1,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,   164,    -1,
      -1,   167,   168,   169,   170,    -1,   172,    -1,   174,   175,
      -1,   177,   178,   179,   180,   181,   182,    -1,   184,   185,
      -1,   187,   188,   189,   190,    -1,   192,   193,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,    -1,   205,
     206,   207,   208,   209,   210,   211,    -1,   213,   214,   215,
     216,   217,   218,   219,   220,   221,   222,    -1,   224,    -1,
     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
     236,   237,    -1,    -1,   240,   241,   242,   243,    -1,   245,
      -1,    -1,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,    -1,   298,   299,    -1,    -1,   302,   303,   304,    -1,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,    -1,    -1,    -1,    -1,   332,   333,   334,   335,
     336,   337,   338,    -1,   340,   341,   342,    -1,   344,   345,
     346,   347,   348,    -1,   350,    -1,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,    -1,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
      -1,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,    -1,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,    -1,   409,   410,   411,   412,   413,    -1,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,    -1,    -1,   433,   434,    -1,
     436,   437,   438,    -1,   440,   441,   442,   443,   444,    -1,
     446,   447,   448,    -1,    -1,   451,   452,   453,   454,   455,
     456,   457,   458,   459,   460,   461,   462,   463,   464,    -1,
      -1,   467,   468,   469,   470,    -1,   472,   473,   474,   475,
      -1,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,    -1,
      -1,   497,    -1,    -1,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   518,   519,   520,   521,    -1,    -1,    -1,    -1,
      -1,    -1,   528,   529,   530,    -1,    -1,    -1,    -1,   535,
      -1,   537,   538,    -1,    -1,   541,    -1,   543,   544,   545,
       3,     4,     5,     6,     7,     8,     9,    10,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      23,    24,    25,    26,    27,    28,    29,    30,    -1,    32,
      33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    41,    -1,
      -1,    44,    45,    46,    -1,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    -1,    77,    78,    79,    80,    81,    -1,
      83,    -1,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    -1,    96,    97,    98,    99,   100,   101,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,    -1,   122,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,    -1,    -1,   136,   137,   138,   139,   140,   141,    -1,
     143,   144,   145,    -1,   147,   148,   149,    -1,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,   164,    -1,    -1,   167,   168,   169,   170,    -1,   172,
      -1,   174,   175,   176,   177,   178,   179,   180,   181,   182,
      -1,   184,   185,    -1,   187,   188,   189,   190,    -1,   192,
     193,   194,   195,   196,   197,   198,   199,   200,   201,   202,
     203,    -1,   205,   206,   207,   208,   209,   210,   211,    -1,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
      -1,   224,    -1,   226,   227,   228,   229,   230,   231,   232,
     233,   234,   235,   236,   237,    -1,   239,   240,   241,   242,
     243,    -1,   245,    -1,    -1,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,    -1,   298,   299,    -1,    -1,   302,
     303,   304,    -1,    -1,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,    -1,    -1,    -1,    -1,   332,
     333,   334,   335,   336,   337,   338,    -1,   340,   341,   342,
      -1,   344,   345,   346,   347,   348,    -1,   350,    -1,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,    -1,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,    -1,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,    -1,    -1,   399,   400,   401,   402,
     403,   404,   405,   406,   407,    -1,   409,   410,   411,   412,
     413,    -1,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,    -1,    -1,
     433,   434,    -1,   436,   437,   438,    -1,   440,   441,   442,
     443,   444,    -1,   446,   447,   448,    -1,   450,   451,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
     463,   464,    -1,    -1,   467,   468,   469,   470,    -1,   472,
     473,   474,   475,    -1,   477,   478,   479,   480,   481,   482,
     483,   484,    -1,   486,   487,   488,   489,   490,   491,   492,
     493,   494,    -1,    -1,   497,    -1,    -1,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,   518,   519,   520,   521,    -1,
      -1,    -1,    -1,    -1,    -1,   528,   529,   530,    -1,    -1,
      -1,    -1,   535,    -1,   537,    -1,    -1,    -1,   541,    -1,
     543,   544,   545,     3,     4,     5,     6,     7,    -1,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    23,    24,    25,    26,    27,    28,    29,
      30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
      -1,    41,    -1,    -1,    44,    45,    46,    -1,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      -1,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    -1,    77,    78,    79,
      80,    81,    -1,    83,    -1,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,    97,    98,    99,
     100,   101,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
     120,    -1,   122,   123,   124,   125,   126,   127,   128,   129,
     130,   131,   132,   133,    -1,    -1,   136,   137,   138,   139,
     140,   141,    -1,   143,   144,   145,    -1,   147,   148,   149,
      -1,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,   164,    -1,    -1,   167,   168,   169,
     170,    -1,   172,    -1,   174,   175,   176,   177,   178,   179,
     180,   181,   182,    -1,   184,   185,    -1,   187,   188,   189,
     190,    -1,   192,   193,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,    -1,   205,   206,   207,   208,   209,
     210,   211,    -1,   213,   214,   215,   216,   217,   218,   219,
     220,   221,   222,    -1,   224,    -1,   226,   227,   228,   229,
     230,   231,   232,   233,    -1,   235,   236,   237,    -1,    -1,
     240,   241,   242,   243,    -1,   245,    -1,    -1,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,    -1,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,    -1,   298,   299,
      -1,    -1,   302,   303,   304,    -1,    -1,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,    -1,   332,   333,   334,   335,   336,   337,   338,    -1,
     340,   341,   342,    -1,   344,   345,   346,   347,   348,    -1,
     350,    -1,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,    -1,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,    -1,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,    -1,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,    -1,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,    -1,   433,   434,   435,   436,   437,   438,    -1,
     440,   441,   442,   443,   444,    -1,   446,   447,   448,    -1,
      -1,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   461,   462,   463,   464,    -1,    -1,   467,   468,   469,
      -1,   471,   472,   473,   474,   475,    -1,   477,   478,   479,
     480,   481,   482,   483,   484,    -1,   486,   487,   488,   489,
     490,   491,   492,   493,   494,    -1,    -1,   497,    -1,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   518,   519,
     520,    -1,    -1,   523,    -1,    -1,     3,     4,     5,     6,
       7,     8,     9,    10,    -1,   535,    -1,   537,    -1,    -1,
      -1,   541,    -1,   543,   544,   545,    23,    24,    25,    26,
      27,    28,    29,    30,    -1,    32,    33,    34,    -1,    -1,
      -1,    38,    -1,    -1,    41,    -1,    -1,    44,    45,    46,
      -1,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    -1,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    -1,
      77,    78,    79,    80,    81,    -1,    83,    -1,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    -1,    96,
      97,    98,    99,   100,   101,    -1,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,    -1,   122,   123,   124,   125,   126,
     127,    -1,    -1,   130,   131,   132,   133,    -1,    -1,   136,
     137,   138,   139,   140,   141,    -1,   143,   144,   145,    -1,
     147,   148,   149,    -1,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,   164,    -1,    -1,
     167,   168,   169,   170,    -1,   172,    -1,   174,   175,    -1,
     177,   178,   179,   180,   181,   182,    -1,   184,   185,    -1,
     187,   188,   189,   190,    -1,   192,   193,   194,   195,   196,
     197,   198,   199,   200,   201,   202,   203,    -1,   205,   206,
     207,   208,   209,   210,   211,    -1,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,    -1,   224,    -1,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,   236,
     237,    -1,    -1,   240,   241,   242,   243,    -1,   245,    -1,
      -1,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
      -1,   298,   299,    -1,    -1,   302,   303,   304,    -1,    -1,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,    -1,    -1,    -1,    -1,   332,   333,   334,   335,   336,
     337,   338,    -1,   340,   341,   342,    -1,   344,   345,   346,
     347,   348,    -1,   350,    -1,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,    -1,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,    -1,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
      -1,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,    -1,   409,   410,   411,   412,   413,    -1,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,    -1,    -1,   433,   434,    -1,   436,
     437,   438,    -1,   440,   441,   442,   443,   444,    -1,   446,
     447,   448,    -1,    -1,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,    -1,    -1,
     467,   468,   469,   470,    -1,   472,   473,   474,   475,    -1,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,    -1,    -1,
     497,    -1,    -1,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   518,   519,   520,   521,    -1,    -1,    -1,    -1,    -1,
      -1,   528,   529,   530,    -1,    -1,    -1,    -1,   535,    -1,
     537,    -1,    -1,    -1,   541,    -1,   543,   544,   545,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    33,
      34,    -1,    -1,    -1,    38,    -1,    -1,    41,    -1,    -1,
      44,    45,    46,    -1,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    -1,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    -1,    77,    78,    79,    80,    81,    -1,    83,
      -1,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    97,    98,    99,   100,   101,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,    -1,   122,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
      -1,    -1,   136,   137,   138,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,    -1,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,    -1,    -1,   167,   168,   169,   170,    -1,   172,    -1,
     174,   175,    -1,   177,   178,   179,   180,   181,   182,    -1,
     184,   185,    -1,   187,   188,   189,   190,    -1,   192,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
      -1,   205,   206,   207,   208,   209,   210,   211,    -1,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,    -1,
     224,    -1,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,    -1,    -1,   240,   241,   242,   243,
      -1,   245,    -1,    -1,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,    -1,   298,   299,    -1,    -1,   302,   303,
     304,    -1,    -1,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,    -1,    -1,    -1,    -1,   332,   333,
     334,   335,   336,   337,   338,    -1,   340,   341,   342,    -1,
     344,   345,   346,   347,   348,    -1,   350,    -1,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,    -1,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,    -1,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,    -1,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,    -1,   409,   410,   411,   412,   413,
      -1,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,    -1,    -1,   433,
     434,    -1,   436,   437,   438,    -1,   440,   441,   442,   443,
     444,    -1,   446,   447,   448,    -1,    -1,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,    -1,    -1,   467,   468,   469,   470,    -1,   472,   473,
     474,   475,    -1,   477,   478,   479,   480,   481,   482,   483,
     484,    -1,   486,   487,   488,   489,   490,   491,   492,   493,
     494,    -1,    -1,   497,    -1,    -1,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   518,   519,   520,   521,    -1,    -1,
      -1,    -1,    -1,    -1,   528,   529,   530,    -1,    -1,    -1,
      -1,   535,    -1,   537,   538,    -1,    -1,   541,    -1,   543,
     544,   545,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    -1,    -1,    -1,    -1,    39,    -1,
      41,    -1,    -1,    44,    45,    46,    -1,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    -1,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    75,    -1,    77,    78,    79,    80,
      81,    -1,    83,    -1,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    -1,    96,    97,    98,    99,   100,
     101,    -1,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
      -1,   122,   123,   124,   125,   126,   127,    -1,    -1,   130,
     131,   132,   133,    -1,    -1,   136,   137,   138,   139,   140,
     141,    -1,   143,   144,   145,    -1,   147,   148,   149,    -1,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,   164,    -1,    -1,   167,   168,   169,   170,
      -1,   172,    -1,   174,   175,    -1,   177,   178,   179,   180,
     181,   182,    -1,   184,   185,    -1,   187,   188,   189,   190,
      -1,   192,   193,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,    -1,   205,   206,   207,   208,   209,   210,
     211,    -1,   213,   214,   215,   216,   217,   218,   219,   220,
     221,   222,    -1,   224,    -1,   226,   227,   228,   229,   230,
     231,   232,   233,   234,   235,   236,   237,    -1,    -1,   240,
     241,   242,   243,    -1,   245,    -1,    -1,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,    -1,   298,   299,    -1,
      -1,   302,   303,   304,    -1,    -1,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,    -1,    -1,    -1,
      -1,   332,   333,   334,   335,   336,   337,   338,    -1,   340,
     341,   342,    -1,   344,   345,   346,   347,   348,    -1,   350,
      -1,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,    -1,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,    -1,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,    -1,    -1,   399,   400,
     401,   402,   403,   404,   405,   406,   407,    -1,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
      -1,    -1,   433,   434,    -1,   436,   437,   438,    -1,   440,
     441,   442,   443,   444,    -1,   446,   447,   448,    -1,    -1,
     451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
     461,   462,   463,   464,    -1,    -1,   467,   468,   469,   470,
      -1,   472,   473,   474,   475,    -1,   477,   478,   479,   480,
     481,   482,   483,   484,    -1,   486,   487,   488,   489,   490,
     491,   492,   493,   494,    -1,    -1,   497,    -1,    -1,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,   517,   518,   519,   520,
     521,    -1,    -1,    -1,    -1,    -1,    -1,   528,   529,   530,
      -1,    -1,    -1,    -1,   535,    -1,   537,    -1,    -1,    -1,
     541,    -1,   543,   544,   545,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    23,    24,    25,    26,    27,
      28,    29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,
      38,    -1,    -1,    41,    -1,    -1,    44,    45,    46,    -1,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    -1,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    -1,    77,
      78,    79,    80,    81,    -1,    83,    -1,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    97,
      98,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,    -1,   122,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,    -1,    -1,   136,   137,
     138,   139,   140,   141,    -1,   143,   144,   145,    -1,   147,
     148,   149,    -1,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,   164,    -1,    -1,   167,
     168,   169,   170,    -1,   172,    -1,   174,   175,    -1,   177,
     178,   179,   180,   181,   182,    -1,   184,   185,    -1,   187,
     188,   189,   190,    -1,   192,   193,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,    -1,   205,   206,   207,
     208,   209,   210,   211,    -1,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,    -1,   224,    -1,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
      -1,    -1,   240,   241,   242,   243,    -1,   245,    -1,    -1,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,    -1,
     298,   299,    -1,    -1,   302,   303,   304,    -1,    -1,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
      -1,    -1,    -1,    -1,   332,   333,   334,   335,   336,   337,
     338,    -1,   340,   341,   342,    -1,   344,   345,   346,   347,
     348,    -1,   350,    -1,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,    -1,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,    -1,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,    -1,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
      -1,   409,   410,   411,   412,   413,    -1,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,    -1,    -1,   433,   434,    -1,   436,   437,
     438,    -1,   440,   441,   442,   443,   444,    -1,   446,   447,
     448,    -1,    -1,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   462,   463,   464,    -1,    -1,   467,
     468,   469,   470,    -1,   472,   473,   474,   475,    -1,   477,
     478,   479,   480,   481,   482,   483,   484,    -1,   486,   487,
     488,   489,   490,   491,   492,   493,   494,    -1,    -1,   497,
      -1,    -1,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,   519,   520,   521,    -1,    -1,    -1,    -1,    -1,    -1,
     528,   529,   530,    -1,    -1,    -1,    -1,   535,    -1,   537,
     538,    -1,    -1,   541,    -1,   543,   544,   545,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    23,    24,
      25,    26,    27,    28,    29,    30,    -1,    32,    33,    34,
      -1,    -1,    -1,    38,    -1,    -1,    41,    -1,    -1,    44,
      45,    46,    -1,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    -1,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    -1,    77,    78,    79,    80,    81,    -1,    83,    -1,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      -1,    96,    97,    98,    99,   100,   101,    -1,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,    -1,   122,   123,   124,
     125,   126,   127,    -1,    -1,   130,   131,   132,   133,    -1,
      -1,   136,   137,   138,   139,   140,   141,    -1,   143,   144,
     145,    -1,   147,   148,   149,    -1,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
      -1,    -1,   167,   168,   169,   170,    -1,   172,    -1,   174,
     175,    -1,   177,   178,   179,   180,   181,   182,    -1,   184,
     185,    -1,   187,   188,   189,   190,    -1,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,    -1,
     205,   206,   207,   208,   209,   210,   211,    -1,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,    -1,   224,
      -1,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,    -1,    -1,   240,   241,   242,   243,    -1,
     245,    -1,    -1,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,    -1,   298,   299,    -1,    -1,   302,   303,   304,
      -1,    -1,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,    -1,    -1,    -1,    -1,   332,   333,   334,
     335,   336,   337,   338,    -1,   340,   341,   342,    -1,   344,
     345,   346,   347,   348,    -1,   350,    -1,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,    -1,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,    -1,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,    -1,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,    -1,   409,   410,   411,   412,   413,    -1,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,    -1,    -1,   433,   434,
      -1,   436,   437,   438,    -1,   440,   441,   442,   443,   444,
      -1,   446,   447,   448,    -1,    -1,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
      -1,    -1,   467,   468,   469,   470,    -1,   472,   473,   474,
     475,    -1,   477,   478,   479,   480,   481,   482,   483,   484,
      -1,   486,   487,   488,   489,   490,   491,   492,   493,   494,
      -1,    -1,   497,    -1,    -1,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,    -1,    -1,    -1,
      -1,    -1,    -1,   528,   529,   530,    -1,    -1,    -1,    -1,
     535,    -1,   537,    -1,    -1,    -1,   541,    -1,   543,   544,
     545,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    41,
      -1,    -1,    44,    45,    46,    -1,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    -1,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    -1,    77,    78,    79,    80,    81,
      -1,    83,    -1,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    97,    98,    99,   100,   101,
      -1,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,    -1,
     122,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,    -1,    -1,   136,   137,   138,   139,   140,   141,
      -1,   143,   144,   145,    -1,   147,   148,   149,    -1,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,   164,    -1,    -1,   167,   168,   169,   170,    -1,
     172,    -1,   174,   175,    -1,   177,   178,   179,   180,   181,
     182,    -1,   184,   185,    -1,   187,   188,   189,   190,    -1,
     192,   193,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   203,    -1,   205,   206,   207,   208,   209,   210,   211,
      -1,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,    -1,   224,    -1,   226,   227,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,    -1,    -1,   240,   241,
     242,   243,    -1,   245,    -1,    -1,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,    -1,   298,   299,    -1,    -1,
     302,   303,   304,    -1,    -1,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,    -1,    -1,    -1,    -1,
     332,   333,   334,   335,   336,   337,   338,    -1,   340,   341,
     342,    -1,   344,   345,   346,   347,   348,    -1,   350,    -1,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
      -1,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,    -1,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,    -1,    -1,   399,   400,   401,
     402,   403,   404,   405,   406,   407,    -1,   409,   410,   411,
     412,   413,    -1,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,    -1,
      -1,   433,   434,    -1,   436,   437,   438,    -1,   440,   441,
     442,   443,   444,    -1,   446,   447,   448,    -1,    -1,   451,
     452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
     462,   463,   464,    -1,    -1,   467,   468,   469,   470,    -1,
     472,   473,   474,   475,    -1,   477,   478,   479,   480,   481,
     482,   483,   484,    -1,   486,   487,   488,   489,   490,   491,
     492,   493,   494,    -1,    -1,   497,    -1,    -1,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520,   521,
      -1,    -1,    -1,    -1,    -1,    -1,   528,   529,   530,    -1,
      -1,    -1,    -1,   535,    -1,   537,    -1,    -1,    -1,   541,
      -1,   543,   544,   545,     3,     4,     5,     6,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    -1,    -1,    -1,    -1,
      -1,    -1,    41,    -1,    -1,    44,    45,    46,    -1,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    -1,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    75,    -1,    77,    78,
      79,    80,    81,    -1,    83,    -1,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    -1,    96,    97,    98,
      99,   100,   101,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,    -1,   122,   123,   124,   125,   126,   127,    -1,
      -1,   130,   131,   132,   133,    -1,    -1,   136,   137,   138,
     139,   140,   141,    -1,   143,   144,   145,    -1,   147,   148,
     149,    -1,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,   164,    -1,    -1,   167,   168,
     169,   170,    -1,   172,    -1,   174,   175,    -1,   177,   178,
     179,   180,   181,   182,    -1,   184,   185,    -1,   187,   188,
     189,   190,    -1,   192,   193,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,    -1,   213,   214,   215,   216,   217,   218,
     219,   220,   221,   222,    -1,   224,    -1,   226,   227,   228,
     229,   230,   231,   232,   233,   234,   235,   236,   237,    -1,
      -1,   240,   241,   242,   243,    -1,   245,    -1,    -1,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,    -1,   298,
     299,    -1,    -1,   302,   303,   304,    -1,    -1,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,    -1,
      -1,    -1,    -1,   332,   333,   334,   335,   336,   337,   338,
      -1,   340,   341,   342,    -1,   344,   345,   346,   347,   348,
      -1,   350,    -1,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,    -1,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,    -1,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,    -1,    -1,
     399,   400,   401,   402,   403,   404,   405,   406,   407,    -1,
     409,   410,   411,   412,   413,    -1,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,    -1,    -1,   433,   434,    -1,   436,   437,   438,
      -1,   440,   441,   442,   443,   444,    -1,   446,   447,   448,
      -1,    -1,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   463,   464,    -1,    -1,   467,   468,
     469,   470,    -1,   472,   473,   474,   475,    -1,   477,   478,
     479,   480,   481,   482,   483,   484,    -1,   486,   487,   488,
     489,   490,   491,   492,   493,   494,    -1,    -1,   497,    -1,
      -1,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,   518,
     519,   520,   521,    -1,    -1,    -1,    -1,    -1,    -1,   528,
     529,   530,    -1,    -1,    -1,    -1,   535,    -1,   537,    -1,
      -1,    -1,   541,    -1,   543,   544,   545,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    23,    24,    25,
      26,    27,    28,    29,    30,    -1,    32,    33,    34,    -1,
      -1,    -1,    -1,    -1,    -1,    41,    -1,    -1,    44,    45,
      46,    -1,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    -1,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      -1,    77,    78,    79,    80,    81,    -1,    83,    -1,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    97,    98,    99,   100,   101,    -1,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,    -1,   122,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,    -1,    -1,
     136,   137,   138,   139,   140,   141,    -1,   143,   144,   145,
      -1,   147,   148,   149,    -1,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,   164,    -1,
      -1,   167,   168,   169,   170,    -1,   172,    -1,   174,   175,
     176,   177,   178,   179,   180,   181,   182,    -1,   184,   185,
      -1,   187,   188,   189,   190,    -1,   192,   193,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,    -1,   205,
     206,   207,   208,   209,   210,   211,    -1,   213,   214,   215,
     216,   217,   218,   219,   220,   221,   222,    -1,   224,    -1,
     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
     236,   237,    -1,    -1,   240,   241,   242,   243,    -1,   245,
      -1,    -1,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,    -1,   298,   299,    -1,    -1,   302,   303,   304,    -1,
      -1,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,    -1,    -1,    -1,    -1,   332,   333,   334,   335,
     336,   337,   338,    -1,   340,   341,   342,    -1,   344,   345,
     346,   347,   348,    -1,   350,    -1,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,    -1,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
      -1,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,    -1,    -1,   399,   400,   401,   402,   403,   404,   405,
     406,   407,    -1,   409,   410,   411,   412,   413,    -1,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,    -1,    -1,   433,   434,    -1,
     436,   437,   438,    -1,   440,   441,   442,   443,   444,    -1,
     446,   447,   448,    -1,    -1,   451,   452,   453,   454,   455,
     456,   457,   458,   459,   460,   461,   462,   463,   464,    -1,
      -1,   467,   468,   469,   470,    -1,   472,   473,   474,   475,
      -1,   477,   478,   479,   480,   481,   482,   483,   484,    -1,
     486,   487,   488,   489,   490,   491,   492,   493,   494,    -1,
      -1,   497,    -1,    -1,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   518,   519,   520,   521,    -1,    -1,    -1,    -1,
      -1,    -1,   528,   529,   530,    -1,    -1,    -1,    -1,   535,
      -1,   537,    -1,    -1,    -1,   541,    -1,   543,   544,   545,
       3,     4,     5,     6,     7,     8,     9,    10,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      23,    24,    25,    26,    27,    28,    29,    30,    -1,    32,
      33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    41,    -1,
      -1,    44,    45,    46,    -1,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    -1,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    -1,    77,    78,    79,    80,    81,    -1,
      83,    -1,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    -1,    96,    97,    98,    99,   100,   101,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,    -1,   122,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,    -1,    -1,   136,   137,   138,   139,   140,   141,    -1,
     143,   144,   145,    -1,   147,   148,   149,    -1,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,   164,    -1,    -1,   167,   168,   169,   170,    -1,   172,
      -1,   174,   175,    -1,   177,   178,   179,   180,   181,   182,
      -1,   184,   185,    -1,   187,   188,   189,   190,    -1,   192,
     193,   194,   195,   196,   197,   198,   199,   200,   201,   202,
     203,    -1,   205,   206,   207,   208,   209,   210,   211,    -1,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
      -1,   224,    -1,   226,   227,   228,   229,   230,   231,   232,
     233,   234,   235,   236,   237,    -1,    -1,   240,   241,   242,
     243,    -1,   245,    -1,    -1,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,    -1,   298,   299,    -1,    -1,   302,
     303,   304,    -1,    -1,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,    -1,    -1,    -1,    -1,   332,
     333,   334,   335,   336,   337,   338,    -1,   340,   341,   342,
      -1,   344,   345,   346,   347,   348,    -1,   350,    -1,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,    -1,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,    -1,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,    -1,    -1,   399,   400,   401,   402,
     403,   404,   405,   406,   407,    -1,   409,   410,   411,   412,
     413,    -1,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,    -1,    -1,
     433,   434,    -1,   436,   437,   438,    -1,   440,   441,   442,
     443,   444,    -1,   446,   447,   448,    -1,    -1,   451,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
     463,   464,    -1,    -1,   467,   468,   469,   470,    -1,   472,
     473,   474,   475,    -1,   477,   478,   479,   480,   481,   482,
     483,   484,    -1,   486,   487,   488,   489,   490,   491,   492,
     493,   494,    -1,    -1,   497,    -1,    -1,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,   518,   519,   520,   521,    -1,
      -1,    -1,    -1,    -1,    -1,   528,   529,   530,    -1,    -1,
      -1,    -1,   535,    -1,   537,   538,    -1,    -1,   541,    -1,
     543,   544,   545,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,
      -1,    -1,    -1,    23,    24,    25,    26,    27,    28,    29,
      30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
      -1,    41,    -1,    -1,    44,    45,    46,    -1,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      -1,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    -1,    77,    78,    79,
      80,    81,    -1,    83,    -1,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,    97,    98,    99,
     100,   101,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,    -1,   122,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,    -1,    -1,   136,   137,   138,   139,
     140,   141,    -1,   143,   144,   145,    -1,   147,   148,   149,
      -1,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,   164,    -1,    -1,   167,   168,   169,
     170,    -1,   172,    -1,   174,   175,    -1,   177,   178,   179,
     180,   181,   182,    -1,   184,   185,    -1,   187,   188,   189,
     190,    -1,   192,   193,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,    -1,   205,   206,   207,   208,   209,
     210,   211,    -1,   213,   214,   215,   216,   217,   218,   219,
     220,   221,   222,    -1,   224,    -1,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,    -1,    -1,
     240,   241,   242,   243,    -1,   245,    -1,    -1,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,    -1,   298,   299,
      -1,    -1,   302,   303,   304,    -1,    -1,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,    -1,    -1,
      -1,    -1,   332,   333,   334,   335,   336,   337,   338,    -1,
     340,   341,   342,    -1,   344,   345,   346,   347,   348,    -1,
     350,    -1,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,    -1,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,    -1,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,    -1,    -1,   399,
     400,   401,   402,   403,   404,   405,   406,   407,    -1,   409,
     410,   411,   412,   413,    -1,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,    -1,    -1,   433,   434,    -1,   436,   437,   438,    -1,
     440,   441,   442,   443,   444,    -1,   446,   447,   448,    -1,
      -1,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   461,   462,   463,   464,    -1,    -1,   467,   468,   469,
     470,    -1,   472,   473,   474,   475,    -1,   477,   478,   479,
     480,   481,   482,   483,   484,    -1,   486,   487,   488,   489,
     490,   491,   492,   493,   494,    -1,    -1,   497,    -1,    -1,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   518,   519,
     520,   521,    -1,    -1,    -1,    -1,    -1,    -1,   528,   529,
     530,    -1,    -1,    -1,    -1,   535,    -1,   537,    -1,    -1,
      -1,   541,    -1,   543,   544,   545,     3,     4,     5,     6,
       7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    23,    24,    25,    26,
      27,    28,    29,    30,    -1,    32,    33,    34,    -1,    -1,
      -1,    -1,    -1,    -1,    41,    -1,    -1,    44,    45,    46,
      -1,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    -1,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    -1,
      77,    78,    79,    80,    81,    -1,    83,    -1,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    -1,    96,
      97,    98,    99,   100,   101,    -1,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,    -1,   122,   123,   124,   125,   126,
     127,    -1,    -1,   130,   131,   132,   133,    -1,    -1,   136,
     137,   138,   139,   140,   141,    -1,   143,   144,   145,    -1,
     147,   148,   149,    -1,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,   164,    -1,    -1,
     167,   168,   169,   170,    -1,   172,    -1,   174,   175,    -1,
     177,   178,   179,   180,   181,   182,    -1,   184,   185,    -1,
     187,   188,   189,   190,    -1,   192,   193,   194,   195,   196,
     197,   198,   199,   200,   201,   202,   203,    -1,   205,   206,
     207,   208,   209,   210,   211,    -1,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,    -1,   224,    -1,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,   236,
     237,    -1,    -1,   240,   241,   242,   243,    -1,   245,    -1,
      -1,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
      -1,   298,   299,    -1,    -1,   302,   303,   304,    -1,    -1,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,    -1,    -1,    -1,    -1,   332,   333,   334,   335,   336,
     337,   338,    -1,   340,   341,   342,    -1,   344,   345,   346,
     347,   348,    -1,   350,    -1,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,    -1,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,    -1,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
      -1,    -1,   399,   400,   401,   402,   403,   404,   405,   406,
     407,    -1,   409,   410,   411,   412,   413,    -1,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,    -1,    -1,   433,   434,   435,   436,
     437,   438,    -1,   440,   441,   442,   443,   444,    -1,   446,
     447,   448,    -1,    -1,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,    -1,    -1,
     467,   468,   469,   470,    -1,   472,   473,   474,   475,    -1,
     477,   478,   479,   480,   481,   482,   483,   484,    -1,   486,
     487,   488,   489,   490,   491,   492,   493,   494,    -1,    -1,
     497,    -1,    -1,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   518,   519,   520,   521,    -1,    -1,    -1,    -1,    -1,
      -1,   528,   529,   530,    -1,    -1,    -1,    -1,   535,    -1,
     537,    -1,    -1,    -1,   541,    -1,   543,   544,   545,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    33,
      34,    -1,    -1,    -1,    -1,    -1,    -1,    41,    -1,    -1,
      44,    45,    46,    -1,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    -1,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    -1,    77,    78,    79,    80,    81,    -1,    83,
      -1,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    97,    98,    99,   100,   101,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,    -1,   122,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
      -1,    -1,   136,   137,   138,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,    -1,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,    -1,    -1,   167,   168,   169,   170,    -1,   172,    -1,
     174,   175,    -1,   177,   178,   179,   180,   181,   182,    -1,
     184,   185,    -1,   187,   188,   189,   190,    -1,   192,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
      -1,   205,   206,   207,   208,   209,   210,   211,    -1,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,    -1,
     224,    -1,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,    -1,    -1,   240,   241,   242,   243,
      -1,   245,    -1,    -1,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,    -1,   298,   299,    -1,    -1,   302,   303,
     304,    -1,    -1,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,    -1,    -1,    -1,    -1,   332,   333,
     334,   335,   336,   337,   338,    -1,   340,   341,   342,    -1,
     344,   345,   346,   347,   348,    -1,   350,    -1,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,    -1,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,    -1,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,    -1,    -1,   399,   400,   401,   402,   403,
     404,   405,   406,   407,    -1,   409,   410,   411,   412,   413,
      -1,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,    -1,    -1,   433,
     434,    -1,   436,   437,   438,    -1,   440,   441,   442,   443,
     444,    -1,   446,   447,   448,    -1,    -1,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,    -1,    -1,   467,   468,   469,   470,    -1,   472,   473,
     474,   475,    -1,   477,   478,   479,   480,   481,   482,   483,
     484,    -1,   486,   487,   488,   489,   490,   491,   492,   493,
     494,    -1,   496,   497,    -1,    -1,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   518,   519,   520,   521,    -1,    -1,
      -1,    -1,    -1,    -1,   528,   529,   530,    -1,    -1,    -1,
      -1,   535,    -1,   537,    -1,    -1,    -1,   541,    -1,   543,
     544,   545,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,
      41,    -1,    -1,    44,    45,    46,    -1,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    -1,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    75,    -1,    77,    78,    79,    80,
      81,    -1,    83,    -1,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    -1,    96,    97,    98,    99,   100,
     101,    -1,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
      -1,   122,   123,   124,   125,   126,   127,    -1,    -1,   130,
     131,   132,   133,    -1,    -1,   136,   137,   138,   139,   140,
     141,    -1,   143,   144,   145,    -1,   147,   148,   149,    -1,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,   164,    -1,    -1,   167,   168,   169,   170,
      -1,   172,    -1,   174,   175,    -1,   177,   178,   179,   180,
     181,   182,    -1,   184,   185,    -1,   187,   188,   189,   190,
      -1,   192,   193,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,    -1,   205,   206,   207,   208,   209,   210,
     211,    -1,   213,   214,   215,   216,   217,   218,   219,   220,
     221,   222,    -1,   224,    -1,   226,   227,   228,   229,   230,
     231,   232,   233,   234,   235,   236,   237,    -1,    -1,   240,
     241,   242,   243,    -1,   245,    -1,    -1,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,    -1,   298,   299,    -1,
      -1,   302,   303,   304,    -1,    -1,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,    -1,    -1,    -1,
      -1,   332,   333,   334,   335,   336,   337,   338,    -1,   340,
     341,   342,    -1,   344,   345,   346,   347,   348,    -1,   350,
      -1,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,    -1,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,    -1,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,    -1,    -1,   399,   400,
     401,   402,   403,   404,   405,   406,   407,    -1,   409,   410,
     411,   412,   413,    -1,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
      -1,    -1,   433,   434,    -1,   436,   437,   438,    -1,   440,
     441,   442,   443,   444,    -1,   446,   447,   448,    -1,    -1,
     451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
     461,   462,   463,   464,    -1,    -1,   467,   468,   469,   470,
      -1,   472,   473,   474,   475,    -1,   477,   478,   479,   480,
     481,   482,   483,   484,    -1,   486,   487,   488,   489,   490,
     491,   492,   493,   494,    -1,    -1,   497,    -1,    -1,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,   517,   518,   519,   520,
     521,    -1,    -1,    -1,    -1,    -1,    -1,   528,   529,   530,
      -1,    -1,    -1,    -1,   535,    -1,   537,    -1,    -1,    -1,
     541,    -1,   543,   544,   545,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    19,    -1,    -1,    -1,    23,    24,    25,    26,    27,
      28,    29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,
      -1,    -1,    -1,    41,    -1,    -1,    44,    45,    46,    -1,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    -1,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    -1,    77,
      78,    79,    80,    81,    -1,    83,    -1,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    97,
      98,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,    -1,   122,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,    -1,    -1,   136,   137,
     138,   139,   140,   141,    -1,   143,   144,   145,    -1,   147,
     148,   149,    -1,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,   164,    -1,    -1,   167,
     168,   169,   170,    -1,   172,    -1,   174,   175,    -1,   177,
     178,   179,   180,   181,   182,    -1,   184,   185,    -1,   187,
     188,   189,   190,    -1,   192,   193,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,    -1,   205,   206,   207,
     208,   209,   210,   211,    -1,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,    -1,   224,    -1,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
      -1,    -1,   240,   241,   242,   243,    -1,   245,    -1,    -1,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,    -1,
     298,   299,    -1,    -1,   302,   303,   304,    -1,    -1,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
      -1,    -1,    -1,    -1,   332,   333,   334,   335,   336,   337,
     338,    -1,   340,   341,   342,    -1,   344,   345,   346,   347,
     348,    -1,   350,    -1,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,    -1,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,    -1,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,    -1,
      -1,   399,   400,   401,   402,   403,   404,   405,   406,   407,
      -1,   409,   410,   411,   412,   413,    -1,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,    -1,    -1,   433,   434,    -1,   436,   437,
     438,    -1,   440,   441,   442,   443,   444,    -1,   446,   447,
     448,    -1,    -1,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   462,   463,   464,    -1,    -1,   467,
     468,   469,   470,    -1,   472,   473,   474,   475,    -1,   477,
     478,   479,   480,   481,   482,   483,   484,    -1,   486,   487,
     488,   489,   490,   491,   492,   493,   494,    -1,    -1,   497,
      -1,    -1,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,   519,   520,   521,    -1,    -1,    -1,    -1,    -1,    -1,
     528,   529,   530,    -1,    -1,    -1,    -1,   535,    -1,   537,
      -1,    -1,    -1,   541,    -1,   543,   544,   545,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    23,    24,
      25,    26,    27,    28,    29,    30,    -1,    32,    33,    34,
      -1,    -1,    -1,    -1,    -1,    -1,    41,    -1,    -1,    44,
      45,    46,    -1,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    -1,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    -1,    77,    78,    79,    80,    81,    -1,    83,    -1,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      -1,    96,    97,    98,    99,   100,   101,    -1,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,    -1,   122,   123,   124,
     125,   126,   127,    -1,    -1,   130,   131,   132,   133,    -1,
      -1,   136,   137,   138,   139,   140,   141,    -1,   143,   144,
     145,    -1,   147,   148,   149,    -1,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
      -1,    -1,   167,   168,   169,   170,    -1,   172,    -1,   174,
     175,    -1,   177,   178,   179,   180,   181,   182,    -1,   184,
     185,    -1,   187,   188,   189,   190,    -1,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,    -1,
     205,   206,   207,   208,   209,   210,   211,    -1,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,    -1,   224,
      -1,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,    -1,    -1,   240,   241,   242,   243,    -1,
     245,    -1,    -1,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,    -1,   298,   299,    -1,    -1,   302,   303,   304,
      -1,    -1,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,    -1,    -1,    -1,    -1,   332,   333,   334,
     335,   336,   337,   338,    -1,   340,   341,   342,    -1,   344,
     345,   346,   347,   348,    -1,   350,    -1,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,    -1,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,    -1,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,    -1,    -1,   399,   400,   401,   402,   403,   404,
     405,   406,   407,    -1,   409,   410,   411,   412,   413,    -1,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,    -1,    -1,   433,   434,
      -1,   436,   437,   438,    -1,   440,   441,   442,   443,   444,
      -1,   446,   447,   448,    -1,    -1,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
      -1,    -1,   467,   468,   469,   470,    -1,   472,   473,   474,
     475,    -1,   477,   478,   479,   480,   481,   482,   483,   484,
      -1,   486,   487,   488,   489,   490,   491,   492,   493,   494,
      -1,    -1,   497,    -1,    -1,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,    -1,    -1,    -1,
      -1,    -1,    -1,   528,   529,   530,    -1,    -1,    -1,    -1,
     535,    -1,   537,    -1,    -1,    -1,   541,    -1,   543,   544,
     545,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    41,
      -1,    -1,    44,    45,    46,    -1,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    -1,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    -1,    77,    78,    79,    80,    81,
      -1,    83,    -1,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    97,    98,    99,   100,   101,
      -1,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,    -1,
     122,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,    -1,    -1,   136,   137,   138,   139,   140,   141,
      -1,   143,   144,   145,    -1,   147,   148,   149,    -1,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,   164,    -1,    -1,   167,   168,   169,   170,    -1,
     172,    -1,   174,   175,    -1,   177,   178,   179,   180,   181,
     182,    -1,   184,   185,    -1,   187,   188,   189,   190,    -1,
     192,   193,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   203,    -1,   205,   206,   207,   208,   209,   210,   211,
      -1,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,    -1,   224,    -1,   226,   227,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,    -1,    -1,   240,   241,
     242,   243,    -1,   245,    -1,    -1,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,    -1,   298,   299,    -1,    -1,
     302,   303,   304,    -1,    -1,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,    -1,    -1,    -1,    -1,
     332,   333,   334,   335,   336,   337,   338,    -1,   340,   341,
     342,    -1,   344,   345,   346,   347,   348,    -1,   350,    -1,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
      -1,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,    -1,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,    -1,    -1,   399,   400,   401,
     402,   403,   404,   405,   406,   407,    -1,   409,   410,   411,
     412,   413,    -1,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,    -1,
      -1,   433,   434,    -1,   436,   437,   438,    -1,   440,   441,
     442,   443,   444,    -1,   446,   447,   448,    -1,    -1,   451,
     452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
     462,   463,   464,    -1,    -1,   467,   468,   469,   470,    -1,
     472,   473,   474,   475,    -1,   477,   478,   479,   480,   481,
     482,   483,   484,    -1,   486,   487,   488,   489,   490,   491,
     492,   493,   494,    -1,    -1,   497,    -1,    -1,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520,   521,
      -1,    -1,    -1,    -1,    -1,    -1,   528,   529,   530,    -1,
      -1,    -1,    -1,   535,    -1,   537,    -1,    -1,    -1,   541,
      -1,   543,   544,   545,     3,     4,     5,     6,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    23,    24,    25,    26,    27,    28,
      29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,
      -1,    -1,    41,    -1,    -1,    44,    45,    46,    -1,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    -1,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    75,    -1,    77,    78,
      79,    80,    81,    -1,    83,    -1,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    -1,    96,    97,    98,
      99,   100,   101,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,    -1,   122,   123,   124,   125,   126,   127,    -1,
      -1,   130,   131,   132,   133,    -1,    -1,   136,   137,   138,
     139,   140,   141,    -1,   143,   144,   145,    -1,   147,   148,
     149,    -1,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,   164,    -1,    -1,   167,   168,
     169,   170,    -1,   172,    -1,   174,   175,    -1,   177,   178,
     179,   180,   181,   182,    -1,   184,   185,    -1,   187,   188,
     189,   190,    -1,   192,   193,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,    -1,   213,   214,   215,   216,   217,   218,
     219,   220,   221,   222,    -1,   224,    -1,   226,   227,   228,
     229,   230,   231,   232,   233,   234,   235,   236,   237,    -1,
      -1,   240,   241,   242,   243,    -1,   245,    -1,    -1,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,    -1,   298,
     299,    -1,    -1,   302,   303,   304,    -1,    -1,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,    -1,
      -1,    -1,    -1,   332,   333,   334,   335,   336,   337,   338,
      -1,   340,   341,   342,    -1,   344,   345,   346,   347,   348,
      -1,   350,    -1,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,    -1,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,    -1,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,    -1,    -1,
     399,   400,   401,   402,   403,   404,   405,   406,   407,    -1,
     409,   410,   411,   412,   413,    -1,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,    -1,    -1,   433,   434,    -1,   436,   437,   438,
      -1,   440,   441,   442,   443,   444,    -1,   446,   447,   448,
      -1,    -1,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   463,   464,    -1,    -1,   467,   468,
     469,   470,    -1,   472,   473,   474,   475,    -1,   477,   478,
     479,   480,   481,   482,   483,   484,    -1,   486,   487,   488,
     489,   490,   491,   492,   493,   494,    -1,    -1,   497,    -1,
      -1,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,   518,
     519,   520,   521,    -1,    -1,    -1,    -1,    -1,    -1,   528,
     529,   530,    -1,    -1,    -1,    -1,   535,    -1,   537,    -1,
      -1,    -1,   541,    -1,   543,   544,   545,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    23,    24,    25,
      26,    27,    28,    29,    30,    -1,    32,    33,    34,    -1,
      -1,    -1,    -1,    -1,    -1,    41,    -1,    -1,    44,    45,
      46,    -1,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    -1,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      -1,    77,    78,    79,    80,    81,    -1,    83,    -1,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    97,    98,    99,   100,   101,    -1,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,    -1,   122,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,    -1,    -1,
     136,   137,   138,   139,   140,   141,    -1,   143,   144,   145,
      -1,   147,   148,   149,    -1,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,   164,    -1,
      -1,   167,   168,   169,   170,    -1,   172,    -1,   174,   175,
      -1,   177,   178,   179,   180,   181,   182,    -1,   184,   185,
      -1,   187,   188,   189,   190,    -1,   192,   193,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,    -1,   205,
     206,   207,   208,   209,   210,   211,    -1,   213,   214,   215,
     216,   217,   218,   219,   220,   221,   222,    -1,   224,    -1,
     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
     236,   237,    -1,    -1,   240,   241,   242,   243,    -1,   245,
      -1,    -1,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,    -1,   298,   299,    -1,    -1,   302,   303,   304,    -1,
      -1,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,    -1,    -1,    -1,    -1,   332,   333,   334,   335,
     336,   337,   338,    -1,   340,   341,   342,    -1,   344,   345,
     346,   347,   348,    -1,   350,    -1,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,    -1,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
      -1,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,    -1,    -1,   399,   400,   401,   402,   403,   404,   405,
     406,   407,    -1,   409,   410,   411,   412,   413,    -1,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,    -1,    -1,   433,   434,    -1,
     436,   437,   438,    -1,   440,   441,   442,   443,   444,    -1,
     446,   447,   448,    -1,    -1,   451,   452,   453,   454,   455,
     456,   457,   458,   459,   460,   461,   462,   463,   464,    -1,
      -1,   467,   468,   469,   470,    -1,   472,   473,   474,   475,
      -1,   477,   478,   479,   480,   481,   482,   483,   484,    -1,
     486,   487,   488,   489,   490,   491,   492,   493,   494,    -1,
      -1,   497,    -1,    -1,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   518,   519,   520,   521,    -1,    -1,    -1,    -1,
      -1,    -1,   528,   529,   530,    -1,    -1,    -1,    -1,   535,
      -1,   537,    -1,    -1,    -1,   541,    -1,   543,   544,   545,
       3,     4,     5,     6,     7,     8,     9,    10,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      23,    24,    25,    26,    27,    28,    29,    30,    -1,    32,
      33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    41,    -1,
      -1,    44,    45,    46,    -1,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    -1,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    -1,    77,    78,    79,    80,    81,    -1,
      83,    -1,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    -1,    96,    97,    98,    99,   100,   101,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,    -1,   122,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,    -1,    -1,   136,   137,   138,   139,   140,   141,    -1,
     143,   144,   145,    -1,   147,   148,   149,    -1,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,   164,    -1,    -1,   167,   168,   169,   170,    -1,   172,
      -1,   174,   175,    -1,   177,   178,   179,   180,   181,   182,
      -1,   184,   185,    -1,   187,   188,   189,   190,    -1,   192,
     193,   194,   195,   196,   197,   198,   199,   200,   201,   202,
     203,    -1,   205,   206,   207,   208,   209,   210,   211,    -1,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
      -1,   224,    -1,   226,   227,   228,   229,   230,   231,   232,
     233,   234,   235,   236,   237,    -1,    -1,   240,   241,   242,
     243,    -1,   245,    -1,    -1,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,    -1,   298,   299,    -1,    -1,   302,
     303,   304,    -1,    -1,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,    -1,    -1,    -1,    -1,   332,
     333,   334,   335,   336,   337,   338,    -1,   340,   341,   342,
      -1,   344,   345,   346,   347,   348,    -1,   350,    -1,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,    -1,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,    -1,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,    -1,    -1,   399,   400,   401,   402,
     403,   404,   405,   406,   407,    -1,   409,   410,   411,   412,
     413,    -1,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,    -1,    -1,
     433,   434,    -1,   436,   437,   438,    -1,   440,   441,   442,
     443,   444,    -1,   446,   447,   448,    -1,    -1,   451,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
     463,   464,    -1,    -1,   467,   468,   469,   470,    -1,   472,
     473,   474,   475,    -1,   477,   478,   479,   480,   481,   482,
     483,   484,    -1,   486,   487,   488,   489,   490,   491,   492,
     493,   494,    -1,    -1,   497,    -1,    -1,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,   518,   519,   520,   521,    -1,
      -1,    -1,    -1,    -1,    -1,   528,   529,   530,    -1,    -1,
      -1,    -1,   535,    -1,   537,    -1,    -1,    -1,   541,    -1,
     543,   544,   545,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    23,    24,    25,    26,    27,    28,    29,
      30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
      -1,    41,    -1,    -1,    44,    45,    46,    -1,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      -1,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    -1,    77,    78,    79,
      80,    81,    -1,    83,    -1,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,    97,    98,    99,
     100,   101,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,    -1,   122,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,    -1,    -1,   136,   137,   138,   139,
     140,   141,    -1,   143,   144,   145,    -1,   147,   148,   149,
      -1,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,   164,    -1,    -1,   167,   168,   169,
     170,    -1,   172,    -1,   174,   175,    -1,   177,   178,   179,
     180,   181,   182,    -1,   184,   185,    -1,   187,   188,   189,
     190,    -1,   192,   193,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,    -1,   205,   206,   207,   208,   209,
     210,   211,    -1,   213,   214,   215,   216,   217,   218,   219,
     220,   221,   222,    -1,   224,    -1,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,    -1,    -1,
     240,   241,   242,   243,    -1,   245,    -1,    -1,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,    -1,   298,   299,
      -1,    -1,   302,   303,   304,    -1,    -1,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,    -1,    -1,
      -1,    -1,   332,   333,   334,   335,   336,   337,   338,    -1,
     340,   341,   342,    -1,   344,   345,   346,   347,   348,    -1,
     350,    -1,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,    -1,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,    -1,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,    -1,    -1,   399,
     400,   401,   402,   403,   404,   405,   406,   407,    -1,   409,
     410,   411,   412,   413,    -1,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,    -1,    -1,   433,   434,    -1,   436,   437,   438,    -1,
     440,   441,   442,   443,   444,    -1,   446,   447,   448,    -1,
      -1,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   461,   462,   463,   464,    -1,    -1,   467,   468,   469,
     470,    -1,   472,   473,   474,   475,    -1,   477,   478,   479,
     480,   481,   482,   483,   484,    -1,   486,   487,   488,   489,
     490,   491,   492,   493,   494,    -1,    -1,   497,    -1,    -1,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   518,   519,
     520,   521,    -1,    -1,    -1,    -1,    -1,    -1,   528,   529,
     530,    -1,    -1,    -1,    -1,   535,    -1,   537,    -1,    -1,
      -1,   541,    -1,   543,   544,   545,     3,     4,     5,     6,
       7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    23,    24,    25,    26,
      27,    28,    29,    30,    -1,    32,    33,    34,    -1,    -1,
      -1,    -1,    -1,    -1,    41,    -1,    -1,    44,    45,    46,
      -1,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    -1,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    -1,
      77,    78,    79,    80,    81,    -1,    83,    -1,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    -1,    96,
      97,    98,    99,   100,   101,    -1,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,    -1,   122,   123,   124,   125,   126,
     127,    -1,    -1,   130,   131,   132,   133,    -1,    -1,   136,
     137,   138,   139,   140,   141,    -1,   143,   144,   145,    -1,
     147,   148,   149,    -1,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,   164,    -1,    -1,
     167,   168,   169,   170,    -1,   172,    -1,   174,   175,    -1,
     177,   178,   179,   180,   181,   182,    -1,   184,   185,    -1,
     187,   188,   189,   190,    -1,   192,   193,   194,   195,   196,
     197,   198,   199,   200,   201,   202,   203,    -1,   205,   206,
     207,   208,   209,   210,   211,    -1,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,    -1,   224,    -1,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,   236,
     237,    -1,    -1,   240,   241,   242,   243,    -1,   245,    -1,
      -1,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
      -1,   298,   299,    -1,    -1,   302,   303,   304,    -1,    -1,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,    -1,    -1,    -1,    -1,   332,   333,   334,   335,   336,
     337,   338,    -1,   340,   341,   342,    -1,   344,   345,   346,
     347,   348,    -1,   350,    -1,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,    -1,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,    -1,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
      -1,    -1,   399,   400,   401,   402,   403,   404,   405,   406,
     407,    -1,   409,   410,   411,   412,   413,    -1,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,    -1,    -1,   433,   434,    -1,   436,
     437,   438,    -1,   440,   441,   442,   443,   444,    -1,   446,
     447,   448,    -1,    -1,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,    -1,    -1,
     467,   468,   469,   470,    -1,   472,   473,   474,   475,    -1,
     477,   478,   479,   480,   481,   482,   483,   484,    -1,   486,
     487,   488,   489,   490,   491,   492,   493,   494,    -1,    -1,
     497,    -1,    -1,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   518,   519,   520,   521,    -1,    -1,    -1,    -1,    -1,
      -1,   528,   529,   530,    -1,    -1,    -1,    -1,   535,    -1,
     537,    -1,    -1,    -1,   541,    -1,   543,   544,   545,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    33,
      34,    -1,    -1,    -1,    -1,    -1,    -1,    41,    -1,    -1,
      44,    45,    46,    -1,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    -1,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    -1,    77,    78,    79,    80,    81,    -1,    83,
      -1,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    97,    98,    99,   100,   101,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,    -1,   122,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
      -1,    -1,   136,   137,   138,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,    -1,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,    -1,    -1,   167,   168,   169,   170,    -1,   172,    -1,
     174,   175,    -1,   177,   178,   179,   180,   181,   182,    -1,
     184,   185,    -1,   187,   188,   189,   190,    -1,   192,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
      -1,   205,   206,   207,   208,   209,   210,   211,    -1,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,    -1,
     224,    -1,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,    -1,    -1,   240,   241,   242,   243,
      -1,   245,    -1,    -1,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,    -1,   298,   299,    -1,    -1,   302,   303,
     304,    -1,    -1,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,    -1,    -1,    -1,    -1,   332,   333,
     334,   335,   336,   337,   338,    -1,   340,   341,   342,    -1,
     344,   345,   346,   347,   348,    -1,   350,    -1,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,    -1,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,    -1,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,    -1,    -1,   399,   400,   401,   402,   403,
     404,   405,   406,   407,    -1,   409,   410,   411,   412,   413,
      -1,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,    -1,    -1,   433,
     434,    -1,   436,   437,   438,    -1,   440,   441,   442,   443,
     444,    -1,   446,   447,   448,    -1,    -1,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,    -1,    -1,   467,   468,   469,   470,    -1,   472,   473,
     474,   475,    -1,   477,   478,   479,   480,   481,   482,   483,
     484,    -1,   486,   487,   488,   489,   490,   491,   492,   493,
     494,    -1,    -1,   497,    -1,    -1,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   518,   519,   520,   521,    -1,    -1,
      -1,    -1,    -1,    -1,   528,   529,   530,    -1,    -1,    -1,
      -1,   535,    -1,   537,    -1,    -1,    -1,   541,    -1,   543,
     544,   545,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    23,    24,    25,    26,    27,    28,    29,    30,
      -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,
      41,    -1,    -1,    44,    45,    46,    -1,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    -1,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    75,    -1,    77,    78,    79,    80,
      81,    -1,    83,    -1,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    -1,    96,    97,    98,    99,   100,
     101,    -1,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
      -1,   122,   123,   124,   125,   126,   127,    -1,    -1,   130,
     131,   132,   133,    -1,    -1,   136,   137,   138,   139,   140,
     141,    -1,   143,   144,   145,    -1,   147,   148,   149,    -1,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,   164,    -1,    -1,   167,   168,   169,   170,
      -1,   172,    -1,   174,   175,    -1,   177,   178,   179,   180,
     181,   182,    -1,   184,   185,    -1,   187,   188,   189,   190,
      -1,   192,   193,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,    -1,   205,   206,   207,   208,   209,   210,
     211,    -1,   213,   214,   215,   216,   217,   218,   219,   220,
     221,   222,    -1,   224,    -1,   226,   227,   228,   229,   230,
     231,   232,   233,   234,   235,   236,   237,    -1,    -1,   240,
     241,   242,   243,    -1,   245,    -1,    -1,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,    -1,   298,   299,    -1,
      -1,   302,   303,   304,    -1,    -1,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,    -1,    -1,    -1,
      -1,   332,   333,   334,   335,   336,   337,   338,    -1,   340,
     341,   342,    -1,   344,   345,   346,   347,   348,    -1,   350,
      -1,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,    -1,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,    -1,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,    -1,    -1,   399,   400,
     401,   402,   403,   404,   405,   406,   407,    -1,   409,   410,
     411,   412,   413,    -1,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
      -1,    -1,   433,   434,    -1,   436,   437,   438,    -1,   440,
     441,   442,   443,   444,    -1,   446,   447,   448,    -1,    -1,
     451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
     461,   462,   463,   464,    -1,    -1,   467,   468,   469,   470,
      -1,   472,   473,   474,   475,    -1,   477,   478,   479,   480,
     481,   482,   483,   484,    -1,   486,   487,   488,   489,   490,
     491,   492,   493,   494,    -1,    -1,   497,    -1,    -1,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,   517,   518,   519,   520,
     521,    -1,    -1,    -1,    -1,    -1,    -1,   528,   529,   530,
      -1,    -1,    -1,    -1,   535,    -1,   537,    -1,    -1,    -1,
     541,    -1,   543,   544,   545,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    23,    24,    25,    26,    27,
      28,    29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,
      -1,    -1,    -1,    41,    -1,    -1,    44,    45,    46,    -1,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    -1,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    -1,    77,
      78,    79,    80,    81,    -1,    83,    -1,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    97,
      98,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,    -1,   122,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,    -1,    -1,   136,   137,
     138,   139,   140,   141,    -1,   143,   144,   145,    -1,   147,
     148,   149,    -1,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,   164,    -1,    -1,   167,
     168,   169,   170,    -1,   172,    -1,   174,   175,    -1,   177,
     178,   179,   180,   181,   182,    -1,   184,   185,    -1,   187,
     188,   189,   190,    -1,   192,   193,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,    -1,   205,   206,   207,
     208,   209,   210,   211,    -1,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,    -1,   224,    -1,   226,    -1,
      -1,   229,   230,   231,   232,   233,   234,   235,   236,   237,
      -1,    -1,   240,   241,   242,   243,    -1,   245,    -1,    -1,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,    -1,   286,   287,
      -1,   289,   290,   291,   292,   293,   294,   295,   296,    -1,
     298,   299,    -1,    -1,   302,   303,   304,    -1,    -1,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
      -1,    -1,    -1,    -1,   332,   333,   334,   335,   336,   337,
     338,    -1,   340,   341,   342,    -1,   344,   345,   346,   347,
     348,    -1,   350,    -1,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,    -1,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,    -1,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,    -1,
      -1,   399,   400,   401,   402,   403,   404,   405,   406,   407,
      -1,   409,   410,   411,   412,   413,    -1,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,    -1,    -1,   433,   434,    -1,   436,   437,
     438,    -1,   440,   441,   442,   443,   444,    -1,   446,   447,
     448,    -1,    -1,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   462,   463,   464,    -1,    -1,   467,
     468,   469,   470,    -1,   472,   473,   474,   475,    -1,   477,
     478,   479,   480,   481,   482,   483,   484,    -1,   486,   487,
     488,   489,   490,   491,   492,   493,   494,    -1,    -1,   497,
      -1,    -1,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,   519,   520,   521,    -1,    -1,    -1,    -1,    -1,    -1,
     528,   529,   530,    -1,    -1,    -1,    -1,   535,    -1,   537,
      -1,    -1,    -1,   541,    -1,   543,   544,   545,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    23,    24,
      25,    26,    27,    28,    29,    30,    -1,    32,    33,    34,
      -1,    -1,    -1,    -1,    -1,    -1,    41,    -1,    -1,    44,
      45,    46,    -1,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    -1,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    -1,    77,    78,    79,    80,    81,    -1,    83,    -1,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      -1,    96,    97,    98,    99,   100,   101,    -1,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,   120,    -1,   122,   123,   124,
     125,   126,   127,    -1,    -1,   130,   131,   132,   133,    -1,
      -1,   136,   137,   138,   139,   140,   141,    -1,   143,   144,
     145,    -1,   147,   148,   149,    -1,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
      -1,    -1,   167,   168,   169,   170,    -1,   172,    -1,   174,
     175,    -1,   177,   178,   179,   180,   181,   182,    -1,   184,
     185,    -1,   187,   188,   189,   190,    -1,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,    -1,
     205,   206,   207,   208,   209,   210,   211,    -1,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,    -1,   224,
      -1,   226,   227,   228,   229,   230,   231,   232,   233,    -1,
     235,   236,   237,    -1,    -1,   240,   241,   242,   243,    -1,
     245,    -1,    -1,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
      -1,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,    -1,   298,   299,    -1,    -1,   302,   303,   304,
      -1,    -1,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,    -1,    -1,    -1,    -1,   332,   333,   334,
     335,   336,   337,   338,    -1,   340,   341,   342,    -1,   344,
     345,   346,   347,   348,    -1,   350,    -1,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,    -1,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,    -1,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,    -1,    -1,   399,   400,   401,   402,   403,   404,
     405,   406,   407,    -1,   409,   410,   411,   412,   413,    -1,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,    -1,    -1,   433,   434,
      -1,   436,   437,   438,    -1,   440,   441,   442,   443,   444,
      -1,   446,   447,   448,    -1,    -1,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
      -1,    -1,   467,   468,   469,    -1,    -1,   472,   473,   474,
     475,    -1,   477,   478,   479,   480,   481,   482,   483,   484,
      -1,   486,   487,   488,   489,   490,   491,   492,   493,   494,
      -1,    -1,   497,    -1,    -1,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   528,   529,    -1,    -1,    -1,    -1,    -1,
     535,    -1,   537,    -1,    -1,    -1,   541,    -1,   543,   544,
     545,     3,     4,     5,     6,     7,    -1,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    41,
      -1,    -1,    44,    45,    46,    -1,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    -1,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    -1,    77,    78,    79,    80,    81,
      -1,    83,    -1,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    97,    98,    99,   100,   101,
      -1,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,   120,    -1,
     122,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,    -1,    -1,   136,   137,   138,   139,   140,   141,
      -1,   143,   144,   145,    -1,   147,   148,   149,    -1,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,   164,    -1,    -1,   167,   168,   169,   170,    -1,
     172,    -1,   174,   175,    -1,   177,   178,   179,   180,   181,
     182,    -1,   184,   185,    -1,   187,   188,   189,   190,    -1,
     192,   193,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   203,    -1,   205,   206,   207,   208,   209,   210,   211,
      -1,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,    -1,   224,    -1,   226,   227,   228,   229,   230,   231,
     232,   233,    -1,   235,   236,   237,    -1,    -1,   240,   241,
     242,   243,    -1,   245,    -1,    -1,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,    -1,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,    -1,   298,   299,    -1,    -1,
     302,   303,   304,    -1,    -1,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,    -1,    -1,    -1,    -1,
     332,   333,   334,   335,   336,   337,   338,    -1,   340,   341,
     342,    -1,   344,   345,   346,   347,   348,    -1,   350,    -1,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
      -1,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,    -1,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,    -1,    -1,   399,   400,   401,
     402,   403,   404,   405,   406,   407,    -1,   409,   410,   411,
     412,   413,    -1,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,    -1,
      -1,   433,   434,    -1,   436,   437,   438,    -1,   440,   441,
     442,   443,   444,    -1,   446,   447,   448,    -1,    -1,   451,
     452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
     462,   463,   464,    -1,    -1,   467,   468,   469,    -1,    -1,
     472,   473,   474,   475,    -1,   477,   478,   479,   480,   481,
     482,   483,   484,    -1,   486,   487,   488,   489,   490,   491,
     492,   493,   494,    -1,    -1,   497,    -1,    -1,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   528,   529,    -1,    -1,
      -1,    -1,    -1,   535,    -1,   537,    -1,    -1,    -1,   541,
      -1,   543,   544,   545,     3,     4,     5,     6,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    23,    24,    25,    26,    27,    28,
      29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,
      -1,    -1,    41,    -1,    -1,    44,    45,    46,    -1,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    -1,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    75,    -1,    77,    78,
      79,    80,    81,    -1,    83,    -1,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    -1,    96,    97,    98,
      99,   100,   101,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
      -1,   120,    -1,   122,   123,   124,   125,   126,   127,    -1,
      -1,   130,   131,   132,   133,    -1,    -1,   136,   137,   138,
     139,   140,   141,    -1,   143,   144,   145,    -1,   147,   148,
     149,    -1,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,   164,    -1,    -1,   167,   168,
     169,   170,    -1,   172,    -1,   174,   175,    -1,   177,   178,
     179,   180,   181,   182,    -1,   184,   185,    -1,   187,   188,
     189,   190,    -1,   192,   193,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,    -1,   213,   214,   215,   216,   217,   218,
     219,   220,   221,   222,    -1,   224,    -1,   226,    -1,   228,
     229,   230,   231,   232,   233,    -1,   235,   236,   237,    -1,
      -1,   240,   241,   242,   243,    -1,   245,    -1,    -1,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,    -1,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,    -1,   298,
     299,    -1,    -1,   302,   303,   304,    -1,    -1,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,    -1,
      -1,    -1,    -1,   332,   333,   334,   335,   336,   337,   338,
      -1,   340,   341,   342,    -1,   344,   345,   346,   347,   348,
      -1,   350,    -1,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,    -1,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,    -1,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,    -1,    -1,
     399,   400,   401,   402,   403,   404,   405,   406,   407,    -1,
     409,   410,   411,   412,   413,    -1,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,    -1,    -1,   433,   434,    -1,   436,   437,   438,
      -1,   440,   441,   442,   443,   444,    -1,   446,   447,   448,
      -1,    -1,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   463,   464,    -1,    -1,   467,   468,
     469,    -1,    -1,   472,   473,   474,   475,    -1,   477,   478,
     479,   480,   481,   482,   483,   484,    -1,   486,   487,   488,
     489,   490,   491,   492,   493,   494,    -1,    -1,   497,    -1,
      -1,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,   518,
     519,   520,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   528,
     529,    -1,    -1,    -1,    -1,    -1,   535,    -1,   537,    -1,
      -1,    -1,   541,    -1,   543,   544,   545,     3,     4,     5,
       6,     7,    -1,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    23,    24,    25,
      26,    27,    28,    29,    30,    -1,    32,    33,    34,    -1,
      -1,    -1,    -1,    -1,    -1,    41,    -1,    -1,    44,    45,
      46,    -1,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    -1,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      -1,    77,    78,    79,    80,    81,    -1,    83,    -1,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    97,    98,    99,   100,   101,    -1,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,   120,    -1,   122,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,    -1,    -1,
     136,   137,   138,   139,   140,   141,    -1,   143,   144,   145,
      -1,   147,   148,   149,    -1,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,   164,    -1,
      -1,   167,   168,   169,   170,    -1,   172,    -1,   174,   175,
      -1,   177,   178,   179,   180,   181,   182,    -1,   184,   185,
     186,   187,   188,   189,   190,    -1,   192,   193,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,    -1,   205,
     206,   207,   208,   209,   210,   211,    -1,   213,   214,   215,
     216,   217,   218,   219,   220,   221,   222,    -1,   224,    -1,
     226,   227,   228,   229,   230,   231,   232,   233,    -1,   235,
     236,   237,    -1,    -1,   240,   241,   242,   243,    -1,   245,
      -1,    -1,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,    -1,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,    -1,   298,   299,    -1,    -1,   302,   303,   304,    -1,
      -1,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,    -1,    -1,    -1,    -1,   332,   333,   334,   335,
     336,   337,   338,    -1,   340,   341,   342,    -1,   344,   345,
     346,   347,   348,    -1,   350,    -1,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,    -1,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
      -1,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,    -1,    -1,   399,   400,   401,   402,   403,   404,   405,
     406,   407,    -1,   409,   410,   411,   412,   413,    -1,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,    -1,    -1,   433,   434,    -1,
     436,   437,   438,    -1,   440,   441,   442,   443,   444,    -1,
     446,   447,   448,    -1,    -1,   451,   452,   453,   454,   455,
     456,   457,   458,   459,   460,   461,   462,   463,   464,    -1,
      -1,   467,   468,   469,    -1,    -1,   472,   473,   474,   475,
      -1,   477,   478,   479,   480,   481,   482,   483,   484,    -1,
     486,   487,   488,   489,   490,   491,   492,   493,   494,    -1,
      -1,   497,    -1,    -1,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   518,   519,   520,    -1,    -1,    -1,    -1,    -1,
       3,     4,     5,     6,     7,    -1,     9,    10,    -1,   535,
      -1,   537,    -1,    -1,    -1,   541,    -1,   543,   544,   545,
      23,    24,    25,    26,    27,    28,    29,    30,    -1,    32,
      33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    41,    -1,
      -1,    44,    45,    46,    -1,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    -1,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    -1,    77,    78,    79,    80,    81,    -1,
      83,    -1,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    -1,    96,    97,    98,    99,   100,   101,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,   120,    -1,   122,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,    -1,    -1,   136,   137,   138,   139,   140,   141,    -1,
     143,   144,   145,    -1,   147,   148,   149,    -1,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,   164,    -1,    -1,   167,   168,   169,   170,    -1,   172,
      -1,   174,   175,    -1,   177,   178,   179,   180,   181,   182,
      -1,   184,   185,    -1,   187,   188,   189,   190,    -1,   192,
     193,   194,   195,   196,   197,   198,   199,   200,   201,   202,
     203,    -1,   205,   206,   207,   208,   209,   210,   211,    -1,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
      -1,   224,    -1,   226,   227,   228,   229,   230,   231,   232,
     233,    -1,   235,   236,   237,    -1,    -1,   240,   241,   242,
     243,    -1,   245,    -1,    -1,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,    -1,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,    -1,   298,   299,    -1,    -1,   302,
     303,   304,    -1,    -1,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,    -1,    -1,    -1,    -1,   332,
     333,   334,   335,   336,   337,   338,    -1,   340,   341,   342,
      -1,   344,   345,   346,   347,   348,    -1,   350,    -1,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,    -1,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,    -1,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,    -1,    -1,   399,   400,   401,   402,
     403,   404,   405,   406,   407,    -1,   409,   410,   411,   412,
     413,    -1,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,    -1,    -1,
     433,   434,    -1,   436,   437,   438,    -1,   440,   441,   442,
     443,   444,    -1,   446,   447,   448,    -1,    -1,   451,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
     463,   464,    -1,    -1,   467,   468,   469,    -1,    -1,   472,
     473,   474,   475,    -1,   477,   478,   479,   480,   481,   482,
     483,   484,    -1,   486,   487,   488,   489,   490,   491,   492,
     493,   494,    -1,    -1,   497,    -1,    -1,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,   518,   519,   520,    -1,    -1,
      -1,    -1,    -1,     3,     4,     5,     6,     7,    -1,     9,
      10,    -1,   535,    -1,   537,    -1,    -1,    -1,   541,    -1,
     543,   544,   545,    23,    24,    25,    26,    27,    28,    29,
      30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
      -1,    41,    -1,    -1,    44,    45,    46,    -1,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      -1,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    -1,    77,    78,    79,
      80,    81,    -1,    83,    -1,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,    97,    98,    99,
     100,   101,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
     120,    -1,   122,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,    -1,    -1,   136,   137,   138,   139,
     140,   141,    -1,   143,   144,   145,    -1,   147,   148,   149,
      -1,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,   164,    -1,    -1,   167,   168,   169,
     170,    -1,   172,    -1,   174,   175,    -1,   177,   178,   179,
     180,   181,   182,    -1,   184,   185,    -1,   187,   188,   189,
     190,    -1,   192,   193,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,    -1,   205,   206,   207,   208,   209,
     210,   211,    -1,   213,   214,   215,   216,   217,   218,   219,
     220,   221,   222,    -1,   224,    -1,   226,   227,   228,   229,
     230,   231,   232,   233,    -1,   235,   236,   237,    -1,    -1,
     240,   241,   242,   243,    -1,   245,    -1,    -1,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,    -1,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,    -1,   298,   299,
      -1,    -1,   302,   303,   304,    -1,    -1,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,    -1,    -1,
      -1,    -1,   332,   333,   334,   335,   336,   337,   338,    -1,
     340,   341,   342,    -1,   344,   345,   346,   347,   348,    -1,
     350,    -1,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,    -1,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,    -1,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,    -1,    -1,   399,
     400,   401,   402,   403,   404,   405,   406,   407,    -1,   409,
     410,   411,   412,   413,    -1,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,    -1,    -1,   433,   434,    -1,   436,   437,   438,    -1,
     440,   441,   442,   443,   444,    -1,   446,   447,   448,    -1,
      -1,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   461,   462,   463,   464,    -1,    -1,   467,   468,   469,
      -1,    -1,   472,   473,   474,   475,    -1,   477,   478,   479,
     480,   481,   482,   483,   484,    -1,   486,   487,   488,   489,
     490,   491,   492,   493,   494,    -1,    -1,   497,    -1,    -1,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   518,   519,
     520,    -1,    -1,    -1,    -1,    -1,     3,     4,     5,     6,
       7,     8,     9,    10,    -1,   535,    -1,   537,    -1,    -1,
      -1,   541,    -1,   543,   544,   545,    23,    24,    25,    26,
      27,    28,    29,    30,    -1,    32,    33,    34,    -1,    -1,
      -1,    -1,    -1,    -1,    41,    -1,    -1,    44,    45,    46,
      -1,    48,    49,    50,    51,    52,    53,    54,    -1,    56,
      57,    58,    59,    -1,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    -1,
      77,    78,    79,    80,    81,    -1,    83,    -1,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    -1,    96,
      97,    98,    99,   100,   101,    -1,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,    -1,   122,   123,   124,   125,   126,
     127,    -1,    -1,   130,   131,   132,   133,    -1,    -1,   136,
     137,   138,   139,   140,   141,    -1,   143,   144,   145,    -1,
     147,    -1,   149,    -1,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,   164,    -1,    -1,
     167,   168,   169,   170,    -1,   172,    -1,   174,   175,    -1,
     177,   178,   179,   180,    -1,   182,    -1,   184,   185,    -1,
     187,   188,   189,   190,    -1,   192,   193,   194,   195,   196,
     197,   198,    -1,   200,   201,   202,   203,    -1,   205,   206,
     207,   208,   209,   210,   211,    -1,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,    -1,   224,    -1,   226,
      -1,    -1,   229,   230,   231,   232,   233,   234,   235,   236,
     237,    -1,    -1,   240,   241,   242,    -1,    -1,   245,    -1,
      -1,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,    -1,   286,
     287,    -1,   289,   290,   291,   292,   293,   294,   295,   296,
      -1,   298,   299,    -1,    -1,   302,   303,   304,    -1,    -1,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,    -1,    -1,    -1,    -1,   332,   333,   334,   335,   336,
     337,   338,    -1,   340,   341,   342,    -1,   344,   345,   346,
     347,   348,    -1,   350,    -1,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,    -1,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,    -1,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
      -1,    -1,   399,   400,   401,   402,   403,   404,   405,   406,
     407,    -1,    -1,   410,   411,   412,   413,    -1,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,    -1,    -1,   433,   434,    -1,   436,
     437,   438,    -1,   440,   441,   442,   443,   444,    -1,   446,
     447,   448,    -1,    -1,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,    -1,    -1,
     467,   468,   469,   470,    -1,   472,   473,   474,   475,    -1,
     477,   478,   479,   480,   481,   482,   483,   484,    -1,   486,
     487,   488,   489,   490,   491,   492,   493,   494,    -1,    -1,
     497,    -1,    -1,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   518,   519,   520,    -1,    -1,    -1,    -1,    -1,     3,
      -1,   528,   529,   530,    -1,    -1,    10,    -1,   535,    -1,
     537,    -1,    -1,    -1,   541,    -1,   543,   544,   545,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    33,
      34,    -1,    -1,    -1,    -1,    -1,    -1,    41,    -1,    -1,
      44,    45,    46,    -1,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    -1,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    -1,    77,    78,    79,    80,    81,    -1,    83,
      -1,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    97,    98,    99,   100,   101,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,   120,    -1,   122,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
      -1,    -1,   136,   137,   138,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,    -1,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,    -1,
     164,    -1,    -1,   167,   168,   169,   170,    -1,   172,    -1,
     174,   175,    -1,   177,   178,   179,   180,   181,   182,    -1,
     184,   185,    -1,   187,   188,   189,   190,    -1,   192,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
      -1,   205,   206,   207,   208,   209,   210,   211,    -1,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,    -1,
     224,    -1,   226,   227,   228,   229,   230,   231,   232,   233,
      -1,   235,   236,   237,    -1,    -1,   240,   241,   242,   243,
      -1,   245,    -1,    -1,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,    -1,   286,   287,   288,   289,    -1,   291,   292,   293,
     294,   295,   296,    -1,   298,   299,    -1,    -1,   302,   303,
     304,    -1,    -1,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,    -1,    -1,    -1,    -1,   332,   333,
     334,   335,   336,   337,   338,    -1,   340,   341,   342,    -1,
     344,   345,   346,   347,   348,    -1,   350,    -1,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,    -1,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,    -1,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,    -1,    -1,   399,   400,   401,   402,   403,
     404,   405,   406,   407,    -1,   409,   410,   411,   412,   413,
      -1,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,    -1,    -1,   433,
     434,    -1,   436,   437,   438,    -1,   440,   441,   442,   443,
     444,    -1,   446,   447,   448,    -1,    -1,   451,   452,   453,
     454,   455,    -1,   457,   458,   459,   460,   461,   462,   463,
     464,    -1,    -1,   467,   468,   469,    -1,    -1,   472,   473,
     474,   475,    -1,   477,   478,   479,   480,   481,   482,   483,
     484,    -1,   486,   487,   488,   489,   490,   491,   492,   493,
     494,    -1,    -1,   497,    -1,    -1,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   518,   519,   520,    -1,    -1,    -1,
      -1,    -1,     3,     4,    -1,    -1,    -1,    -1,     9,    10,
      -1,   535,    -1,   537,    -1,    -1,    -1,   541,    -1,   543,
     544,   545,    23,    24,    25,    26,    27,    28,    29,    30,
      -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    45,    46,    -1,    -1,    49,    50,
      -1,    52,    53,    54,    55,    56,    -1,    58,    59,    -1,
      61,    62,    63,    64,    65,    66,    -1,    -1,    69,    70,
      71,    72,    73,    74,    75,    -1,    77,    78,    79,    80,
      81,    -1,    -1,    -1,    85,    86,    87,    88,    89,    90,
      -1,    92,    93,    94,    -1,    96,    97,    98,    99,   100,
     101,    -1,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
      -1,   122,   123,   124,   125,   126,   127,    -1,    -1,   130,
     131,   132,   133,    -1,    -1,   136,   137,   138,   139,   140,
     141,    -1,   143,   144,   145,    -1,   147,   148,   149,    -1,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,    -1,   164,    -1,    -1,   167,   168,   169,   170,
      -1,   172,    -1,   174,    -1,    -1,    -1,   178,   179,   180,
      -1,   182,    -1,   184,   185,    -1,   187,   188,   189,   190,
      -1,   192,   193,   194,   195,   196,   197,   198,    -1,   200,
     201,   202,   203,    -1,   205,   206,   207,   208,   209,   210,
     211,    -1,   213,    -1,   215,   216,   217,   218,   219,   220,
     221,   222,    -1,   224,    -1,   226,    -1,    -1,   229,    -1,
     231,   232,   233,    -1,   235,   236,   237,    -1,    -1,   240,
      -1,   242,    -1,    -1,   245,    -1,    -1,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,    -1,   279,   280,
     281,   282,   283,   284,    -1,   286,   287,    -1,   289,    -1,
     291,   292,   293,   294,   295,   296,    -1,   298,   299,    -1,
      -1,   302,   303,   304,    -1,    -1,   307,   308,   309,    -1,
     311,   312,    -1,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,    -1,    -1,    -1,
      -1,   332,   333,   334,    -1,   336,   337,   338,    -1,   340,
     341,   342,    -1,   344,   345,   346,   347,   348,    -1,   350,
      -1,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,    -1,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,    -1,   377,   378,    -1,   380,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,    -1,    -1,   399,   400,
     401,   402,   403,   404,   405,   406,   407,    -1,    -1,   410,
     411,   412,   413,    -1,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
      -1,    -1,   433,   434,    -1,   436,    -1,   438,    -1,   440,
     441,   442,   443,   444,    -1,   446,   447,   448,    -1,    -1,
     451,   452,   453,   454,   455,    -1,   457,   458,   459,   460,
     461,   462,   463,   464,    -1,    -1,   467,   468,   469,    -1,
      -1,   472,   473,   474,   475,    -1,   477,   478,   479,   480,
     481,   482,   483,   484,    -1,   486,    -1,   488,   489,   490,
     491,   492,   493,   494,    -1,    -1,   497,    -1,    -1,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,   517,   518,   519,   520,
      -1,    -1,    -1,    -1,     3,     4,     5,    -1,    -1,    -1,
       9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   543,   544,    23,    24,    25,    26,    27,    28,
      29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,    38,
      -1,    -1,    -1,    -1,    -1,    44,    45,    46,    -1,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    -1,    61,    62,    63,    64,    65,    66,    -1,    -1,
      69,    70,    71,    72,    73,    74,    75,    -1,    77,    78,
      79,    80,    81,    -1,    83,    -1,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    -1,    96,    97,    98,
      99,   100,   101,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
      -1,   120,    -1,   122,   123,   124,   125,   126,   127,    -1,
      -1,   130,   131,   132,   133,    -1,    -1,   136,   137,   138,
     139,   140,   141,    -1,   143,   144,   145,    -1,   147,   148,
     149,    -1,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,   164,    -1,    -1,   167,   168,
     169,   170,    -1,   172,    -1,   174,   175,    -1,   177,   178,
     179,   180,   181,   182,    -1,   184,   185,    -1,   187,   188,
     189,   190,    -1,   192,   193,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,    -1,   213,   214,   215,   216,   217,   218,
     219,   220,   221,   222,    -1,   224,    -1,   226,   227,   228,
     229,   230,   231,   232,   233,    -1,   235,   236,   237,    -1,
      -1,   240,   241,   242,   243,    -1,   245,    -1,    -1,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,    -1,   286,   287,   288,
     289,    -1,   291,   292,   293,   294,   295,   296,    -1,   298,
     299,   300,    -1,   302,   303,   304,    -1,    -1,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,    -1,
      -1,    -1,    -1,   332,   333,   334,   335,   336,   337,   338,
      -1,   340,   341,   342,    -1,   344,   345,   346,   347,   348,
      -1,   350,    -1,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,    -1,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,    -1,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,    -1,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,    -1,
     409,   410,   411,   412,   413,    -1,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,    -1,    -1,   433,   434,    -1,   436,   437,   438,
      -1,   440,   441,   442,   443,   444,    -1,   446,   447,   448,
      -1,    -1,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   463,   464,    -1,    -1,   467,   468,
     469,   470,    -1,   472,   473,   474,   475,    -1,   477,   478,
     479,   480,   481,   482,   483,   484,    -1,   486,   487,   488,
     489,   490,   491,   492,   493,   494,    -1,    -1,   497,    -1,
      -1,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,   518,
     519,   520,    -1,     3,    -1,    -1,    -1,    -1,    -1,   528,
     529,   530,    -1,    -1,    -1,    -1,   535,    -1,   537,    -1,
      -1,    -1,   541,    23,    24,    25,    26,    27,    28,    29,
      30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    42,    -1,    -1,    45,    46,    -1,    -1,    49,
      50,    -1,    52,    53,    54,    55,    56,    -1,    58,    59,
      -1,    61,    62,    63,    64,    65,    66,    -1,    -1,    69,
      70,    71,    72,    73,    74,    75,    -1,    77,    78,    79,
      80,    81,    -1,    -1,    -1,    85,    86,    87,    88,    89,
      90,    -1,    92,    93,    94,    -1,    96,    97,    98,    99,
     100,   101,    -1,    -1,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
     120,    -1,   122,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,    -1,    -1,   136,   137,   138,   139,
     140,   141,    -1,   143,   144,   145,    -1,   147,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,    -1,   164,    -1,   166,   167,   168,   169,
     170,   171,   172,    -1,   174,    -1,    -1,    -1,   178,   179,
     180,    -1,   182,    -1,   184,   185,    -1,   187,   188,   189,
     190,    -1,   192,   193,   194,   195,   196,   197,   198,    -1,
     200,   201,   202,   203,    -1,   205,   206,   207,   208,   209,
     210,   211,    -1,   213,    -1,   215,   216,   217,   218,   219,
     220,   221,   222,   223,   224,    -1,   226,    -1,    -1,   229,
      -1,   231,   232,   233,    -1,   235,   236,   237,    -1,    -1,
     240,    -1,   242,    -1,   244,   245,    -1,    -1,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,    -1,   279,
     280,   281,   282,   283,   284,    -1,   286,   287,    -1,   289,
      -1,   291,   292,   293,   294,   295,   296,   297,   298,   299,
      -1,    -1,   302,   303,   304,    -1,   306,   307,   308,   309,
      -1,   311,   312,    -1,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,    -1,    -1,
      -1,    -1,   332,   333,   334,    -1,   336,   337,   338,    -1,
     340,   341,   342,    -1,   344,   345,   346,   347,   348,    -1,
     350,    -1,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,    -1,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,    -1,   377,   378,    -1,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,    -1,    -1,   399,
     400,   401,   402,   403,   404,   405,   406,   407,    -1,    -1,
     410,   411,   412,   413,    -1,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,    -1,    -1,   433,   434,    -1,   436,    -1,   438,    -1,
     440,   441,   442,   443,   444,    -1,   446,   447,   448,    -1,
      -1,   451,   452,   453,   454,   455,    -1,   457,   458,   459,
     460,   461,   462,   463,   464,   465,    -1,   467,   468,   469,
      -1,    -1,   472,   473,   474,   475,    -1,   477,   478,   479,
     480,   481,   482,   483,   484,    -1,   486,    -1,   488,   489,
     490,   491,   492,   493,   494,    -1,    -1,   497,    -1,    -1,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   518,   519,
     520,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   538,    -1,
      -1,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    45,    46,    -1,    -1,    49,    50,    -1,
      52,    53,    54,    55,    56,    -1,    58,    59,    -1,    61,
      62,    63,    64,    65,    66,    -1,    -1,    69,    70,    71,
      72,    73,    74,    75,    -1,    77,    78,    79,    80,    81,
      -1,    -1,    -1,    85,    86,    87,    88,    89,    90,    -1,
      92,    93,    94,    -1,    96,    97,    98,    99,   100,   101,
      -1,    -1,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,   120,    -1,
     122,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,    -1,    -1,   136,   137,   138,   139,   140,   141,
      -1,   143,   144,   145,    -1,   147,   148,   149,    -1,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,    -1,   164,    -1,    -1,   167,   168,   169,   170,    -1,
     172,    -1,   174,    -1,    -1,    -1,   178,   179,   180,    -1,
     182,    -1,   184,   185,    -1,   187,   188,   189,   190,    -1,
     192,   193,   194,   195,   196,   197,   198,    -1,   200,   201,
     202,   203,    -1,   205,   206,   207,   208,   209,   210,   211,
      -1,   213,    -1,   215,   216,   217,   218,   219,   220,   221,
     222,    -1,   224,    -1,   226,    -1,    -1,   229,    -1,   231,
     232,   233,    -1,   235,   236,   237,    -1,    -1,   240,    -1,
     242,    -1,    -1,   245,    -1,    -1,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,    -1,   279,   280,   281,
     282,   283,   284,    -1,   286,   287,    -1,   289,    -1,   291,
     292,   293,   294,   295,   296,    -1,   298,   299,    -1,    -1,
     302,   303,   304,    -1,    -1,   307,   308,   309,    -1,   311,
     312,    -1,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,    -1,    -1,    -1,    -1,
     332,   333,   334,    -1,   336,   337,   338,    -1,   340,   341,
     342,    -1,   344,   345,   346,   347,   348,    -1,   350,    -1,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
      -1,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,    -1,   377,   378,    -1,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,    -1,    -1,   399,   400,   401,
     402,   403,   404,   405,   406,   407,    -1,    -1,   410,   411,
     412,   413,    -1,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,    -1,
      -1,   433,   434,    -1,   436,    -1,   438,    -1,   440,   441,
     442,   443,   444,    -1,   446,   447,   448,    -1,    -1,   451,
     452,   453,   454,   455,    -1,   457,   458,   459,   460,   461,
     462,   463,   464,    -1,    -1,   467,   468,   469,    -1,    -1,
     472,   473,   474,   475,    -1,   477,   478,   479,   480,   481,
     482,   483,   484,    -1,   486,    -1,   488,   489,   490,   491,
     492,   493,   494,    -1,    -1,   497,    -1,    -1,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   537,   538,    -1,    -1,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    33,
      34,    35,    36,    -1,    38,    -1,    -1,    -1,    -1,    -1,
      44,    45,    46,    -1,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    -1,    61,    62,    63,
      64,    65,    66,    -1,    -1,    69,    70,    71,    72,    73,
      74,    75,    -1,    77,    78,    79,    80,    81,    -1,    83,
      -1,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    97,    98,    99,   100,   101,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,   120,    -1,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
      -1,    -1,   136,   137,   138,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,    -1,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,    -1,
     164,    -1,    -1,   167,   168,   169,   170,    -1,   172,    -1,
     174,   175,   176,   177,   178,   179,   180,   181,   182,    -1,
     184,   185,    -1,   187,   188,   189,   190,    -1,   192,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
      -1,   205,   206,   207,   208,   209,   210,   211,    -1,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,    -1,
     224,    -1,   226,   227,   228,   229,   230,   231,   232,   233,
      -1,   235,   236,   237,    -1,    -1,   240,   241,   242,   243,
      -1,   245,    -1,    -1,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,    -1,   286,   287,   288,   289,    -1,   291,   292,   293,
     294,   295,   296,    -1,   298,   299,    -1,    -1,   302,   303,
     304,    -1,    -1,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,    -1,   332,   333,
     334,   335,   336,   337,   338,    -1,   340,   341,   342,    -1,
     344,   345,   346,   347,   348,    -1,   350,    -1,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,    -1,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,    -1,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
      -1,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,    -1,   433,
     434,   435,   436,   437,   438,    -1,   440,   441,   442,   443,
     444,    -1,   446,   447,   448,    -1,    -1,   451,   452,   453,
     454,   455,    -1,   457,   458,   459,   460,   461,   462,   463,
     464,    -1,    -1,   467,   468,   469,   470,   471,   472,   473,
     474,   475,    -1,   477,   478,   479,   480,   481,   482,   483,
     484,    -1,   486,   487,   488,   489,   490,   491,   492,   493,
     494,    -1,    -1,   497,    -1,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   518,   519,   520,    -1,     3,   523,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   537,    -1,    -1,    -1,    -1,    23,    24,
      25,    26,    27,    28,    29,    30,    -1,    32,    33,    34,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    44,
      45,    46,    -1,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    -1,    61,    62,    63,    64,
      65,    66,    -1,    68,    69,    70,    71,    72,    73,    74,
      75,    -1,    77,    78,    79,    80,    81,    -1,    83,    -1,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      -1,    96,    97,    98,    99,   100,   101,    -1,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,   120,    -1,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,    -1,
      -1,   136,   137,   138,   139,   140,   141,    -1,   143,   144,
     145,    -1,   147,   148,   149,    -1,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,    -1,   164,
      -1,    -1,   167,   168,   169,   170,    -1,   172,    -1,   174,
     175,   176,   177,   178,   179,   180,   181,   182,    -1,   184,
     185,    -1,   187,   188,   189,   190,    -1,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,    -1,
     205,   206,   207,   208,   209,   210,   211,    -1,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,    -1,   224,
      -1,   226,   227,   228,   229,   230,   231,   232,   233,    -1,
     235,   236,   237,   238,    -1,   240,   241,   242,   243,    -1,
     245,    -1,    -1,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
      -1,   286,   287,   288,   289,    -1,   291,   292,   293,   294,
     295,   296,    -1,   298,   299,    -1,   301,   302,   303,   304,
      -1,    -1,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,    -1,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,    -1,   344,
     345,   346,   347,   348,    -1,   350,    -1,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,    -1,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,    -1,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,    -1,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,    -1,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,    -1,   433,   434,
     435,   436,   437,   438,    -1,   440,   441,   442,   443,   444,
      -1,   446,   447,   448,    -1,    -1,   451,   452,   453,   454,
     455,    -1,   457,   458,   459,   460,   461,   462,   463,   464,
      -1,    -1,   467,   468,   469,    -1,   471,   472,   473,   474,
     475,    -1,   477,   478,   479,   480,   481,   482,   483,   484,
      -1,   486,   487,   488,   489,   490,   491,   492,   493,   494,
      -1,    -1,   497,    -1,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,    -1,     3,   523,     5,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   537,    -1,    -1,    -1,    -1,    23,    24,    25,
      26,    27,    28,    29,    30,    -1,    32,    33,    34,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    44,    45,
      46,    -1,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    -1,    61,    62,    63,    64,    65,
      66,    -1,    68,    69,    70,    71,    72,    73,    74,    75,
      -1,    77,    78,    79,    80,    81,    -1,    83,    -1,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    97,    98,    99,   100,   101,    -1,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,   120,    -1,   122,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,    -1,    -1,
     136,   137,   138,   139,   140,   141,    -1,   143,   144,   145,
      -1,   147,   148,   149,    -1,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,    -1,   164,    -1,
      -1,   167,   168,   169,   170,    -1,   172,    -1,   174,   175,
      -1,   177,   178,   179,   180,   181,   182,    -1,   184,   185,
      -1,   187,   188,   189,   190,    -1,   192,   193,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,    -1,   205,
     206,   207,   208,   209,   210,   211,    -1,   213,   214,   215,
     216,   217,   218,   219,   220,   221,   222,    -1,   224,    -1,
     226,   227,   228,   229,   230,   231,   232,   233,    -1,   235,
     236,   237,   238,    -1,   240,   241,   242,   243,    -1,   245,
      -1,    -1,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,    -1,
     286,   287,   288,   289,    -1,   291,   292,   293,   294,   295,
     296,    -1,   298,   299,    -1,   301,   302,   303,   304,    -1,
      -1,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,    -1,    -1,    -1,    -1,   332,   333,   334,   335,
     336,   337,   338,   339,   340,   341,   342,    -1,   344,   345,
     346,   347,   348,   349,   350,    -1,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,    -1,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
      -1,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,    -1,    -1,   399,   400,   401,   402,   403,   404,   405,
     406,   407,    -1,   409,   410,   411,   412,   413,    -1,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,    -1,    -1,   433,   434,    -1,
     436,   437,   438,    -1,   440,   441,   442,   443,   444,    -1,
     446,   447,   448,    -1,    -1,   451,   452,   453,   454,   455,
      -1,   457,   458,   459,   460,   461,   462,   463,   464,    -1,
      -1,   467,   468,   469,    -1,    -1,   472,   473,   474,   475,
      -1,   477,   478,   479,   480,   481,   482,   483,   484,    -1,
     486,   487,   488,   489,   490,   491,   492,   493,   494,    -1,
      -1,   497,    -1,    -1,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   518,   519,   520,     3,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   537,    -1,    -1,    -1,    23,    24,    25,    26,    27,
      28,    29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    44,    45,    46,    -1,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    -1,    61,    62,    63,    64,    65,    66,    -1,
      68,    69,    70,    71,    72,    73,    74,    75,    -1,    77,
      78,    79,    80,    81,    -1,    83,    -1,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    97,
      98,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,   120,    -1,   122,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,    -1,    -1,   136,   137,
     138,   139,   140,   141,    -1,   143,   144,   145,    -1,   147,
     148,   149,    -1,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,    -1,   164,    -1,    -1,   167,
     168,   169,   170,    -1,   172,    -1,   174,   175,    -1,   177,
     178,   179,   180,   181,   182,    -1,   184,   185,    -1,   187,
     188,   189,   190,    -1,   192,   193,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,    -1,   205,   206,   207,
     208,   209,   210,   211,    -1,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,    -1,   224,    -1,   226,   227,
     228,   229,   230,   231,   232,   233,    -1,   235,   236,   237,
     238,    -1,   240,   241,   242,   243,    -1,   245,    -1,    -1,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,    -1,   286,   287,
     288,   289,    -1,   291,   292,   293,   294,   295,   296,    -1,
     298,   299,    -1,   301,   302,   303,   304,    -1,    -1,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
      -1,    -1,    -1,    -1,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,    -1,   344,   345,   346,   347,
     348,    -1,   350,    -1,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,    -1,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,    -1,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,    -1,
      -1,   399,   400,   401,   402,   403,   404,   405,   406,   407,
      -1,   409,   410,   411,   412,   413,    -1,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,    -1,    -1,   433,   434,    -1,   436,   437,
     438,    -1,   440,   441,   442,   443,   444,    -1,   446,   447,
     448,    -1,    -1,   451,   452,   453,   454,   455,    -1,   457,
     458,   459,   460,   461,   462,   463,   464,    -1,    -1,   467,
     468,   469,    -1,    -1,   472,   473,   474,   475,    -1,   477,
     478,   479,   480,   481,   482,   483,   484,    -1,   486,   487,
     488,   489,   490,   491,   492,   493,   494,    -1,    -1,   497,
      -1,    -1,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,   519,   520,     3,    -1,     5,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   537,
      -1,    -1,    -1,    23,    24,    25,    26,    27,    28,    29,
      30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    44,    45,    46,    -1,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      -1,    61,    62,    63,    64,    65,    66,    -1,    68,    69,
      70,    71,    72,    73,    74,    75,    -1,    77,    78,    79,
      80,    81,    -1,    83,    -1,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,    97,    98,    99,
     100,   101,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
     120,    -1,   122,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,    -1,    -1,   136,   137,   138,   139,
     140,   141,    -1,   143,   144,   145,    -1,   147,   148,   149,
      -1,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,    -1,   164,    -1,    -1,   167,   168,   169,
     170,    -1,   172,    -1,   174,   175,    -1,   177,   178,   179,
     180,   181,   182,    -1,   184,   185,    -1,   187,   188,   189,
     190,    -1,   192,   193,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,    -1,   205,   206,   207,   208,   209,
     210,   211,    -1,   213,   214,   215,   216,   217,   218,   219,
     220,   221,   222,    -1,   224,    -1,   226,   227,   228,   229,
     230,   231,   232,   233,    -1,   235,   236,   237,    -1,    -1,
     240,   241,   242,   243,    -1,   245,    -1,    -1,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,    -1,   286,   287,   288,   289,
      -1,   291,   292,   293,   294,   295,   296,    -1,   298,   299,
      -1,   301,   302,   303,   304,    -1,    -1,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,    -1,    -1,
      -1,    -1,   332,   333,   334,   335,   336,   337,   338,    -1,
     340,   341,   342,    -1,   344,   345,   346,   347,   348,    -1,
     350,    -1,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,    -1,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,    -1,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,    -1,    -1,   399,
     400,   401,   402,   403,   404,   405,   406,   407,    -1,   409,
     410,   411,   412,   413,    -1,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,    -1,    -1,   433,   434,    -1,   436,   437,   438,    -1,
     440,   441,   442,   443,   444,    -1,   446,   447,   448,    -1,
      -1,   451,   452,   453,   454,   455,    -1,   457,   458,   459,
     460,   461,   462,   463,   464,    -1,    -1,   467,   468,   469,
      -1,    -1,   472,   473,   474,   475,    -1,   477,   478,   479,
     480,   481,   482,   483,   484,    -1,   486,   487,   488,   489,
     490,   491,   492,   493,   494,    -1,    -1,   497,    -1,    -1,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   518,   519,
     520,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   537,    -1,    -1,
      -1,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    44,    45,    46,    -1,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    -1,    61,
      62,    63,    64,    65,    66,    -1,    68,    69,    70,    71,
      72,    73,    74,    75,    -1,    77,    78,    79,    80,    81,
      -1,    83,    -1,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    97,    98,    99,   100,   101,
      -1,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,   120,    -1,
     122,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,    -1,    -1,   136,   137,   138,   139,   140,   141,
      -1,   143,   144,   145,    -1,   147,   148,   149,    -1,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,    -1,   164,    -1,    -1,   167,   168,   169,   170,    -1,
     172,    -1,   174,   175,    -1,   177,   178,   179,   180,   181,
     182,    -1,   184,   185,    -1,   187,   188,   189,   190,    -1,
     192,   193,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   203,    -1,   205,   206,   207,   208,   209,   210,   211,
      -1,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,    -1,   224,    -1,   226,   227,   228,   229,   230,   231,
     232,   233,    -1,   235,   236,   237,    -1,    -1,   240,   241,
     242,   243,    -1,   245,    -1,    -1,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,    -1,   286,   287,   288,   289,    -1,   291,
     292,   293,   294,   295,   296,    -1,   298,   299,    -1,    -1,
     302,   303,   304,    -1,    -1,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,    -1,    -1,    -1,    -1,
     332,   333,   334,   335,   336,   337,   338,    -1,   340,   341,
     342,    -1,   344,   345,   346,   347,   348,    -1,   350,    -1,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
      -1,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,    -1,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,    -1,    -1,   399,   400,   401,
     402,   403,   404,   405,   406,   407,    -1,   409,   410,   411,
     412,   413,    -1,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,    -1,
      -1,   433,   434,    -1,   436,   437,   438,    -1,   440,   441,
     442,   443,   444,    -1,   446,   447,   448,    -1,    -1,   451,
     452,   453,   454,   455,    -1,   457,   458,   459,   460,   461,
     462,   463,   464,    -1,    -1,   467,   468,   469,    -1,    -1,
     472,   473,   474,   475,    -1,   477,   478,   479,   480,   481,
     482,   483,   484,    -1,   486,   487,   488,   489,   490,   491,
     492,   493,   494,    -1,    -1,   497,    -1,    -1,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   537,    -1,    -1,    -1,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    33,
      34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      44,    45,    46,    -1,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    -1,    61,    62,    63,
      64,    65,    66,    -1,    68,    69,    70,    71,    72,    73,
      74,    75,    -1,    77,    78,    79,    80,    81,    -1,    83,
      -1,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    97,    98,    99,   100,   101,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,   120,    -1,   122,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
      -1,    -1,   136,   137,   138,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,    -1,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,    -1,
     164,    -1,    -1,   167,   168,   169,   170,    -1,   172,    -1,
     174,   175,    -1,   177,   178,   179,   180,   181,   182,    -1,
     184,   185,    -1,   187,   188,   189,   190,    -1,   192,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
      -1,   205,   206,   207,   208,   209,   210,   211,    -1,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,    -1,
     224,    -1,   226,   227,   228,   229,   230,   231,   232,   233,
      -1,   235,   236,   237,    -1,    -1,   240,   241,   242,   243,
      -1,   245,    -1,    -1,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,    -1,   286,   287,   288,   289,    -1,   291,   292,   293,
     294,   295,   296,    -1,   298,   299,    -1,    -1,   302,   303,
     304,    -1,    -1,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,    -1,    -1,    -1,    -1,   332,   333,
     334,   335,   336,   337,   338,    -1,   340,   341,   342,    -1,
     344,   345,   346,   347,   348,    -1,   350,    -1,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,    -1,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,    -1,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,    -1,    -1,   399,   400,   401,   402,   403,
     404,   405,   406,   407,    -1,   409,   410,   411,   412,   413,
      -1,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,    -1,    -1,   433,
     434,    -1,   436,   437,   438,    -1,   440,   441,   442,   443,
     444,    -1,   446,   447,   448,    -1,    -1,   451,   452,   453,
     454,   455,    -1,   457,   458,   459,   460,   461,   462,   463,
     464,    -1,    -1,   467,   468,   469,    -1,    -1,   472,   473,
     474,   475,    -1,   477,   478,   479,   480,   481,   482,   483,
     484,    -1,   486,   487,   488,   489,   490,   491,   492,   493,
     494,    -1,    -1,   497,    -1,    -1,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   518,   519,   520,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   537,    -1,    -1,    -1,    23,    24,    25,
      26,    27,    28,    29,    30,    -1,    32,    33,    34,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    45,
      46,    -1,    -1,    49,    50,    -1,    52,    53,    54,    55,
      56,    -1,    58,    59,    -1,    61,    62,    63,    64,    65,
      66,    -1,    -1,    69,    70,    71,    72,    73,    74,    75,
      -1,    77,    78,    79,    80,    81,    -1,    -1,    -1,    85,
      86,    87,    88,    89,    90,    -1,    92,    93,    94,    -1,
      96,    97,    98,    99,   100,   101,    -1,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,   120,    -1,   122,   123,   124,   125,
     126,   127,   128,   129,   130,   131,   132,   133,    -1,    -1,
     136,   137,   138,   139,   140,   141,    -1,   143,   144,   145,
      -1,   147,   148,   149,    -1,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,    -1,   164,    -1,
      -1,   167,   168,   169,   170,    -1,   172,    -1,   174,    -1,
     176,    -1,   178,   179,   180,    -1,   182,    -1,   184,   185,
      -1,   187,   188,   189,   190,    -1,   192,   193,   194,   195,
     196,   197,   198,    -1,   200,   201,   202,   203,    -1,   205,
     206,   207,   208,   209,   210,   211,    -1,   213,    -1,   215,
     216,   217,   218,   219,   220,   221,   222,    -1,   224,    -1,
     226,    -1,    -1,   229,    -1,   231,   232,   233,    -1,   235,
     236,   237,    -1,    -1,   240,    -1,   242,    -1,    -1,   245,
      -1,    -1,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,    -1,   279,   280,   281,   282,   283,   284,    -1,
     286,   287,    -1,   289,    -1,   291,   292,   293,   294,   295,
     296,    -1,   298,   299,    -1,    -1,   302,   303,   304,    -1,
      -1,   307,   308,   309,    -1,   311,   312,    -1,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,    -1,   332,   333,   334,    -1,
     336,   337,   338,    -1,   340,   341,   342,    -1,   344,   345,
     346,   347,   348,    -1,   350,    -1,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,    -1,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
      -1,   377,   378,    -1,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,    -1,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,    -1,   410,   411,   412,   413,    -1,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,    -1,   433,   434,   435,
     436,    -1,   438,    -1,   440,   441,   442,   443,   444,    -1,
     446,   447,   448,    -1,    -1,   451,   452,   453,   454,   455,
      -1,   457,   458,   459,   460,   461,   462,   463,   464,    -1,
      -1,   467,   468,   469,    -1,   471,   472,   473,   474,   475,
      -1,   477,   478,   479,   480,   481,   482,   483,   484,    -1,
     486,    -1,   488,   489,   490,   491,   492,   493,   494,    -1,
      -1,   497,    -1,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   518,   519,   520,    -1,     3,   523,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   537,    -1,    -1,    -1,    -1,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    45,    46,
      -1,    -1,    49,    50,    -1,    52,    53,    54,    55,    56,
      -1,    58,    59,    -1,    61,    62,    63,    64,    65,    66,
      -1,    -1,    69,    70,    71,    72,    73,    74,    75,    -1,
      77,    78,    79,    80,    81,    -1,    -1,    -1,    85,    86,
      87,    88,    89,    90,    -1,    92,    93,    94,    -1,    96,
      97,    98,    99,   100,   101,    -1,    -1,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,   120,    -1,   122,   123,   124,   125,   126,
     127,    -1,    -1,   130,   131,   132,   133,    -1,    -1,   136,
     137,   138,   139,   140,   141,    -1,   143,   144,   145,    -1,
     147,   148,   149,    -1,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,    -1,   164,    -1,    -1,
     167,   168,   169,   170,    -1,   172,    -1,   174,    -1,   176,
      -1,   178,   179,   180,    -1,   182,    -1,   184,   185,    -1,
     187,   188,   189,   190,    -1,   192,   193,   194,   195,   196,
     197,   198,    -1,   200,   201,   202,   203,    -1,   205,   206,
     207,   208,   209,   210,   211,    -1,   213,    -1,   215,   216,
     217,   218,   219,   220,   221,   222,    -1,   224,    -1,   226,
      -1,    -1,   229,    -1,   231,   232,   233,    -1,   235,   236,
     237,    -1,    -1,   240,    -1,   242,    -1,    -1,   245,    -1,
      -1,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,    -1,   279,   280,   281,   282,   283,   284,    -1,   286,
     287,    -1,   289,    -1,   291,   292,   293,   294,   295,   296,
      -1,   298,   299,    -1,    -1,   302,   303,   304,    -1,    -1,
     307,   308,   309,    -1,   311,   312,    -1,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,    -1,   332,   333,   334,    -1,   336,
     337,   338,    -1,   340,   341,   342,    -1,   344,   345,   346,
     347,   348,    -1,   350,    -1,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,    -1,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,    -1,
     377,   378,    -1,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,    -1,   399,   400,   401,   402,   403,   404,   405,   406,
     407,    -1,    -1,   410,   411,   412,   413,    -1,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,    -1,    -1,   433,   434,   435,   436,
      -1,   438,    -1,   440,   441,   442,   443,   444,    -1,   446,
     447,   448,    -1,    -1,   451,   452,   453,   454,   455,    -1,
     457,   458,   459,   460,   461,   462,   463,   464,    -1,    -1,
     467,   468,   469,    -1,   471,   472,   473,   474,   475,    -1,
     477,   478,   479,   480,   481,   482,   483,   484,    -1,   486,
      -1,   488,   489,   490,   491,   492,   493,   494,    -1,    -1,
     497,    -1,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   518,   519,   520,    -1,     3,   523,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     537,    -1,    -1,    -1,    -1,    23,    24,    25,    26,    27,
      28,    29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    45,    46,    -1,
      -1,    49,    50,    -1,    52,    53,    54,    55,    56,    -1,
      58,    59,    -1,    61,    62,    63,    64,    65,    66,    -1,
      -1,    69,    70,    71,    72,    73,    74,    75,    -1,    77,
      78,    79,    80,    81,    -1,    -1,    -1,    85,    86,    87,
      88,    89,    90,    -1,    92,    93,    94,    -1,    96,    97,
      98,    99,   100,   101,    -1,    -1,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,   120,    -1,   122,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,    -1,    -1,   136,   137,
     138,   139,   140,   141,    -1,   143,   144,   145,    -1,   147,
     148,   149,    -1,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,    -1,   164,    -1,    -1,   167,
     168,   169,   170,    -1,   172,    -1,   174,    -1,   176,    -1,
     178,   179,   180,    -1,   182,    -1,   184,   185,    -1,   187,
     188,   189,   190,    -1,   192,   193,   194,   195,   196,   197,
     198,    -1,   200,   201,   202,   203,    -1,   205,   206,   207,
     208,   209,   210,   211,    -1,   213,    -1,   215,   216,   217,
     218,   219,   220,   221,   222,    -1,   224,    -1,   226,    -1,
      -1,   229,    -1,   231,   232,   233,    -1,   235,   236,   237,
      -1,    -1,   240,    -1,   242,    -1,    -1,   245,    -1,    -1,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
      -1,   279,   280,   281,   282,   283,   284,    -1,   286,   287,
      -1,   289,    -1,   291,   292,   293,   294,   295,   296,    -1,
     298,   299,    -1,    -1,   302,   303,   304,    -1,    -1,   307,
     308,   309,    -1,   311,   312,    -1,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,    -1,   332,   333,   334,    -1,   336,   337,
     338,    -1,   340,   341,   342,    -1,   344,   345,   346,   347,
     348,    -1,   350,    -1,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,    -1,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,    -1,   377,
     378,    -1,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
      -1,   399,   400,   401,   402,   403,   404,   405,   406,   407,
      -1,    -1,   410,   411,   412,   413,    -1,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,    -1,    -1,   433,   434,   435,   436,    -1,
     438,    -1,   440,   441,   442,   443,   444,    -1,   446,   447,
     448,    -1,    -1,   451,   452,   453,   454,   455,    -1,   457,
     458,   459,   460,   461,   462,   463,   464,    -1,    -1,   467,
     468,   469,    -1,   471,   472,   473,   474,   475,    -1,   477,
     478,   479,   480,   481,   482,   483,   484,    -1,   486,    -1,
     488,   489,   490,   491,   492,   493,   494,    -1,    -1,   497,
      -1,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,   519,   520,    -1,     3,   523,     5,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   537,
      -1,    -1,    -1,    -1,    23,    24,    25,    26,    27,    28,
      29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    45,    46,    -1,    -1,
      49,    50,    -1,    52,    53,    54,    55,    56,    -1,    58,
      59,    -1,    61,    62,    63,    64,    65,    66,    -1,    -1,
      69,    70,    71,    72,    73,    74,    75,    -1,    77,    78,
      79,    80,    81,    -1,    -1,    -1,    85,    86,    87,    88,
      89,    90,    -1,    92,    93,    94,    -1,    96,    97,    98,
      99,   100,   101,    -1,    -1,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
      -1,   120,    -1,   122,   123,   124,   125,   126,   127,    -1,
      -1,   130,   131,   132,   133,    -1,    -1,   136,   137,   138,
     139,   140,   141,    -1,   143,   144,   145,    -1,   147,   148,
     149,    -1,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,    -1,   164,    -1,    -1,   167,   168,
     169,   170,    -1,   172,    -1,   174,    -1,    -1,    -1,   178,
     179,   180,    -1,   182,    -1,   184,   185,    -1,   187,   188,
     189,   190,    -1,   192,   193,   194,   195,   196,   197,   198,
      -1,   200,   201,   202,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,    -1,   213,    -1,   215,   216,   217,   218,
     219,   220,   221,   222,    -1,   224,    -1,   226,    -1,    -1,
     229,    -1,   231,   232,   233,    -1,   235,   236,   237,    -1,
      -1,   240,    -1,   242,    -1,    -1,   245,    -1,    -1,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,    -1,
     279,   280,   281,   282,   283,   284,    -1,   286,   287,    -1,
     289,    -1,   291,   292,   293,   294,   295,   296,    -1,   298,
     299,    -1,    -1,   302,   303,   304,    -1,    -1,   307,   308,
     309,    -1,   311,   312,    -1,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,    -1,
      -1,    -1,    -1,   332,   333,   334,    -1,   336,   337,   338,
      -1,   340,   341,   342,    -1,   344,   345,   346,   347,   348,
      -1,   350,    -1,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,    -1,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,    -1,   377,   378,
      -1,   380,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,    -1,    -1,
     399,   400,   401,   402,   403,   404,   405,   406,   407,    -1,
      -1,   410,   411,   412,   413,    -1,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,    -1,    -1,   433,   434,    -1,   436,    -1,   438,
      -1,   440,   441,   442,   443,   444,    -1,   446,   447,   448,
      -1,    -1,   451,   452,   453,   454,   455,    -1,   457,   458,
     459,   460,   461,   462,   463,   464,    -1,    -1,   467,   468,
     469,    -1,    -1,   472,   473,   474,   475,    -1,   477,   478,
     479,   480,   481,   482,   483,   484,    -1,   486,    -1,   488,
     489,   490,   491,   492,   493,   494,    -1,    -1,   497,    -1,
      -1,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,   518,
     519,   520,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   537,    -1,
      -1,    -1,    23,    24,    25,    26,    27,    28,    29,    30,
      -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    45,    46,    -1,    -1,    49,    50,
      -1,    52,    53,    54,    55,    56,    -1,    58,    59,    -1,
      61,    62,    63,    64,    65,    66,    -1,    -1,    69,    70,
      71,    72,    73,    74,    75,    -1,    77,    78,    79,    80,
      81,    -1,    -1,    -1,    85,    86,    87,    88,    89,    90,
      -1,    92,    93,    94,    -1,    96,    97,    98,    99,   100,
     101,    -1,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
      -1,   122,   123,   124,   125,   126,   127,    -1,    -1,   130,
     131,   132,   133,    -1,    -1,   136,   137,   138,   139,   140,
     141,    -1,   143,   144,   145,    -1,   147,   148,   149,    -1,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,    -1,   164,    -1,    -1,   167,   168,   169,   170,
      -1,   172,    -1,   174,    -1,    -1,    -1,   178,   179,   180,
      -1,   182,    -1,   184,   185,    -1,   187,   188,   189,   190,
      -1,   192,   193,   194,   195,   196,   197,   198,    -1,   200,
     201,   202,   203,    -1,   205,   206,   207,   208,   209,   210,
     211,    -1,   213,    -1,   215,   216,   217,   218,   219,   220,
     221,   222,    -1,   224,    -1,   226,    -1,    -1,   229,    -1,
     231,   232,   233,    -1,   235,   236,   237,    -1,    -1,   240,
      -1,   242,    -1,    -1,   245,    -1,    -1,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,    -1,   279,   280,
     281,   282,   283,   284,    -1,   286,   287,    -1,   289,    -1,
     291,   292,   293,   294,   295,   296,    -1,   298,   299,    -1,
      -1,   302,   303,   304,    -1,    -1,   307,   308,   309,    -1,
     311,   312,    -1,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,    -1,    -1,    -1,
      -1,   332,   333,   334,    -1,   336,   337,   338,    -1,   340,
     341,   342,    -1,   344,   345,   346,   347,   348,    -1,   350,
      -1,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,    -1,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,    -1,   377,   378,    -1,   380,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,    -1,    -1,   399,   400,
     401,   402,   403,   404,   405,   406,   407,    -1,    -1,   410,
     411,   412,   413,    -1,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
      -1,    -1,   433,   434,    -1,   436,    -1,   438,    -1,   440,
     441,   442,   443,   444,    -1,   446,   447,   448,    -1,    -1,
     451,   452,   453,   454,   455,    -1,   457,   458,   459,   460,
     461,   462,   463,   464,    -1,    -1,   467,   468,   469,    -1,
      -1,   472,   473,   474,   475,    -1,   477,   478,   479,   480,
     481,   482,   483,   484,    -1,   486,    -1,   488,   489,   490,
     491,   492,   493,   494,    -1,    -1,   497,    -1,    -1,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,   517,   518,   519,   520,
       3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   537,    -1,    -1,    -1,
      23,    24,    25,    26,    27,    28,    29,    30,    -1,    32,
      33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    45,    46,    -1,    -1,    49,    50,    -1,    52,
      53,    54,    55,    56,    -1,    58,    59,    -1,    61,    62,
      63,    64,    65,    66,    -1,    -1,    69,    70,    71,    72,
      73,    74,    75,    -1,    77,    78,    79,    80,    81,    -1,
      -1,    -1,    85,    86,    87,    88,    89,    90,    -1,    92,
      93,    94,    -1,    96,    97,    98,    99,   100,   101,    -1,
      -1,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,   120,    -1,   122,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,    -1,    -1,   136,   137,   138,   139,   140,   141,    -1,
     143,   144,   145,    -1,   147,   148,   149,    -1,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
      -1,   164,    -1,    -1,   167,   168,   169,   170,    -1,   172,
      -1,   174,    -1,    -1,    -1,   178,   179,   180,    -1,   182,
      -1,   184,   185,    -1,   187,   188,   189,   190,    -1,   192,
     193,   194,   195,   196,   197,   198,    -1,   200,   201,   202,
     203,    -1,   205,   206,   207,   208,   209,   210,   211,    -1,
     213,    -1,   215,   216,   217,   218,   219,   220,   221,   222,
      -1,   224,    -1,   226,    -1,    -1,   229,    -1,   231,   232,
     233,    -1,   235,   236,   237,    -1,    -1,   240,    -1,   242,
      -1,    -1,   245,    -1,    -1,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,    -1,   279,   280,   281,   282,
     283,   284,    -1,   286,   287,    -1,   289,    -1,   291,   292,
     293,   294,   295,   296,    -1,   298,   299,    -1,    -1,   302,
     303,   304,    -1,    -1,   307,   308,   309,    -1,   311,   312,
      -1,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,    -1,    -1,    -1,    -1,   332,
     333,   334,    -1,   336,   337,   338,    -1,   340,   341,   342,
      -1,   344,   345,   346,   347,   348,    -1,   350,    -1,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,    -1,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,    -1,   377,   378,    -1,   380,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,    -1,    -1,   399,   400,   401,   402,
     403,   404,   405,   406,   407,    -1,    -1,   410,   411,   412,
     413,    -1,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,    -1,    -1,
     433,   434,    -1,   436,    -1,   438,    -1,   440,   441,   442,
     443,   444,    -1,   446,   447,   448,    -1,    -1,   451,   452,
     453,   454,   455,    -1,   457,   458,   459,   460,   461,   462,
     463,   464,    -1,    -1,   467,   468,   469,    -1,    -1,   472,
     473,   474,   475,    -1,   477,   478,   479,   480,   481,   482,
     483,   484,    -1,   486,    -1,   488,   489,   490,   491,   492,
     493,   494,    -1,    -1,   497,    -1,    -1,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,   518,   519,   520,     3,    -1,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   537,    -1,    -1,    -1,    23,    24,
      25,    26,    27,    28,    29,    30,    -1,    32,    33,    34,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      45,    46,    -1,    -1,    49,    50,    -1,    52,    53,    54,
      55,    56,    -1,    58,    59,    -1,    61,    62,    63,    64,
      65,    66,    -1,    -1,    69,    70,    71,    72,    73,    74,
      75,    -1,    77,    78,    79,    80,    81,    -1,    -1,    -1,
      85,    86,    87,    88,    89,    90,    -1,    92,    93,    94,
      -1,    96,    97,    98,    99,   100,   101,    -1,    -1,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,   120,    -1,   122,   123,   124,
     125,   126,   127,    -1,    -1,   130,   131,   132,   133,    -1,
      -1,   136,   137,   138,   139,   140,   141,    -1,   143,   144,
     145,    -1,   147,   148,   149,    -1,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,    -1,   164,
      -1,    -1,   167,   168,   169,   170,    -1,   172,    -1,   174,
      -1,    -1,    -1,   178,   179,   180,    -1,   182,    -1,   184,
     185,    -1,   187,   188,   189,   190,    -1,   192,   193,   194,
     195,   196,   197,   198,    -1,   200,   201,   202,   203,    -1,
     205,   206,   207,   208,   209,   210,   211,    -1,   213,    -1,
     215,   216,   217,   218,   219,   220,   221,   222,    -1,   224,
      -1,   226,    -1,    -1,   229,    -1,   231,   232,   233,    -1,
     235,   236,   237,    -1,    -1,   240,    -1,   242,    -1,    -1,
     245,    -1,    -1,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,    -1,   279,   280,   281,   282,   283,   284,
      -1,   286,   287,    -1,   289,    -1,   291,   292,   293,   294,
     295,   296,    -1,   298,   299,    -1,    -1,   302,   303,   304,
      -1,    -1,   307,   308,   309,    -1,   311,   312,    -1,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,    -1,    -1,    -1,    -1,   332,   333,   334,
      -1,   336,   337,   338,    -1,   340,   341,   342,    -1,   344,
     345,   346,   347,   348,    -1,   350,    -1,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,    -1,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,    -1,   377,   378,    -1,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,    -1,    -1,   399,   400,   401,   402,   403,   404,
     405,   406,   407,    -1,    -1,   410,   411,   412,   413,    -1,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,    -1,    -1,   433,   434,
      -1,   436,    -1,   438,    -1,   440,   441,   442,   443,   444,
      -1,   446,   447,   448,    -1,    -1,   451,   452,   453,   454,
     455,    -1,   457,   458,   459,   460,   461,   462,   463,   464,
      -1,    -1,   467,   468,   469,    -1,    -1,   472,   473,   474,
     475,    -1,   477,   478,   479,   480,   481,   482,   483,   484,
      -1,   486,    -1,   488,   489,   490,   491,   492,   493,   494,
      -1,    -1,   497,    -1,    -1,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,     3,    -1,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   537,    -1,    -1,    -1,    23,    24,    25,    26,
      27,    28,    29,    30,    -1,    32,    33,    34,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    45,    46,
      -1,    -1,    49,    50,    -1,    52,    53,    54,    55,    56,
      -1,    58,    59,    -1,    61,    62,    63,    64,    65,    66,
      -1,    -1,    69,    70,    71,    72,    73,    74,    75,    -1,
      77,    78,    79,    80,    81,    -1,    -1,    -1,    85,    86,
      87,    88,    89,    90,    -1,    92,    93,    94,    -1,    96,
      97,    98,    99,   100,   101,    -1,    -1,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,   120,    -1,   122,   123,   124,   125,   126,
     127,    -1,    -1,   130,   131,   132,   133,    -1,    -1,   136,
     137,   138,   139,   140,   141,    -1,   143,   144,   145,    -1,
     147,   148,   149,    -1,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,    -1,   164,    -1,    -1,
     167,   168,   169,   170,    -1,   172,    -1,   174,    -1,    -1,
      -1,   178,   179,   180,    -1,   182,    -1,   184,   185,    -1,
     187,   188,   189,   190,    -1,   192,   193,   194,   195,   196,
     197,   198,    -1,   200,   201,   202,   203,    -1,   205,   206,
     207,   208,   209,   210,   211,    -1,   213,    -1,   215,   216,
     217,   218,   219,   220,   221,   222,    -1,   224,    -1,   226,
      -1,    -1,   229,    -1,   231,   232,   233,    -1,   235,   236,
     237,    -1,    -1,   240,    -1,   242,    -1,    -1,   245,    -1,
      -1,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,    -1,   279,   280,   281,   282,   283,   284,    -1,   286,
     287,    -1,   289,    -1,   291,   292,   293,   294,   295,   296,
      -1,   298,   299,    -1,    -1,   302,   303,   304,    -1,    -1,
     307,   308,   309,    -1,   311,   312,    -1,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,    -1,    -1,    -1,    -1,   332,   333,   334,    -1,   336,
     337,   338,    -1,   340,   341,   342,    -1,   344,   345,   346,
     347,   348,    -1,   350,    -1,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,    -1,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,    -1,
     377,   378,    -1,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
      -1,    -1,   399,   400,   401,   402,   403,   404,   405,   406,
     407,    -1,    -1,   410,   411,   412,   413,    -1,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,    -1,    -1,   433,   434,    -1,   436,
      -1,   438,    -1,   440,   441,   442,   443,   444,    -1,   446,
     447,   448,    -1,    -1,   451,   452,   453,   454,   455,    -1,
     457,   458,   459,   460,   461,   462,   463,   464,    -1,    -1,
     467,   468,   469,    -1,    -1,   472,   473,   474,   475,    -1,
     477,   478,   479,   480,   481,   482,   483,   484,    -1,   486,
      -1,   488,   489,   490,   491,   492,   493,   494,    -1,    -1,
     497,    -1,    -1,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   518,   519,   520,     3,    -1,     5,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     537,    -1,    -1,    -1,    23,    24,    25,    26,    27,    28,
      29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    45,    46,    -1,    -1,
      49,    50,    -1,    52,    53,    54,    55,    56,    -1,    58,
      59,    -1,    61,    62,    63,    64,    65,    66,    -1,    -1,
      69,    70,    71,    72,    73,    74,    75,    -1,    77,    78,
      79,    80,    81,    -1,    -1,    -1,    85,    86,    87,    88,
      89,    90,    -1,    92,    93,    94,    -1,    96,    97,    98,
      99,   100,   101,    -1,    -1,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
      -1,   120,    -1,   122,   123,   124,   125,   126,   127,    -1,
      -1,   130,   131,   132,   133,    -1,    -1,   136,   137,   138,
     139,   140,   141,    -1,   143,   144,   145,    -1,   147,   148,
     149,    -1,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,    -1,   164,    -1,    -1,   167,   168,
     169,   170,    -1,   172,    -1,   174,    -1,    -1,    -1,   178,
     179,   180,    -1,   182,    -1,   184,   185,    -1,   187,   188,
     189,   190,    -1,   192,   193,   194,   195,   196,   197,   198,
      -1,   200,   201,   202,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,    -1,   213,    -1,   215,   216,   217,   218,
     219,   220,   221,   222,    -1,   224,    -1,   226,    -1,    -1,
     229,    -1,   231,   232,   233,    -1,   235,   236,   237,    -1,
      -1,   240,    -1,   242,    -1,    -1,   245,    -1,    -1,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,    -1,
     279,   280,   281,   282,   283,   284,    -1,   286,   287,    -1,
     289,    -1,   291,   292,   293,   294,   295,   296,    -1,   298,
     299,    -1,    -1,   302,   303,   304,    -1,    -1,   307,   308,
     309,    -1,   311,   312,    -1,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,    -1,
      -1,    -1,    -1,   332,   333,   334,    -1,   336,   337,   338,
      -1,   340,   341,   342,    -1,   344,   345,   346,   347,   348,
      -1,   350,    -1,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,    -1,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,    -1,   377,   378,
      -1,   380,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,    -1,    -1,
     399,   400,   401,   402,   403,   404,   405,   406,   407,    -1,
      -1,   410,   411,   412,   413,    -1,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,    -1,    -1,   433,   434,    -1,   436,    -1,   438,
      -1,   440,   441,   442,   443,   444,    -1,   446,   447,   448,
      -1,    -1,   451,   452,   453,   454,   455,    -1,   457,   458,
     459,   460,   461,   462,   463,   464,    -1,    -1,   467,   468,
     469,    -1,    -1,   472,   473,   474,   475,    -1,   477,   478,
     479,   480,   481,   482,   483,   484,    -1,   486,    -1,   488,
     489,   490,   491,   492,   493,   494,    -1,    -1,   497,    -1,
      -1,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,   518,
     519,   520,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   537,    -1,
      -1,    -1,    23,    24,    25,    26,    27,    28,    29,    30,
      -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    45,    46,    -1,    -1,    49,    50,
      -1,    52,    53,    54,    55,    56,    -1,    58,    59,    -1,
      61,    62,    63,    64,    65,    66,    -1,    -1,    69,    70,
      71,    72,    73,    74,    75,    -1,    77,    78,    79,    80,
      81,    -1,    -1,    -1,    85,    86,    87,    88,    89,    90,
      -1,    92,    93,    94,    -1,    96,    97,    98,    99,   100,
     101,    -1,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
      -1,   122,   123,   124,   125,   126,   127,    -1,    -1,   130,
     131,   132,   133,    -1,    -1,   136,   137,   138,   139,   140,
     141,    -1,   143,   144,   145,    -1,   147,   148,   149,    -1,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,    -1,   164,    -1,    -1,   167,   168,   169,   170,
      -1,   172,    -1,   174,    -1,    -1,    -1,   178,   179,   180,
      -1,   182,    -1,   184,   185,    -1,   187,   188,   189,   190,
      -1,   192,   193,   194,   195,   196,   197,   198,    -1,   200,
     201,   202,   203,    -1,   205,   206,   207,   208,   209,   210,
     211,    -1,   213,    -1,   215,   216,   217,   218,   219,   220,
     221,   222,    -1,   224,    -1,   226,    -1,    -1,   229,    -1,
     231,   232,   233,    -1,   235,   236,   237,    -1,    -1,   240,
      -1,   242,    -1,    -1,   245,    -1,    -1,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,    -1,   279,   280,
     281,   282,   283,   284,    -1,   286,   287,    -1,   289,    -1,
     291,   292,   293,   294,   295,   296,    -1,   298,   299,    -1,
      -1,   302,   303,   304,    -1,    -1,   307,   308,   309,    -1,
     311,   312,    -1,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,    -1,    -1,    -1,
      -1,   332,   333,   334,    -1,   336,   337,   338,    -1,   340,
     341,   342,    -1,   344,   345,   346,   347,   348,    -1,   350,
      -1,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,    -1,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,    -1,   377,   378,    -1,   380,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,    -1,    -1,   399,   400,
     401,   402,   403,   404,   405,   406,   407,    -1,    -1,   410,
     411,   412,   413,    -1,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
      -1,    -1,   433,   434,    -1,   436,    -1,   438,    -1,   440,
     441,   442,   443,   444,    -1,   446,   447,   448,    -1,    -1,
     451,   452,   453,   454,   455,    -1,   457,   458,   459,   460,
     461,   462,   463,   464,    -1,    -1,   467,   468,   469,    -1,
      -1,   472,   473,   474,   475,    -1,   477,   478,   479,   480,
     481,   482,   483,   484,    -1,   486,    -1,   488,   489,   490,
     491,   492,   493,   494,    -1,    -1,   497,    -1,    -1,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,   517,   518,   519,   520,
       3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   537,    -1,    -1,    -1,
      23,    24,    25,    26,    27,    28,    29,    30,    -1,    32,
      33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    45,    46,    -1,    -1,    49,    50,    -1,    52,
      53,    54,    55,    56,    -1,    58,    59,    -1,    61,    62,
      63,    64,    65,    66,    -1,    -1,    69,    70,    71,    72,
      73,    74,    75,    -1,    77,    78,    79,    80,    81,    -1,
      -1,    -1,    85,    86,    87,    88,    89,    90,    -1,    92,
      93,    94,    -1,    96,    97,    98,    99,   100,   101,    -1,
      -1,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,   120,    -1,   122,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,    -1,    -1,   136,   137,   138,   139,   140,   141,    -1,
     143,   144,   145,    -1,   147,   148,   149,    -1,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
      -1,   164,    -1,    -1,   167,   168,   169,   170,    -1,   172,
      -1,   174,    -1,    -1,    -1,   178,   179,   180,    -1,   182,
      -1,   184,   185,    -1,   187,   188,   189,   190,    -1,   192,
     193,   194,   195,   196,   197,   198,    -1,   200,   201,   202,
     203,    -1,   205,   206,   207,   208,   209,   210,   211,    -1,
     213,    -1,   215,   216,   217,   218,   219,   220,   221,   222,
      -1,   224,    -1,   226,    -1,    -1,   229,    -1,   231,   232,
     233,    -1,   235,   236,   237,    -1,    -1,   240,    -1,   242,
      -1,    -1,   245,    -1,    -1,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,    -1,   279,   280,   281,   282,
     283,   284,    -1,   286,   287,    -1,   289,    -1,   291,   292,
     293,   294,   295,   296,    -1,   298,   299,    -1,    -1,   302,
     303,   304,    -1,    -1,   307,   308,   309,    -1,   311,   312,
      -1,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,    -1,    -1,    -1,    -1,   332,
     333,   334,    -1,   336,   337,   338,    -1,   340,   341,   342,
      -1,   344,   345,   346,   347,   348,    -1,   350,    -1,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,    -1,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,    -1,   377,   378,    -1,   380,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,    -1,    -1,   399,   400,   401,   402,
     403,   404,   405,   406,   407,    -1,    -1,   410,   411,   412,
     413,    -1,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,    -1,    -1,
     433,   434,    -1,   436,    -1,   438,    -1,   440,   441,   442,
     443,   444,    -1,   446,   447,   448,    -1,    -1,   451,   452,
     453,   454,   455,    -1,   457,   458,   459,   460,   461,   462,
     463,   464,    -1,    -1,   467,   468,   469,    -1,    -1,   472,
     473,   474,   475,    -1,   477,   478,   479,   480,   481,   482,
     483,   484,    -1,   486,    -1,   488,   489,   490,   491,   492,
     493,   494,    -1,    -1,   497,    -1,    -1,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,   518,   519,   520,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   537,    -1,    -1,    -1,    23,    24,
      25,    26,    27,    28,    29,    30,    -1,    32,    33,    34,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      45,    46,    -1,    -1,    49,    50,    -1,    52,    53,    54,
      55,    56,    -1,    58,    59,    -1,    61,    62,    63,    64,
      65,    66,    -1,    -1,    69,    70,    71,    72,    73,    74,
      75,    -1,    77,    78,    79,    80,    81,    -1,    -1,    -1,
      85,    86,    87,    88,    89,    90,    -1,    92,    93,    94,
      -1,    96,    97,    98,    99,   100,   101,    -1,    -1,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,   120,    -1,   122,   123,   124,
     125,   126,   127,    -1,    -1,   130,   131,   132,   133,    -1,
      -1,   136,   137,   138,   139,   140,   141,    -1,   143,   144,
     145,    -1,   147,   148,   149,    -1,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,    -1,   164,
      -1,    -1,   167,   168,   169,   170,    -1,   172,    -1,   174,
      -1,    -1,    -1,   178,   179,   180,    -1,   182,    -1,   184,
     185,    -1,   187,   188,   189,   190,    -1,   192,   193,   194,
     195,   196,   197,   198,    -1,   200,   201,   202,   203,    -1,
     205,   206,   207,   208,   209,   210,   211,    -1,   213,    -1,
     215,   216,   217,   218,   219,   220,   221,   222,    -1,   224,
      -1,   226,    -1,    -1,   229,    -1,   231,   232,   233,    -1,
     235,   236,   237,    -1,    -1,   240,    -1,   242,    -1,    -1,
     245,    -1,    -1,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,    -1,   279,   280,   281,   282,   283,   284,
      -1,   286,   287,    -1,   289,    -1,   291,   292,   293,   294,
     295,   296,    -1,   298,   299,    -1,    -1,   302,   303,   304,
      -1,    -1,   307,   308,   309,    -1,   311,   312,    -1,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,    -1,    -1,    -1,    -1,   332,   333,   334,
      -1,   336,   337,   338,    -1,   340,   341,   342,    -1,   344,
     345,   346,   347,   348,    -1,   350,    -1,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,    -1,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,    -1,   377,   378,    -1,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,    -1,    -1,   399,   400,   401,   402,   403,   404,
     405,   406,   407,    -1,    -1,   410,   411,   412,   413,    -1,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,    -1,    -1,   433,   434,
      -1,   436,    -1,   438,    -1,   440,   441,   442,   443,   444,
      -1,   446,   447,   448,    -1,    -1,   451,   452,   453,   454,
     455,    -1,   457,   458,   459,   460,   461,   462,   463,   464,
      -1,    -1,   467,   468,   469,    -1,    -1,   472,   473,   474,
     475,    -1,   477,   478,   479,   480,   481,   482,   483,   484,
      -1,   486,    -1,   488,   489,   490,   491,   492,   493,   494,
      -1,    -1,   497,    -1,    -1,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   537,    -1,    -1,    -1,    23,    24,    25,    26,
      27,    28,    29,    30,    -1,    32,    33,    34,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    45,    46,
      -1,    -1,    49,    50,    -1,    52,    53,    54,    55,    56,
      -1,    58,    59,    -1,    61,    62,    63,    64,    65,    66,
      -1,    -1,    69,    70,    71,    72,    73,    74,    75,    -1,
      77,    78,    79,    80,    81,    -1,    -1,    -1,    85,    86,
      87,    88,    89,    90,    -1,    92,    93,    94,    -1,    96,
      97,    98,    99,   100,   101,    -1,    -1,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,   120,    -1,   122,   123,   124,   125,   126,
     127,    -1,    -1,   130,   131,   132,   133,    -1,    -1,   136,
     137,   138,   139,   140,   141,    -1,   143,   144,   145,    -1,
     147,   148,   149,    -1,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,    -1,   164,    -1,    -1,
     167,   168,   169,   170,    -1,   172,    -1,   174,    -1,    -1,
      -1,   178,   179,   180,    -1,   182,    -1,   184,   185,    -1,
     187,   188,   189,   190,    -1,   192,   193,   194,   195,   196,
     197,   198,    -1,   200,   201,   202,   203,    -1,   205,   206,
     207,   208,   209,   210,   211,    -1,   213,    -1,   215,   216,
     217,   218,   219,   220,   221,   222,    -1,   224,    -1,   226,
      -1,    -1,   229,    -1,   231,   232,   233,    -1,   235,   236,
     237,    -1,    -1,   240,    -1,   242,    -1,    -1,   245,    -1,
      -1,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,    -1,   279,   280,   281,   282,   283,   284,    -1,   286,
     287,    -1,   289,    -1,   291,   292,   293,   294,   295,   296,
      -1,   298,   299,    -1,    -1,   302,   303,   304,    -1,    -1,
     307,   308,   309,    -1,   311,   312,    -1,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,    -1,    -1,    -1,    -1,   332,   333,   334,    -1,   336,
     337,   338,    -1,   340,   341,   342,    -1,   344,   345,   346,
     347,   348,    -1,   350,    -1,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,    -1,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,    -1,
     377,   378,    -1,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
      -1,    -1,   399,   400,   401,   402,   403,   404,   405,   406,
     407,    -1,    -1,   410,   411,   412,   413,    -1,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,    -1,    -1,   433,   434,    -1,   436,
      -1,   438,    -1,   440,   441,   442,   443,   444,    -1,   446,
     447,   448,    -1,    -1,   451,   452,   453,   454,   455,    -1,
     457,   458,   459,   460,   461,   462,   463,   464,    -1,    -1,
     467,   468,   469,    -1,    -1,   472,   473,   474,   475,    -1,
     477,   478,   479,   480,   481,   482,   483,   484,    -1,   486,
      -1,   488,   489,   490,   491,   492,   493,   494,    -1,    -1,
     497,    -1,    -1,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   518,   519,   520,     3,     4,     5,    -1,    -1,     8,
       9,    -1,    -1,    -1,    -1,    -1,    15,    16,    -1,    -1,
     537,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    -1,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
     129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
     139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,    -1,   156,   157,   158,
     159,   160,   161,    -1,   163,   164,   165,   166,   167,   168,
     169,   170,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,   184,   185,   186,    -1,    -1,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,   204,   205,   206,   207,   208,
     209,   210,   211,   212,   213,   214,    -1,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,    -1,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
      -1,   310,   311,   312,   313,    -1,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,    -1,   335,   336,   337,    -1,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,    -1,   431,   432,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,    -1,   454,    -1,   456,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,    -1,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   517,   518,
     519,   520,    -1,     3,    -1,   524,   525,   526,     8,   528,
     529,   530,   531,   532,   533,    15,    16,    -1,    -1,    -1,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    45,    46,    -1,    -1,    49,
      50,    -1,    52,    53,    54,    55,    56,    -1,    58,    59,
      -1,    61,    62,    63,    64,    65,    66,    -1,    -1,    69,
      70,    71,    72,    73,    74,    75,    -1,    77,    78,    79,
      80,    81,    -1,    -1,    -1,    85,    86,    87,    88,    89,
      90,    -1,    92,    93,    94,    -1,    96,    97,    98,    99,
     100,   101,    -1,    -1,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
     120,    -1,   122,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,    -1,    -1,   136,   137,   138,   139,
     140,   141,    -1,   143,   144,   145,    -1,   147,   148,   149,
      -1,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,    -1,   164,    -1,    -1,   167,   168,   169,
     170,    -1,   172,    -1,   174,    -1,    -1,    -1,   178,   179,
     180,    -1,   182,    -1,   184,   185,    -1,   187,   188,   189,
     190,    -1,   192,   193,   194,   195,   196,   197,   198,    -1,
     200,   201,   202,   203,    -1,   205,   206,   207,   208,   209,
     210,   211,    -1,   213,    -1,   215,   216,   217,   218,   219,
     220,   221,   222,    -1,   224,    -1,   226,    -1,    -1,   229,
      -1,   231,   232,   233,    -1,   235,   236,   237,    -1,    -1,
     240,    -1,   242,    -1,    -1,   245,    -1,    -1,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,    -1,   279,
     280,   281,   282,   283,   284,    -1,   286,   287,    -1,   289,
      -1,   291,   292,   293,   294,   295,   296,    -1,   298,   299,
      -1,    -1,   302,   303,   304,    -1,    -1,   307,   308,   309,
      -1,   311,   312,    -1,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,    -1,    -1,
      -1,    -1,   332,   333,   334,    -1,   336,   337,   338,    -1,
     340,   341,   342,    -1,   344,   345,   346,   347,   348,    -1,
     350,    -1,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,    -1,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,    -1,   377,   378,    -1,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,    -1,    -1,   399,
     400,   401,   402,   403,   404,   405,   406,   407,    -1,    -1,
     410,   411,   412,   413,    -1,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,    -1,    -1,   433,   434,    -1,   436,    -1,   438,    -1,
     440,   441,   442,   443,   444,    -1,   446,   447,   448,    -1,
      -1,   451,   452,   453,   454,   455,    -1,   457,   458,   459,
     460,   461,   462,   463,   464,    -1,    -1,   467,   468,   469,
      -1,    -1,   472,   473,   474,   475,    -1,   477,   478,   479,
     480,   481,   482,   483,   484,    -1,   486,    -1,   488,   489,
     490,   491,   492,   493,   494,    -1,    -1,   497,    -1,    -1,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   518,   519,
     520,    -1,    -1,    -1,   524,   525,   526,    -1,   528,   529,
     530,   531,   532,   533,     8,    -1,    -1,    11,    -1,    -1,
      -1,    15,    16,    17,    18,    -1,    20,    21,    22,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,
      -1,    -1,    11,    37,    -1,    -1,    15,    16,    17,    18,
      -1,    20,    21,    22,    48,    -1,    -1,    -1,    -1,    -1,
      -1,    55,    -1,    -1,     8,    -1,    -1,    11,    37,    -1,
      -1,    15,    16,    17,    18,    -1,    20,    21,    22,    48,
      -1,    -1,    -1,    -1,    -1,    -1,    55,    -1,    82,    -1,
      -1,    -1,    -1,    37,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    48,    -1,    -1,     8,    -1,    -1,
      11,    55,    -1,    82,    15,    16,    17,    18,    -1,    20,
      21,    22,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     8,    -1,    -1,    11,    37,    -1,    82,    15,
      16,    17,    18,    -1,    20,    21,    22,    48,    -1,    -1,
      -1,    -1,    -1,    -1,    55,    -1,    -1,     8,    -1,    -1,
      11,    37,    -1,    -1,    15,    16,    17,    18,    -1,    20,
      21,    22,    48,    -1,    -1,    -1,    -1,    -1,    -1,    55,
      -1,    82,    -1,    -1,    -1,    -1,    37,   181,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    48,    -1,    -1,
      -1,    -1,    -1,    -1,    55,   199,    82,    -1,    -1,    -1,
     204,    -1,   181,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     199,    82,    -1,   227,   228,   204,    -1,   181,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   243,
      -1,    -1,    -1,    -1,    -1,   199,    -1,    -1,   227,   228,
     204,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   243,    -1,    -1,    -1,    -1,    -1,
     181,    -1,    -1,   227,   228,    -1,    -1,    -1,    -1,    -1,
      -1,   285,    -1,    -1,   288,    -1,    -1,    -1,   199,   243,
      -1,    -1,    -1,   204,    -1,   181,    -1,    -1,   302,    -1,
      -1,   305,    -1,    -1,    -1,    -1,   285,    -1,    -1,   288,
      -1,    -1,    -1,   199,    -1,    -1,   227,   228,   204,    -1,
     181,    -1,    -1,   302,    -1,    -1,   305,    -1,    -1,    -1,
      -1,   285,   243,    -1,   288,    -1,    -1,    -1,   199,    -1,
      -1,   227,   228,   204,    -1,    -1,    -1,    -1,   302,    -1,
      -1,   305,    -1,    -1,    -1,    -1,    -1,   243,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   227,   228,    -1,    -1,
      -1,    -1,    -1,    -1,   285,    -1,    -1,   288,    -1,    -1,
      -1,    -1,   243,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   302,    -1,    -1,   305,    -1,    -1,    -1,    -1,   285,
      -1,    -1,   288,    -1,    -1,   409,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   302,    -1,    -1,   305,
      -1,    -1,    -1,    -1,   285,    -1,    -1,   288,    -1,    -1,
     409,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   302,    -1,    -1,   305,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   409,    -1,    -1,    -1,     8,
      -1,    -1,    11,    -1,    -1,    -1,    15,    16,    17,    18,
      -1,    20,    21,    22,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   409,    48,
      -1,    -1,    -1,    -1,    -1,    -1,    55,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   521,    -1,    -1,
     524,   525,   526,   409,   528,   529,   530,   531,   532,   533,
      -1,    -1,    -1,    82,   538,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   521,    -1,    -1,   524,   525,   526,   409,   528,
     529,   530,   531,   532,   533,    -1,    -1,    -1,    -1,   538,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   521,    -1,    -1,
     524,   525,   526,    -1,   528,   529,   530,   531,   532,   533,
      -1,    -1,    -1,    -1,   538,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     521,    -1,    -1,   524,   525,   526,    -1,   528,   529,   530,
     531,   532,   533,    -1,    -1,    -1,    -1,   538,    -1,    -1,
      -1,    -1,   181,    -1,    -1,   521,    -1,    -1,   524,   525,
     526,    -1,   528,   529,   530,   531,   532,   533,    -1,    -1,
     199,    -1,   538,    -1,    -1,   204,    -1,    -1,    -1,    -1,
     521,    -1,    -1,   524,   525,   526,    -1,   528,   529,   530,
     531,   532,   533,     8,    -1,    -1,    11,   538,   227,   228,
      15,    16,    17,    18,    -1,    20,    21,    22,    -1,    -1,
      -1,    -1,    -1,    -1,   243,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    37,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    48,     8,    -1,    -1,    11,    -1,    -1,
      55,    15,    16,    17,    18,    -1,    20,    21,    22,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   285,    -1,    -1,   288,
      -1,    -1,    -1,    37,    -1,    -1,    -1,    82,    -1,    -1,
      -1,    -1,    -1,   302,    48,    -1,   305,    -1,    -1,    -1,
      -1,    55,    -1,     3,    -1,     5,     8,    -1,    -1,    11,
      -1,    -1,    -1,    15,    16,    17,    18,    -1,    20,    21,
      22,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    82,    -1,
      -1,    -1,    -1,    -1,    -1,    37,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    48,    -1,    -1,    -1,
      -1,    -1,    -1,    55,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      70,    71,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      82,    -1,    -1,    -1,    -1,    -1,   181,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     409,    -1,    -1,    -1,   199,    -1,    -1,    -1,    -1,   204,
      -1,   111,   112,    -1,    -1,   115,   116,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   181,    -1,    -1,
      -1,    -1,   227,   228,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   199,    -1,    -1,   243,    -1,
     204,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   227,   228,    -1,    -1,    -1,    -1,   181,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   243,
     285,    -1,    -1,   288,   194,   195,    -1,   199,    -1,    -1,
      -1,    -1,   204,    -1,    -1,    -1,    -1,   302,    -1,    -1,
     305,    -1,   521,    -1,    -1,   524,   525,   526,    -1,   528,
     529,   530,   531,   532,   533,   227,   228,   536,    -1,    -1,
      -1,   285,    -1,    -1,   288,    -1,    -1,    -1,    -1,    -1,
      -1,   243,    -1,    -1,    -1,    -1,    -1,    -1,   302,    -1,
      -1,   305,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   261,   262,   263,   264,   265,   266,   267,   268,    -1,
      -1,    -1,   272,   273,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   285,    -1,    -1,   288,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     302,    -1,    -1,   305,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   409,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   352,   353,    -1,   409,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   393,   394,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   409,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   521,    -1,    -1,   524,
     525,   526,    -1,   528,   529,   530,   531,   532,   533,    -1,
      -1,   536,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   521,    -1,    -1,
     524,   525,   526,    -1,   528,   529,   530,   531,   532,   533,
      -1,    -1,   536,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   493,   494,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     3,    -1,   517,   518,   521,
      -1,    -1,   524,   525,   526,    -1,   528,   529,   530,   531,
     532,   533,    -1,    -1,   536,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
     128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
     138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,   166,   167,
     168,   169,   170,   171,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,   519,   520,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   530,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    23,    24,    25,    26,    27,    28,    29,
      30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    45,    46,    -1,    -1,    49,
      50,    -1,    52,    53,    54,    55,    56,    -1,    58,    59,
      -1,    61,    62,    63,    64,    65,    66,    -1,    -1,    69,
      70,    71,    72,    73,    74,    75,    -1,    77,    78,    79,
      80,    81,    -1,    -1,    -1,    85,    86,    87,    88,    89,
      90,    -1,    92,    93,    94,    -1,    96,    97,    98,    99,
     100,   101,    -1,    -1,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
     120,    -1,   122,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,    -1,    -1,   136,   137,   138,   139,
     140,   141,    -1,   143,   144,   145,    -1,   147,   148,   149,
      -1,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,    -1,   164,    -1,    -1,   167,   168,   169,
     170,    -1,   172,    -1,   174,    -1,    -1,    -1,   178,   179,
     180,    -1,   182,    -1,   184,   185,    -1,   187,   188,   189,
     190,    -1,   192,   193,   194,   195,   196,   197,   198,    -1,
     200,   201,   202,   203,    -1,   205,   206,   207,   208,   209,
     210,   211,    -1,   213,    -1,   215,   216,   217,   218,   219,
     220,   221,   222,    -1,   224,    -1,   226,    -1,    -1,   229,
      -1,   231,   232,   233,    -1,   235,   236,   237,    -1,    -1,
     240,    -1,   242,    -1,    -1,   245,    -1,    -1,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,    -1,   279,
     280,   281,   282,   283,   284,    -1,   286,   287,    -1,   289,
      -1,   291,   292,   293,   294,   295,   296,    -1,   298,   299,
      -1,    -1,   302,   303,   304,    -1,    -1,   307,   308,   309,
      -1,   311,   312,    -1,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,    -1,    -1,
      -1,    -1,   332,   333,   334,    -1,   336,   337,   338,    -1,
     340,   341,   342,    -1,   344,   345,   346,   347,   348,    -1,
     350,    -1,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,    -1,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,    -1,   377,   378,    -1,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,    -1,    -1,   399,
     400,   401,   402,   403,   404,   405,   406,   407,    -1,    -1,
     410,   411,   412,   413,    -1,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,    -1,    -1,   433,   434,    -1,   436,    -1,   438,    -1,
     440,   441,   442,   443,   444,    -1,   446,   447,   448,    -1,
      -1,   451,   452,   453,   454,   455,    -1,   457,   458,   459,
     460,   461,   462,   463,   464,    -1,    -1,   467,   468,   469,
      -1,    -1,   472,   473,   474,   475,    -1,   477,   478,   479,
     480,   481,   482,   483,   484,    -1,   486,    -1,   488,   489,
     490,   491,   492,   493,   494,    -1,    -1,   497,    -1,    -1,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   518,   519,
     520,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     530,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    45,    46,    -1,    -1,    49,    50,    -1,
      52,    53,    54,    55,    56,    -1,    58,    59,    -1,    61,
      62,    63,    64,    65,    66,    -1,    -1,    69,    70,    71,
      72,    73,    74,    75,    -1,    77,    78,    79,    80,    81,
      -1,    -1,    -1,    85,    86,    87,    88,    89,    90,    -1,
      92,    93,    94,    -1,    96,    97,    98,    99,   100,   101,
      -1,    -1,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,   120,    -1,
     122,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,    -1,    -1,   136,   137,   138,   139,   140,   141,
      -1,   143,   144,   145,    -1,   147,   148,   149,    -1,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,    -1,   164,    -1,    -1,   167,   168,   169,   170,    -1,
     172,    -1,   174,    -1,    -1,    -1,   178,   179,   180,    -1,
     182,    -1,   184,   185,    -1,   187,   188,   189,   190,    -1,
     192,   193,   194,   195,   196,   197,   198,    -1,   200,   201,
     202,   203,    -1,   205,   206,   207,   208,   209,   210,   211,
      -1,   213,    -1,   215,   216,   217,   218,   219,   220,   221,
     222,    -1,   224,    -1,   226,    -1,    -1,   229,    -1,   231,
     232,   233,    -1,   235,   236,   237,    -1,    -1,   240,    -1,
     242,    -1,    -1,   245,    -1,    -1,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,    -1,   279,   280,   281,
     282,   283,   284,    -1,   286,   287,    -1,   289,    -1,   291,
     292,   293,   294,   295,   296,    -1,   298,   299,    -1,    -1,
     302,   303,   304,    -1,    -1,   307,   308,   309,    -1,   311,
     312,    -1,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,    -1,    -1,    -1,    -1,
     332,   333,   334,    -1,   336,   337,   338,    -1,   340,   341,
     342,    -1,   344,   345,   346,   347,   348,    -1,   350,    -1,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
      -1,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,    -1,   377,   378,    -1,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,    -1,    -1,   399,   400,   401,
     402,   403,   404,   405,   406,   407,    -1,    -1,   410,   411,
     412,   413,    -1,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,    -1,
      -1,   433,   434,    -1,   436,    -1,   438,    -1,   440,   441,
     442,   443,   444,    -1,   446,   447,   448,    -1,    -1,   451,
     452,   453,   454,   455,    -1,   457,   458,   459,   460,   461,
     462,   463,   464,    -1,    -1,   467,   468,   469,    -1,    -1,
     472,   473,   474,   475,    -1,   477,   478,   479,   480,   481,
     482,   483,   484,    -1,   486,    -1,   488,   489,   490,   491,
     492,   493,   494,    -1,    -1,   497,    -1,    -1,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520,     3,
       4,     5,    -1,    -1,    -1,     9,    -1,    -1,   530,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    33,
      34,    -1,    -1,    -1,    38,    -1,    -1,    -1,    -1,    -1,
      44,    45,    46,    -1,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    -1,    61,    62,    63,
      64,    65,    66,    -1,    -1,    69,    70,    71,    72,    73,
      74,    75,    -1,    77,    78,    79,    80,    81,    -1,    83,
      -1,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    97,    98,    99,   100,   101,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,   120,    -1,   122,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
      -1,    -1,   136,   137,   138,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,    -1,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,    -1,    -1,   167,   168,   169,   170,    -1,   172,    -1,
     174,   175,    -1,   177,   178,   179,   180,   181,   182,    -1,
     184,   185,    -1,   187,   188,   189,   190,    -1,   192,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
      -1,   205,   206,   207,   208,   209,   210,   211,    -1,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,    -1,
     224,    -1,   226,   227,   228,   229,   230,   231,   232,   233,
      -1,   235,   236,   237,    -1,    -1,   240,   241,   242,   243,
      -1,   245,    -1,    -1,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,    -1,   286,   287,   288,   289,    -1,   291,   292,   293,
     294,   295,   296,    -1,   298,   299,   300,    -1,   302,   303,
     304,    -1,    -1,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,    -1,    -1,    -1,    -1,   332,   333,
     334,   335,   336,   337,   338,    -1,   340,   341,   342,    -1,
     344,   345,   346,   347,   348,    -1,   350,    -1,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,    -1,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,    -1,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,    -1,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,    -1,   409,   410,   411,   412,   413,
      -1,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,    -1,    -1,   433,
     434,    -1,   436,   437,   438,    -1,   440,   441,   442,   443,
     444,    -1,   446,   447,   448,    -1,    -1,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,    -1,    -1,   467,   468,   469,   470,    -1,   472,   473,
     474,   475,    -1,   477,   478,   479,   480,   481,   482,   483,
     484,    -1,   486,   487,   488,   489,   490,   491,   492,   493,
     494,    -1,    -1,   497,    -1,    -1,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   518,   519,   520,    -1,    -1,     8,
      -1,    -1,    11,    -1,   528,   529,    15,    16,    17,    18,
      -1,    20,    21,    22,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,    -1,
      -1,    -1,    -1,    -1,    43,     8,    -1,    -1,    11,    48,
      -1,    -1,    15,    16,    17,    18,    55,    20,    21,    22,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    37,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    82,    -1,    48,    -1,    -1,     8,    -1,
      -1,    11,    55,    -1,    -1,    15,    16,    17,    18,    -1,
      20,    21,    22,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,    -1,    82,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    48,   128,
      -1,    -1,    -1,    -1,    -1,    55,     8,    -1,    -1,    11,
      -1,    -1,    -1,    15,    16,    17,    18,    -1,    20,    21,
      22,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    82,    -1,    -1,    37,    -1,    -1,    -1,    -1,
      42,    -1,    -1,    -1,    -1,    -1,    48,    -1,    -1,    -1,
      -1,    -1,   181,    55,    -1,     8,    -1,    -1,    11,    -1,
      -1,    -1,    15,    16,    17,    18,    -1,    20,    21,    22,
     199,    -1,    -1,    -1,    -1,   204,    -1,    -1,   171,    -1,
      82,    -1,    -1,   176,    37,    -1,    -1,    -1,   181,    -1,
      -1,    -1,    -1,    -1,    -1,    48,    -1,    -1,   227,   228,
      -1,    -1,    55,    -1,    -1,    -1,   199,    -1,    -1,    -1,
      -1,   204,    -1,    -1,   243,    -1,    -1,    -1,    -1,    -1,
     170,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    82,
      -1,   181,    -1,    -1,   227,   228,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   199,
     243,    -1,    -1,    -1,   204,    -1,   285,    -1,    -1,   288,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   302,    -1,    -1,   305,   227,   228,   181,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   285,   243,    -1,   288,    -1,   199,    -1,    -1,
      -1,    -1,   204,    -1,    -1,    -1,    -1,    -1,    -1,   302,
      -1,    -1,   305,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   227,   228,    -1,   181,    -1,
      -1,    -1,    -1,    -1,    -1,   285,    -1,    -1,   288,    -1,
      -1,   243,    -1,    -1,    -1,    -1,   199,    -1,    -1,    -1,
      -1,   204,   302,    -1,    -1,   305,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   227,   228,    -1,    -1,    -1,    -1,
     409,    -1,    -1,   285,    -1,    -1,   288,   337,    -1,    -1,
     243,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     302,    -1,    -1,   305,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     8,    -1,   409,    11,    -1,    -1,
      -1,    15,    16,    17,    18,    -1,    20,    21,    22,    -1,
      -1,    -1,   285,    -1,    -1,   288,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    37,    -1,    -1,    -1,   476,    42,   302,
      -1,    -1,   305,    -1,    48,    -1,    -1,    -1,    -1,   409,
      -1,    55,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   331,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    82,    -1,
      -1,    -1,   521,    -1,    -1,   524,   525,   526,    -1,   528,
     529,   530,   531,   532,   533,    -1,    -1,   409,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   521,    -1,
      -1,   524,   525,   526,    -1,   528,   529,   530,   531,   532,
     533,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   409,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   521,    -1,    -1,   524,   525,   526,    -1,   528,   529,
     530,   531,   532,   533,    -1,     8,    -1,   181,    11,    -1,
      -1,    -1,    15,    16,    17,    18,    -1,    20,    21,    22,
      -1,    -1,    -1,    -1,    -1,   199,    -1,    -1,    -1,    -1,
     204,    -1,    -1,    -1,    37,    -1,    -1,    -1,    -1,   521,
      -1,    -1,   524,   525,   526,    48,   528,   529,   530,   531,
     532,   533,    55,   227,   228,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   243,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    82,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   521,    -1,
      -1,   524,   525,   526,    -1,   528,   529,   530,   531,   532,
     533,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       8,   285,    -1,    11,   288,    -1,    -1,    15,    16,    17,
      18,    -1,    20,    21,    22,    -1,    -1,    -1,   302,    -1,
      -1,   305,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,
      -1,    -1,    -1,    -1,    42,    -1,     8,    -1,    -1,    11,
      48,    -1,    -1,    15,    16,    17,    18,    55,    20,    21,
      22,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   176,    -1,    37,    -1,    -1,   181,    -1,
      -1,    -1,    -1,    -1,    82,    -1,    48,    -1,    -1,    -1,
      -1,    -1,    -1,    55,    -1,    -1,   199,     8,    -1,    -1,
      11,   204,    -1,    -1,    15,    16,    17,    18,    19,    20,
      21,    22,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      82,    -1,    -1,    -1,   227,   228,    37,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   409,    -1,    48,    -1,    -1,
     243,    -1,    -1,    -1,    55,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,    17,
      18,    82,    20,    21,    22,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   285,   181,    -1,   288,    -1,    -1,    -1,    37,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   302,
      48,   199,   305,    -1,    -1,    -1,   204,    55,    -1,   171,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   181,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   227,
     228,    -1,    -1,    -1,    82,    -1,    -1,   199,    -1,    -1,
      -1,    -1,   204,    -1,    -1,   243,    -1,   521,    -1,    -1,
     524,   525,   526,    -1,   528,   529,   530,   531,   532,   533,
      -1,    -1,    -1,    -1,    -1,   227,   228,    -1,    -1,    -1,
     181,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   243,    -1,    -1,    -1,    -1,    -1,   285,   199,    -1,
     288,    -1,    -1,   204,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   302,    -1,   409,   305,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   227,   228,    -1,    -1,
      -1,    -1,     8,   285,    -1,    11,   288,    -1,    -1,    15,
      16,    -1,   243,   181,    20,    21,    22,    -1,    -1,    -1,
     302,    -1,    -1,   305,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   199,    -1,    -1,    -1,    -1,   204,    -1,    -1,    -1,
      -1,    -1,    48,    -1,    -1,    -1,    -1,    -1,    -1,    55,
      -1,    -1,    -1,    -1,   285,    -1,    -1,   288,    -1,   227,
     228,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   302,    -1,    -1,   305,   243,    82,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   409,    -1,    -1,    -1,    -1,    -1,    -1,   521,    -1,
      -1,   524,   525,   526,    -1,   528,   529,   530,   531,   532,
     533,    -1,    -1,    -1,    -1,    -1,     8,   285,    -1,    11,
     288,    -1,    -1,    15,    16,    17,    18,   409,    20,    21,
      22,    -1,    -1,    -1,   302,    -1,    -1,   305,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    37,    -1,    -1,    -1,    -1,
      42,    -1,     8,    -1,    -1,    11,    48,    -1,    -1,    15,
      16,    17,    18,    55,    20,    21,    22,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   181,    -1,    -1,   409,    -1,
      -1,    37,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      82,    -1,    48,   199,    -1,    -1,    -1,    -1,   204,    55,
      -1,    -1,    -1,   521,    -1,    -1,   524,   525,   526,    -1,
     528,   529,   530,   531,   532,   533,    -1,    -1,    -1,    -1,
      -1,   227,   228,    -1,    -1,    -1,    82,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   243,    -1,   521,
      -1,   409,   524,   525,   526,    -1,   528,   529,   530,   531,
     532,   533,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   445,    -1,   285,
      -1,    -1,   288,    -1,    -1,    -1,    -1,    -1,    -1,   181,
     521,    -1,    -1,   524,   525,   526,   302,   528,   529,   530,
     531,   532,   533,    -1,    -1,    -1,    -1,   199,    -1,    -1,
      -1,    -1,   204,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   181,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   227,   228,    -1,    -1,    -1,
      -1,    -1,    -1,   199,    -1,    -1,    -1,    -1,   204,    -1,
      -1,   243,    -1,   521,    -1,    -1,   524,   525,   526,    -1,
     528,   529,   530,   531,   532,   533,    -1,    -1,    -1,    -1,
      -1,   227,   228,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   243,    -1,    -1,
      -1,    -1,    -1,   285,    -1,    -1,   288,    -1,    -1,    -1,
      -1,    -1,    -1,   409,    -1,    -1,    -1,    -1,     8,    -1,
     302,    11,    -1,   305,    -1,    15,    16,    17,    18,    -1,
      20,    21,    22,    -1,    -1,    -1,    -1,    -1,    -1,   285,
      -1,    -1,   288,    -1,    -1,    -1,    -1,    37,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   302,    -1,    48,   305,
      -1,    -1,    -1,    -1,    -1,    55,    -1,    -1,    -1,    -1,
      -1,    -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,
      16,    17,    18,    -1,    20,    21,    22,    -1,    -1,    -1,
      -1,    -1,    82,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    37,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    48,    -1,    -1,    -1,    -1,    -1,    -1,    55,
      -1,    -1,    -1,    -1,    -1,   521,    -1,   409,   524,   525,
     526,    -1,   528,   529,   530,   531,   532,   533,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    82,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   409,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   181,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   199,
      -1,    -1,    -1,    -1,   204,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   227,   228,   521,
      -1,    -1,   524,   525,   526,   181,   528,   529,   530,   531,
     532,   533,    -1,   243,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   199,    -1,    -1,    -1,    -1,   204,    -1,
      -1,    -1,    -1,    -1,    -1,   521,    -1,    -1,   524,   525,
     526,    -1,   528,   529,   530,   531,   532,   533,    -1,    -1,
      -1,   227,   228,    -1,    -1,   285,    -1,    -1,   288,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   243,    -1,    -1,
      -1,    -1,   302,    -1,    -1,   305,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   285,
      -1,    -1,   288,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   302,    -1,    -1,   305,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   409,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   409,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   521,    -1,    -1,   524,   525,   526,    -1,   528,   529,
     530,   531,   532,   533,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,    -1,
       5,    -1,    -1,    -1,    -1,   521,    -1,    -1,   524,   525,
     526,    -1,   528,   529,   530,   531,   532,   533,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
     127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
     137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
     147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,   164,   165,   166,
     167,   168,   169,   170,   171,   172,   173,   174,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,   199,   200,   201,   202,   203,   204,   205,   206,
     207,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   518,   519,   520,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
     129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
     139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,   164,   165,   166,   167,   168,
     169,   170,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,   204,   205,   206,   207,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,   518,
     519,   520,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
     131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
     141,   142,   143,   144,   145,   146,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,   164,   165,   166,   167,   168,   169,   170,
     171,   172,   173,   174,   175,   176,   177,   178,   179,   180,
     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   204,   205,   206,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
     451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,   517,   518,   519,   520,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
     123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
     133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
     143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,   164,   165,   166,   167,   168,   169,   170,   171,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,   196,   197,   198,   199,   200,   201,   202,
     203,   204,   205,   206,   207,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   432,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,   518,   519,   520,     3,    -1,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    23,    24,
      25,    26,    27,    28,    29,    30,    -1,    32,    33,    34,
      -1,    -1,    -1,    38,    -1,    -1,    -1,    -1,    -1,    44,
      45,    46,    -1,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    -1,    61,    62,    63,    64,
      65,    66,    -1,    -1,    69,    70,    71,    72,    73,    74,
      75,    -1,    77,    78,    79,    80,    81,    -1,    83,    -1,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      -1,    96,    97,    98,    99,   100,   101,    -1,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,   120,    -1,   122,   123,   124,
     125,   126,   127,    -1,    -1,   130,   131,   132,   133,    -1,
      -1,   136,   137,   138,   139,   140,   141,    -1,   143,   144,
     145,    -1,   147,   148,   149,    -1,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
      -1,    -1,   167,   168,   169,   170,    -1,   172,    -1,   174,
     175,    -1,   177,   178,   179,   180,   181,   182,    -1,   184,
     185,    -1,   187,   188,   189,   190,    -1,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,    -1,
     205,   206,   207,   208,   209,   210,   211,    -1,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,    -1,   224,
      -1,   226,   227,   228,   229,   230,   231,   232,   233,    -1,
     235,   236,   237,    -1,    -1,   240,   241,   242,   243,    -1,
     245,    -1,    -1,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
      -1,   286,   287,   288,   289,    -1,   291,   292,   293,   294,
     295,   296,    -1,   298,   299,   300,    -1,   302,   303,   304,
      -1,    -1,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,    -1,    -1,    -1,    -1,   332,   333,   334,
     335,   336,   337,   338,    -1,   340,   341,   342,    -1,   344,
     345,   346,   347,   348,    -1,   350,    -1,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,    -1,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,    -1,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,    -1,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,    -1,   409,   410,   411,   412,   413,    -1,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,    -1,    -1,   433,   434,
      -1,   436,   437,   438,    -1,   440,   441,   442,   443,   444,
      -1,   446,   447,   448,    -1,    -1,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
      -1,    -1,   467,   468,   469,   470,    -1,   472,   473,   474,
     475,    -1,   477,   478,   479,   480,   481,   482,   483,   484,
      -1,   486,   487,   488,   489,   490,   491,   492,   493,   494,
      -1,    -1,   497,    -1,    -1,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    23,    24,    25,    26,
      27,    28,    29,    30,    -1,    32,    33,    34,    35,    36,
      -1,    38,    -1,    -1,    -1,    -1,    -1,    44,    45,    46,
      -1,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    -1,    61,    62,    63,    64,    65,    66,
      -1,    -1,    69,    70,    71,    72,    73,    74,    75,    -1,
      77,    78,    79,    80,    81,    -1,    83,    -1,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    -1,    96,
      97,    98,    99,   100,   101,    -1,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,   120,    -1,   122,   123,   124,   125,   126,
     127,    -1,    -1,   130,   131,   132,   133,    -1,    -1,   136,
     137,   138,   139,   140,   141,    -1,   143,   144,   145,    -1,
     147,   148,   149,    -1,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,    -1,   164,    -1,    -1,
     167,   168,   169,   170,    -1,   172,    -1,   174,   175,    -1,
     177,   178,   179,   180,   181,   182,    -1,   184,   185,    -1,
     187,   188,   189,   190,    -1,   192,   193,   194,   195,   196,
     197,   198,   199,   200,   201,   202,   203,    -1,   205,   206,
     207,   208,   209,   210,   211,    -1,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,    -1,   224,    -1,   226,
     227,   228,   229,   230,   231,   232,   233,    -1,   235,   236,
     237,    -1,    -1,   240,   241,   242,   243,    -1,   245,    -1,
      -1,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,    -1,   286,
     287,   288,   289,    -1,   291,   292,   293,   294,   295,   296,
      -1,   298,   299,    -1,    -1,   302,   303,   304,    -1,    -1,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,    -1,    -1,    -1,    -1,   332,   333,   334,   335,   336,
     337,   338,    -1,   340,   341,   342,    -1,   344,   345,   346,
     347,   348,    -1,   350,    -1,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,    -1,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,    -1,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
      -1,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,    -1,   409,   410,   411,   412,   413,    -1,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,    -1,    -1,   433,   434,    -1,   436,
     437,   438,    -1,   440,   441,   442,   443,   444,    -1,   446,
     447,   448,    -1,    -1,   451,   452,   453,   454,   455,    -1,
     457,   458,   459,   460,   461,   462,   463,   464,    -1,    -1,
     467,   468,   469,   470,    -1,   472,   473,   474,   475,    -1,
     477,   478,   479,   480,   481,   482,   483,   484,    -1,   486,
     487,   488,   489,   490,   491,   492,   493,   494,    -1,    -1,
     497,    -1,    -1,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   518,   519,   520,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    23,    24,    25,    26,    27,    28,
      29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    44,    45,    46,    -1,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    -1,    61,    62,    63,    64,    65,    66,    -1,    68,
      69,    70,    71,    72,    73,    74,    75,    -1,    77,    78,
      79,    80,    81,    -1,    83,    -1,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    -1,    96,    97,    98,
      99,   100,   101,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
      -1,   120,    -1,   122,   123,   124,   125,   126,   127,    -1,
      -1,   130,   131,   132,   133,    -1,    -1,   136,   137,   138,
     139,   140,   141,    -1,   143,   144,   145,    -1,   147,   148,
     149,    -1,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,    -1,   164,    -1,    -1,   167,   168,
     169,   170,    -1,   172,    -1,   174,   175,    -1,   177,   178,
     179,   180,   181,   182,    -1,   184,   185,    -1,   187,   188,
     189,   190,    -1,   192,   193,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,    -1,   213,   214,   215,   216,   217,   218,
     219,   220,   221,   222,    -1,   224,    -1,   226,   227,   228,
     229,   230,   231,   232,   233,    -1,   235,   236,   237,    -1,
      -1,   240,   241,   242,   243,    -1,   245,    -1,    -1,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,    -1,   286,   287,   288,
     289,    -1,   291,   292,   293,   294,   295,   296,    -1,   298,
     299,    -1,    -1,   302,   303,   304,    -1,    -1,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,    -1,
      -1,    -1,    -1,   332,   333,   334,   335,   336,   337,   338,
      -1,   340,   341,   342,    -1,   344,   345,   346,   347,   348,
      -1,   350,    -1,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,    -1,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,    -1,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,    -1,    -1,
     399,   400,   401,   402,   403,   404,   405,   406,   407,    -1,
     409,   410,   411,   412,   413,    -1,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,    -1,    -1,   433,   434,    -1,   436,   437,   438,
      -1,   440,   441,   442,   443,   444,    -1,   446,   447,   448,
      -1,    -1,   451,   452,   453,   454,   455,    -1,   457,   458,
     459,   460,   461,   462,   463,   464,    -1,    -1,   467,   468,
     469,    -1,    -1,   472,   473,   474,   475,    -1,   477,   478,
     479,   480,   481,   482,   483,   484,    -1,   486,   487,   488,
     489,   490,   491,   492,   493,   494,    -1,    -1,   497,    -1,
      -1,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,   518,
     519,   520,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    23,    24,    25,    26,    27,    28,    29,    30,
      -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    44,    45,    46,    -1,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    -1,
      61,    62,    63,    64,    65,    66,    -1,    -1,    69,    70,
      71,    72,    73,    74,    75,    -1,    77,    78,    79,    80,
      81,    -1,    83,    -1,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    -1,    96,    97,    98,    99,   100,
     101,    -1,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
      -1,   122,   123,   124,   125,   126,   127,    -1,    -1,   130,
     131,   132,   133,    -1,    -1,   136,   137,   138,   139,   140,
     141,    -1,   143,   144,   145,    -1,   147,   148,   149,    -1,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,    -1,   164,    -1,    -1,   167,   168,   169,   170,
      -1,   172,    -1,   174,   175,    -1,   177,   178,   179,   180,
     181,   182,    -1,   184,   185,    -1,   187,   188,   189,   190,
      -1,   192,   193,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,    -1,   205,   206,   207,   208,   209,   210,
     211,    -1,   213,   214,   215,   216,   217,   218,   219,   220,
     221,   222,    -1,   224,    -1,   226,   227,   228,   229,   230,
     231,   232,   233,    -1,   235,   236,   237,    -1,    -1,   240,
     241,   242,   243,    -1,   245,    -1,    -1,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,    -1,   286,   287,   288,   289,    -1,
     291,   292,   293,   294,   295,   296,    -1,   298,   299,    -1,
      -1,   302,   303,   304,    -1,    -1,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,    -1,    -1,    -1,
      -1,   332,   333,   334,   335,   336,   337,   338,    -1,   340,
     341,   342,    -1,   344,   345,   346,   347,   348,    -1,   350,
      -1,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,    -1,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,    -1,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,    -1,    -1,   399,   400,
     401,   402,   403,   404,   405,   406,   407,    -1,   409,   410,
     411,   412,   413,    -1,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
      -1,    -1,   433,   434,    -1,   436,   437,   438,    -1,   440,
     441,   442,   443,   444,    -1,   446,   447,   448,    -1,    -1,
     451,   452,   453,   454,   455,    -1,   457,   458,   459,   460,
     461,   462,   463,   464,    -1,    -1,   467,   468,   469,    -1,
      -1,   472,   473,   474,   475,    -1,   477,   478,   479,   480,
     481,   482,   483,   484,    -1,   486,   487,   488,   489,   490,
     491,   492,   493,   494,    -1,    -1,   497,    -1,    -1,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,   517,   518,   519,   520,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      23,    24,    25,    26,    27,    28,    29,    30,    -1,    32,
      33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    45,    46,    -1,    -1,    49,    50,    -1,    52,
      53,    54,    55,    56,    -1,    58,    59,    -1,    61,    62,
      63,    64,    65,    66,    -1,    -1,    69,    70,    71,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    -1,
      -1,    84,    85,    86,    87,    88,    89,    90,    -1,    92,
      93,    94,    95,    96,    97,    98,    99,   100,   101,    -1,
      -1,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,   120,    -1,   122,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,    -1,    -1,   136,   137,   138,   139,   140,   141,    -1,
     143,   144,   145,    -1,   147,   148,   149,    -1,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
      -1,   164,    -1,    -1,   167,   168,   169,   170,    -1,   172,
     173,   174,    -1,    -1,    -1,   178,   179,   180,    -1,   182,
      -1,   184,   185,    -1,   187,   188,   189,   190,    -1,   192,
     193,   194,   195,   196,   197,   198,    -1,   200,   201,   202,
     203,    -1,   205,   206,   207,   208,   209,   210,   211,    -1,
     213,    -1,   215,   216,   217,   218,   219,   220,   221,   222,
      -1,   224,    -1,   226,    -1,    -1,   229,    -1,   231,   232,
     233,    -1,   235,   236,   237,    -1,    -1,   240,    -1,   242,
      -1,    -1,   245,    -1,    -1,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,    -1,   279,   280,   281,   282,
     283,   284,    -1,   286,   287,    -1,   289,    -1,   291,   292,
     293,   294,   295,   296,    -1,   298,   299,    -1,    -1,   302,
     303,   304,    -1,    -1,   307,   308,   309,    -1,   311,   312,
      -1,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,    -1,    -1,    -1,    -1,   332,
     333,   334,    -1,   336,   337,   338,    -1,   340,   341,   342,
     343,   344,   345,   346,   347,   348,    -1,   350,    -1,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,    -1,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,    -1,   377,   378,    -1,   380,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,    -1,    -1,   399,   400,   401,   402,
     403,   404,   405,   406,   407,    -1,    -1,   410,   411,   412,
     413,    -1,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,    -1,    -1,
     433,   434,    -1,   436,    -1,   438,    -1,   440,   441,   442,
     443,   444,    -1,   446,   447,   448,    -1,    -1,   451,   452,
     453,   454,   455,    -1,   457,   458,   459,   460,   461,   462,
     463,   464,    -1,   466,   467,   468,   469,    -1,    -1,   472,
     473,   474,   475,    -1,   477,   478,   479,   480,   481,   482,
     483,   484,    -1,   486,    -1,   488,   489,   490,   491,   492,
     493,   494,    -1,    -1,   497,    -1,    -1,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,   518,   519,   520,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    23,    24,
      25,    26,    27,    28,    29,    30,    -1,    32,    33,    34,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      45,    46,    -1,    -1,    49,    50,    -1,    52,    53,    54,
      55,    56,    -1,    58,    59,    -1,    61,    62,    63,    64,
      65,    66,    -1,    -1,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    -1,    -1,    -1,
      85,    86,    87,    88,    89,    90,    -1,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,    -1,    -1,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,   120,    -1,   122,   123,   124,
     125,   126,   127,    -1,    -1,   130,   131,   132,   133,    -1,
      -1,   136,   137,   138,   139,   140,   141,    -1,   143,   144,
     145,    -1,   147,   148,   149,    -1,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,    -1,   164,
      -1,    -1,   167,   168,   169,   170,    -1,   172,   173,   174,
      -1,    -1,    -1,   178,   179,   180,    -1,   182,    -1,   184,
     185,    -1,   187,   188,   189,   190,    -1,   192,   193,   194,
     195,   196,   197,   198,    -1,   200,   201,   202,   203,    -1,
     205,   206,   207,   208,   209,   210,   211,    -1,   213,    -1,
     215,   216,   217,   218,   219,   220,   221,   222,    -1,   224,
      -1,   226,    -1,    -1,   229,    -1,   231,   232,   233,    -1,
     235,   236,   237,    -1,    -1,   240,    -1,   242,   243,    -1,
     245,    -1,    -1,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,    -1,   279,   280,   281,   282,   283,   284,
      -1,   286,   287,    -1,   289,    -1,   291,   292,   293,   294,
     295,   296,    -1,   298,   299,    -1,    -1,   302,   303,   304,
      -1,    -1,   307,   308,   309,    -1,   311,   312,    -1,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,    -1,    -1,    -1,    -1,   332,   333,   334,
      -1,   336,   337,   338,    -1,   340,   341,   342,   343,   344,
     345,   346,   347,   348,    -1,   350,    -1,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,    -1,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,    -1,   377,   378,    -1,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,    -1,    -1,   399,   400,   401,   402,   403,   404,
     405,   406,   407,    -1,    -1,   410,   411,   412,   413,    -1,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,    -1,    -1,   433,   434,
      -1,   436,    -1,   438,    -1,   440,   441,   442,   443,   444,
      -1,   446,   447,   448,    -1,    -1,   451,   452,   453,   454,
     455,    -1,   457,   458,   459,   460,   461,   462,   463,   464,
      -1,   466,   467,   468,   469,    -1,    -1,   472,   473,   474,
     475,    -1,   477,   478,   479,   480,   481,   482,   483,   484,
      -1,   486,    -1,   488,   489,   490,   491,   492,   493,   494,
      -1,    -1,   497,    -1,    -1,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,     3,    -1,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    23,    24,    25,    26,
      27,    28,    29,    30,    -1,    32,    33,    34,    35,    36,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    45,    46,
      -1,    -1,    49,    50,    -1,    52,    53,    54,    55,    56,
      -1,    58,    59,    -1,    61,    62,    63,    64,    65,    66,
      -1,    -1,    69,    70,    71,    72,    73,    74,    75,    -1,
      77,    78,    79,    80,    81,    -1,    -1,    -1,    85,    86,
      87,    88,    89,    90,    -1,    92,    93,    94,    -1,    96,
      97,    98,    99,   100,   101,    -1,    -1,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,   120,    -1,   122,   123,   124,   125,   126,
     127,    -1,    -1,   130,   131,   132,   133,    -1,    -1,   136,
     137,   138,   139,   140,   141,    -1,   143,   144,   145,    -1,
     147,   148,   149,    -1,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,    -1,   164,    -1,    -1,
     167,   168,   169,   170,    -1,   172,    -1,   174,    -1,    -1,
      -1,   178,   179,   180,    -1,   182,    -1,   184,   185,    -1,
     187,   188,   189,   190,    -1,   192,   193,   194,   195,   196,
     197,   198,    -1,   200,   201,   202,   203,    -1,   205,   206,
     207,   208,   209,   210,   211,    -1,   213,    -1,   215,   216,
     217,   218,   219,   220,   221,   222,    -1,   224,    -1,   226,
      -1,    -1,   229,    -1,   231,   232,   233,    -1,   235,   236,
     237,    -1,    -1,   240,    -1,   242,    -1,    -1,   245,    -1,
      -1,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,    -1,   279,   280,   281,   282,   283,   284,    -1,   286,
     287,    -1,   289,    -1,   291,   292,   293,   294,   295,   296,
      -1,   298,   299,    -1,    -1,   302,   303,   304,    -1,    -1,
     307,   308,   309,    -1,   311,   312,    -1,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,    -1,    -1,    -1,    -1,   332,   333,   334,    -1,   336,
     337,   338,    -1,   340,   341,   342,    -1,   344,   345,   346,
     347,   348,    -1,   350,    -1,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,    -1,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,    -1,
     377,   378,    -1,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
      -1,    -1,   399,   400,   401,   402,   403,   404,   405,   406,
     407,    -1,    -1,   410,   411,   412,   413,    -1,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,    -1,    -1,   433,   434,    -1,   436,
      -1,   438,    -1,   440,   441,   442,   443,   444,    -1,   446,
     447,   448,    -1,    -1,   451,   452,   453,   454,   455,    -1,
     457,   458,   459,   460,   461,   462,   463,   464,    -1,    -1,
     467,   468,   469,    -1,    -1,   472,   473,   474,   475,    -1,
     477,   478,   479,   480,   481,   482,   483,   484,    -1,   486,
      -1,   488,   489,   490,   491,   492,   493,   494,    -1,    -1,
     497,    -1,    -1,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   518,   519,   520,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    23,    24,    25,    26,    27,    28,
      29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,    38,
      -1,    -1,    -1,    42,    -1,    44,    45,    46,    -1,    48,
      49,    50,    51,    52,    53,    54,    -1,    56,    57,    58,
      59,    -1,    61,    62,    63,    64,    65,    66,    -1,    -1,
      69,    70,    71,    72,    73,    74,    75,    -1,    77,    78,
      79,    80,    -1,    -1,    83,    -1,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    -1,    96,    97,    98,
      99,   100,   101,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
      -1,   120,    -1,   122,   123,   124,   125,   126,   127,    -1,
      -1,   130,   131,   132,   133,    -1,    -1,   136,   137,   138,
     139,   140,   141,    -1,   143,   144,   145,    -1,   147,   148,
     149,    -1,   151,   152,   153,   154,    -1,   156,   157,   158,
     159,   160,   161,    -1,    -1,   164,    -1,    -1,   167,   168,
     169,   170,    -1,   172,    -1,   174,   175,    -1,   177,   178,
     179,   180,   181,   182,    -1,   184,   185,    -1,    -1,    -1,
     189,   190,    -1,   192,   193,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,    -1,   213,   214,    -1,   216,   217,   218,
     219,   220,   221,   222,    -1,   224,    -1,   226,   227,   228,
     229,   230,   231,   232,   233,    -1,   235,   236,   237,    -1,
      -1,   240,   241,   242,   243,    -1,   245,    -1,    -1,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,    -1,    -1,   286,   287,   288,
     289,    -1,    -1,   292,   293,   294,   295,   296,    -1,   298,
     299,    -1,    -1,   302,   303,   304,    -1,    -1,   307,   308,
      -1,   310,   311,   312,   313,    -1,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,    -1,
      -1,    -1,    -1,   332,   333,    -1,   335,   336,   337,    -1,
      -1,   340,   341,   342,    -1,   344,   345,   346,   347,   348,
      -1,   350,    -1,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,    -1,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,    -1,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,    -1,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,    -1,
     409,   410,   411,   412,   413,    -1,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,    -1,    -1,    -1,   433,   434,    -1,   436,   437,   438,
      -1,   440,   441,   442,   443,   444,    -1,   446,   447,   448,
      -1,    -1,   451,   452,    -1,   454,    -1,    -1,   457,   458,
     459,   460,   461,   462,   463,   464,   465,    -1,   467,   468,
     469,   470,    -1,   472,   473,   474,   475,    -1,   477,   478,
     479,   480,   481,    -1,   483,   484,    -1,   486,   487,   488,
     489,   490,   491,   492,   493,   494,    -1,    -1,   497,    -1,
      -1,   500,   501,   502,   503,   504,   505,     3,    -1,     5,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   517,   518,
     519,   520,    -1,    -1,    -1,    -1,    -1,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    45,
      46,    -1,    -1,    49,    50,    -1,    52,    53,    54,    55,
      56,    -1,    58,    59,    -1,    61,    62,    63,    64,    65,
      66,    -1,    -1,    69,    70,    71,    72,    73,    74,    75,
      -1,    77,    78,    79,    80,    81,    -1,    -1,    -1,    85,
      86,    87,    88,    89,    90,    -1,    92,    93,    94,    -1,
      96,    97,    98,    99,   100,   101,    -1,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,   120,    -1,   122,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,    -1,    -1,
     136,   137,   138,   139,   140,   141,    -1,   143,   144,   145,
      -1,   147,   148,   149,    -1,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,    -1,   164,    -1,
      -1,   167,   168,   169,   170,    -1,   172,    -1,   174,    -1,
      -1,    -1,   178,   179,   180,    -1,   182,    -1,   184,   185,
      -1,   187,   188,   189,   190,    -1,   192,   193,   194,   195,
     196,   197,   198,    -1,   200,   201,   202,   203,    -1,   205,
     206,   207,   208,   209,   210,   211,    -1,   213,    -1,   215,
     216,   217,   218,   219,   220,   221,   222,    -1,   224,    -1,
     226,    -1,    -1,   229,    -1,   231,   232,   233,    -1,   235,
     236,   237,    -1,    -1,   240,    -1,   242,    -1,    -1,   245,
      -1,    -1,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,    -1,   279,   280,   281,   282,   283,   284,    -1,
     286,   287,    -1,   289,    -1,   291,   292,   293,   294,   295,
     296,    -1,   298,   299,    -1,    -1,   302,   303,   304,    -1,
      -1,   307,   308,   309,    -1,   311,   312,    -1,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,    -1,    -1,    -1,    -1,   332,   333,   334,    -1,
     336,   337,   338,    -1,   340,   341,   342,    -1,   344,   345,
     346,   347,   348,    -1,   350,    -1,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,    -1,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
      -1,   377,   378,    -1,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,    -1,    -1,   399,   400,   401,   402,   403,   404,   405,
     406,   407,    -1,    -1,   410,   411,   412,   413,    -1,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,    -1,    -1,   433,   434,    -1,
     436,    -1,   438,    -1,   440,   441,   442,   443,   444,    -1,
     446,   447,   448,    -1,    -1,   451,   452,   453,   454,   455,
      -1,   457,   458,   459,   460,   461,   462,   463,   464,    -1,
      -1,   467,   468,   469,    -1,    -1,   472,   473,   474,   475,
      -1,   477,   478,   479,   480,   481,   482,   483,   484,    -1,
     486,    -1,   488,   489,   490,   491,   492,   493,   494,    -1,
      -1,   497,    -1,    -1,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   518,   519,   520,     3,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    23,    24,    25,    26,    27,
      28,    29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    45,    46,    -1,
      -1,    49,    50,    -1,    52,    53,    54,    55,    56,    -1,
      58,    59,    -1,    61,    62,    63,    64,    65,    66,    -1,
      -1,    69,    70,    71,    72,    73,    74,    75,    -1,    77,
      78,    79,    80,    81,    -1,    -1,    -1,    85,    86,    87,
      88,    89,    90,    -1,    92,    93,    94,    -1,    96,    97,
      98,    99,   100,   101,    -1,    -1,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,   120,    -1,   122,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,    -1,    -1,   136,   137,
     138,   139,   140,   141,    -1,   143,   144,   145,    -1,   147,
     148,   149,    -1,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,    -1,   164,    -1,    -1,   167,
     168,   169,   170,    -1,   172,    -1,   174,    -1,    -1,    -1,
     178,   179,   180,    -1,   182,    -1,   184,   185,    -1,   187,
     188,   189,   190,    -1,   192,   193,   194,   195,   196,   197,
     198,    -1,   200,   201,   202,   203,    -1,   205,   206,   207,
     208,   209,   210,   211,    -1,   213,    -1,   215,   216,   217,
     218,   219,   220,   221,   222,    -1,   224,    -1,   226,    -1,
      -1,   229,    -1,   231,   232,   233,    -1,   235,   236,   237,
      -1,    -1,   240,    -1,   242,    -1,    -1,   245,    -1,    -1,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
      -1,   279,   280,   281,   282,   283,   284,    -1,   286,   287,
      -1,   289,    -1,   291,   292,   293,   294,   295,   296,    -1,
     298,   299,    -1,   301,   302,   303,   304,    -1,    -1,   307,
     308,   309,    -1,   311,   312,    -1,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
      -1,    -1,    -1,    -1,   332,   333,   334,    -1,   336,   337,
     338,    -1,   340,   341,   342,    -1,   344,   345,   346,   347,
     348,    -1,   350,    -1,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,    -1,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,    -1,   377,
     378,    -1,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,    -1,
      -1,   399,   400,   401,   402,   403,   404,   405,   406,   407,
      -1,    -1,   410,   411,   412,   413,    -1,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,    -1,    -1,   433,   434,    -1,   436,    -1,
     438,    -1,   440,   441,   442,   443,   444,    -1,   446,   447,
     448,    -1,    -1,   451,   452,   453,   454,   455,    -1,   457,
     458,   459,   460,   461,   462,   463,   464,    -1,    -1,   467,
     468,   469,    -1,    -1,   472,   473,   474,   475,    -1,   477,
     478,   479,   480,   481,   482,   483,   484,    -1,   486,    -1,
     488,   489,   490,   491,   492,   493,   494,    -1,    -1,   497,
      -1,    -1,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,   519,   520,     3,    -1,     5,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    23,    24,    25,    26,    27,    28,    29,
      30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    45,    46,    -1,    -1,    49,
      50,    -1,    52,    53,    54,    55,    56,    -1,    58,    59,
      -1,    61,    62,    63,    64,    65,    66,    -1,    -1,    69,
      70,    71,    72,    73,    74,    75,    -1,    77,    78,    79,
      80,    81,    -1,    -1,    -1,    85,    86,    87,    88,    89,
      90,    -1,    92,    93,    94,    -1,    96,    97,    98,    99,
     100,   101,    -1,    -1,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
     120,    -1,   122,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,    -1,    -1,   136,   137,   138,   139,
     140,   141,    -1,   143,   144,   145,    -1,   147,   148,   149,
      -1,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,    -1,   164,    -1,    -1,   167,   168,   169,
     170,    -1,   172,    -1,   174,    -1,    -1,    -1,   178,   179,
     180,    -1,   182,    -1,   184,   185,    -1,   187,   188,   189,
     190,    -1,   192,   193,   194,   195,   196,   197,   198,    -1,
     200,   201,   202,   203,    -1,   205,   206,   207,   208,   209,
     210,   211,    -1,   213,    -1,   215,   216,   217,   218,   219,
     220,   221,   222,    -1,   224,    -1,   226,    -1,    -1,   229,
      -1,   231,   232,   233,    -1,   235,   236,   237,    -1,    -1,
     240,    -1,   242,    -1,    -1,   245,    -1,    -1,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,    -1,   279,
     280,   281,   282,   283,   284,    -1,   286,   287,    -1,   289,
      -1,   291,   292,   293,   294,   295,   296,    -1,   298,   299,
      -1,   301,   302,   303,   304,    -1,    -1,   307,   308,   309,
      -1,   311,   312,    -1,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,    -1,    -1,
      -1,    -1,   332,   333,   334,    -1,   336,   337,   338,    -1,
     340,   341,   342,    -1,   344,   345,   346,   347,   348,    -1,
     350,    -1,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,    -1,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,    -1,   377,   378,    -1,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,    -1,    -1,   399,
     400,   401,   402,   403,   404,   405,   406,   407,    -1,    -1,
     410,   411,   412,   413,    -1,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,    -1,    -1,   433,   434,    -1,   436,    -1,   438,    -1,
     440,   441,   442,   443,   444,    -1,   446,   447,   448,    -1,
      -1,   451,   452,   453,   454,   455,    -1,   457,   458,   459,
     460,   461,   462,   463,   464,    -1,    -1,   467,   468,   469,
      -1,    -1,   472,   473,   474,   475,    -1,   477,   478,   479,
     480,   481,   482,   483,   484,    -1,   486,    -1,   488,   489,
     490,   491,   492,   493,   494,    -1,    -1,   497,    -1,    -1,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   518,   519,
     520,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    45,    46,    -1,    -1,    49,    50,    -1,
      52,    53,    54,    55,    56,    -1,    58,    59,    -1,    61,
      62,    63,    64,    65,    66,    -1,    -1,    69,    70,    71,
      72,    73,    74,    75,    -1,    77,    78,    79,    80,    81,
      -1,    -1,    -1,    85,    86,    87,    88,    89,    90,    -1,
      92,    93,    94,    -1,    96,    97,    98,    99,   100,   101,
      -1,    -1,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,   120,    -1,
     122,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,    -1,    -1,   136,   137,   138,   139,   140,   141,
      -1,   143,   144,   145,    -1,   147,   148,   149,    -1,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,    -1,   164,    -1,    -1,   167,   168,   169,   170,    -1,
     172,    -1,   174,    -1,    -1,    -1,   178,   179,   180,    -1,
     182,    -1,   184,   185,    -1,   187,   188,   189,   190,    -1,
     192,   193,   194,   195,   196,   197,   198,    -1,   200,   201,
     202,   203,    -1,   205,   206,   207,   208,   209,   210,   211,
      -1,   213,    -1,   215,   216,   217,   218,   219,   220,   221,
     222,    -1,   224,    -1,   226,    -1,    -1,   229,    -1,   231,
     232,   233,    -1,   235,   236,   237,    -1,    -1,   240,    -1,
     242,    -1,    -1,   245,    -1,    -1,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,    -1,   279,   280,   281,
     282,   283,   284,    -1,   286,   287,    -1,   289,    -1,   291,
     292,   293,   294,   295,   296,    -1,   298,   299,    -1,    -1,
     302,   303,   304,    -1,    -1,   307,   308,   309,    -1,   311,
     312,    -1,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,    -1,    -1,    -1,    -1,
     332,   333,   334,    -1,   336,   337,   338,    -1,   340,   341,
     342,    -1,   344,   345,   346,   347,   348,    -1,   350,    -1,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
      -1,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,    -1,   377,   378,    -1,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,    -1,    -1,   399,   400,   401,
     402,   403,   404,   405,   406,   407,    -1,    -1,   410,   411,
     412,   413,    -1,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,    -1,
      -1,   433,   434,    -1,   436,    -1,   438,    -1,   440,   441,
     442,   443,   444,    -1,   446,   447,   448,    -1,    -1,   451,
     452,   453,   454,   455,    -1,   457,   458,   459,   460,   461,
     462,   463,   464,    -1,    -1,   467,   468,   469,    -1,    -1,
     472,   473,   474,   475,    -1,   477,   478,   479,   480,   481,
     482,   483,   484,    -1,   486,    -1,   488,   489,   490,   491,
     492,   493,   494,    -1,    -1,   497,    -1,    -1,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    33,
      34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    45,    46,    -1,    -1,    49,    50,    -1,    52,    53,
      54,    55,    56,    -1,    58,    59,    -1,    61,    62,    63,
      64,    65,    66,    -1,    -1,    69,    70,    71,    72,    73,
      74,    75,    -1,    77,    78,    79,    80,    81,    -1,    -1,
      -1,    85,    86,    87,    88,    89,    90,    -1,    92,    93,
      94,    -1,    96,    97,    98,    99,   100,   101,    -1,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,   120,    -1,   122,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
      -1,    -1,   136,   137,   138,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,    -1,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,    -1,
     164,    -1,    -1,   167,   168,   169,   170,    -1,   172,    -1,
     174,    -1,    -1,    -1,   178,   179,   180,    -1,   182,    -1,
     184,   185,    -1,   187,   188,   189,   190,    -1,   192,   193,
     194,   195,   196,   197,   198,    -1,   200,   201,   202,   203,
      -1,   205,   206,   207,   208,   209,   210,   211,    -1,   213,
      -1,   215,   216,   217,   218,   219,   220,   221,   222,    -1,
     224,    -1,   226,    -1,    -1,   229,    -1,   231,   232,   233,
      -1,   235,   236,   237,    -1,    -1,   240,    -1,   242,    -1,
      -1,   245,    -1,    -1,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,    -1,   279,   280,   281,   282,   283,
     284,    -1,   286,   287,    -1,   289,    -1,   291,   292,   293,
     294,   295,   296,    -1,   298,   299,    -1,   301,   302,   303,
     304,    -1,    -1,   307,   308,   309,    -1,   311,   312,    -1,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,    -1,    -1,    -1,    -1,   332,   333,
     334,    -1,   336,   337,   338,    -1,   340,   341,   342,    -1,
     344,   345,   346,   347,   348,    -1,   350,    -1,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,    -1,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,    -1,   377,   378,    -1,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,    -1,    -1,   399,   400,   401,   402,   403,
     404,   405,   406,   407,    -1,    -1,   410,   411,   412,   413,
      -1,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,    -1,    -1,   433,
     434,    -1,   436,    -1,   438,    -1,   440,   441,   442,   443,
     444,    -1,   446,   447,   448,    -1,    -1,   451,   452,   453,
     454,   455,    -1,   457,   458,   459,   460,   461,   462,   463,
     464,    -1,    -1,   467,   468,   469,    -1,    -1,   472,   473,
     474,   475,    -1,   477,   478,   479,   480,   481,   482,   483,
     484,    -1,   486,    -1,   488,   489,   490,   491,   492,   493,
     494,    -1,    -1,   497,    -1,    -1,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   518,   519,   520,     3,    -1,     5,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    23,    24,    25,
      26,    27,    28,    29,    30,    -1,    32,    33,    34,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    45,
      46,    -1,    -1,    49,    50,    -1,    52,    53,    54,    55,
      56,    -1,    58,    59,    -1,    61,    62,    63,    64,    65,
      66,    -1,    -1,    69,    70,    71,    72,    73,    74,    75,
      -1,    77,    78,    79,    80,    81,    -1,    -1,    -1,    85,
      86,    87,    88,    89,    90,    -1,    92,    93,    94,    -1,
      96,    97,    98,    99,   100,   101,    -1,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,   120,    -1,   122,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,    -1,    -1,
     136,   137,   138,   139,   140,   141,    -1,   143,   144,   145,
      -1,   147,   148,   149,    -1,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,    -1,   164,    -1,
      -1,   167,   168,   169,   170,    -1,   172,    -1,   174,    -1,
      -1,    -1,   178,   179,   180,    -1,   182,    -1,   184,   185,
      -1,   187,   188,   189,   190,    -1,   192,   193,   194,   195,
     196,   197,   198,    -1,   200,   201,   202,   203,    -1,   205,
     206,   207,   208,   209,   210,   211,    -1,   213,    -1,   215,
     216,   217,   218,   219,   220,   221,   222,    -1,   224,    -1,
     226,    -1,    -1,   229,    -1,   231,   232,   233,    -1,   235,
     236,   237,    -1,    -1,   240,    -1,   242,    -1,    -1,   245,
      -1,    -1,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,    -1,   279,   280,   281,   282,   283,   284,    -1,
     286,   287,    -1,   289,    -1,   291,   292,   293,   294,   295,
     296,    -1,   298,   299,    -1,    -1,   302,   303,   304,    -1,
      -1,   307,   308,   309,    -1,   311,   312,    -1,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,    -1,    -1,    -1,    -1,   332,   333,   334,    -1,
     336,   337,   338,    -1,   340,   341,   342,    -1,   344,   345,
     346,   347,   348,    -1,   350,    -1,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,    -1,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
      -1,   377,   378,    -1,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,    -1,    -1,   399,   400,   401,   402,   403,   404,   405,
     406,   407,    -1,    -1,   410,   411,   412,   413,    -1,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,    -1,    -1,   433,   434,   435,
     436,    -1,   438,    -1,   440,   441,   442,   443,   444,    -1,
     446,   447,   448,    -1,    -1,   451,   452,   453,   454,   455,
      -1,   457,   458,   459,   460,   461,   462,   463,   464,    -1,
      -1,   467,   468,   469,    -1,    -1,   472,   473,   474,   475,
      -1,   477,   478,   479,   480,   481,   482,   483,   484,    -1,
     486,    -1,   488,   489,   490,   491,   492,   493,   494,    -1,
      -1,   497,    -1,    -1,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   518,   519,   520,     3,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    23,    24,    25,    26,    27,
      28,    29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    45,    46,    -1,
      -1,    49,    50,    -1,    52,    53,    54,    55,    56,    -1,
      58,    59,    -1,    61,    62,    63,    64,    65,    66,    -1,
      -1,    69,    70,    71,    72,    73,    74,    75,    -1,    77,
      78,    79,    80,    81,    -1,    -1,    -1,    85,    86,    87,
      88,    89,    90,    -1,    92,    93,    94,    -1,    96,    97,
      98,    99,   100,   101,    -1,    -1,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,   120,    -1,   122,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,    -1,    -1,   136,   137,
     138,   139,   140,   141,    -1,   143,   144,   145,    -1,   147,
     148,   149,    -1,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,    -1,   164,    -1,    -1,   167,
     168,   169,   170,    -1,   172,    -1,   174,    -1,    -1,    -1,
     178,   179,   180,    -1,   182,    -1,   184,   185,    -1,   187,
     188,   189,   190,    -1,   192,   193,   194,   195,   196,   197,
     198,    -1,   200,   201,   202,   203,    -1,   205,   206,   207,
     208,   209,   210,   211,    -1,   213,    -1,   215,   216,   217,
     218,   219,   220,   221,   222,    -1,   224,    -1,   226,    -1,
      -1,   229,    -1,   231,   232,   233,    -1,   235,   236,   237,
      -1,    -1,   240,    -1,   242,    -1,    -1,   245,    -1,    -1,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
      -1,   279,   280,   281,   282,   283,   284,    -1,   286,   287,
      -1,   289,    -1,   291,   292,   293,   294,   295,   296,    -1,
     298,   299,    -1,    -1,   302,   303,   304,    -1,    -1,   307,
     308,   309,    -1,   311,   312,    -1,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
      -1,    -1,    -1,    -1,   332,   333,   334,    -1,   336,   337,
     338,    -1,   340,   341,   342,    -1,   344,   345,   346,   347,
     348,    -1,   350,    -1,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,    -1,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,    -1,   377,
     378,    -1,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,    -1,
      -1,   399,   400,   401,   402,   403,   404,   405,   406,   407,
      -1,    -1,   410,   411,   412,   413,    -1,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,    -1,    -1,   433,   434,    -1,   436,    -1,
     438,    -1,   440,   441,   442,   443,   444,    -1,   446,   447,
     448,    -1,    -1,   451,   452,   453,   454,   455,    -1,   457,
     458,   459,   460,   461,   462,   463,   464,    -1,    -1,   467,
     468,   469,    -1,    -1,   472,   473,   474,   475,    -1,   477,
     478,   479,   480,   481,   482,   483,   484,    -1,   486,    -1,
     488,   489,   490,   491,   492,   493,   494,    -1,    -1,   497,
      -1,    -1,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,   519,   520,     3,    -1,     5,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    23,    24,    25,    26,    27,    28,    29,
      30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    45,    46,    -1,    -1,    49,
      50,    -1,    52,    53,    54,    55,    56,    -1,    58,    59,
      -1,    61,    62,    63,    64,    65,    66,    -1,    -1,    69,
      70,    71,    72,    73,    74,    75,    -1,    77,    78,    79,
      80,    81,    -1,    -1,    -1,    85,    86,    87,    88,    89,
      90,    -1,    92,    93,    94,    -1,    96,    97,    98,    99,
     100,   101,    -1,    -1,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
     120,    -1,   122,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,    -1,    -1,   136,   137,   138,   139,
     140,   141,    -1,   143,   144,   145,    -1,   147,   148,   149,
      -1,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,    -1,   164,    -1,    -1,   167,   168,   169,
     170,    -1,   172,    -1,   174,    -1,    -1,    -1,   178,   179,
     180,    -1,   182,    -1,   184,   185,    -1,   187,   188,   189,
     190,    -1,   192,   193,   194,   195,   196,   197,   198,    -1,
     200,   201,   202,   203,    -1,   205,   206,   207,   208,   209,
     210,   211,    -1,   213,    -1,   215,   216,   217,   218,   219,
     220,   221,   222,    -1,   224,    -1,   226,    -1,    -1,   229,
      -1,   231,   232,   233,    -1,   235,   236,   237,    -1,    -1,
     240,    -1,   242,    -1,    -1,   245,    -1,    -1,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,    -1,   279,
     280,   281,   282,   283,   284,    -1,   286,   287,    -1,   289,
      -1,   291,   292,   293,   294,   295,   296,    -1,   298,   299,
      -1,    -1,   302,   303,   304,    -1,    -1,   307,   308,   309,
      -1,   311,   312,    -1,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,    -1,    -1,
      -1,    -1,   332,   333,   334,    -1,   336,   337,   338,    -1,
     340,   341,   342,    -1,   344,   345,   346,   347,   348,    -1,
     350,    -1,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,    -1,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,    -1,   377,   378,    -1,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,    -1,    -1,   399,
     400,   401,   402,   403,   404,   405,   406,   407,    -1,    -1,
     410,   411,   412,   413,    -1,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,    -1,    -1,   433,   434,    -1,   436,    -1,   438,    -1,
     440,   441,   442,   443,   444,    -1,   446,   447,   448,    -1,
      -1,   451,   452,   453,   454,   455,    -1,   457,   458,   459,
     460,   461,   462,   463,   464,    -1,    -1,   467,   468,   469,
      -1,    -1,   472,   473,   474,   475,    -1,   477,   478,   479,
     480,   481,   482,   483,   484,    -1,   486,    -1,   488,   489,
     490,   491,   492,   493,   494,    -1,    -1,   497,    -1,    -1,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   518,   519,
     520,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    45,    46,    -1,    -1,    49,    50,    -1,
      52,    53,    54,    55,    56,    -1,    58,    59,    -1,    61,
      62,    63,    64,    65,    66,    -1,    -1,    69,    70,    71,
      72,    73,    74,    75,    -1,    77,    78,    79,    80,    81,
      -1,    -1,    -1,    85,    86,    87,    88,    89,    90,    -1,
      92,    93,    94,    -1,    96,    97,    98,    99,   100,   101,
      -1,    -1,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,   120,    -1,
     122,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,    -1,    -1,   136,   137,   138,   139,   140,   141,
      -1,   143,   144,   145,    -1,   147,   148,   149,    -1,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,    -1,   164,    -1,    -1,   167,   168,   169,   170,    -1,
     172,    -1,   174,    -1,    -1,    -1,   178,   179,   180,    -1,
     182,    -1,   184,   185,    -1,   187,   188,   189,   190,    -1,
     192,   193,   194,   195,   196,   197,   198,    -1,   200,   201,
     202,   203,    -1,   205,   206,   207,   208,   209,   210,   211,
      -1,   213,    -1,   215,   216,   217,   218,   219,   220,   221,
     222,    -1,   224,    -1,   226,    -1,    -1,   229,    -1,   231,
     232,   233,    -1,   235,   236,   237,    -1,    -1,   240,    -1,
     242,    -1,    -1,   245,    -1,    -1,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,    -1,   279,   280,   281,
     282,   283,   284,    -1,   286,   287,    -1,   289,    -1,   291,
     292,   293,   294,   295,   296,    -1,   298,   299,    -1,    -1,
     302,   303,   304,    -1,    -1,   307,   308,   309,    -1,   311,
     312,    -1,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,    -1,    -1,    -1,    -1,
     332,   333,   334,    -1,   336,   337,   338,    -1,   340,   341,
     342,    -1,   344,   345,   346,   347,   348,    -1,   350,    -1,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
      -1,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,    -1,   377,   378,    -1,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,    -1,    -1,   399,   400,   401,
     402,   403,   404,   405,   406,   407,    -1,    -1,   410,   411,
     412,   413,    -1,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,    -1,
      -1,   433,   434,    -1,   436,    -1,   438,    -1,   440,   441,
     442,   443,   444,    -1,   446,   447,   448,    -1,    -1,   451,
     452,   453,   454,   455,    -1,   457,   458,   459,   460,   461,
     462,   463,   464,    -1,    -1,   467,   468,   469,    -1,    -1,
     472,   473,   474,   475,    -1,   477,   478,   479,   480,   481,
     482,   483,   484,    -1,   486,    -1,   488,   489,   490,   491,
     492,   493,   494,    -1,    -1,   497,    -1,    -1,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    33,
      34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    45,    46,    -1,    -1,    49,    50,    -1,    52,    53,
      54,    55,    56,    -1,    58,    59,    -1,    61,    62,    63,
      64,    65,    66,    -1,    -1,    69,    70,    71,    72,    73,
      74,    75,    -1,    77,    78,    79,    80,    81,    -1,    -1,
      -1,    85,    86,    87,    88,    89,    90,    -1,    92,    93,
      94,    -1,    96,    97,    98,    99,   100,   101,    -1,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,   120,    -1,   122,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
      -1,    -1,   136,   137,   138,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,    -1,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,    -1,
     164,    -1,    -1,   167,   168,   169,   170,    -1,   172,    -1,
     174,    -1,    -1,    -1,   178,   179,   180,    -1,   182,    -1,
     184,   185,    -1,   187,   188,   189,   190,    -1,   192,   193,
     194,   195,   196,   197,   198,    -1,   200,   201,   202,   203,
      -1,   205,   206,   207,   208,   209,   210,   211,    -1,   213,
      -1,   215,   216,   217,   218,   219,   220,   221,   222,    -1,
     224,    -1,   226,    -1,    -1,   229,    -1,   231,   232,   233,
      -1,   235,   236,   237,    -1,    -1,   240,    -1,   242,    -1,
      -1,   245,    -1,    -1,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,    -1,   279,   280,   281,   282,   283,
     284,    -1,   286,   287,    -1,   289,    -1,   291,   292,   293,
     294,   295,   296,    -1,   298,   299,    -1,    -1,   302,   303,
     304,    -1,    -1,   307,   308,   309,    -1,   311,   312,    -1,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,    -1,    -1,    -1,    -1,   332,   333,
     334,    -1,   336,   337,   338,    -1,   340,   341,   342,    -1,
     344,   345,   346,   347,   348,    -1,   350,    -1,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,    -1,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,    -1,   377,   378,    -1,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,    -1,    -1,   399,   400,   401,   402,   403,
     404,   405,   406,   407,    -1,    -1,   410,   411,   412,   413,
      -1,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,    -1,    -1,   433,
     434,    -1,   436,    -1,   438,    -1,   440,   441,   442,   443,
     444,    -1,   446,   447,   448,    -1,    -1,   451,   452,   453,
     454,   455,    -1,   457,   458,   459,   460,   461,   462,   463,
     464,    -1,    -1,   467,   468,   469,    -1,    -1,   472,   473,
     474,   475,    -1,   477,   478,   479,   480,   481,   482,   483,
     484,    -1,   486,    -1,   488,   489,   490,   491,   492,   493,
     494,    -1,    -1,   497,    -1,    -1,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   518,   519,   520,     3,    -1,     5,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    23,    24,    25,
      26,    27,    28,    29,    30,    -1,    32,    33,    34,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    45,
      46,    -1,    -1,    49,    50,    -1,    52,    53,    54,    55,
      56,    -1,    58,    59,    -1,    61,    62,    63,    64,    65,
      66,    -1,    -1,    69,    70,    71,    72,    73,    74,    75,
      -1,    77,    78,    79,    80,    81,    -1,    -1,    -1,    85,
      86,    87,    88,    89,    90,    -1,    92,    93,    94,    -1,
      96,    97,    98,    99,   100,   101,    -1,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,   120,    -1,   122,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,    -1,    -1,
     136,   137,   138,   139,   140,   141,    -1,   143,   144,   145,
      -1,   147,   148,   149,    -1,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,    -1,   164,    -1,
      -1,   167,   168,   169,   170,    -1,   172,    -1,   174,    -1,
      -1,    -1,   178,   179,   180,    -1,   182,    -1,   184,   185,
      -1,   187,   188,   189,   190,    -1,   192,   193,   194,   195,
     196,   197,   198,    -1,   200,   201,   202,   203,    -1,   205,
     206,   207,   208,   209,   210,   211,    -1,   213,    -1,   215,
     216,   217,   218,   219,   220,   221,   222,    -1,   224,    -1,
     226,    -1,    -1,   229,    -1,   231,   232,   233,    -1,   235,
     236,   237,    -1,    -1,   240,    -1,   242,    -1,    -1,   245,
      -1,    -1,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,    -1,   279,   280,   281,   282,   283,   284,    -1,
     286,   287,    -1,   289,    -1,   291,   292,   293,   294,   295,
     296,    -1,   298,   299,    -1,    -1,   302,   303,   304,    -1,
      -1,   307,   308,   309,    -1,   311,   312,    -1,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,    -1,    -1,    -1,    -1,   332,   333,   334,    -1,
     336,   337,   338,    -1,   340,   341,   342,    -1,   344,   345,
     346,   347,   348,    -1,   350,    -1,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,    -1,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
      -1,   377,   378,    -1,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,    -1,    -1,   399,   400,   401,   402,   403,   404,   405,
     406,   407,    -1,    -1,   410,   411,   412,   413,    -1,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,    -1,    -1,   433,   434,    -1,
     436,    -1,   438,    -1,   440,   441,   442,   443,   444,    -1,
     446,   447,   448,    -1,    -1,   451,   452,   453,   454,   455,
      -1,   457,   458,   459,   460,   461,   462,   463,   464,    -1,
      -1,   467,   468,   469,    -1,    -1,   472,   473,   474,   475,
      -1,   477,   478,   479,   480,   481,   482,   483,   484,    -1,
     486,    -1,   488,   489,   490,   491,   492,   493,   494,    -1,
      -1,   497,    -1,    -1,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   518,   519,   520,     3,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    23,    24,    25,    26,    27,
      28,    29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    45,    46,    -1,
      -1,    49,    50,    -1,    52,    53,    54,    55,    56,    -1,
      58,    59,    -1,    61,    62,    63,    64,    65,    66,    -1,
      -1,    69,    70,    71,    72,    73,    74,    75,    -1,    77,
      78,    79,    80,    81,    -1,    -1,    -1,    85,    86,    87,
      88,    89,    90,    -1,    92,    93,    94,    -1,    96,    97,
      98,    99,   100,   101,    -1,    -1,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,   120,    -1,   122,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,    -1,    -1,   136,   137,
     138,   139,   140,   141,    -1,   143,   144,   145,    -1,   147,
     148,   149,    -1,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,    -1,   164,    -1,    -1,   167,
     168,   169,   170,    -1,   172,    -1,   174,    -1,    -1,    -1,
     178,   179,   180,    -1,   182,    -1,   184,   185,    -1,   187,
     188,   189,   190,    -1,   192,   193,   194,   195,   196,   197,
     198,    -1,   200,   201,   202,   203,    -1,   205,   206,   207,
     208,   209,   210,   211,    -1,   213,    -1,   215,   216,   217,
     218,   219,   220,   221,   222,    -1,   224,    -1,   226,    -1,
      -1,   229,    -1,   231,   232,   233,    -1,   235,   236,   237,
      -1,    -1,   240,    -1,   242,    -1,    -1,   245,    -1,    -1,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
      -1,   279,   280,   281,   282,   283,   284,    -1,   286,   287,
      -1,   289,    -1,   291,   292,   293,   294,   295,   296,    -1,
     298,   299,    -1,    -1,   302,   303,   304,    -1,    -1,   307,
     308,   309,    -1,   311,   312,    -1,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
      -1,    -1,    -1,    -1,   332,   333,   334,    -1,   336,   337,
     338,    -1,   340,   341,   342,    -1,   344,   345,   346,   347,
     348,    -1,   350,    -1,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,    -1,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,    -1,   377,
     378,    -1,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,    -1,
      -1,   399,   400,   401,   402,   403,   404,   405,   406,   407,
      -1,    -1,   410,   411,   412,   413,    -1,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,    -1,    -1,   433,   434,    -1,   436,    -1,
     438,    -1,   440,   441,   442,   443,   444,    -1,   446,   447,
     448,    -1,    -1,   451,   452,   453,   454,   455,    -1,   457,
     458,   459,   460,   461,   462,   463,   464,    -1,    -1,   467,
     468,   469,    -1,    -1,   472,   473,   474,   475,    -1,   477,
     478,   479,   480,   481,   482,   483,   484,    -1,   486,    -1,
     488,   489,   490,   491,   492,   493,   494,    -1,    -1,   497,
      -1,    -1,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,   519,   520,     3,    -1,     5,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    23,    24,    25,    26,    27,    28,    29,
      30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    45,    46,    -1,    -1,    49,
      50,    -1,    52,    53,    54,    55,    56,    -1,    58,    59,
      -1,    61,    62,    63,    64,    65,    66,    -1,    -1,    69,
      70,    71,    72,    73,    74,    75,    -1,    77,    78,    79,
      80,    81,    -1,    -1,    -1,    85,    86,    87,    88,    89,
      90,    -1,    92,    93,    94,    -1,    96,    97,    98,    99,
     100,   101,    -1,    -1,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
     120,    -1,   122,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,    -1,    -1,   136,   137,   138,   139,
     140,   141,    -1,   143,   144,   145,    -1,   147,   148,   149,
      -1,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,    -1,   164,    -1,    -1,   167,   168,   169,
     170,    -1,   172,    -1,   174,    -1,    -1,    -1,   178,   179,
     180,    -1,   182,    -1,   184,   185,    -1,   187,   188,   189,
     190,    -1,   192,   193,   194,   195,   196,   197,   198,    -1,
     200,   201,   202,   203,    -1,   205,   206,   207,   208,   209,
     210,   211,    -1,   213,    -1,   215,   216,   217,   218,   219,
     220,   221,   222,    -1,   224,    -1,   226,    -1,    -1,   229,
      -1,   231,   232,   233,    -1,   235,   236,   237,    -1,    -1,
     240,    -1,   242,    -1,    -1,   245,    -1,    -1,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,    -1,   279,
     280,   281,   282,   283,   284,    -1,   286,   287,    -1,   289,
      -1,   291,   292,   293,   294,   295,   296,    -1,   298,   299,
      -1,    -1,   302,   303,   304,    -1,    -1,   307,   308,   309,
      -1,   311,   312,    -1,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,    -1,    -1,
      -1,    -1,   332,   333,   334,    -1,   336,   337,   338,    -1,
     340,   341,   342,    -1,   344,   345,   346,   347,   348,    -1,
     350,    -1,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,    -1,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,    -1,   377,   378,    -1,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,    -1,    -1,   399,
     400,   401,   402,   403,   404,   405,   406,   407,    -1,    -1,
     410,   411,   412,   413,    -1,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,    -1,    -1,   433,   434,    -1,   436,    -1,   438,    -1,
     440,   441,   442,   443,   444,    -1,   446,   447,   448,    -1,
      -1,   451,   452,   453,   454,   455,    -1,   457,   458,   459,
     460,   461,   462,   463,   464,    -1,    -1,   467,   468,   469,
      -1,    -1,   472,   473,   474,   475,    -1,   477,   478,   479,
     480,   481,   482,   483,   484,    -1,   486,    -1,   488,   489,
     490,   491,   492,   493,   494,    -1,    -1,   497,    -1,    -1,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   518,   519,
     520,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    45,    46,    -1,    -1,    49,    50,    -1,
      52,    53,    54,    55,    56,    -1,    58,    59,    -1,    61,
      62,    63,    64,    65,    66,    -1,    -1,    69,    70,    71,
      72,    73,    74,    75,    -1,    77,    78,    79,    80,    81,
      -1,    -1,    -1,    85,    86,    87,    88,    89,    90,    -1,
      92,    93,    94,    -1,    96,    97,    98,    99,   100,   101,
      -1,    -1,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,   120,    -1,
     122,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,    -1,    -1,   136,   137,   138,   139,   140,   141,
      -1,   143,   144,   145,    -1,   147,   148,   149,    -1,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,    -1,   164,    -1,    -1,   167,   168,   169,   170,    -1,
     172,    -1,   174,    -1,    -1,    -1,   178,   179,   180,    -1,
     182,    -1,   184,   185,    -1,   187,   188,   189,   190,    -1,
     192,   193,   194,   195,   196,   197,   198,    -1,   200,   201,
     202,   203,    -1,   205,   206,   207,   208,   209,   210,   211,
      -1,   213,    -1,   215,   216,   217,   218,   219,   220,   221,
     222,    -1,   224,    -1,   226,    -1,    -1,   229,    -1,   231,
     232,   233,    -1,   235,   236,   237,    -1,    -1,   240,    -1,
     242,    -1,    -1,   245,    -1,    -1,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,    -1,   279,   280,   281,
     282,   283,   284,    -1,   286,   287,    -1,   289,    -1,   291,
     292,   293,   294,   295,   296,    -1,   298,   299,    -1,    -1,
     302,   303,   304,    -1,    -1,   307,   308,   309,    -1,   311,
     312,    -1,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,    -1,    -1,    -1,    -1,
     332,   333,   334,    -1,   336,   337,   338,    -1,   340,   341,
     342,    -1,   344,   345,   346,   347,   348,    -1,   350,    -1,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
      -1,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,    -1,   377,   378,    -1,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,    -1,    -1,   399,   400,   401,
     402,   403,   404,   405,   406,   407,    -1,    -1,   410,   411,
     412,   413,    -1,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,    -1,
      -1,   433,   434,    -1,   436,    -1,   438,    -1,   440,   441,
     442,   443,   444,    -1,   446,   447,   448,    -1,    -1,   451,
     452,   453,   454,   455,    -1,   457,   458,   459,   460,   461,
     462,   463,   464,    -1,    -1,   467,   468,   469,    -1,    -1,
     472,   473,   474,   475,    -1,   477,   478,   479,   480,   481,
     482,   483,   484,    -1,   486,    -1,   488,   489,   490,   491,
     492,   493,   494,    -1,    -1,   497,    -1,    -1,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    33,
      34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    45,    46,    -1,    -1,    49,    50,    -1,    52,    53,
      54,    55,    56,    -1,    58,    59,    -1,    61,    62,    63,
      64,    65,    66,    -1,    -1,    69,    70,    71,    72,    73,
      74,    75,    -1,    77,    78,    79,    80,    81,    -1,    -1,
      -1,    85,    86,    87,    88,    89,    90,    -1,    92,    93,
      94,    -1,    96,    97,    98,    99,   100,   101,    -1,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,   120,    -1,   122,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
      -1,    -1,   136,   137,   138,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,    -1,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,    -1,
     164,    -1,    -1,   167,   168,   169,   170,    -1,   172,    -1,
     174,    -1,    -1,    -1,   178,   179,   180,    -1,   182,    -1,
     184,   185,    -1,   187,   188,   189,   190,    -1,   192,   193,
     194,   195,   196,   197,   198,    -1,   200,   201,   202,   203,
      -1,   205,   206,   207,   208,   209,   210,   211,    -1,   213,
      -1,   215,   216,   217,   218,   219,   220,   221,   222,    -1,
     224,    -1,   226,    -1,    -1,   229,    -1,   231,   232,   233,
      -1,   235,   236,   237,    -1,    -1,   240,    -1,   242,    -1,
      -1,   245,    -1,    -1,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,    -1,   279,   280,   281,   282,   283,
     284,    -1,   286,   287,    -1,   289,    -1,   291,   292,   293,
     294,   295,   296,    -1,   298,   299,    -1,    -1,   302,   303,
     304,    -1,    -1,   307,   308,   309,    -1,   311,   312,    -1,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,    -1,    -1,    -1,    -1,   332,   333,
     334,    -1,   336,   337,   338,    -1,   340,   341,   342,    -1,
     344,   345,   346,   347,   348,    -1,   350,    -1,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,    -1,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,    -1,   377,   378,    -1,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,    -1,    -1,   399,   400,   401,   402,   403,
     404,   405,   406,   407,    -1,    -1,   410,   411,   412,   413,
      -1,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,    -1,    -1,   433,
     434,    -1,   436,    -1,   438,    -1,   440,   441,   442,   443,
     444,    -1,   446,   447,   448,    -1,    -1,   451,   452,   453,
     454,   455,    -1,   457,   458,   459,   460,   461,   462,   463,
     464,    -1,    -1,   467,   468,   469,    -1,    -1,   472,   473,
     474,   475,    -1,   477,   478,   479,   480,   481,   482,   483,
     484,    -1,   486,    -1,   488,   489,   490,   491,   492,   493,
     494,    -1,    -1,   497,    -1,    -1,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   518,   519,   520,     3,    -1,     5,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    23,    24,    25,
      26,    27,    28,    29,    30,    -1,    32,    33,    34,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    45,
      46,    -1,    -1,    49,    50,    -1,    52,    53,    54,    55,
      56,    -1,    58,    59,    -1,    61,    62,    63,    64,    65,
      66,    -1,    -1,    69,    70,    71,    72,    73,    74,    75,
      -1,    77,    78,    79,    80,    81,    -1,    -1,    -1,    85,
      86,    87,    88,    89,    90,    -1,    92,    93,    94,    -1,
      96,    97,    98,    99,   100,   101,    -1,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,   120,    -1,   122,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,    -1,    -1,
     136,   137,   138,   139,   140,   141,    -1,   143,   144,   145,
      -1,   147,   148,   149,    -1,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,    -1,   164,    -1,
      -1,   167,   168,   169,   170,    -1,   172,    -1,   174,    -1,
      -1,    -1,   178,   179,   180,    -1,   182,    -1,   184,   185,
      -1,   187,   188,   189,   190,    -1,   192,   193,   194,   195,
     196,   197,   198,    -1,   200,   201,   202,   203,    -1,   205,
     206,   207,   208,   209,   210,   211,    -1,   213,    -1,   215,
     216,   217,   218,   219,   220,   221,   222,    -1,   224,    -1,
     226,    -1,    -1,   229,    -1,   231,   232,   233,    -1,   235,
     236,   237,    -1,    -1,   240,    -1,   242,    -1,    -1,   245,
      -1,    -1,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,    -1,   279,   280,   281,   282,   283,   284,    -1,
     286,   287,    -1,   289,    -1,   291,   292,   293,   294,   295,
     296,    -1,   298,   299,    -1,    -1,   302,   303,   304,    -1,
      -1,   307,   308,   309,    -1,   311,   312,    -1,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,    -1,    -1,    -1,    -1,   332,   333,   334,    -1,
     336,   337,   338,    -1,   340,   341,   342,    -1,   344,   345,
     346,   347,   348,    -1,   350,    -1,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,    -1,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
      -1,   377,   378,    -1,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,    -1,    -1,   399,   400,   401,   402,   403,   404,   405,
     406,   407,    -1,    -1,   410,   411,   412,   413,    -1,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,    -1,    -1,   433,   434,    -1,
     436,    -1,   438,    -1,   440,   441,   442,   443,   444,    -1,
     446,   447,   448,    -1,    -1,   451,   452,   453,   454,   455,
      -1,   457,   458,   459,   460,   461,   462,   463,   464,    -1,
      -1,   467,   468,   469,    -1,    -1,   472,   473,   474,   475,
      -1,   477,   478,   479,   480,   481,   482,   483,   484,    -1,
     486,    -1,   488,   489,   490,   491,   492,   493,   494,    -1,
      -1,   497,    -1,    -1,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   518,   519,   520,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    23,    24,    25,    26,    27,
      28,    29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    42,    -1,    -1,    45,    46,    -1,
      -1,    49,    50,    -1,    52,    53,    54,    55,    56,    -1,
      58,    59,    -1,    61,    62,    63,    64,    65,    66,    -1,
      -1,    69,    70,    71,    72,    73,    74,    75,    -1,    77,
      78,    79,    80,    81,    -1,    -1,    -1,    85,    86,    87,
      88,    89,    90,    -1,    92,    93,    94,    -1,    96,    97,
      98,    99,   100,   101,    -1,    -1,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,   120,    -1,   122,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,    -1,    -1,   136,   137,
     138,   139,   140,   141,    -1,   143,   144,   145,    -1,   147,
     148,   149,    -1,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,    -1,   164,    -1,    -1,   167,
     168,   169,   170,    -1,   172,    -1,   174,    -1,    -1,    -1,
     178,   179,   180,    -1,   182,    -1,   184,   185,    -1,   187,
     188,   189,   190,    -1,   192,   193,   194,   195,   196,   197,
     198,    -1,   200,   201,   202,   203,    -1,   205,   206,   207,
     208,   209,   210,   211,    -1,   213,    -1,   215,   216,   217,
     218,   219,   220,   221,   222,    -1,   224,    -1,   226,    -1,
      -1,   229,    -1,   231,   232,   233,    -1,   235,   236,   237,
      -1,    -1,   240,    -1,   242,    -1,    -1,   245,    -1,    -1,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
      -1,   279,   280,   281,   282,   283,   284,    -1,   286,   287,
      -1,   289,    -1,   291,   292,   293,   294,   295,   296,    -1,
     298,   299,    -1,    -1,   302,   303,   304,    -1,    -1,   307,
     308,   309,    -1,   311,   312,    -1,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
      -1,    -1,    -1,    -1,   332,   333,   334,    -1,   336,   337,
     338,    -1,   340,   341,   342,    -1,   344,   345,   346,   347,
     348,    -1,   350,    -1,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,    -1,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,    -1,   377,
     378,    -1,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,    -1,
      -1,   399,   400,   401,   402,   403,   404,   405,   406,   407,
      -1,    -1,   410,   411,   412,   413,    -1,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,    -1,    -1,   433,   434,    -1,   436,    -1,
     438,    -1,   440,   441,   442,   443,   444,    -1,   446,   447,
     448,    -1,    -1,   451,   452,   453,   454,   455,    -1,   457,
     458,   459,   460,   461,   462,   463,   464,    -1,    -1,   467,
     468,   469,    -1,    -1,   472,   473,   474,   475,    -1,   477,
     478,   479,   480,   481,   482,   483,   484,    -1,   486,    -1,
     488,   489,   490,   491,   492,   493,   494,    -1,    -1,   497,
      -1,    -1,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,   519,   520,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    23,    24,    25,    26,    27,    28,    29,
      30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    42,    -1,    -1,    45,    46,    -1,    -1,    49,
      50,    -1,    52,    53,    54,    55,    56,    -1,    58,    59,
      -1,    61,    62,    63,    64,    65,    66,    -1,    -1,    69,
      70,    71,    72,    73,    74,    75,    -1,    77,    78,    79,
      80,    81,    -1,    -1,    -1,    85,    86,    87,    88,    89,
      90,    -1,    92,    93,    94,    -1,    96,    97,    98,    99,
     100,   101,    -1,    -1,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
     120,    -1,   122,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,    -1,    -1,   136,   137,   138,   139,
     140,   141,    -1,   143,   144,   145,    -1,   147,   148,   149,
      -1,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,    -1,   164,    -1,    -1,   167,   168,   169,
     170,    -1,   172,    -1,   174,    -1,    -1,    -1,   178,   179,
     180,    -1,   182,    -1,   184,   185,    -1,   187,   188,   189,
     190,    -1,   192,   193,   194,   195,   196,   197,   198,    -1,
     200,   201,   202,   203,    -1,   205,   206,   207,   208,   209,
     210,   211,    -1,   213,    -1,   215,   216,   217,   218,   219,
     220,   221,   222,    -1,   224,    -1,   226,    -1,    -1,   229,
      -1,   231,   232,   233,    -1,   235,   236,   237,    -1,    -1,
     240,    -1,   242,    -1,    -1,   245,    -1,    -1,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,    -1,   279,
     280,   281,   282,   283,   284,    -1,   286,   287,    -1,   289,
      -1,   291,   292,   293,   294,   295,   296,    -1,   298,   299,
      -1,    -1,   302,   303,   304,    -1,    -1,   307,   308,   309,
      -1,   311,   312,    -1,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,    -1,    -1,
      -1,    -1,   332,   333,   334,    -1,   336,   337,   338,    -1,
     340,   341,   342,    -1,   344,   345,   346,   347,   348,    -1,
     350,    -1,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,    -1,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,    -1,   377,   378,    -1,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,    -1,    -1,   399,
     400,   401,   402,   403,   404,   405,   406,   407,    -1,    -1,
     410,   411,   412,   413,    -1,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,    -1,    -1,   433,   434,    -1,   436,    -1,   438,    -1,
     440,   441,   442,   443,   444,    -1,   446,   447,   448,    -1,
      -1,   451,   452,   453,   454,   455,    -1,   457,   458,   459,
     460,   461,   462,   463,   464,    -1,    -1,   467,   468,   469,
      -1,    -1,   472,   473,   474,   475,    -1,   477,   478,   479,
     480,   481,   482,   483,   484,    -1,   486,    -1,   488,   489,
     490,   491,   492,   493,   494,    -1,    -1,   497,    -1,    -1,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   518,   519,
     520,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    45,    46,    -1,    -1,    49,    50,    -1,
      52,    53,    54,    55,    56,    -1,    58,    59,    -1,    61,
      62,    63,    64,    65,    66,    -1,    -1,    69,    70,    71,
      72,    73,    74,    75,    -1,    77,    78,    79,    80,    81,
      -1,    -1,    -1,    85,    86,    87,    88,    89,    90,    -1,
      92,    93,    94,    -1,    96,    97,    98,    99,   100,   101,
      -1,    -1,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,   120,    -1,
     122,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,    -1,    -1,   136,   137,   138,   139,   140,   141,
      -1,   143,   144,   145,    -1,   147,   148,   149,    -1,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,    -1,   164,    -1,    -1,   167,   168,   169,   170,    -1,
     172,    -1,   174,    -1,    -1,    -1,   178,   179,   180,    -1,
     182,    -1,   184,   185,    -1,   187,   188,   189,   190,    -1,
     192,   193,   194,   195,   196,   197,   198,    -1,   200,   201,
     202,   203,    -1,   205,   206,   207,   208,   209,   210,   211,
      -1,   213,    -1,   215,   216,   217,   218,   219,   220,   221,
     222,    -1,   224,    -1,   226,    -1,    -1,   229,    -1,   231,
     232,   233,    -1,   235,   236,   237,    -1,    -1,   240,    -1,
     242,    -1,    -1,   245,    -1,    -1,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,    -1,   279,   280,   281,
     282,   283,   284,    -1,   286,   287,    -1,   289,    -1,   291,
     292,   293,   294,   295,   296,    -1,   298,   299,    -1,    -1,
     302,   303,   304,    -1,    -1,   307,   308,   309,    -1,   311,
     312,    -1,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,    -1,    -1,    -1,    -1,
     332,   333,   334,    -1,   336,   337,   338,    -1,   340,   341,
     342,    -1,   344,   345,   346,   347,   348,    -1,   350,    -1,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
      -1,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,    -1,   377,   378,    -1,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,    -1,    -1,   399,   400,   401,
     402,   403,   404,   405,   406,   407,    -1,    -1,   410,   411,
     412,   413,    -1,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,    -1,
      -1,   433,   434,    -1,   436,    -1,   438,    -1,   440,   441,
     442,   443,   444,    -1,   446,   447,   448,    -1,    -1,   451,
     452,   453,   454,   455,    -1,   457,   458,   459,   460,   461,
     462,   463,   464,    -1,    -1,   467,   468,   469,    -1,    -1,
     472,   473,   474,   475,    -1,   477,   478,   479,   480,   481,
     482,   483,   484,    -1,   486,    -1,   488,   489,   490,   491,
     492,   493,   494,    -1,    -1,   497,    -1,    -1,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    33,
      34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    45,    46,    -1,    -1,    49,    50,    -1,    52,    53,
      54,    55,    56,    -1,    58,    59,    -1,    61,    62,    63,
      64,    65,    66,    -1,    -1,    69,    70,    71,    72,    73,
      74,    75,    -1,    77,    78,    79,    80,    81,    -1,    -1,
      -1,    85,    86,    87,    88,    89,    90,    -1,    92,    93,
      94,    -1,    96,    97,    98,    99,   100,   101,    -1,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,   120,    -1,   122,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
      -1,    -1,   136,   137,   138,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,    -1,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,    -1,
     164,    -1,    -1,   167,   168,   169,   170,    -1,   172,    -1,
     174,    -1,    -1,    -1,   178,   179,   180,    -1,   182,    -1,
     184,   185,    -1,   187,   188,   189,   190,    -1,   192,   193,
     194,   195,   196,   197,   198,    -1,   200,   201,   202,   203,
      -1,   205,   206,   207,   208,   209,   210,   211,    -1,   213,
      -1,   215,   216,   217,   218,   219,   220,   221,   222,    -1,
     224,    -1,   226,    -1,    -1,   229,    -1,   231,   232,   233,
      -1,   235,   236,   237,    -1,    -1,   240,    -1,   242,    -1,
      -1,   245,    -1,    -1,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,    -1,   279,   280,   281,   282,   283,
     284,    -1,   286,   287,    -1,   289,    -1,   291,   292,   293,
     294,   295,   296,    -1,   298,   299,    -1,    -1,   302,   303,
     304,    -1,    -1,   307,   308,   309,    -1,   311,   312,    -1,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,    -1,    -1,    -1,    -1,   332,   333,
     334,    -1,   336,   337,   338,    -1,   340,   341,   342,    -1,
     344,   345,   346,   347,   348,    -1,   350,    -1,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,    -1,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,    -1,   377,   378,    -1,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,    -1,    -1,   399,   400,   401,   402,   403,
     404,   405,   406,   407,    -1,    -1,   410,   411,   412,   413,
      -1,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,    -1,    -1,   433,
     434,    -1,   436,    -1,   438,    -1,   440,   441,   442,   443,
     444,    -1,   446,   447,   448,    -1,    -1,   451,   452,   453,
     454,   455,    -1,   457,   458,   459,   460,   461,   462,   463,
     464,    -1,    -1,   467,   468,   469,    -1,    -1,   472,   473,
     474,   475,    -1,   477,   478,   479,   480,   481,   482,   483,
     484,    -1,   486,    -1,   488,   489,   490,   491,   492,   493,
     494,    -1,    -1,   497,    -1,    -1,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   518,   519,   520,     3,    -1,     5,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    23,    24,    25,
      26,    27,    28,    29,    30,    -1,    32,    33,    34,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    45,
      46,    -1,    -1,    49,    50,    -1,    52,    53,    54,    55,
      56,    -1,    58,    59,    -1,    61,    62,    63,    64,    65,
      66,    -1,    -1,    69,    70,    71,    72,    73,    74,    75,
      -1,    77,    78,    79,    80,    81,    -1,    -1,    -1,    85,
      86,    87,    88,    89,    90,    -1,    92,    93,    94,    -1,
      96,    97,    98,    99,   100,   101,    -1,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,   120,    -1,   122,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,    -1,    -1,
     136,   137,   138,   139,   140,   141,    -1,   143,   144,   145,
      -1,   147,   148,   149,    -1,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,    -1,   164,    -1,
      -1,   167,   168,   169,   170,    -1,   172,    -1,   174,    -1,
      -1,    -1,   178,   179,   180,    -1,   182,    -1,   184,   185,
      -1,   187,   188,   189,   190,    -1,   192,   193,   194,   195,
     196,   197,   198,    -1,   200,   201,   202,   203,    -1,   205,
     206,   207,   208,   209,   210,   211,    -1,   213,    -1,   215,
     216,   217,   218,   219,   220,   221,   222,    -1,   224,    -1,
     226,    -1,    -1,   229,    -1,   231,   232,   233,    -1,   235,
     236,   237,    -1,    -1,   240,    -1,   242,    -1,    -1,   245,
      -1,    -1,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,    -1,   279,   280,   281,   282,   283,   284,    -1,
     286,   287,    -1,   289,    -1,   291,   292,   293,   294,   295,
     296,    -1,   298,   299,    -1,    -1,   302,   303,   304,    -1,
      -1,   307,   308,   309,    -1,   311,   312,    -1,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,    -1,    -1,    -1,    -1,   332,   333,   334,    -1,
     336,   337,   338,    -1,   340,   341,   342,    -1,   344,   345,
     346,   347,   348,    -1,   350,    -1,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,    -1,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
      -1,   377,   378,    -1,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,    -1,    -1,   399,   400,   401,   402,   403,   404,   405,
     406,   407,    -1,    -1,   410,   411,   412,   413,    -1,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,    -1,    -1,   433,   434,    -1,
     436,    -1,   438,    -1,   440,   441,   442,   443,   444,    -1,
     446,   447,   448,    -1,    -1,   451,   452,   453,   454,   455,
      -1,   457,   458,   459,   460,   461,   462,   463,   464,    -1,
      -1,   467,   468,   469,    -1,    -1,   472,   473,   474,   475,
      -1,   477,   478,   479,   480,   481,   482,   483,   484,    -1,
     486,    -1,   488,   489,   490,   491,   492,   493,   494,    -1,
      -1,   497,    -1,    -1,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   518,   519,   520,     3,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    23,    24,    25,    26,    27,
      28,    29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    45,    46,    -1,
      -1,    49,    50,    -1,    52,    53,    54,    55,    56,    -1,
      58,    59,    -1,    61,    62,    63,    64,    65,    66,    -1,
      -1,    69,    70,    71,    72,    73,    74,    75,    -1,    77,
      78,    79,    80,    81,    -1,    -1,    -1,    85,    86,    87,
      88,    89,    90,    -1,    92,    93,    94,    -1,    96,    97,
      98,    99,   100,   101,    -1,    -1,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,   120,    -1,   122,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,    -1,    -1,   136,   137,
     138,   139,   140,   141,    -1,   143,   144,   145,    -1,   147,
     148,   149,    -1,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,    -1,   164,    -1,    -1,   167,
     168,   169,   170,    -1,   172,    -1,   174,    -1,    -1,    -1,
     178,   179,   180,    -1,   182,    -1,   184,   185,    -1,   187,
     188,   189,   190,    -1,   192,   193,   194,   195,   196,   197,
     198,    -1,   200,   201,   202,   203,    -1,   205,   206,   207,
     208,   209,   210,   211,    -1,   213,    -1,   215,   216,   217,
     218,   219,   220,   221,   222,    -1,   224,    -1,   226,    -1,
      -1,   229,    -1,   231,   232,   233,    -1,   235,   236,   237,
      -1,    -1,   240,    -1,   242,    -1,    -1,   245,    -1,    -1,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
      -1,   279,   280,   281,   282,   283,   284,    -1,   286,   287,
      -1,   289,    -1,   291,   292,   293,   294,   295,   296,    -1,
     298,   299,    -1,    -1,   302,   303,   304,    -1,    -1,   307,
     308,   309,    -1,   311,   312,    -1,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
      -1,    -1,    -1,    -1,   332,   333,   334,    -1,   336,   337,
     338,    -1,   340,   341,   342,    -1,   344,   345,   346,   347,
     348,    -1,   350,    -1,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,    -1,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,    -1,   377,
     378,    -1,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,    -1,
      -1,   399,   400,   401,   402,   403,   404,   405,   406,   407,
      -1,    -1,   410,   411,   412,   413,    -1,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,    -1,    -1,   433,   434,    -1,   436,    -1,
     438,    -1,   440,   441,   442,   443,   444,    -1,   446,   447,
     448,    -1,    -1,   451,   452,   453,   454,   455,    -1,   457,
     458,   459,   460,   461,   462,   463,   464,    -1,    -1,   467,
     468,   469,    -1,    -1,   472,   473,   474,   475,    -1,   477,
     478,   479,   480,   481,   482,   483,   484,    -1,   486,    -1,
     488,   489,   490,   491,   492,   493,   494,    -1,    -1,   497,
      -1,    -1,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,   519,   520,     3,    -1,     5,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    23,    24,    25,    26,    27,    28,    29,
      30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    45,    46,    -1,    -1,    49,
      50,    -1,    52,    53,    54,    55,    56,    -1,    58,    59,
      -1,    61,    62,    63,    64,    65,    66,    -1,    -1,    69,
      70,    71,    72,    73,    74,    75,    -1,    77,    78,    79,
      80,    81,    -1,    -1,    -1,    85,    86,    87,    88,    89,
      90,    -1,    92,    93,    94,    -1,    96,    97,    98,    99,
     100,   101,    -1,    -1,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
     120,    -1,   122,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,    -1,    -1,   136,   137,   138,   139,
     140,   141,    -1,   143,   144,   145,    -1,   147,   148,   149,
      -1,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,    -1,   164,    -1,    -1,   167,   168,   169,
     170,    -1,   172,    -1,   174,    -1,    -1,    -1,   178,   179,
     180,    -1,   182,    -1,   184,   185,    -1,   187,   188,   189,
     190,    -1,   192,   193,   194,   195,   196,   197,   198,    -1,
     200,   201,   202,   203,    -1,   205,   206,   207,   208,   209,
     210,   211,    -1,   213,    -1,   215,   216,   217,   218,   219,
     220,   221,   222,    -1,   224,    -1,   226,    -1,    -1,   229,
      -1,   231,   232,   233,    -1,   235,   236,   237,    -1,    -1,
     240,    -1,   242,    -1,    -1,   245,    -1,    -1,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,    -1,   279,
     280,   281,   282,   283,   284,    -1,   286,   287,    -1,   289,
      -1,   291,   292,   293,   294,   295,   296,    -1,   298,   299,
      -1,    -1,   302,   303,   304,    -1,    -1,   307,   308,   309,
      -1,   311,   312,    -1,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,    -1,    -1,
      -1,    -1,   332,   333,   334,    -1,   336,   337,   338,    -1,
     340,   341,   342,    -1,   344,   345,   346,   347,   348,    -1,
     350,    -1,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,    -1,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,    -1,   377,   378,    -1,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,    -1,    -1,   399,
     400,   401,   402,   403,   404,   405,   406,   407,    -1,    -1,
     410,   411,   412,   413,    -1,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,    -1,    -1,   433,   434,    -1,   436,    -1,   438,    -1,
     440,   441,   442,   443,   444,    -1,   446,   447,   448,    -1,
      -1,   451,   452,   453,   454,   455,    -1,   457,   458,   459,
     460,   461,   462,   463,   464,    -1,    -1,   467,   468,   469,
      -1,    -1,   472,   473,   474,   475,    -1,   477,   478,   479,
     480,   481,   482,   483,   484,    -1,   486,    -1,   488,   489,
     490,   491,   492,   493,   494,    -1,    -1,   497,    -1,    -1,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   518,   519,
     520,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    45,    46,    -1,    -1,    49,    50,    -1,
      52,    53,    54,    55,    56,    -1,    58,    59,    -1,    61,
      62,    63,    64,    65,    66,    -1,    -1,    69,    70,    71,
      72,    73,    74,    75,    -1,    77,    78,    79,    80,    81,
      -1,    -1,    -1,    85,    86,    87,    88,    89,    90,    -1,
      92,    93,    94,    -1,    96,    97,    98,    99,   100,   101,
      -1,    -1,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,   120,    -1,
     122,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,    -1,    -1,   136,   137,   138,   139,   140,   141,
      -1,   143,   144,   145,    -1,   147,   148,   149,    -1,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,    -1,   164,    -1,    -1,   167,   168,   169,   170,    -1,
     172,    -1,   174,    -1,    -1,    -1,   178,   179,   180,    -1,
     182,    -1,   184,   185,    -1,   187,   188,   189,   190,    -1,
     192,   193,   194,   195,   196,   197,   198,    -1,   200,   201,
     202,   203,    -1,   205,   206,   207,   208,   209,   210,   211,
      -1,   213,    -1,   215,   216,   217,   218,   219,   220,   221,
     222,    -1,   224,    -1,   226,    -1,    -1,   229,    -1,   231,
     232,   233,    -1,   235,   236,   237,    -1,    -1,   240,    -1,
     242,    -1,    -1,   245,    -1,    -1,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,    -1,   279,   280,   281,
     282,   283,   284,    -1,   286,   287,    -1,   289,    -1,   291,
     292,   293,   294,   295,   296,    -1,   298,   299,    -1,    -1,
     302,   303,   304,    -1,    -1,   307,   308,   309,    -1,   311,
     312,    -1,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,    -1,    -1,    -1,    -1,
     332,   333,   334,    -1,   336,   337,   338,    -1,   340,   341,
     342,    -1,   344,   345,   346,   347,   348,    -1,   350,    -1,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
      -1,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,    -1,   377,   378,    -1,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,    -1,    -1,   399,   400,   401,
     402,   403,   404,   405,   406,   407,    -1,    -1,   410,   411,
     412,   413,    -1,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,    -1,
      -1,   433,   434,    -1,   436,    -1,   438,    -1,   440,   441,
     442,   443,   444,    -1,   446,   447,   448,    -1,    -1,   451,
     452,   453,   454,   455,    -1,   457,   458,   459,   460,   461,
     462,   463,   464,    -1,    -1,   467,   468,   469,    -1,    -1,
     472,   473,   474,   475,    -1,   477,   478,   479,   480,   481,
     482,   483,   484,    -1,   486,    -1,   488,   489,   490,   491,
     492,   493,   494,    -1,    -1,   497,    -1,    -1,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    33,
      34,    -1,    -1,    -1,    38,    -1,    -1,    -1,    -1,    -1,
      44,    45,    46,    -1,    48,    49,    50,    51,    52,    53,
      54,    -1,    56,    57,    58,    59,    -1,    61,    62,    63,
      64,    65,    66,    -1,    -1,    69,    70,    71,    72,    73,
      74,    75,    -1,    77,    78,    79,    80,    -1,    -1,    83,
      -1,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    97,    98,    99,   100,   101,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,   120,    -1,   122,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
      -1,    -1,   136,   137,   138,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,    -1,   151,   152,   153,
     154,    -1,   156,   157,   158,   159,   160,   161,    -1,    -1,
     164,    -1,    -1,   167,   168,   169,   170,    -1,   172,    -1,
     174,   175,    -1,   177,   178,   179,    -1,   181,   182,    -1,
     184,   185,    -1,    -1,    -1,   189,   190,    -1,   192,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
      -1,   205,   206,   207,   208,   209,   210,   211,    -1,   213,
     214,    -1,   216,   217,   218,   219,   220,   221,   222,    -1,
     224,    -1,   226,   227,   228,   229,   230,   231,   232,   233,
      -1,   235,   236,   237,    -1,    -1,   240,   241,   242,   243,
      -1,   245,    -1,    -1,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
      -1,    -1,   286,   287,   288,   289,    -1,    -1,   292,   293,
     294,   295,   296,    -1,   298,   299,    -1,    -1,   302,   303,
     304,    -1,    -1,   307,   308,    -1,   310,   311,   312,   313,
      -1,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,    -1,    -1,    -1,    -1,   332,   333,
      -1,   335,   336,   337,    -1,    -1,   340,   341,   342,    -1,
     344,   345,   346,   347,   348,    -1,   350,    -1,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,    -1,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,    -1,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,    -1,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,    -1,   409,   410,   411,   412,   413,
      -1,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,    -1,    -1,    -1,   433,
     434,    -1,   436,   437,   438,    -1,   440,   441,   442,   443,
     444,    -1,   446,   447,   448,    -1,    -1,   451,   452,    -1,
     454,    -1,    -1,   457,   458,   459,   460,   461,   462,   463,
     464,   465,    -1,   467,   468,   469,   470,    -1,   472,   473,
     474,   475,    -1,   477,   478,   479,   480,   481,    -1,   483,
     484,    -1,   486,   487,   488,   489,   490,   491,   492,   493,
     494,    -1,    -1,   497,    -1,    -1,   500,   501,   502,   503,
     504,   505,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   517,   518,   519,   520,    -1,    -1,    -1,
      -1,    -1,    23,    24,    25,    26,    27,    28,    29,    30,
      -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    45,    46,    -1,    -1,    49,    50,
      -1,    52,    53,    54,    55,    56,    -1,    58,    59,    -1,
      61,    62,    63,    64,    65,    66,    -1,    -1,    69,    70,
      71,    72,    73,    74,    75,    -1,    77,    78,    79,    80,
      81,    -1,    -1,    -1,    85,    86,    87,    88,    89,    90,
      -1,    92,    93,    94,    -1,    96,    97,    98,    99,   100,
     101,    -1,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
      -1,   122,   123,   124,   125,   126,   127,    -1,    -1,   130,
     131,   132,   133,    -1,    -1,   136,   137,   138,   139,   140,
     141,    -1,   143,   144,   145,    -1,   147,   148,   149,    -1,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,    -1,   164,    -1,    -1,   167,   168,   169,   170,
      -1,   172,    -1,   174,    -1,    -1,    -1,   178,   179,   180,
      -1,   182,    -1,   184,   185,    -1,   187,   188,   189,   190,
      -1,   192,   193,   194,   195,   196,   197,   198,    -1,   200,
     201,   202,   203,    -1,   205,   206,   207,   208,   209,   210,
     211,    -1,   213,    -1,   215,   216,   217,   218,   219,   220,
     221,   222,    -1,   224,    -1,   226,    -1,    -1,   229,    -1,
     231,   232,   233,    -1,   235,   236,   237,    -1,    -1,   240,
      -1,   242,    -1,    -1,   245,    -1,    -1,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,    -1,   279,   280,
     281,   282,   283,   284,    -1,   286,   287,    -1,   289,    -1,
     291,   292,   293,   294,   295,   296,    -1,   298,   299,    -1,
      -1,   302,   303,   304,    -1,    -1,   307,   308,   309,    -1,
     311,   312,    -1,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,    -1,    -1,    -1,
      -1,   332,   333,   334,    -1,   336,   337,   338,    -1,   340,
     341,   342,    -1,   344,   345,   346,   347,   348,    -1,   350,
      -1,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,    -1,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,    -1,   377,   378,    -1,   380,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,    -1,    -1,   399,   400,
     401,   402,   403,   404,   405,   406,   407,    -1,    -1,   410,
     411,   412,   413,    -1,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
      -1,    -1,   433,   434,    -1,   436,    -1,   438,    -1,   440,
     441,   442,   443,   444,    -1,   446,   447,   448,    -1,    -1,
     451,   452,   453,   454,   455,    -1,   457,   458,   459,   460,
     461,   462,   463,   464,    -1,    -1,   467,   468,   469,    -1,
      -1,   472,   473,   474,   475,    -1,   477,   478,   479,   480,
     481,   482,   483,   484,    -1,   486,    -1,   488,   489,   490,
     491,   492,   493,   494,    -1,    -1,   497,    -1,    -1,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,   517,   518,   519,   520,
       3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      23,    24,    25,    26,    27,    28,    29,    30,    -1,    32,
      33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    45,    46,    -1,    -1,    49,    50,    -1,    52,
      53,    54,    55,    56,    -1,    58,    59,    -1,    61,    62,
      63,    64,    65,    66,    -1,    -1,    69,    70,    71,    72,
      73,    74,    75,    -1,    77,    78,    79,    80,    81,    -1,
      -1,    -1,    85,    86,    87,    88,    89,    90,    -1,    92,
      93,    94,    -1,    96,    97,    98,    99,   100,   101,    -1,
      -1,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,   120,    -1,   122,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,    -1,    -1,   136,   137,   138,   139,   140,   141,    -1,
     143,   144,   145,    -1,   147,   148,   149,    -1,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
      -1,   164,    -1,    -1,   167,   168,   169,   170,    -1,   172,
      -1,   174,    -1,    -1,    -1,   178,   179,   180,    -1,   182,
      -1,   184,   185,    -1,   187,   188,   189,   190,    -1,   192,
     193,   194,   195,   196,   197,   198,    -1,   200,   201,   202,
     203,    -1,   205,   206,   207,   208,   209,   210,   211,    -1,
     213,    -1,   215,   216,   217,   218,   219,   220,   221,   222,
      -1,   224,    -1,   226,    -1,    -1,   229,    -1,   231,   232,
     233,    -1,   235,   236,   237,    -1,    -1,   240,    -1,   242,
      -1,    -1,   245,    -1,    -1,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,    -1,   279,   280,   281,   282,
     283,   284,    -1,   286,   287,    -1,   289,    -1,   291,   292,
     293,   294,   295,   296,    -1,   298,   299,    -1,    -1,   302,
     303,   304,    -1,    -1,   307,   308,   309,    -1,   311,   312,
      -1,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,    -1,    -1,    -1,    -1,   332,
     333,   334,    -1,   336,   337,   338,    -1,   340,   341,   342,
      -1,   344,   345,   346,   347,   348,    -1,   350,    -1,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,    -1,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,    -1,   377,   378,    -1,   380,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,    -1,    -1,   399,   400,   401,   402,
     403,   404,   405,   406,   407,    -1,    -1,   410,   411,   412,
     413,    -1,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,    -1,    -1,
     433,   434,    -1,   436,    -1,   438,    -1,   440,   441,   442,
     443,   444,    -1,   446,   447,   448,    -1,    -1,   451,   452,
     453,   454,   455,    -1,   457,   458,   459,   460,   461,   462,
     463,   464,    -1,    -1,   467,   468,   469,    -1,    -1,   472,
     473,   474,   475,    -1,   477,   478,   479,   480,   481,   482,
     483,   484,    -1,   486,    -1,   488,   489,   490,   491,   492,
     493,   494,    -1,    -1,   497,    -1,    -1,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,   518,   519,   520,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    23,    24,
      25,    26,    27,    28,    29,    30,    -1,    32,    33,    34,
      -1,    -1,    -1,    38,    -1,    -1,    -1,    -1,    -1,    44,
      45,    46,    -1,    48,    49,    50,    51,    52,    53,    54,
      -1,    56,    57,    58,    59,    -1,    61,    62,    63,    64,
      65,    66,    -1,    -1,    69,    70,    71,    72,    73,    74,
      75,    -1,    77,    78,    79,    80,    -1,    -1,    83,    -1,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      -1,    96,    97,    98,    99,   100,   101,    -1,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,   120,    -1,   122,   123,   124,
     125,   126,   127,    -1,    -1,   130,   131,   132,   133,    -1,
      -1,   136,   137,   138,   139,   140,   141,    -1,   143,   144,
     145,    -1,   147,   148,   149,    -1,   151,   152,   153,   154,
      -1,   156,   157,   158,   159,   160,   161,    -1,    -1,   164,
      -1,    -1,   167,   168,   169,   170,    -1,   172,    -1,   174,
     175,    -1,   177,   178,   179,    -1,   181,   182,    -1,   184,
     185,    -1,    -1,    -1,   189,   190,    -1,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,    -1,
     205,   206,   207,   208,   209,   210,   211,    -1,   213,   214,
      -1,   216,   217,   218,   219,   220,   221,   222,    -1,   224,
      -1,   226,   227,   228,   229,   230,   231,   232,   233,    -1,
     235,   236,   237,    -1,    -1,   240,   241,   242,   243,    -1,
     245,    -1,    -1,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,    -1,
      -1,   286,   287,   288,   289,    -1,    -1,   292,   293,   294,
     295,   296,    -1,   298,   299,    -1,    -1,   302,   303,   304,
      -1,    -1,   307,   308,    -1,   310,   311,   312,   313,    -1,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,    -1,    -1,    -1,    -1,   332,   333,    -1,
     335,   336,   337,    -1,    -1,   340,   341,   342,    -1,   344,
     345,   346,   347,   348,    -1,   350,    -1,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,    -1,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,    -1,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,    -1,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,    -1,   409,   410,   411,   412,   413,    -1,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,    -1,    -1,    -1,   433,   434,
      -1,   436,   437,   438,    -1,   440,   441,   442,   443,   444,
      -1,   446,   447,   448,    -1,    -1,   451,   452,    -1,   454,
      -1,    -1,   457,   458,   459,   460,   461,   462,   463,   464,
     465,    -1,   467,   468,   469,   470,    -1,   472,   473,   474,
     475,    -1,   477,   478,   479,   480,   481,    -1,   483,   484,
      -1,   486,   487,   488,   489,   490,   491,   492,   493,   494,
      -1,    -1,   497,    -1,    -1,   500,   501,   502,   503,   504,
     505,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   517,   518,   519,   520,    -1,    -1,    -1,    -1,
      -1,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    45,    46,    -1,    -1,    49,    50,    -1,
      52,    53,    54,    55,    56,    -1,    58,    59,    -1,    61,
      62,    63,    64,    65,    66,    -1,    -1,    69,    70,    71,
      72,    73,    74,    75,    -1,    77,    78,    79,    80,    81,
      -1,    -1,    -1,    85,    86,    87,    88,    89,    90,    -1,
      92,    93,    94,    -1,    96,    97,    98,    99,   100,   101,
      -1,    -1,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,   120,    -1,
     122,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,    -1,    -1,   136,   137,   138,   139,   140,   141,
      -1,   143,   144,   145,    -1,   147,   148,   149,    -1,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,    -1,   164,    -1,    -1,   167,   168,   169,   170,    -1,
     172,    -1,   174,    -1,    -1,    -1,   178,   179,   180,    -1,
     182,    -1,   184,   185,    -1,   187,   188,   189,   190,    -1,
     192,   193,   194,   195,   196,   197,   198,    -1,   200,   201,
     202,   203,    -1,   205,   206,   207,   208,   209,   210,   211,
      -1,   213,    -1,   215,   216,   217,   218,   219,   220,   221,
     222,    -1,   224,    -1,   226,    -1,    -1,   229,    -1,   231,
     232,   233,    -1,   235,   236,   237,    -1,    -1,   240,    -1,
     242,    -1,    -1,   245,    -1,    -1,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,    -1,   279,   280,   281,
     282,   283,   284,    -1,   286,   287,    -1,   289,    -1,   291,
     292,   293,   294,   295,   296,    -1,   298,   299,    -1,    -1,
     302,   303,   304,    -1,    -1,   307,   308,   309,    -1,   311,
     312,    -1,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,    -1,    -1,    -1,    -1,
     332,   333,   334,    -1,   336,   337,   338,    -1,   340,   341,
     342,    -1,   344,   345,   346,   347,   348,    -1,   350,    -1,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
      -1,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,    -1,   377,   378,    -1,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,    -1,    -1,   399,   400,   401,
     402,   403,   404,   405,   406,   407,    -1,    -1,   410,   411,
     412,   413,    -1,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,    -1,
      -1,   433,   434,    -1,   436,    -1,   438,    -1,   440,   441,
     442,   443,   444,    -1,   446,   447,   448,    -1,    -1,   451,
     452,   453,   454,   455,    -1,   457,   458,   459,   460,   461,
     462,   463,   464,    -1,    -1,   467,   468,   469,    -1,    -1,
     472,   473,   474,   475,    -1,   477,   478,   479,   480,   481,
     482,   483,   484,    -1,   486,    -1,   488,   489,   490,   491,
     492,   493,   494,    -1,    -1,   497,    -1,    -1,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    33,
      34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    45,    46,    -1,    -1,    49,    50,    -1,    52,    53,
      54,    55,    56,    -1,    58,    59,    -1,    61,    62,    63,
      64,    65,    66,    -1,    -1,    69,    70,    71,    72,    73,
      74,    75,    -1,    77,    78,    79,    80,    81,    -1,    -1,
      -1,    85,    86,    87,    88,    89,    90,    -1,    92,    93,
      94,    -1,    96,    97,    98,    99,   100,   101,    -1,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,   120,    -1,   122,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
      -1,    -1,   136,   137,   138,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,    -1,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,    -1,
     164,    -1,    -1,   167,   168,   169,   170,    -1,   172,    -1,
     174,    -1,    -1,    -1,   178,   179,   180,    -1,   182,    -1,
     184,   185,    -1,   187,   188,   189,   190,    -1,   192,   193,
     194,   195,   196,   197,   198,    -1,   200,   201,   202,   203,
      -1,   205,   206,   207,   208,   209,   210,   211,    -1,   213,
      -1,   215,   216,   217,   218,   219,   220,   221,   222,    -1,
     224,    -1,   226,    -1,    -1,   229,    -1,   231,   232,   233,
      -1,   235,   236,   237,    -1,    -1,   240,    -1,   242,    -1,
      -1,   245,    -1,    -1,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,    -1,   279,   280,   281,   282,   283,
     284,    -1,   286,   287,    -1,   289,    -1,   291,   292,   293,
     294,   295,   296,    -1,   298,   299,    -1,    -1,   302,   303,
     304,    -1,    -1,   307,   308,   309,    -1,   311,   312,    -1,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,    -1,    -1,    -1,    -1,   332,   333,
     334,    -1,   336,   337,   338,    -1,   340,   341,   342,    -1,
     344,   345,   346,   347,   348,    -1,   350,    -1,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,    -1,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,    -1,   377,   378,    -1,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,    -1,    -1,   399,   400,   401,   402,   403,
     404,   405,   406,   407,    -1,    -1,   410,   411,   412,   413,
      -1,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,    -1,    -1,   433,
     434,    -1,   436,    -1,   438,    -1,   440,   441,   442,   443,
     444,    -1,   446,   447,   448,    -1,    -1,   451,   452,   453,
     454,   455,    -1,   457,   458,   459,   460,   461,   462,   463,
     464,    -1,    -1,   467,   468,   469,    -1,    -1,   472,   473,
     474,   475,    -1,   477,   478,   479,   480,   481,   482,   483,
     484,    -1,   486,    -1,   488,   489,   490,   491,   492,   493,
     494,    -1,    -1,   497,    -1,    -1,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   518,   519,   520,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    23,    24,    25,
      26,    27,    28,    29,    30,    -1,    32,    33,    34,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    45,
      46,    -1,    -1,    49,    50,    -1,    52,    53,    54,    55,
      56,    -1,    58,    59,    -1,    61,    62,    63,    64,    65,
      66,    -1,    -1,    69,    70,    71,    72,    73,    74,    75,
      -1,    77,    78,    79,    80,    81,    -1,    -1,    -1,    85,
      86,    87,    88,    89,    90,    -1,    92,    93,    94,    -1,
      96,    97,    98,    99,   100,   101,    -1,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,   120,    -1,   122,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,    -1,    -1,
     136,   137,   138,   139,   140,   141,    -1,   143,   144,   145,
      -1,   147,   148,   149,    -1,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,    -1,   164,    -1,
      -1,   167,   168,   169,   170,    -1,   172,    -1,   174,    -1,
      -1,    -1,   178,   179,   180,    -1,   182,    -1,   184,   185,
      -1,   187,   188,   189,   190,    -1,   192,   193,   194,   195,
     196,   197,   198,    -1,   200,   201,   202,   203,    -1,   205,
     206,   207,   208,   209,   210,   211,    -1,   213,    -1,   215,
     216,   217,   218,   219,   220,   221,   222,    -1,   224,    -1,
     226,    -1,    -1,   229,    -1,   231,   232,   233,    -1,   235,
     236,   237,    -1,    -1,   240,    -1,   242,    -1,    -1,   245,
      -1,    -1,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,    -1,   279,   280,   281,   282,   283,   284,    -1,
     286,   287,    -1,   289,    -1,   291,   292,   293,   294,   295,
     296,    -1,   298,   299,    -1,    -1,   302,   303,   304,    -1,
      -1,   307,   308,   309,    -1,   311,   312,    -1,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,    -1,    -1,    -1,    -1,   332,   333,   334,    -1,
     336,   337,   338,    -1,   340,   341,   342,    -1,   344,   345,
     346,   347,   348,    -1,   350,    -1,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,    -1,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
      -1,   377,   378,    -1,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,    -1,    -1,   399,   400,   401,   402,   403,   404,   405,
     406,   407,    -1,    -1,   410,   411,   412,   413,    -1,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,    -1,    -1,   433,   434,    -1,
     436,    -1,   438,    -1,   440,   441,   442,   443,   444,    -1,
     446,   447,   448,    -1,    -1,   451,   452,   453,   454,   455,
      -1,   457,   458,   459,   460,   461,   462,   463,   464,    -1,
      -1,   467,   468,   469,    -1,    -1,   472,   473,   474,   475,
      -1,   477,   478,   479,   480,   481,   482,   483,   484,    -1,
     486,    -1,   488,   489,   490,   491,   492,   493,   494,    -1,
      -1,   497,    -1,    -1,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   518,   519,   520,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    23,    24,    25,    26,    27,
      28,    29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    45,    46,    -1,
      -1,    49,    50,    -1,    52,    53,    54,    55,    56,    -1,
      58,    59,    -1,    61,    62,    63,    64,    65,    66,    -1,
      -1,    69,    70,    71,    72,    73,    74,    75,    -1,    77,
      78,    79,    80,    81,    -1,    -1,    -1,    85,    86,    87,
      88,    89,    90,    -1,    92,    93,    94,    -1,    96,    97,
      98,    99,   100,   101,    -1,    -1,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,   120,    -1,   122,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,    -1,    -1,   136,   137,
     138,   139,   140,   141,    -1,   143,   144,   145,    -1,   147,
     148,   149,    -1,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,    -1,   164,    -1,    -1,   167,
     168,   169,   170,    -1,   172,    -1,   174,    -1,    -1,    -1,
     178,   179,   180,    -1,   182,    -1,   184,   185,    -1,   187,
     188,   189,   190,    -1,   192,   193,   194,   195,   196,   197,
     198,    -1,   200,   201,   202,   203,    -1,   205,   206,   207,
     208,   209,   210,   211,    -1,   213,    -1,   215,   216,   217,
     218,   219,   220,   221,   222,    -1,   224,    -1,   226,    -1,
      -1,   229,    -1,   231,   232,   233,    -1,   235,   236,   237,
      -1,    -1,   240,    -1,   242,    -1,    -1,   245,    -1,    -1,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
      -1,   279,   280,   281,   282,   283,   284,    -1,   286,   287,
      -1,   289,    -1,   291,   292,   293,   294,   295,   296,    -1,
     298,   299,    -1,    -1,   302,   303,   304,    -1,    -1,   307,
     308,   309,    -1,   311,   312,    -1,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
      -1,    -1,    -1,    -1,   332,   333,   334,    -1,   336,   337,
     338,    -1,   340,   341,   342,    -1,   344,   345,   346,   347,
     348,    -1,   350,    -1,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,    -1,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,    -1,   377,
     378,    -1,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,    -1,
      -1,   399,   400,   401,   402,   403,   404,   405,   406,   407,
      -1,    -1,   410,   411,   412,   413,    -1,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,    -1,    -1,   433,   434,    -1,   436,    -1,
     438,    -1,   440,   441,   442,   443,   444,    -1,   446,   447,
     448,    -1,    -1,   451,   452,   453,   454,   455,    -1,   457,
     458,   459,   460,   461,   462,   463,   464,    -1,    -1,   467,
     468,   469,    -1,    -1,   472,   473,   474,   475,    -1,   477,
     478,   479,   480,   481,   482,   483,   484,    -1,   486,    -1,
     488,   489,   490,   491,   492,   493,   494,    -1,    -1,   497,
      -1,    -1,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,   519,   520,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    23,    24,    25,    26,    27,    28,    29,
      30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    45,    46,    -1,    -1,    49,
      50,    -1,    52,    53,    54,    55,    56,    -1,    58,    59,
      -1,    61,    62,    63,    64,    65,    66,    -1,    -1,    69,
      70,    71,    72,    73,    74,    75,    -1,    77,    78,    79,
      80,    81,    -1,    -1,    -1,    85,    86,    87,    88,    89,
      90,    -1,    92,    93,    94,    -1,    96,    97,    98,    99,
     100,   101,    -1,    -1,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
     120,    -1,   122,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,    -1,    -1,   136,   137,   138,   139,
     140,   141,    -1,   143,   144,   145,    -1,   147,   148,   149,
      -1,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,    -1,   164,    -1,    -1,   167,   168,   169,
     170,    -1,   172,    -1,   174,    -1,    -1,    -1,   178,   179,
     180,    -1,   182,    -1,   184,   185,    -1,   187,   188,   189,
     190,    -1,   192,   193,   194,   195,   196,   197,   198,    -1,
     200,   201,   202,   203,    -1,   205,   206,   207,   208,   209,
     210,   211,    -1,   213,    -1,   215,   216,   217,   218,   219,
     220,   221,   222,    -1,   224,    -1,   226,    -1,    -1,   229,
      -1,   231,   232,   233,    -1,   235,   236,   237,    -1,    -1,
     240,    -1,   242,    -1,    -1,   245,    -1,    -1,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,    -1,   279,
     280,   281,   282,   283,   284,    -1,   286,   287,    -1,   289,
      -1,   291,   292,   293,   294,   295,   296,    -1,   298,   299,
      -1,    -1,   302,   303,   304,    -1,    -1,   307,   308,   309,
      -1,   311,   312,    -1,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,    -1,    -1,
      -1,    -1,   332,   333,   334,    -1,   336,   337,   338,    -1,
     340,   341,   342,    -1,   344,   345,   346,   347,   348,    -1,
     350,    -1,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,    -1,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,    -1,   377,   378,    -1,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,    -1,    -1,   399,
     400,   401,   402,   403,   404,   405,   406,   407,    -1,    -1,
     410,   411,   412,   413,    -1,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,    -1,    -1,   433,   434,    -1,   436,    -1,   438,    -1,
     440,   441,   442,   443,   444,    -1,   446,   447,   448,    -1,
      -1,   451,   452,   453,   454,   455,    -1,   457,   458,   459,
     460,   461,   462,   463,   464,    -1,    -1,   467,   468,   469,
      -1,    -1,   472,   473,   474,   475,    -1,   477,   478,   479,
     480,   481,   482,   483,   484,    -1,   486,    -1,   488,   489,
     490,   491,   492,   493,   494,    -1,    -1,   497,    -1,    -1,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   518,   519,
     520,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    45,    46,    -1,    -1,    49,    50,    -1,
      52,    53,    54,    55,    56,    -1,    58,    59,    -1,    61,
      62,    63,    64,    65,    66,    -1,    -1,    69,    70,    71,
      72,    73,    74,    75,    -1,    77,    78,    79,    80,    81,
      -1,    -1,    -1,    85,    86,    87,    88,    89,    90,    -1,
      92,    93,    94,    -1,    96,    97,    98,    99,   100,   101,
      -1,    -1,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,   120,    -1,
     122,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,    -1,    -1,   136,   137,   138,   139,   140,   141,
      -1,   143,   144,   145,    -1,   147,   148,   149,    -1,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,    -1,   164,    -1,    -1,   167,   168,   169,   170,    -1,
     172,    -1,   174,    -1,    -1,    -1,   178,   179,   180,    -1,
     182,    -1,   184,   185,    -1,   187,   188,   189,   190,    -1,
     192,   193,   194,   195,   196,   197,   198,    -1,   200,   201,
     202,   203,    -1,   205,   206,   207,   208,   209,   210,   211,
      -1,   213,    -1,   215,   216,   217,   218,   219,   220,   221,
     222,    -1,   224,    -1,   226,    -1,    -1,   229,    -1,   231,
     232,   233,    -1,   235,   236,   237,    -1,    -1,   240,    -1,
     242,    -1,    -1,   245,    -1,    -1,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,    -1,   279,   280,   281,
     282,   283,   284,    -1,   286,   287,    -1,   289,    -1,   291,
     292,   293,   294,   295,   296,    -1,   298,   299,    -1,    -1,
     302,   303,   304,    -1,    -1,   307,   308,   309,    -1,   311,
     312,    -1,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,    -1,    -1,    -1,    -1,
     332,   333,   334,    -1,   336,   337,   338,    -1,   340,   341,
     342,    -1,   344,   345,   346,   347,   348,    -1,   350,    -1,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
      -1,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,    -1,   377,   378,    -1,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,    -1,    -1,   399,   400,   401,
     402,   403,   404,   405,   406,   407,    -1,    -1,   410,   411,
     412,   413,    -1,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,    -1,
      -1,   433,   434,    -1,   436,    -1,   438,    -1,   440,   441,
     442,   443,   444,    -1,   446,   447,   448,    -1,    -1,   451,
     452,   453,   454,   455,    -1,   457,   458,   459,   460,   461,
     462,   463,   464,    -1,    -1,   467,   468,   469,    -1,    -1,
     472,   473,   474,   475,    -1,   477,   478,   479,   480,   481,
     482,   483,   484,    -1,   486,    -1,   488,   489,   490,   491,
     492,   493,   494,    -1,    -1,   497,    -1,    -1,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    33,
      34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    45,    46,    -1,    -1,    49,    50,    -1,    52,    53,
      54,    55,    56,    -1,    58,    59,    -1,    61,    62,    63,
      64,    65,    66,    -1,    -1,    69,    70,    71,    72,    73,
      74,    75,    -1,    77,    78,    79,    80,    81,    -1,    -1,
      -1,    85,    86,    87,    88,    89,    90,    -1,    92,    93,
      94,    -1,    96,    97,    98,    99,   100,   101,    -1,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,   120,    -1,   122,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
      -1,    -1,   136,   137,   138,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,    -1,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,    -1,
     164,    -1,    -1,   167,   168,   169,   170,    -1,   172,    -1,
     174,    -1,    -1,    -1,   178,   179,   180,    -1,   182,    -1,
     184,   185,    -1,   187,   188,   189,   190,    -1,   192,   193,
     194,   195,   196,   197,   198,    -1,   200,   201,   202,   203,
      -1,   205,   206,   207,   208,   209,   210,   211,    -1,   213,
      -1,   215,   216,   217,   218,   219,   220,   221,   222,    -1,
     224,    -1,   226,    -1,    -1,   229,    -1,   231,   232,   233,
      -1,   235,   236,   237,    -1,    -1,   240,    -1,   242,    -1,
      -1,   245,    -1,    -1,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,    -1,   279,   280,   281,   282,   283,
     284,    -1,   286,   287,    -1,   289,    -1,   291,   292,   293,
     294,   295,   296,    -1,   298,   299,    -1,    -1,   302,   303,
     304,    -1,    -1,   307,   308,   309,    -1,   311,   312,    -1,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,    -1,    -1,    -1,    -1,   332,   333,
     334,    -1,   336,   337,   338,    -1,   340,   341,   342,    -1,
     344,   345,   346,   347,   348,    -1,   350,    -1,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,    -1,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,    -1,   377,   378,    -1,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,    -1,    -1,   399,   400,   401,   402,   403,
     404,   405,   406,   407,    -1,    -1,   410,   411,   412,   413,
      -1,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,    -1,    -1,   433,
     434,    -1,   436,    -1,   438,    -1,   440,   441,   442,   443,
     444,    -1,   446,   447,   448,    -1,    -1,   451,   452,   453,
     454,   455,    -1,   457,   458,   459,   460,   461,   462,   463,
     464,    -1,    -1,   467,   468,   469,    -1,    -1,   472,   473,
     474,   475,    -1,   477,   478,   479,   480,   481,   482,   483,
     484,    -1,   486,    -1,   488,   489,   490,   491,   492,   493,
     494,    -1,    -1,   497,    -1,    -1,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   518,   519,   520,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    23,    24,    25,
      26,    27,    28,    29,    30,    -1,    32,    33,    34,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    42,    -1,    -1,    45,
      46,    -1,    -1,    49,    50,    -1,    52,    53,    54,    55,
      56,    -1,    58,    59,    -1,    61,    62,    63,    64,    65,
      66,    -1,    -1,    69,    70,    71,    72,    73,    74,    75,
      -1,    77,    78,    79,    80,    81,    -1,    -1,    -1,    85,
      86,    87,    88,    89,    90,    -1,    92,    93,    94,    -1,
      96,    97,    98,    99,   100,   101,    -1,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,   120,    -1,   122,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,    -1,    -1,
     136,   137,   138,   139,   140,   141,    -1,   143,   144,   145,
      -1,   147,   148,   149,    -1,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,    -1,   164,    -1,
      -1,   167,   168,   169,   170,    -1,   172,    -1,   174,    -1,
      -1,    -1,   178,   179,   180,    -1,   182,    -1,   184,   185,
      -1,   187,   188,   189,   190,    -1,   192,   193,   194,   195,
     196,   197,   198,    -1,   200,   201,   202,   203,    -1,   205,
     206,   207,   208,   209,   210,   211,    -1,   213,    -1,   215,
     216,   217,   218,   219,   220,   221,   222,    -1,   224,    -1,
     226,    -1,    -1,   229,    -1,   231,   232,   233,    -1,   235,
     236,   237,    -1,    -1,   240,    -1,   242,    -1,    -1,   245,
      -1,    -1,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,    -1,   279,   280,   281,   282,   283,   284,    -1,
     286,   287,    -1,   289,    -1,   291,   292,   293,   294,   295,
     296,    -1,   298,   299,    -1,    -1,   302,   303,   304,    -1,
      -1,   307,   308,   309,    -1,   311,   312,    -1,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,    -1,    -1,    -1,    -1,   332,   333,   334,    -1,
     336,   337,   338,    -1,   340,   341,   342,    -1,   344,   345,
     346,   347,   348,    -1,   350,    -1,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,    -1,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
      -1,   377,   378,    -1,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,    -1,    -1,   399,   400,   401,   402,   403,    -1,   405,
     406,   407,    -1,    -1,   410,   411,   412,   413,    -1,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,    -1,    -1,   433,   434,    -1,
     436,    -1,   438,    -1,   440,   441,   442,   443,   444,    -1,
     446,   447,   448,    -1,    -1,   451,   452,   453,   454,   455,
      -1,   457,   458,   459,   460,   461,   462,   463,   464,    -1,
      -1,   467,   468,   469,    -1,    -1,   472,   473,   474,   475,
      -1,   477,   478,   479,   480,   481,   482,   483,   484,    -1,
     486,    -1,   488,   489,   490,   491,   492,   493,   494,    -1,
      -1,   497,    -1,    -1,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   518,   519,   520,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    23,    24,    25,    26,    27,
      28,    29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    45,    46,    -1,
      -1,    49,    50,    -1,    52,    53,    54,    55,    56,    -1,
      58,    59,    -1,    61,    62,    63,    64,    65,    66,    -1,
      -1,    69,    70,    71,    72,    73,    74,    75,    -1,    77,
      78,    79,    80,    81,    -1,    -1,    -1,    85,    86,    87,
      88,    89,    90,    -1,    92,    93,    94,    -1,    96,    97,
      98,    99,   100,   101,    -1,    -1,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,   120,    -1,   122,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,    -1,    -1,   136,   137,
     138,   139,   140,   141,    -1,   143,   144,   145,    -1,   147,
     148,   149,    -1,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,    -1,   164,    -1,    -1,   167,
     168,   169,   170,    -1,   172,    -1,   174,    -1,    -1,    -1,
     178,   179,   180,    -1,   182,    -1,   184,   185,    -1,   187,
     188,   189,   190,    -1,   192,   193,   194,   195,   196,   197,
     198,    -1,   200,   201,   202,   203,    -1,   205,   206,   207,
     208,   209,   210,   211,    -1,   213,    -1,   215,   216,   217,
     218,   219,   220,   221,   222,    -1,   224,    -1,   226,    -1,
      -1,   229,    -1,   231,   232,   233,    -1,   235,   236,   237,
      -1,    -1,   240,    -1,   242,    -1,    -1,   245,    -1,    -1,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
      -1,   279,   280,   281,   282,   283,   284,    -1,   286,   287,
      -1,   289,    -1,   291,   292,   293,   294,   295,   296,    -1,
     298,   299,    -1,    -1,   302,   303,   304,    -1,    -1,   307,
     308,   309,    -1,   311,   312,    -1,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
      -1,    -1,    -1,    -1,   332,   333,   334,    -1,   336,   337,
     338,    -1,   340,   341,   342,    -1,   344,   345,   346,   347,
     348,    -1,   350,    -1,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,    -1,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,    -1,   377,
     378,    -1,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,    -1,
      -1,   399,   400,   401,   402,   403,   404,   405,   406,   407,
      -1,    -1,   410,   411,   412,   413,    -1,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,    -1,    -1,   433,   434,    -1,   436,    -1,
     438,    -1,   440,   441,   442,   443,   444,    -1,   446,   447,
     448,    -1,    -1,   451,   452,   453,   454,   455,    -1,   457,
     458,   459,   460,   461,   462,   463,   464,    -1,    -1,   467,
     468,   469,    -1,    -1,   472,   473,   474,   475,    -1,   477,
     478,   479,   480,   481,   482,   483,   484,    -1,   486,    -1,
     488,   489,   490,   491,   492,   493,   494,    -1,    -1,   497,
      -1,    -1,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,   519,   520,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    23,    24,    25,    26,    27,    28,    29,
      30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    45,    46,    -1,    -1,    49,
      50,    -1,    52,    53,    54,    55,    56,    -1,    58,    59,
      -1,    61,    62,    63,    64,    65,    66,    -1,    -1,    69,
      70,    71,    72,    73,    74,    75,    -1,    77,    78,    79,
      80,    81,    -1,    -1,    -1,    85,    86,    87,    88,    89,
      90,    -1,    92,    93,    94,    -1,    96,    97,    98,    99,
     100,   101,    -1,    -1,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
     120,    -1,   122,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,    -1,    -1,   136,   137,   138,   139,
     140,   141,    -1,   143,   144,   145,    -1,   147,   148,   149,
      -1,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,    -1,   164,    -1,    -1,   167,   168,   169,
     170,    -1,   172,    -1,   174,    -1,    -1,    -1,   178,   179,
     180,    -1,   182,    -1,   184,   185,    -1,   187,   188,   189,
     190,    -1,   192,   193,   194,   195,   196,   197,   198,    -1,
     200,   201,   202,   203,    -1,   205,   206,   207,   208,   209,
     210,   211,    -1,   213,    -1,   215,   216,   217,   218,   219,
     220,   221,   222,    -1,   224,    -1,   226,    -1,    -1,   229,
      -1,   231,   232,   233,    -1,   235,   236,   237,    -1,    -1,
     240,    -1,   242,    -1,    -1,   245,    -1,    -1,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,    -1,   279,
     280,   281,   282,   283,   284,    -1,   286,   287,    -1,   289,
      -1,   291,   292,   293,   294,   295,   296,    -1,   298,   299,
      -1,    -1,   302,   303,   304,    -1,    -1,   307,   308,   309,
      -1,   311,   312,    -1,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,    -1,    -1,
      -1,    -1,   332,   333,   334,    -1,   336,   337,   338,    -1,
     340,   341,   342,    -1,   344,   345,   346,   347,   348,    -1,
     350,    -1,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,    -1,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,    -1,   377,   378,    -1,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,    -1,    -1,   399,
     400,   401,   402,   403,   404,   405,   406,   407,    -1,    -1,
     410,   411,   412,   413,    -1,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,    -1,    -1,   433,   434,    -1,   436,    -1,   438,    -1,
     440,   441,   442,   443,   444,    -1,   446,   447,   448,    -1,
      -1,   451,   452,   453,   454,   455,    -1,   457,   458,   459,
     460,   461,   462,   463,   464,    -1,    -1,   467,   468,   469,
      -1,    -1,   472,   473,   474,   475,    -1,   477,   478,   479,
     480,   481,   482,   483,   484,    -1,   486,    -1,   488,   489,
     490,   491,   492,   493,   494,    -1,    -1,   497,    -1,    -1,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   518,   519,
     520,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    45,    46,    -1,    -1,    49,    50,    -1,
      52,    53,    54,    55,    56,    -1,    58,    59,    -1,    61,
      62,    63,    64,    65,    66,    -1,    -1,    69,    70,    71,
      72,    73,    74,    75,    -1,    77,    78,    79,    80,    81,
      -1,    -1,    -1,    85,    86,    87,    88,    89,    90,    -1,
      92,    93,    94,    -1,    96,    97,    98,    99,   100,   101,
      -1,    -1,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,   120,    -1,
     122,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,    -1,    -1,   136,   137,   138,   139,   140,   141,
      -1,   143,   144,   145,    -1,   147,   148,   149,    -1,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,    -1,   164,    -1,    -1,   167,   168,   169,   170,    -1,
     172,    -1,   174,    -1,    -1,    -1,   178,   179,   180,    -1,
     182,    -1,   184,   185,    -1,   187,   188,   189,   190,    -1,
     192,   193,   194,   195,   196,   197,   198,    -1,   200,   201,
     202,   203,    -1,   205,   206,   207,   208,   209,   210,   211,
      -1,   213,    -1,   215,   216,   217,   218,   219,   220,   221,
     222,    -1,   224,    -1,   226,    -1,    -1,   229,    -1,   231,
     232,   233,    -1,   235,   236,   237,    -1,    -1,   240,    -1,
     242,    -1,    -1,   245,    -1,    -1,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,    -1,   279,   280,   281,
     282,   283,   284,    -1,   286,   287,    -1,   289,    -1,   291,
     292,   293,   294,   295,   296,    -1,   298,   299,    -1,    -1,
     302,   303,   304,    -1,    -1,   307,   308,   309,    -1,   311,
     312,    -1,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,    -1,    -1,    -1,    -1,
     332,   333,   334,    -1,   336,   337,   338,    -1,   340,   341,
     342,    -1,   344,   345,   346,   347,   348,    -1,   350,    -1,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
      -1,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,    -1,   377,   378,    -1,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,    -1,    -1,   399,   400,   401,
     402,   403,   404,   405,   406,   407,    -1,    -1,   410,   411,
     412,   413,    -1,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,    -1,
      -1,   433,   434,    -1,   436,    -1,   438,    -1,   440,   441,
     442,   443,   444,    -1,   446,   447,   448,    -1,    -1,   451,
     452,   453,   454,   455,    -1,   457,   458,   459,   460,   461,
     462,   463,   464,    -1,    -1,   467,   468,   469,    -1,    -1,
     472,   473,   474,   475,    -1,   477,   478,   479,   480,   481,
     482,   483,   484,    -1,   486,    -1,   488,   489,   490,   491,
     492,   493,   494,    -1,    -1,   497,    -1,    -1,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    33,
      34,    -1,    -1,    -1,    38,    -1,    -1,    -1,    -1,    -1,
      44,    45,    46,    -1,    48,    49,    50,    51,    52,    53,
      54,    -1,    56,    57,    58,    59,    -1,    61,    62,    63,
      64,    65,    66,    -1,    -1,    69,    70,    71,    72,    73,
      74,    75,    -1,    77,    78,    79,    80,    -1,    -1,    83,
      -1,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    97,    98,    99,   100,   101,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,   120,    -1,   122,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
      -1,    -1,   136,   137,   138,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,    -1,   151,   152,   153,
     154,    -1,   156,   157,   158,   159,   160,   161,    -1,    -1,
     164,    -1,    -1,   167,   168,   169,   170,    -1,   172,    -1,
     174,   175,    -1,   177,   178,   179,   180,   181,   182,    -1,
     184,   185,    -1,    -1,    -1,   189,   190,    -1,   192,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
      -1,   205,   206,   207,   208,   209,   210,   211,    -1,   213,
     214,    -1,   216,   217,   218,   219,   220,   221,   222,    -1,
     224,    -1,   226,   227,   228,   229,   230,   231,   232,   233,
      -1,   235,   236,   237,    -1,    -1,   240,   241,   242,   243,
      -1,   245,    -1,    -1,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
      -1,    -1,   286,   287,   288,   289,    -1,    -1,   292,   293,
     294,   295,   296,    -1,   298,   299,    -1,    -1,   302,   303,
     304,    -1,    -1,   307,   308,    -1,   310,   311,   312,   313,
      -1,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,    -1,    -1,    -1,    -1,   332,   333,
      -1,   335,   336,   337,    -1,    -1,   340,   341,   342,    -1,
     344,   345,   346,   347,   348,    -1,   350,    -1,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,    -1,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,    -1,   377,   378,   379,   380,   381,   382,    -1,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,    -1,   398,   399,   400,   401,   402,   403,
     404,    -1,   406,   407,    -1,   409,   410,   411,   412,   413,
      -1,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,    -1,    -1,    -1,   433,
     434,    -1,   436,   437,   438,    -1,   440,   441,   442,   443,
     444,    -1,   446,   447,   448,    -1,    -1,   451,   452,    -1,
     454,    -1,    -1,   457,   458,   459,   460,   461,   462,   463,
     464,    -1,    -1,   467,   468,   469,   470,    -1,   472,   473,
     474,   475,    -1,   477,   478,   479,   480,   481,    -1,   483,
     484,    -1,   486,   487,   488,   489,   490,   491,   492,   493,
     494,    -1,    -1,   497,    -1,    -1,   500,   501,   502,   503,
     504,   505,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   517,   518,   519,   520,    -1,    -1,    -1,
      -1,    -1,    23,    24,    25,    26,    27,    28,    29,    30,
      -1,    32,    33,    34,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    -1,    -1,    44,    45,    46,    -1,    48,    49,    50,
      51,    52,    53,    54,    -1,    56,    57,    58,    59,    -1,
      61,    62,    63,    64,    65,    66,    -1,    -1,    69,    70,
      71,    72,    73,    74,    75,    -1,    77,    78,    79,    80,
      -1,    -1,    83,    -1,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    -1,    96,    97,    98,    99,   100,
     101,    -1,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
      -1,   122,   123,   124,   125,   126,   127,    -1,    -1,   130,
     131,   132,   133,    -1,    -1,   136,   137,   138,   139,   140,
     141,    -1,   143,   144,   145,    -1,   147,   148,   149,    -1,
     151,   152,   153,   154,    -1,   156,   157,   158,   159,   160,
     161,    -1,    -1,   164,    -1,    -1,   167,   168,   169,   170,
      -1,   172,    -1,   174,   175,    -1,   177,   178,   179,    -1,
     181,   182,    -1,   184,   185,    -1,    -1,    -1,   189,   190,
      -1,   192,   193,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,    -1,   205,   206,   207,   208,   209,   210,
     211,    -1,   213,   214,    -1,   216,   217,   218,   219,   220,
     221,   222,    -1,   224,    -1,   226,   227,   228,   229,   230,
     231,   232,   233,    -1,   235,   236,   237,    -1,    -1,   240,
     241,   242,   243,    -1,   245,    -1,    -1,   248,   249,   250,
     251,   252,   253,   254,    -1,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,    -1,    -1,   286,   287,   288,   289,    -1,
      -1,   292,   293,   294,   295,   296,    -1,   298,   299,    -1,
      -1,   302,   303,   304,    -1,    -1,   307,   308,    -1,   310,
     311,   312,   313,    -1,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,    -1,    -1,    -1,
      -1,   332,   333,    -1,   335,   336,   337,    -1,    -1,   340,
     341,   342,    -1,   344,   345,   346,   347,   348,    -1,   350,
      -1,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,    -1,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,    -1,   377,   378,   379,   380,
     381,   382,    -1,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,    -1,   398,   399,   400,
     401,   402,   403,   404,    -1,   406,   407,    -1,   409,   410,
     411,   412,   413,    -1,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,    -1,   429,    -1,
      -1,    -1,   433,   434,    -1,   436,   437,   438,    -1,   440,
     441,   442,   443,   444,    -1,   446,   447,   448,    -1,    -1,
     451,   452,    -1,   454,    -1,    -1,   457,   458,   459,   460,
     461,   462,   463,   464,    -1,    -1,   467,   468,   469,   470,
      -1,   472,   473,   474,   475,    -1,   477,   478,   479,   480,
     481,    -1,   483,   484,    -1,   486,   487,   488,   489,   490,
     491,   492,   493,   494,    -1,    -1,   497,    -1,    -1,   500,
     501,   502,   503,   504,   505,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   517,   518,   519,   520,
      -1,    -1,    -1,    -1,    -1,    23,    24,    25,    26,    27,
      28,    29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    45,    46,    -1,
      -1,    49,    50,    -1,    52,    53,    54,    55,    56,    -1,
      58,    59,    -1,    61,    62,    63,    64,    65,    66,    -1,
      -1,    69,    70,    71,    72,    73,    74,    75,    -1,    77,
      78,    79,    80,    81,    -1,    -1,    -1,    85,    86,    87,
      88,    89,    90,    -1,    92,    93,    94,    -1,    96,    97,
      98,    99,   100,   101,    -1,    -1,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,   120,    -1,   122,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,    -1,    -1,   136,   137,
     138,   139,   140,   141,    -1,   143,   144,   145,    -1,   147,
     148,   149,    -1,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,    -1,   164,    -1,    -1,   167,
     168,   169,   170,    -1,   172,    -1,   174,    -1,    -1,    -1,
     178,   179,   180,    -1,   182,    -1,   184,   185,    -1,   187,
     188,    -1,   190,    -1,   192,   193,   194,   195,   196,   197,
     198,    -1,   200,   201,   202,   203,    -1,   205,   206,   207,
     208,   209,   210,   211,    -1,   213,    -1,   215,   216,   217,
     218,   219,   220,   221,   222,    -1,   224,    -1,   226,    -1,
      -1,   229,    -1,   231,   232,   233,    -1,   235,   236,   237,
      -1,    -1,   240,    -1,   242,    -1,    -1,   245,    -1,    -1,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
      -1,   279,   280,   281,   282,   283,   284,    -1,   286,   287,
      -1,   289,    -1,   291,   292,   293,   294,   295,   296,    -1,
     298,   299,    -1,    -1,   302,   303,   304,    -1,    -1,   307,
     308,   309,    -1,   311,   312,    -1,   314,   315,   316,   317,
     318,   319,   320,    -1,   322,   323,   324,   325,   326,   327,
      -1,    -1,    -1,    -1,   332,   333,   334,    -1,   336,   337,
     338,    -1,   340,   341,   342,    -1,   344,   345,   346,   347,
     348,    -1,   350,    -1,   352,   353,   354,    -1,   356,   357,
     358,   359,   360,   361,    -1,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,    -1,   377,
     378,    -1,   380,   381,   382,   383,    -1,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,    -1,
      -1,   399,   400,   401,   402,   403,   404,   405,   406,   407,
      -1,    -1,   410,   411,   412,   413,    -1,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,    -1,    -1,   433,   434,    -1,   436,    -1,
     438,    -1,   440,   441,   442,   443,   444,    -1,   446,   447,
     448,    -1,    -1,   451,   452,   453,   454,   455,    -1,   457,
     458,   459,   460,   461,   462,   463,   464,    -1,    -1,   467,
     468,   469,    -1,    -1,   472,   473,   474,   475,    -1,   477,
     478,   479,   480,   481,   482,   483,   484,    -1,   486,    -1,
     488,   489,   490,   491,   492,   493,   494,    -1,    -1,   497,
      -1,    -1,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,   519,   520,    23,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    33,    -1,    35,    36,    -1,    -1,    -1,
      -1,    -1,    23,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    33,    -1,    54,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    63,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    54,    -1,    -1,    -1,    77,    -1,    -1,
      -1,    -1,    63,    -1,    -1,    -1,    -1,    -1,    88,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    77,    -1,    -1,    -1,
     100,    -1,   102,    -1,    -1,    -1,    -1,    88,    -1,    -1,
      -1,    -1,    -1,   113,    -1,    -1,    -1,    -1,    -1,   100,
      -1,   102,    -1,    -1,    -1,    -1,    -1,    -1,   128,   129,
      -1,    -1,   113,    -1,    -1,    -1,    -1,    -1,    -1,   139,
      -1,    -1,    -1,    -1,    -1,    -1,   146,   128,   129,    -1,
      -1,    -1,    -1,    -1,   154,    -1,    -1,    -1,   139,    -1,
      -1,    -1,    -1,    -1,    -1,   146,    -1,    -1,    -1,    -1,
      -1,    -1,   172,   154,    -1,    -1,   176,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   172,    -1,    -1,    -1,   176,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   219,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   219,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   248,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   248,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   328,   329,
     330,    -1,    -1,    -1,    -1,    -1,   336,    -1,    -1,    -1,
     340,    -1,    -1,    -1,    -1,    -1,    -1,   328,   329,   330,
      -1,    -1,    -1,    -1,    -1,   336,    -1,    -1,    -1,   340,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   372,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   381,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   372,    -1,    -1,    -1,    -1,    -1,   397,    -1,    -1,
     381,    -1,    -1,    -1,   404,    -1,    -1,    -1,   408,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   397,    -1,    -1,   419,
      -1,    -1,    -1,   404,    -1,    -1,    -1,   408,    -1,    -1,
      -1,   431,    -1,    -1,    -1,   435,    -1,    -1,   419,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     431,    -1,    -1,    -1,   435,    -1,    -1,   457,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   471,    -1,    -1,    -1,    -1,   457,   477,    -1,    -1,
      -1,    -1,   482,    -1,    -1,    -1,    -1,   487,    -1,    -1,
     471,    -1,    -1,    -1,    -1,    -1,   477,    -1,    -1,   499,
      -1,   482,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   499,    -1,
      -1,    -1,    -1,   523,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   537,    -1,    -1,
      -1,    -1,   523,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   537
};

/* YYSTOS[STATE-NUM] -- The symbol kind of the accessing symbol of
   state STATE-NUM.  */
static const yytype_int16 yystos[] =
{
       0,    23,    33,    35,    36,    49,    54,    63,    77,    86,
      88,   100,   102,   113,   128,   129,   130,   139,   146,   154,
     156,   157,   172,   176,   203,   248,   328,   329,   330,   336,
     340,   372,   381,   397,   404,   408,   419,   431,   435,   457,
     471,   474,   477,   482,   499,   523,   537,   548,   549,   550,
     551,   552,   559,   574,   575,   576,   579,   580,   582,   593,
     611,   661,   664,   673,   682,   685,   692,   694,   698,   699,
     703,   709,   711,   715,   722,   726,   727,   728,   735,   740,
     756,   757,   760,   761,   764,   766,   767,   768,   769,   771,
     773,   774,   778,   838,   839,  1019,  1022,  1023,  1031,  1032,
    1037,  1040,  1046,  1047,  1048,  1051,   451,   502,  1020,   208,
     388,   399,   435,   489,   110,   197,   305,   577,  1020,     3,
      23,    24,    25,    26,    27,    28,    29,    30,    32,    33,
      34,    44,    45,    46,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    61,    62,    63,    64,
      65,    66,    69,    70,    71,    72,    73,    74,    75,    77,
      78,    79,    80,    81,    83,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    96,    97,    98,    99,   100,
     101,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   120,   122,   123,
     124,   125,   126,   127,   130,   131,   132,   133,   136,   137,
     138,   139,   140,   141,   143,   144,   145,   147,   148,   149,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   164,   167,   168,   169,   170,   172,   174,   175,
     177,   178,   179,   180,   181,   182,   184,   185,   187,   188,
     189,   190,   192,   193,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   205,   206,   207,   208,   209,   210,
     211,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   224,   226,   227,   228,   229,   230,   231,   232,   233,
     235,   236,   237,   240,   241,   242,   243,   245,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   286,   287,   288,   289,   291,
     292,   293,   294,   295,   296,   298,   299,   302,   303,   304,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   332,   333,   334,   335,   336,   337,   338,   340,   341,
     342,   344,   345,   346,   347,   348,   350,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   409,
     410,   411,   412,   413,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     433,   434,   436,   437,   438,   440,   441,   442,   443,   444,
     446,   447,   448,   451,   452,   453,   454,   455,   457,   458,
     459,   460,   461,   462,   463,   464,   467,   468,   469,   472,
     473,   474,   475,   477,   478,   479,   480,   481,   482,   483,
     484,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     497,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,   518,
     519,   520,   586,   920,  1008,  1012,  1024,  1025,  1026,     3,
     180,   255,   428,   581,   586,  1024,   300,  1020,    57,   176,
     537,   606,   182,   249,   305,   327,   388,   441,   443,   466,
     469,   659,   687,   734,     5,    31,   340,   586,   587,  1007,
       3,    31,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    47,    48,    51,    55,    56,    57,    58,    59,
      60,    67,    68,    73,    74,    76,    81,    82,    83,    84,
      85,    91,    95,   102,   103,   110,   114,   117,   119,   121,
     128,   129,   134,   135,   142,   146,   150,   155,   162,   163,
     165,   166,   169,   171,   173,   175,   176,   177,   180,   181,
     183,   186,   187,   188,   191,   199,   204,   212,   214,   215,
     221,   222,   223,   224,   225,   227,   228,   230,   234,   238,
     239,   241,   243,   244,   246,   247,   255,   277,   278,   279,
     284,   285,   288,   290,   291,   293,   297,   300,   301,   305,
     306,   309,   310,   313,   314,   328,   329,   330,   331,   334,
     335,   338,   339,   343,   349,   351,   357,   362,   376,   379,
     383,   397,   398,   405,   408,   409,   412,   414,   428,   430,
     431,   432,   435,   437,   439,   445,   447,   448,   449,   450,
     453,   455,   456,   459,   465,   466,   470,   471,   476,   482,
     483,   485,   487,   495,   496,   498,   499,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   592,  1024,
    1028,  1030,    25,    83,    99,   149,   159,   173,   178,   208,
     254,   258,   271,   333,   350,   385,   388,   399,   402,   421,
     435,   443,   444,   454,   460,   489,   687,   704,   705,   708,
    1020,  1007,   102,   139,   487,   537,   551,   552,   559,   579,
     580,   593,   611,   661,   664,   673,   682,   692,   694,   698,
     699,   703,   711,   718,   722,   728,   735,   756,   760,   761,
     764,   766,  1019,  1022,  1023,  1032,  1037,  1040,  1046,  1051,
     110,    77,    68,    81,    83,   162,   238,   291,   301,   314,
     334,   339,   384,   430,   453,   455,   459,   482,   537,   585,
     586,   587,   767,   839,   841,   843,   844,   854,   861,   862,
     920,   922,   923,   110,     5,   586,   588,   758,   586,  1007,
      31,   182,   249,   403,   447,   451,   484,   586,  1038,  1039,
    1050,  1020,    31,   134,   790,   791,   182,   249,   388,   403,
     447,   484,  1041,  1042,  1050,  1020,   585,   586,   587,   766,
     778,   861,   435,   787,   585,   177,   537,  1034,   537,   360,
     779,   780,  1007,   779,   767,   768,  1046,     0,   540,   487,
     716,   124,   218,   473,   219,   150,   223,   306,   465,   793,
     794,   844,   844,   767,   769,   771,   546,    31,   447,   451,
     585,   766,   197,   585,  1007,   197,   585,   197,   861,   197,
     585,   285,   370,   588,   356,  1021,   535,   539,   589,   590,
     537,    84,   110,   178,   208,   254,   271,   388,   399,   435,
     460,   489,   584,   110,   766,   585,   441,   443,   441,   443,
     370,   197,   585,   178,   183,   246,   247,   254,   360,   399,
     435,   439,   460,   489,   671,   674,   395,   208,    31,  1007,
     197,   592,   260,   454,   109,   435,   435,   489,   392,   395,
     197,   586,   706,  1014,   197,  1004,  1007,   197,  1007,   537,
     714,   305,   443,   718,     3,   482,   719,   721,   722,   724,
     725,  1024,  1028,   716,   586,   588,   581,   537,   537,   171,
     537,   767,   862,   537,   537,   585,   537,   537,   537,   176,
     537,   537,   537,   537,   767,   839,   844,   854,   530,   589,
      19,    42,   586,   855,   856,   855,   397,   546,   770,   537,
     767,   861,   862,    38,    44,   103,   177,   214,   230,   241,
     278,   328,   335,   379,   398,   471,   858,   856,    42,   586,
     855,   857,   523,   866,   588,   526,   537,   537,   762,  1039,
    1039,  1039,   520,   229,  1039,   539,   300,     4,     6,     7,
       8,     9,    10,    41,    56,    58,    59,    67,    73,    74,
      85,   114,   117,   119,   138,   155,   163,   169,   187,   188,
     221,   222,   224,   234,   255,   277,   279,   285,   290,   293,
     302,   357,   383,   412,   447,   448,   456,   470,   483,   521,
     528,   529,   530,   535,   537,   541,   543,   544,   545,   586,
     588,   767,   828,   878,   881,   884,   885,   886,   888,   889,
     890,   891,   893,   894,   910,   912,   913,   914,   915,   916,
     917,   918,   919,   920,   921,   923,   924,   939,   940,   951,
     973,   979,   987,   988,   989,  1008,  1009,  1010,   986,   988,
    1041,  1041,   588,  1041,   520,  1041,   176,   449,   526,  1021,
     589,   700,   861,     3,   175,   177,   487,   722,  1033,  1035,
     175,  1036,   586,   910,   957,   958,   779,   546,   537,  1016,
     538,   538,   538,   550,   585,   176,   305,   743,   160,   700,
     758,    31,   134,   788,   788,    61,   788,   166,   171,   244,
     297,   799,   801,   802,   831,   833,   834,   835,   186,   300,
     476,   300,   793,   794,   537,   436,  1049,   520,   229,   155,
      27,    33,   139,   304,   368,   372,   404,   479,   568,   571,
     572,   368,   155,    42,    62,   108,   207,   259,   269,   282,
     316,   368,   374,   399,   404,   419,   553,   556,   571,   155,
     368,   404,   571,   155,   368,   404,   571,   155,   577,    42,
     578,   301,   504,   910,   980,   591,   592,   590,     3,    31,
      38,    44,    48,    51,    57,    83,    85,    91,   103,   134,
     175,   177,   180,   181,   199,   214,   227,   228,   230,   241,
     243,   255,   278,   288,   310,   313,   335,   379,   398,   409,
     428,   437,   459,   470,   485,   487,   538,   794,   910,   960,
     961,  1011,  1017,  1024,  1029,   910,   435,   585,   586,   538,
     537,   648,   388,   659,   687,   285,   683,   489,   197,   585,
     197,   585,   663,   197,   585,   197,   585,   197,   585,   271,
     197,   586,   686,    91,   731,   155,   503,    92,   131,   319,
     442,   197,   586,   155,   539,  1015,    65,   375,   546,   707,
     155,   546,   707,   155,   300,   712,   713,   910,  1017,   370,
     538,   546,     4,   163,   300,   456,   528,   529,   555,   558,
     588,   717,   719,   720,   723,  1010,   718,   449,   537,   601,
     605,   910,   958,   537,     3,    70,    71,   111,   112,   115,
     116,   194,   195,   261,   262,   263,   264,   265,   266,   267,
     268,   272,   273,   352,   353,   393,   394,   493,   494,   517,
     518,   588,   896,   897,   898,   899,   900,   901,   902,   903,
     904,   905,   906,   907,   908,   963,   964,   856,   857,   910,
     585,   910,   965,   528,   529,   586,   911,   912,   940,   951,
     967,   585,   537,   910,   957,   968,   910,    60,   176,   239,
     450,   910,   958,   971,   910,   538,   587,   537,   437,   808,
     809,   809,   790,   791,   844,   225,   785,   854,   809,    48,
     813,   809,    38,   230,   398,   858,   230,   310,   859,   844,
     859,   230,   858,   537,   230,   859,   151,   205,   846,   230,
     813,   537,   587,   537,   809,   307,   910,  1043,  1045,   960,
       3,    38,    44,    48,    51,    56,    57,    58,    59,    73,
      74,    83,    85,    91,   103,   114,   117,   169,   175,   177,
     181,   199,   214,   221,   222,   224,   227,   228,   230,   241,
     243,   255,   277,   278,   279,   288,   293,   310,   313,   335,
     357,   379,   383,   398,   405,   409,   412,   428,   437,   447,
     448,   459,   465,   470,   483,   487,   872,   874,   875,   877,
     879,   881,   883,   885,   886,   887,   889,   890,   893,   894,
     962,  1013,  1024,  1027,    42,   242,   586,   537,   535,   767,
     486,   892,   910,   977,   892,   892,   537,   537,   880,   880,
     338,   767,   537,   882,  1004,   541,    73,    74,   892,   910,
     880,   537,   537,   501,   523,   537,   895,   537,   895,   537,
     910,   910,   910,    85,   151,   990,   994,   910,   958,   959,
     767,   910,   957,   587,   941,   942,   943,   592,     9,    19,
     539,   589,   981,   589,   537,   588,   537,   537,   588,  1010,
       3,     8,    11,    15,    16,    17,    18,    20,    21,    22,
      37,    42,    48,    55,    82,   181,   199,   204,   227,   228,
     243,   285,   288,   302,   305,   409,   521,   524,   525,   526,
     528,   529,   530,   531,   532,   533,   949,   950,   951,   953,
     984,   500,   925,   313,   910,   546,   785,   537,   588,   785,
       3,   119,   249,   555,   588,   894,  1044,   106,  1045,  1045,
      42,   586,   538,   546,   716,   546,   538,   780,  1004,  1005,
     476,   781,  1016,   700,   198,   370,   225,   648,   404,   176,
     488,   759,   769,   769,    31,   795,   796,   910,    61,   769,
     789,   168,   281,   819,   232,   282,   356,   407,   473,     4,
       9,    31,   814,   910,   528,   529,   815,   816,   910,   912,
     831,   832,   802,   801,   799,   800,   171,   834,   295,   836,
      61,   775,   776,   777,   847,   911,   988,   988,   799,   831,
     958,   242,   585,    76,    84,    95,   173,   197,   343,   466,
     566,   567,   586,   628,   655,    84,    95,   765,    95,   765,
     537,   449,   322,   415,   537,   626,   253,   322,   415,   469,
     626,    95,   546,   449,   585,     3,   877,   555,    61,   557,
     555,   555,   108,   259,   269,    61,   449,   499,   523,   554,
     275,   388,   554,   556,   861,    95,   449,   765,   388,   585,
     449,   388,   577,   588,   586,   601,   536,    19,   960,   960,
     961,   198,   373,   792,   546,   793,   794,    13,    14,   227,
     227,   449,   449,   586,   647,   652,   499,   604,   585,   360,
     399,   435,   460,   489,   671,   674,   395,   155,   102,   611,
     673,   684,   692,   728,  1051,   585,   285,   553,   693,   285,
     537,   648,    42,   285,    42,   285,   648,   285,   537,   665,
     666,   667,   668,   669,   670,   672,   197,   585,   285,   204,
     688,   197,   586,   642,   732,   592,   155,   176,   710,   706,
     591,   539,  1014,  1004,  1007,  1007,  1014,   538,   546,    13,
     718,   724,     4,  1010,     4,  1010,   588,   592,   603,   610,
      57,   104,   125,   144,   148,   172,   175,   192,   290,   298,
     321,   354,   607,    42,   538,   910,   538,   176,   546,   538,
     331,   966,   538,   911,   911,    11,    15,    16,    20,    21,
      22,   204,   227,   302,   524,   525,   526,   528,   529,   530,
     531,   532,   533,   951,   911,   538,   546,   863,   864,   922,
     171,   176,   969,   970,   546,   538,    42,   971,   958,   971,
     971,   176,   538,    42,   855,   537,  1005,     4,     9,   586,
     803,   804,   806,   807,   915,   988,   986,   182,   249,   435,
     441,   443,   469,   585,   786,   496,   867,   538,   537,   809,
     844,   230,   844,   300,   476,   860,   844,   230,   988,   844,
     292,   292,   537,   844,   809,   587,   868,   869,   537,   587,
     868,   546,   538,   546,   539,   537,   877,   537,   537,   539,
      41,   876,   537,   896,   897,   898,   899,   900,   901,   902,
     903,   904,   905,   906,   907,   908,   909,   538,   546,   880,
     593,   699,   735,   740,   763,   766,  1022,  1046,   958,   959,
     537,   495,   974,   975,   910,   959,  1010,    19,   910,   944,
     945,   946,   947,   892,   892,     8,    15,    16,    20,    21,
      22,   524,   525,   526,   528,   529,   530,   531,   532,   533,
     586,   949,   954,   538,   958,   447,   447,  1010,  1010,   910,
     537,   537,   587,   991,   370,   998,   171,   536,   538,   546,
      19,   546,   542,   910,   530,   590,   958,  1010,   910,   909,
     909,   874,   910,   910,   910,   910,   910,   910,   910,   910,
       5,   592,  1018,   447,    47,   432,   985,  1014,   910,   910,
     537,   767,   916,   972,   979,   134,   163,   285,   290,   295,
     456,   467,   910,   290,   537,   910,   449,    55,   181,   199,
     204,   243,   409,   910,   910,   910,   910,   910,   910,   910,
     910,   910,   910,    31,    39,   414,   948,   535,   539,   983,
     186,   167,   926,   383,   537,   940,   989,   176,   840,   960,
     840,   537,   588,   586,   585,  1033,   574,   585,   910,   546,
     538,   232,    42,   476,   702,   585,   737,   537,   586,   742,
     752,   753,   755,   586,   588,   586,   588,    43,   128,   797,
     546,   476,   797,   275,   769,   383,   384,   528,   529,   816,
     818,   912,   407,   232,   301,   326,   326,   546,   532,     4,
     817,  1010,   817,   383,   384,   818,   585,  1003,   289,   411,
     837,   537,  1005,  1006,   546,   186,   476,   204,   186,   225,
     832,   800,   538,   368,   571,   537,   197,   567,  1007,   232,
     285,   232,   476,   537,   631,   638,   639,   873,   874,   539,
     564,   565,  1007,   586,   197,  1007,   197,   566,    27,   139,
     404,   563,   570,   592,   622,   636,  1007,    61,    61,   592,
     630,   651,    61,    61,  1007,   568,  1007,   368,   404,   553,
     571,   555,  1014,  1007,   555,  1014,  1007,   555,   368,   404,
     571,  1007,  1007,   566,  1007,   368,   404,   571,  1007,  1007,
     588,   578,   529,   910,   980,   793,   793,   793,   292,   292,
     538,   485,   961,   792,   910,   910,   290,   583,   588,   290,
     583,   586,   348,   600,   538,   546,   298,   176,   449,   595,
     683,   489,   585,   585,   663,   585,   585,   585,   271,   686,
     585,   305,   659,   537,   155,   155,   243,   586,   628,   640,
     643,   646,   656,   658,   499,   501,   633,   154,   766,   155,
     147,   695,   874,   155,   499,   733,   155,   538,   960,   546,
     546,    42,   285,   325,   155,     3,   537,   285,   300,   586,
       3,   707,   591,   707,   300,   707,   712,   910,   601,   255,
     530,   535,   537,   555,   602,   723,   917,   918,   919,   538,
     546,    42,   599,   588,   599,   285,   290,   354,   599,    61,
     599,   874,   538,   910,   910,   910,   969,   874,   911,   911,
     911,   911,   911,   911,   134,   285,   295,   911,   911,   911,
     911,   911,   911,   911,   911,   911,   911,   349,   844,   538,
     546,    42,   865,   910,   910,   970,   969,   874,   538,   538,
     538,   958,   874,  1005,   538,   326,   384,   532,   537,   537,
     785,   441,   443,   441,   443,   585,   787,   787,   787,   910,
     186,   820,   448,   488,   811,   812,   860,   844,   910,   537,
     844,   171,   537,   587,   851,   860,   874,   538,   546,   868,
     538,  1043,     3,   962,    41,   876,   586,   871,   871,     3,
     535,   535,  1010,   449,   449,   449,   449,   874,   473,   538,
     536,   958,   910,   142,   975,   976,   538,   538,   538,   910,
      19,   546,   542,   539,   538,   538,   520,   520,   538,   538,
     538,   910,   991,   992,   993,   539,   537,   910,   995,   368,
    1002,  1004,   910,   910,   941,   994,   538,   538,   538,   520,
     911,   911,   148,   958,   176,   134,   163,   290,   295,   456,
     467,   537,   148,   954,   910,   432,   985,   910,   972,   910,
     449,   537,   767,   910,   980,   591,   537,   537,   158,   927,
     841,   842,   867,   793,   867,  1010,   909,  1016,  1016,   537,
     258,   285,   784,   842,   496,   701,    42,    61,   738,   748,
     755,   981,   546,   840,   526,   759,   759,   522,   798,   796,
     302,   949,   952,   798,     4,  1010,   818,   301,   473,   815,
     546,   252,  1005,   775,    61,   988,   537,   587,    61,   275,
     449,   910,   285,   655,   537,   155,   537,   631,   208,   652,
     653,   612,    42,   180,   621,   649,   591,   565,   612,    27,
     139,   372,   374,   404,   560,   561,   562,   572,   573,   155,
     707,   155,   707,   622,   636,   622,   538,   546,   588,   615,
     526,   539,   538,   546,   537,   537,   449,   388,    95,   449,
     765,   388,   449,   449,   449,   388,   578,   601,    19,    19,
     536,   792,   792,   792,   961,   538,   537,   594,     3,   422,
     423,   588,   609,   647,   600,   585,   693,   537,    42,    42,
     648,   668,   670,   585,   688,   683,   370,   435,   652,   585,
     585,   663,   585,   638,   639,   538,   546,   298,   626,   298,
     300,   625,  1007,   499,   662,   585,   537,   767,   585,   626,
      42,   585,   538,   666,   672,   669,   672,   435,   910,   155,
       5,   686,   592,   690,   691,   155,   585,   710,  1014,   597,
     608,   723,   603,   588,   588,   290,   652,   530,   652,   588,
     530,   652,   588,   538,   538,   970,   176,   134,   295,   537,
       5,   538,   546,   866,   863,   537,   538,   538,   538,   586,
     804,   867,   787,   787,   787,   787,   585,   585,   585,    61,
     191,   829,    14,   538,   860,  1005,   537,   848,   849,   850,
     913,   916,  1005,   171,    82,   870,   869,   538,   538,   535,
     874,   538,   546,   538,  1010,   536,  1010,   538,   897,   899,
     900,   901,   900,   901,   901,   538,   445,   910,   146,   910,
     944,   954,   895,   895,   538,   546,   538,   587,   910,   995,
     996,   997,    42,   537,   991,   999,   204,   538,   998,   909,
     910,    37,    37,   910,   538,   910,   176,   537,   962,   910,
     538,   148,   911,   911,   148,   148,   910,   910,   536,    19,
     537,   982,   794,   496,   910,   312,   931,   546,   820,   792,
     820,   538,   586,   782,   783,   978,   258,   537,   910,   376,
     746,   586,   275,   334,   119,   315,   537,   736,   766,   538,
     546,   742,   701,   910,   168,   237,   537,   798,   301,   585,
     538,  1006,   186,   767,   768,   988,  1006,  1007,  1007,   538,
     155,   653,   567,   653,   612,   642,   546,   538,   121,   212,
     282,   285,   637,   537,    34,    61,   660,   649,    76,    82,
      95,   119,   121,   212,   285,   290,   343,   362,   466,   476,
     617,   618,   632,   180,   119,   196,   285,   626,   554,   109,
     119,   180,   285,   421,   424,   556,   626,   404,   562,   460,
    1007,   566,   570,     3,    38,    44,    48,    51,    57,    83,
      85,    91,   103,   175,   177,   180,   181,   199,   214,   227,
     228,   230,   241,   243,   255,   278,   284,   288,   302,   310,
     313,   335,   379,   398,   405,   409,   428,   437,   459,   465,
     470,   487,   528,   529,   555,   588,   613,   654,   874,   952,
    1011,  1024,  1030,   592,   651,   958,   795,  1007,  1007,  1007,
    1007,   566,  1007,  1007,  1007,  1007,  1007,   601,   980,   980,
     538,   538,   538,   793,   109,   388,   539,   554,   609,   537,
     646,   766,   695,   733,   325,   537,   659,   197,   585,   538,
     693,   537,    42,   635,   633,   586,   643,    88,   714,   109,
     282,    42,   588,   696,   697,   648,   766,   668,   670,    42,
      42,   767,   768,   585,   300,   675,   688,   689,   910,   538,
     546,   642,   476,   730,   707,   538,   546,   652,   911,   176,
     537,   962,   546,   856,   844,   868,   538,   546,   538,   820,
     585,   585,   585,   585,    31,   105,   187,   382,   537,   821,
     822,   823,   824,   825,   826,   827,   910,   910,   498,   928,
     910,   538,   912,   955,   956,   204,   186,   845,   849,   538,
     851,   852,   853,  1014,   876,  1010,   876,   586,   876,   536,
     536,   910,   991,   546,   538,   586,   999,  1000,  1001,    42,
     910,   912,  1002,   910,   910,   910,   962,   538,   910,    37,
      37,   910,   910,   148,   538,   529,   980,   538,   960,   538,
     910,   538,   537,   586,   932,   829,   538,   829,   588,   538,
     546,   763,   987,   482,   434,   475,   747,   586,   741,   751,
     300,   744,   526,   755,   746,   954,    61,   538,   538,   481,
     482,   772,   612,   567,   538,   538,   499,   645,   122,   200,
     210,   121,   478,   910,   119,    42,   537,  1014,  1007,   911,
     122,   200,   121,   290,   232,   585,   645,    90,   660,   197,
     290,   555,   910,   660,   290,   528,   529,   558,   586,   873,
     874,   707,   707,     3,   255,   428,  1011,  1015,   526,   538,
     538,   449,   449,   536,   536,   792,   538,   538,   586,   601,
     476,   596,   598,   652,   538,   662,    42,     5,   691,   435,
     285,   537,   733,   646,   154,   766,   152,   206,   625,   124,
     139,   342,   662,   109,   695,   538,   546,   733,   499,  1052,
     435,   325,   165,   283,   349,   435,   677,   537,   690,   300,
     586,   729,   537,   608,   911,   962,   538,   844,   538,   538,
       9,   369,   810,   829,   537,   406,   537,   538,   546,   586,
     929,   930,   351,   830,   546,   538,   537,   587,    61,   538,
     204,   538,   852,   536,   874,   995,   546,   538,   586,   536,
     197,   538,   910,   910,   910,    19,    19,   536,   538,   538,
     586,   933,   928,   588,   928,   978,   538,   546,   481,   981,
     538,   546,    93,   746,   910,   538,  1006,  1006,   362,   645,
     537,   634,   612,   538,   196,   537,   910,   285,   618,   645,
     648,  1007,    42,   155,   870,  1015,   532,   613,  1007,  1007,
     538,   554,   126,   538,   633,   766,   675,   538,   585,   155,
      42,   538,  1007,   662,    31,    87,    96,   120,   196,   209,
     421,   424,   629,   629,   384,   384,   588,    42,    66,    76,
     249,   767,     5,   530,   537,   585,    40,   681,   585,   311,
     691,   585,   537,   586,   745,   754,   922,   538,   538,   856,
     538,   537,   928,   958,   537,   958,   823,    42,   546,   910,
     476,   805,   912,   988,  1005,   856,   537,   856,   999,   910,
     980,   980,   321,   934,   830,   830,   766,   315,   766,   741,
     300,   537,   739,   585,   612,   592,   641,   644,   425,   491,
     619,   620,   537,   614,   910,   538,   257,   657,   196,   476,
     569,   532,   460,   601,   588,   733,   625,  1052,   537,   585,
     766,   633,   714,   766,    76,   303,    76,   675,   994,  1005,
     676,   677,     5,   304,   680,   676,   537,   538,   730,   910,
      82,   749,   538,   546,   749,   856,     9,   830,   538,   822,
     538,   932,   930,   386,   538,   988,   536,   536,   536,    61,
     793,   805,   805,   747,    95,   754,   135,   648,   526,   538,
     546,   553,   538,   282,   627,   177,   320,   410,   300,   623,
     624,   650,   614,   910,   460,    42,   537,  1052,   625,   662,
    1052,   303,   303,   538,   141,   541,   311,   640,   678,   679,
     537,   538,  1014,   750,  1014,   733,   745,   750,   538,   805,
     538,   807,   538,   957,   189,   355,   384,   935,   481,  1007,
     538,   286,   473,   657,   613,   644,   538,   620,   210,   124,
     473,   300,   650,   300,   623,   766,   585,   943,   537,   538,
     546,   754,   749,   797,   867,   797,    55,   106,   462,   910,
     936,   937,   936,   936,   538,   766,   867,   404,   624,    65,
     282,   375,   404,   616,   616,  1052,   676,   542,   678,   680,
     640,   538,   750,   798,   798,   937,   383,   170,   337,   170,
     337,   151,   938,   938,   938,   753,   612,    26,   119,   290,
     311,   538,   733,   797,    37,   106,   186,   282,   446,   867,
     537,   680,   867,   798,   937,   383,   308,   678,   538,   680
};

/* YYR1[RULE-NUM] -- Symbol kind of the left-hand side of rule RULE-NUM.  */
static const yytype_int16 yyr1[] =
{
       0,   547,   548,   549,   549,   550,   550,   550,   550,   550,
     550,   550,   550,   550,   550,   550,   550,   550,   550,   550,
     550,   550,   550,   550,   550,   550,   550,   550,   550,   550,
     550,   550,   550,   550,   550,   550,   550,   550,   550,   550,
     550,   550,   550,   550,   550,   550,   550,   550,  1040,  1040,
    1040,  1040,  1040,  1041,  1041,  1041,  1041,  1042,  1042,  1043,
    1044,  1044,  1044,  1044,  1044,  1044,  1044,  1045,  1045,   575,
     575,   575,   576,   576,   576,   577,   577,   578,   578,   715,
     715,   715,   715,   716,   716,   717,   717,   717,   718,   718,
     718,   718,   718,   718,   718,   718,   718,   718,   718,   718,
     718,   718,   718,   718,   718,   718,   718,   718,   718,   718,
     718,   718,   718,   718,   718,   718,   718,   718,   718,   718,
     719,   719,   719,   720,   720,   721,   721,   722,   722,   723,
     723,   723,   723,   724,   725,   725,   728,   728,   729,   730,
     730,   731,   731,   732,   732,   733,   733,   734,   734,   574,
     574,  1046,  1046,  1046,  1046,  1046,  1046,  1046,  1046,  1047,
    1047,  1048,  1048,  1049,  1049,  1050,  1050,   694,   694,   694,
     695,   695,   695,   696,   696,   697,   697,   585,   585,   586,
     586,   586,   587,   587,   588,   589,   589,   590,   591,   592,
     592,   592,   592,   735,   736,   736,   736,   736,   736,   737,
     737,   738,   738,   738,   739,   739,   739,   740,   740,   741,
     742,   742,   743,   743,   743,   744,   744,   744,   745,   745,
     745,   746,   746,   747,   747,   748,   748,   749,   749,   750,
     750,   751,   751,   752,   752,   753,   753,   754,   754,   755,
     698,   698,   698,   698,   664,   664,   664,   664,   664,   664,
     665,   666,   667,   667,   668,   668,   669,   670,   670,   671,
     671,   672,   672,   673,   673,   673,   674,   674,   674,   674,
     675,   675,   675,   675,   676,   676,   677,   677,   678,   678,
     678,   679,   679,   680,   680,   681,   681,   682,   682,   682,
     683,   683,   684,   684,   684,   684,   684,   551,   551,   551,
     551,   551,   551,  1019,  1019,  1019,  1019,  1019,  1019,  1020,
    1020,  1020,  1021,  1021,  1021,   579,   611,   611,   611,   612,
     612,   613,   613,   613,   613,   613,   613,   614,   614,   615,
     616,   616,   616,   616,   616,   617,   617,   617,   617,   618,
     618,   618,   618,   618,   618,   618,   618,   619,   619,   620,
     620,   621,   621,   621,   622,   623,   624,   624,   624,   624,
     624,   625,   625,   625,   625,   626,   627,   627,   628,   628,
     629,   629,   629,   629,   629,   629,   629,   629,   630,   630,
     631,   632,   632,   632,   632,   633,   633,   633,   633,   634,
     635,   635,   635,   636,   637,   637,   637,   637,   637,   637,
     638,   639,   640,   640,   641,   641,   642,   643,   643,   643,
     644,   644,   645,   645,   646,   646,   646,   647,   648,   648,
     649,   649,   650,   651,   651,   651,   651,   652,   652,   653,
     653,   654,   654,   654,   655,   655,   655,   655,   655,   655,
     656,   656,   657,   657,   657,   657,   658,   659,   659,   659,
     659,   659,   659,   659,   659,   660,   660,   692,   692,   692,
     693,   693,   766,   766,   767,   767,   767,   768,   768,   768,
     768,   768,   768,   768,   768,   769,   769,   770,   770,   771,
     771,   771,   771,   771,   771,   771,   771,   771,   771,   771,
     771,   771,   771,   771,   771,   771,   771,   771,   772,   772,
     773,   773,   774,   774,   775,   775,   775,   776,   776,   777,
     777,   778,   778,   778,   779,   779,   780,   781,   781,   782,
     782,   783,   783,   784,   784,   784,   785,   785,   786,   786,
     786,   786,   786,   786,   786,   786,   786,   787,   787,   788,
     788,   788,   789,   790,   790,   791,   791,   792,   792,   792,
     793,   793,   794,   794,   795,   795,   796,   796,   797,   797,
     797,   798,   798,   798,   799,   799,   799,   799,   800,   800,
     801,   801,   801,   801,   802,   802,   803,   803,   803,   804,
     804,   804,   804,   805,   805,   806,   806,   807,   807,   807,
     807,   808,   809,   809,   810,   810,   811,   811,   812,   813,
     813,   814,   814,   814,   814,   814,   815,   816,   816,   816,
     817,   817,   818,   818,   819,   819,   820,   820,   820,   821,
     821,   822,   822,   823,   823,   823,   823,   823,   824,   825,
     826,   827,   828,   828,   829,   829,   830,   830,   831,   831,
     832,   832,   833,   833,   834,   835,   835,   835,   835,   836,
     836,   837,   837,   837,   838,   838,   839,   839,   840,   840,
     841,   841,   842,   842,   843,   844,   844,   844,   844,   844,
     844,   844,   844,   844,   844,   844,   844,   844,   844,   844,
     844,   844,   845,   845,   846,   846,   846,   847,   847,   848,
     848,   848,   849,   849,   850,   850,   851,   851,   852,   853,
     853,   854,   854,   854,   854,   854,   854,   854,   854,   854,
     854,   854,   855,   855,   855,   855,   856,   856,   857,   857,
     857,   857,   857,   858,   858,   858,   858,   858,   858,   859,
     859,   860,   860,   861,   861,   861,   861,   862,   862,   863,
     864,   864,   865,   865,   866,   866,   867,   867,   868,   868,
     869,   870,   870,   871,   871,   872,   872,   873,   873,   874,
     874,   874,   874,   874,   874,   874,   874,   874,   874,   875,
     875,   876,   876,   876,   877,   877,   877,   877,   877,   877,
     877,   878,   878,   878,   878,   879,   880,   880,   881,   881,
     881,   881,   881,   881,   881,   881,   881,   881,   881,   882,
     882,   883,   883,   884,   884,   885,   886,   887,   887,   888,
     888,   889,   890,   891,   891,   891,   891,   891,   891,   892,
     892,   893,   893,   893,   893,   894,   895,   895,   895,   896,
     896,   897,   897,   898,   898,   899,   899,   900,   900,   901,
     901,   902,   902,   903,   903,   904,   904,   905,   905,   906,
     906,   907,   907,   908,   908,   909,   909,   909,   909,   909,
     909,   909,   909,   909,   909,   909,   909,   909,   909,   909,
     909,   909,   909,   909,   909,   909,   910,   910,   910,   910,
     910,   910,   910,   910,   910,   910,   910,   910,   910,   910,
     910,   910,   910,   910,   910,   910,   910,   910,   910,   910,
     910,   910,   910,   910,   910,   910,   910,   910,   910,   910,
     910,   910,   910,   910,   910,   910,   910,   910,   910,   910,
     910,   910,   910,   910,   910,   910,   910,   910,   910,   910,
     910,   910,   910,   910,   910,   910,   910,   910,   910,   910,
     910,   910,   910,   910,   910,   910,   910,   910,   910,   911,
     911,   911,   911,   911,   911,   911,   911,   911,   911,   911,
     911,   911,   911,   911,   911,   911,   911,   911,   911,   911,
     911,   911,   911,   911,   912,   912,   913,   913,   913,   913,
     913,   913,   914,   914,   914,   915,   915,   915,   916,   916,
     916,   916,   916,   916,   916,   916,   916,   916,   917,   918,
     919,   920,   920,   920,   920,   920,   920,   920,   921,   921,
     922,   922,   923,   923,   923,   923,   923,   923,   923,   923,
     923,   923,   923,   923,   923,   923,   924,   924,   925,   925,
     926,   926,   926,   927,   927,   928,   928,   929,   929,   930,
     931,   931,   931,   932,   933,   933,   934,   934,   935,   935,
     935,   935,   936,   936,   937,   937,   937,   937,   937,   938,
     938,   938,   938,   938,   939,   939,   940,   940,   941,   942,
     942,   943,   943,   944,   945,   945,   946,   946,   947,   947,
     948,   948,   948,   949,   949,   950,   950,   950,   950,   950,
     950,   950,   950,   950,   950,   950,   950,   950,   950,   951,
     951,   952,   952,   953,   953,   953,   953,   953,   953,   953,
     953,   954,   954,   955,   955,   956,   956,   957,   957,   958,
     958,   959,   959,   960,   960,   961,   961,   961,   962,   962,
     963,   963,   964,   964,   964,   964,   964,   964,   964,   964,
     964,   964,   964,   964,   964,   964,   964,   965,   965,   966,
     967,   967,   968,   968,   968,   968,   968,   968,   969,   970,
     971,   971,   971,   972,   972,   972,   972,   973,   974,   974,
     975,   976,   976,   977,   977,   978,   979,   979,   590,   590,
     590,   590,   980,   980,   981,   981,   982,   982,   982,   983,
     983,   983,   983,   983,   984,   984,   985,   985,   986,   986,
     987,   987,   988,   988,   989,   989,   989,   989,   990,   990,
     991,   991,   992,   992,   993,   993,   994,   994,   995,   996,
     996,   997,   997,   998,   998,   998,   999,  1000,  1000,  1001,
    1001,  1002,  1002,  1002,  1003,  1003,  1004,  1004,  1005,  1005,
    1006,  1006,  1007,  1008,  1008,  1009,  1009,  1009,  1009,  1009,
    1009,  1009,  1009,  1009,  1009,  1009,  1009,  1009,  1009,  1010,
    1011,  1011,  1011,  1012,  1012,  1012,  1013,  1013,  1013,  1014,
    1014,  1015,  1015,  1016,  1016,  1017,  1018,  1018,   726,   726,
     727,   761,   762,   762,   763,   763,   763,   763,   763,   763,
    1037,  1037,  1037,  1037,  1037,  1038,  1038,  1039,  1039,  1039,
     582,   582,   583,   583,   584,   584,   584,   584,   584,   584,
     584,   584,   584,   584,   584,  1032,  1032,  1032,  1032,  1032,
    1033,  1033,  1033,  1033,  1033,  1034,  1034,  1035,  1035,  1036,
    1036,   709,   709,   710,   710,   559,   559,   559,   559,   559,
     559,   559,   559,   560,   560,   561,   561,   562,   562,   562,
     562,   563,   563,   564,   564,   565,   566,   566,   567,   567,
     568,   568,   568,   568,   568,   568,   568,   568,   568,   568,
     568,   568,   568,   568,   568,   568,   568,   568,   568,   568,
     568,   568,   568,   568,   568,   568,   568,   568,   568,   568,
     568,   568,   568,   569,   569,   570,   570,   570,   570,   571,
     571,   572,   573,   573,   573,   760,   760,   760,   593,   593,
     593,   594,   594,   594,   595,   595,   596,   596,   597,   597,
     598,   598,   599,   599,   600,   600,   601,   601,   602,   602,
     602,   602,   602,   602,   602,   602,   603,   604,   604,   605,
     605,   606,   606,   607,   607,   607,   607,   607,   607,   607,
     607,   607,   607,   607,   607,   607,   607,   607,   607,   608,
     609,   609,   609,   609,   609,   610,   610,   756,   756,   756,
     756,   757,   757,   758,   758,   759,   759,   759,  1022,  1051,
    1051,  1051,  1051,  1051,  1052,  1052,  1052,  1052,   552,   552,
     553,   553,   554,   554,   554,   555,   555,   555,   555,   556,
     556,   556,   556,   556,   556,   556,   556,   556,   556,   556,
     556,   556,   556,   557,   557,   558,   558,   558,  1031,   580,
     580,   581,   581,   661,   661,   661,   662,   662,   662,   663,
     685,   685,   685,   686,   686,   687,   687,   687,   688,   688,
     689,   690,   691,   691,   703,   703,   703,   703,   703,   703,
     704,   704,   704,   704,   704,   704,   704,   704,   704,   704,
     704,   704,   704,   704,   704,   704,   704,   704,   704,   705,
     705,   705,   705,   705,   705,   706,   706,   707,   707,   707,
     708,   708,   708,   711,   711,   711,   712,   712,   713,   713,
     714,   714,   699,   699,   700,   700,   700,   701,   701,   702,
     702,   764,   764,   764,   764,   764,   764,   764,   764,   764,
     764,   764,   764,   764,   765,   765,  1023,  1024,  1024,  1024,
    1024,  1024,  1024,  1024,  1024,  1024,  1024,  1024,  1024,  1024,
    1024,  1024,  1024,  1024,  1024,  1024,  1024,  1024,  1024,  1024,
    1024,  1024,  1024,  1024,  1024,  1024,  1024,  1024,  1024,  1024,
    1024,  1024,  1024,  1024,  1024,  1024,  1024,  1024,  1024,  1024,
    1024,  1024,  1024,  1024,  1024,  1024,  1024,  1024,  1024,  1024,
    1024,  1024,  1024,  1024,  1024,  1024,  1024,  1024,  1024,  1024,
    1024,  1024,  1024,  1024,  1024,  1024,  1024,  1024,  1024,  1024,
    1024,  1024,  1024,  1024,  1024,  1024,  1024,  1024,  1024,  1024,
    1024,  1024,  1024,  1024,  1024,  1024,  1024,  1024,  1024,  1024,
    1024,  1024,  1024,  1024,  1024,  1024,  1024,  1024,  1024,  1024,
    1024,  1024,  1024,  1024,  1024,  1024,  1024,  1024,  1024,  1024,
    1024,  1024,  1024,  1024,  1024,  1024,  1024,  1024,  1024,  1024,
    1024,  1024,  1024,  1024,  1024,  1024,  1024,  1024,  1024,  1024,
    1024,  1024,  1024,  1024,  1024,  1024,  1024,  1024,  1024,  1024,
    1024,  1024,  1024,  1024,  1024,  1024,  1024,  1024,  1024,  1024,
    1024,  1024,  1024,  1024,  1024,  1024,  1024,  1024,  1024,  1024,
    1024,  1024,  1024,  1024,  1024,  1024,  1024,  1024,  1024,  1024,
    1024,  1024,  1024,  1024,  1024,  1024,  1024,  1024,  1024,  1024,
    1024,  1024,  1024,  1024,  1024,  1024,  1024,  1024,  1024,  1024,
    1024,  1024,  1024,  1024,  1024,  1024,  1024,  1024,  1024,  1024,
    1024,  1024,  1024,  1024,  1024,  1024,  1024,  1024,  1024,  1024,
    1024,  1024,  1024,  1024,  1024,  1024,  1024,  1024,  1024,  1024,
    1024,  1024,  1024,  1024,  1024,  1024,  1024,  1024,  1024,  1024,
    1024,  1024,  1024,  1024,  1024,  1024,  1024,  1024,  1024,  1024,
    1024,  1024,  1024,  1024,  1024,  1024,  1024,  1024,  1024,  1024,
    1024,  1024,  1024,  1024,  1024,  1024,  1024,  1024,  1024,  1024,
    1024,  1024,  1024,  1024,  1024,  1024,  1024,  1024,  1024,  1024,
    1024,  1024,  1024,  1024,  1024,  1024,  1024,  1024,  1024,  1024,
    1024,  1024,  1024,  1024,  1024,  1024,  1024,  1024,  1024,  1024,
    1024,  1024,  1024,  1024,  1024,  1024,  1024,  1024,  1024,  1024,
    1024,  1024,  1024,  1024,  1024,  1024,  1024,  1024,  1024,  1024,
    1024,  1024,  1024,  1024,  1024,  1024,  1024,  1024,  1024,  1024,
    1024,  1024,  1024,  1024,  1024,  1024,  1024,  1024,  1024,  1025,
    1025,  1025,  1025,  1025,  1025,  1025,  1025,  1025,  1025,  1025,
    1025,  1025,  1025,  1025,  1025,  1025,  1025,  1025,  1025,  1025,
    1025,  1025,  1025,  1025,  1025,  1025,  1025,  1025,  1025,  1025,
    1025,  1025,  1025,  1025,  1025,  1025,  1025,  1025,  1025,  1025,
    1025,  1025,  1025,  1025,  1025,  1025,  1025,  1025,  1025,  1025,
    1025,  1025,  1025,  1026,  1026,  1026,  1026,  1026,  1026,  1026,
    1026,  1026,  1026,  1026,  1026,  1026,  1026,  1026,  1026,  1026,
    1026,  1026,  1026,  1026,  1026,  1026,  1026,  1026,  1026,  1026,
    1026,  1026,  1027,  1027,  1027,  1027,  1027,  1027,  1027,  1027,
    1027,  1027,  1027,  1027,  1027,  1027,  1027,  1027,  1027,  1027,
    1027,  1027,  1027,  1027,  1027,  1027,  1027,  1027,  1027,  1027,
    1027,  1027,  1027,  1028,  1028,  1028,  1028,  1028,  1028,  1028,
    1028,  1028,  1028,  1028,  1028,  1028,  1028,  1028,  1028,  1028,
    1028,  1028,  1028,  1028,  1028,  1028,  1028,  1028,  1028,  1028,
    1028,  1028,  1028,  1028,  1028,  1028,  1028,  1028,  1028,  1028,
    1028,  1028,  1028,  1028,  1028,  1028,  1028,  1028,  1028,  1028,
    1028,  1028,  1028,  1028,  1028,  1028,  1028,  1028,  1028,  1028,
    1028,  1028,  1028,  1028,  1028,  1028,  1028,  1028,  1028,  1028,
    1028,  1028,  1028,  1028,  1028,  1028,  1028,  1028,  1028,  1028,
    1028,  1028,  1028,  1028,  1028,  1028,  1029,  1029,  1029,  1029,
    1029,  1029,  1029,  1029,  1029,  1029,  1029,  1029,  1029,  1029,
    1029,  1029,  1029,  1029,  1029,  1029,  1029,  1029,  1029,  1029,
    1029,  1029,  1029,  1029,  1029,  1029,  1029,  1029,  1029,  1029,
    1030,  1030,  1030,  1030,  1030,  1030,  1030,  1030,  1030,  1030,
    1030,  1030,  1030,  1030,  1030,  1030,  1030,  1030,  1030,  1030,
    1030,  1030,  1030,  1030,  1030,  1030,  1030,  1030,  1030,  1030,
    1030,  1030,  1030,  1030,  1030,  1030,  1030,  1030,  1030,  1030,
    1030,  1030,  1030,  1030,  1030,  1030,  1030,  1030,  1030,  1030,
    1030,  1030,  1030,  1030,  1030,  1030,  1030,  1030,  1030,  1030,
    1030,  1030,  1030,  1030,  1030,  1030,  1030,  1030,  1030,  1030,
    1030,  1030,  1030,  1030,  1030,  1030,  1030,  1030,  1030,  1030,
    1030,  1030,  1030
};

/* YYR2[RULE-NUM] -- Number of symbols on the right-hand side of rule RULE-NUM.  */
static const yytype_int8 yyr2[] =
{
       0,     2,     1,     3,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     0,     2,     3,
       3,     3,     3,     1,     3,     3,     2,     3,     3,     1,
       1,     1,     3,     5,     1,     1,     1,     1,     3,     5,
       8,     7,     2,     3,     5,     1,     0,     2,     0,     2,
       4,     3,     5,     1,     0,     1,     1,     0,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     3,     1,     1,     1,
       1,     1,     1,     2,     1,     1,    13,    16,     1,     2,
       0,     1,     0,     1,     0,     2,     0,     1,     0,     2,
       4,     2,     2,     2,     2,     3,     4,     3,     1,     1,
       1,     1,     1,     1,     0,     1,     3,     6,     9,     8,
       2,     4,     1,     1,     0,     1,     3,     1,     2,     1,
       1,     1,     1,     1,     1,     1,     2,     2,     1,     1,
       1,     1,     1,     9,     1,     4,     4,     7,     2,     1,
       3,     2,     2,     0,     4,     3,     0,     1,     0,     2,
       3,     5,     2,     2,     0,     8,     5,     0,     5,     5,
       7,     2,     0,     1,     1,     1,     3,     2,     0,     1,
       0,     1,     3,     1,     3,     1,     2,     1,     3,     2,
       2,     3,     2,     3,     5,     8,     7,     5,     8,     7,
       4,     4,     1,     3,     1,     1,     3,     1,     3,     1,
       1,     2,     3,     8,    11,    10,     1,     1,     1,     1,
       9,     7,    12,     4,     1,     0,     4,     3,     1,     2,
       0,     1,     3,     4,     0,     2,     0,     4,     7,     6,
       2,     0,     1,     1,     1,     1,     1,     6,     8,     6,
       8,     6,     8,     2,     3,     3,     2,     2,     2,     1,
       1,     0,     2,     2,     0,     2,     9,    12,    11,     0,
       2,     1,     1,     1,     1,     1,     1,     3,     0,     1,
       2,     1,     1,     2,     2,     3,     1,     1,     2,     2,
       1,     2,     3,     5,     3,     2,     5,     1,     1,     1,
       0,     5,     7,     5,     2,     3,     1,     1,     2,     2,
       0,     3,     4,     4,     0,     3,     2,     0,     3,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     3,
       3,     1,     2,     2,     2,     2,     2,     2,     0,     3,
       3,     3,     0,     1,     2,     1,     2,     2,     2,     2,
       2,     3,     2,     2,     1,     3,     1,     1,     1,     1,
       3,     1,     2,     0,     1,     2,     0,     1,     3,     0,
       2,     0,     3,     3,     1,     5,     3,     1,     3,     1,
       2,     1,     4,     5,     5,     6,     3,     7,     4,    11,
       1,     3,     2,     2,     2,     0,     3,     1,     1,     2,
       2,     2,     2,     1,     0,     1,     2,     5,     8,     7,
       1,     0,     1,     1,     3,     3,     3,     1,     2,     4,
       4,     2,     3,     5,     5,     1,     1,     3,     0,    11,
      11,    10,    12,     1,     2,     5,     4,     4,     4,     4,
       7,     5,     4,     7,     6,     9,     9,     4,     1,     1,
       1,     1,     1,     1,     1,     5,     1,     1,     3,     1,
       2,     2,     2,     3,     1,     3,     8,     5,     0,     1,
       2,     1,     3,     1,     2,     0,     2,     0,     3,     3,
       4,     4,     4,     4,     3,     2,     1,     1,     0,     1,
       1,     0,     2,     1,     5,     1,     0,     2,     2,     0,
       1,     0,     3,     5,     1,     3,     4,     3,     1,     1,
       0,     2,     2,     0,     2,     2,     1,     1,     1,     0,
       2,     4,     5,     4,     2,     3,     1,     1,     1,     2,
       2,     1,     2,     3,     0,     1,     0,     5,     1,     4,
       6,     2,     1,     0,     4,     0,     1,     1,     3,     4,
       0,     1,     1,     2,     2,     2,     1,     1,     2,     2,
       1,     1,     1,     1,     1,     1,     3,     3,     0,     1,
       3,     1,     2,     1,     1,     1,     1,     1,     2,     4,
       4,     5,     1,     1,     2,     0,     2,     0,     1,     3,
       1,     0,     1,     2,     3,     2,     4,     2,     3,     2,
       0,     1,     2,     0,     4,     5,     1,     2,     2,     0,
       1,     3,     1,     2,     2,     4,     4,     3,     3,     3,
       3,     3,     3,     3,     1,     4,     4,     9,     9,     7,
      10,     9,     3,     0,     2,     2,     0,     5,     3,     1,
       1,     3,     5,     3,     1,     2,     1,     3,     5,     1,
       2,     3,     4,     5,     4,     5,     4,     6,     5,     4,
       5,     5,     5,     2,     4,     1,     1,     0,     1,     4,
       5,     4,     0,     2,     2,     2,     1,     1,     1,     1,
       0,     4,     2,     1,     2,     2,     4,     2,     6,     2,
       1,     3,     4,     0,     2,     0,     2,     0,     1,     3,
       3,     2,     0,     2,     4,     1,     1,     1,     0,     2,
       3,     5,     6,     2,     3,     1,     5,     5,     5,     3,
       3,     3,     4,     0,     1,     1,     1,     1,     1,     2,
       4,     1,     1,     1,     1,     2,     3,     0,     1,     1,
       1,     1,     1,     2,     2,     2,     2,     2,     1,     3,
       0,     1,     1,     1,     1,     5,     2,     1,     1,     1,
       1,     4,     1,     2,     2,     1,     3,     3,     2,     1,
       0,     5,     2,     5,     2,     1,     3,     3,     0,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     3,     3,
       3,     3,     3,     3,     3,     0,     1,     3,     3,     5,
       2,     2,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     2,     2,     3,
       3,     2,     2,     3,     3,     5,     4,     6,     3,     5,
       4,     6,     4,     6,     5,     7,     3,     2,     4,     3,
       2,     4,     3,     3,     3,     3,     4,     3,     4,     3,
       4,     5,     6,     6,     7,     6,     7,     6,     7,     3,
       4,     4,     6,     1,     4,     4,     5,     4,     6,     1,
       3,     2,     2,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     2,     2,
       5,     6,     6,     7,     1,     2,     1,     1,     1,     2,
       2,     4,     3,     1,     1,     1,     1,     2,     1,     1,
       1,     1,     1,     1,     1,     2,     4,     2,     3,     3,
       4,     3,     5,     6,     7,     9,     7,     7,     5,     1,
       1,     1,     5,     6,     6,     4,     4,     4,     4,     6,
       5,     5,     5,     4,     6,     4,     7,     9,     5,     0,
       5,     4,     0,     1,     0,     2,     0,     1,     3,     3,
       2,     2,     0,     6,     1,     0,     3,     0,     3,     3,
       3,     0,     1,     4,     2,     2,     2,     2,     2,     3,
       2,     2,     3,     0,     4,     3,     1,     5,     3,     1,
       3,     1,     2,     3,     1,     3,     1,     2,     1,     0,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       4,     1,     4,     1,     4,     1,     2,     1,     2,     1,
       2,     1,     3,     1,     3,     1,     2,     1,     3,     1,
       2,     1,     0,     1,     3,     1,     3,     3,     1,     3,
       3,     0,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     4,     3,     2,
       3,     0,     3,     3,     2,     2,     1,     0,     2,     2,
       3,     2,     1,     1,     3,     1,     1,     5,     1,     2,
       4,     2,     0,     1,     0,     1,     1,     2,     3,     5,
       7,     7,     1,     0,     0,     2,     0,     2,     3,     3,
       3,     5,     7,     7,     0,     2,     1,     0,     1,     0,
       1,     3,     1,     2,     3,     2,     1,     3,     4,     2,
       1,     3,     1,     3,     1,     2,     1,     0,     3,     1,
       3,     1,     2,     4,     2,     0,     3,     1,     3,     1,
       2,     4,     2,     0,     1,     3,     1,     3,     1,     2,
       1,     3,     1,     1,     2,     1,     1,     2,     1,     1,
       2,     7,     2,     5,     3,     3,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       2,     2,     3,     3,     0,     1,     1,     1,     4,     6,
       3,     5,     3,     0,     1,     1,     1,     1,     1,     1,
       2,     3,     3,     3,     3,     1,     1,     1,     2,     3,
       6,     6,     1,     1,     1,     1,     1,     1,     1,     2,
       1,     1,     1,     1,     1,     4,     6,     5,     4,     6,
       1,     1,     1,     1,     1,     1,     0,     1,     3,     1,
       0,     5,     7,     0,     2,     4,     6,     4,     6,     4,
       6,     4,     6,     1,     2,     3,     2,     1,     3,     2,
       3,     1,     3,     1,     2,     2,     1,     2,     2,     2,
       2,     5,     3,     6,     6,     3,     6,     3,     4,     6,
       6,     6,     5,     5,     6,     9,     4,     5,     7,     6,
       4,     8,     4,     2,     4,     3,     6,     4,     2,     2,
       2,     2,     1,     2,     0,     1,     2,     2,     2,     1,
       3,     4,     2,     1,     0,     2,     4,     5,    11,     9,
       7,     0,     3,     3,     1,     1,     3,     0,     1,     3,
       1,     0,     1,     0,     1,     0,     1,     3,     1,     1,
       1,     1,     3,     1,     1,     0,     2,     2,     0,     2,
       0,     1,     0,     1,     1,     1,     3,     3,     1,     1,
       3,     3,     3,     3,     3,     3,     4,     3,     2,     1,
       1,     1,     1,     3,     1,     1,     3,     2,     4,     6,
       6,     0,     1,     1,     1,     0,     2,     2,     8,     9,
      12,    11,    12,    14,     3,     4,     4,     0,     4,     6,
       1,     2,     1,     1,     0,     1,     2,     2,     1,     2,
       2,     1,     2,     3,     2,     2,     2,     2,     3,     3,
       3,     1,     3,     1,     0,     1,     2,     2,     2,     3,
       2,     1,     0,     7,    10,     9,     2,     3,     0,     4,
       8,    11,    10,     0,     1,     0,     1,     1,     0,     2,
       1,     2,     1,     3,     6,     4,     6,     4,     6,     8,
       1,     1,     1,     1,     1,     2,     1,     2,     1,     2,
       1,     1,     1,     1,     3,     3,     3,     3,     1,     2,
       2,     1,     3,     1,     1,     1,     3,     1,     1,     0,
       1,     1,     1,     3,     9,    12,     1,     3,     1,     3,
       3,     0,     7,     3,     1,     2,     3,     2,     0,     2,
       0,     6,     6,     8,     6,     8,     6,     8,     6,     8,
       8,    10,     8,    10,     1,     0,     4,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1
};


enum { YYENOMEM = -2 };

#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (yychar = YYEMPTY)

#define YYACCEPT        goto yyacceptlab
#define YYABORT         goto yyabortlab
#define YYERROR         goto yyerrorlab
#define YYNOMEM         goto yyexhaustedlab


#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)                                    \
  do                                                              \
    if (yychar == YYEMPTY)                                        \
      {                                                           \
        yychar = (Token);                                         \
        yylval = (Value);                                         \
        YYPOPSTACK (yylen);                                       \
        yystate = *yyssp;                                         \
        goto yybackup;                                            \
      }                                                           \
    else                                                          \
      {                                                           \
        yyerror (&yylloc, yyscanner, YY_("syntax error: cannot back up")); \
        YYERROR;                                                  \
      }                                                           \
  while (0)

/* Backward compatibility with an undocumented macro.
   Use YYerror or YYUNDEF. */
#define YYERRCODE YYUNDEF

/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)                                \
    do                                                                  \
      if (N)                                                            \
        {                                                               \
          (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;        \
          (Current).first_column = YYRHSLOC (Rhs, 1).first_column;      \
          (Current).last_line    = YYRHSLOC (Rhs, N).last_line;         \
          (Current).last_column  = YYRHSLOC (Rhs, N).last_column;       \
        }                                                               \
      else                                                              \
        {                                                               \
          (Current).first_line   = (Current).last_line   =              \
            YYRHSLOC (Rhs, 0).last_line;                                \
          (Current).first_column = (Current).last_column =              \
            YYRHSLOC (Rhs, 0).last_column;                              \
        }                                                               \
    while (0)
#endif

#define YYRHSLOC(Rhs, K) ((Rhs)[K])


/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)                        \
do {                                            \
  if (yydebug)                                  \
    YYFPRINTF Args;                             \
} while (0)


/* YYLOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

# ifndef YYLOCATION_PRINT

#  if defined YY_LOCATION_PRINT

   /* Temporary convenience wrapper in case some people defined the
      undocumented and private YY_LOCATION_PRINT macros.  */
#   define YYLOCATION_PRINT(File, Loc)  YY_LOCATION_PRINT(File, *(Loc))

#  elif defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL

/* Print *YYLOCP on YYO.  Private, do not rely on its existence. */

YY_ATTRIBUTE_UNUSED
static int
yy_location_print_ (FILE *yyo, YYLTYPE const * const yylocp)
{
  int res = 0;
  int end_col = 0 != yylocp->last_column ? yylocp->last_column - 1 : 0;
  if (0 <= yylocp->first_line)
    {
      res += YYFPRINTF (yyo, "%d", yylocp->first_line);
      if (0 <= yylocp->first_column)
        res += YYFPRINTF (yyo, ".%d", yylocp->first_column);
    }
  if (0 <= yylocp->last_line)
    {
      if (yylocp->first_line < yylocp->last_line)
        {
          res += YYFPRINTF (yyo, "-%d", yylocp->last_line);
          if (0 <= end_col)
            res += YYFPRINTF (yyo, ".%d", end_col);
        }
      else if (0 <= end_col && yylocp->first_column < end_col)
        res += YYFPRINTF (yyo, "-%d", end_col);
    }
  return res;
}

#   define YYLOCATION_PRINT  yy_location_print_

    /* Temporary convenience wrapper in case some people defined the
       undocumented and private YY_LOCATION_PRINT macros.  */
#   define YY_LOCATION_PRINT(File, Loc)  YYLOCATION_PRINT(File, &(Loc))

#  else

#   define YYLOCATION_PRINT(File, Loc) ((void) 0)
    /* Temporary convenience wrapper in case some people defined the
       undocumented and private YY_LOCATION_PRINT macros.  */
#   define YY_LOCATION_PRINT  YYLOCATION_PRINT

#  endif
# endif /* !defined YYLOCATION_PRINT */


# define YY_SYMBOL_PRINT(Title, Kind, Value, Location)                    \
do {                                                                      \
  if (yydebug)                                                            \
    {                                                                     \
      YYFPRINTF (stderr, "%s ", Title);                                   \
      yy_symbol_print (stderr,                                            \
                  Kind, Value, Location, yyscanner); \
      YYFPRINTF (stderr, "\n");                                           \
    }                                                                     \
} while (0)


/*-----------------------------------.
| Print this symbol's value on YYO.  |
`-----------------------------------*/

static void
yy_symbol_value_print (FILE *yyo,
                       yysymbol_kind_t yykind, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, core_yyscan_t yyscanner)
{
  FILE *yyoutput = yyo;
  YY_USE (yyoutput);
  YY_USE (yylocationp);
  YY_USE (yyscanner);
  if (!yyvaluep)
    return;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YY_USE (yykind);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}


/*---------------------------.
| Print this symbol on YYO.  |
`---------------------------*/

static void
yy_symbol_print (FILE *yyo,
                 yysymbol_kind_t yykind, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, core_yyscan_t yyscanner)
{
  YYFPRINTF (yyo, "%s %s (",
             yykind < YYNTOKENS ? "token" : "nterm", yysymbol_name (yykind));

  YYLOCATION_PRINT (yyo, yylocationp);
  YYFPRINTF (yyo, ": ");
  yy_symbol_value_print (yyo, yykind, yyvaluep, yylocationp, yyscanner);
  YYFPRINTF (yyo, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

static void
yy_stack_print (yy_state_t *yybottom, yy_state_t *yytop)
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)                            \
do {                                                            \
  if (yydebug)                                                  \
    yy_stack_print ((Bottom), (Top));                           \
} while (0)


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

static void
yy_reduce_print (yy_state_t *yyssp, YYSTYPE *yyvsp, YYLTYPE *yylsp,
                 int yyrule, core_yyscan_t yyscanner)
{
  int yylno = yyrline[yyrule];
  int yynrhs = yyr2[yyrule];
  int yyi;
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %d):\n",
             yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr,
                       YY_ACCESSING_SYMBOL (+yyssp[yyi + 1 - yynrhs]),
                       &yyvsp[(yyi + 1) - (yynrhs)],
                       &(yylsp[(yyi + 1) - (yynrhs)]), yyscanner);
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)          \
do {                                    \
  if (yydebug)                          \
    yy_reduce_print (yyssp, yyvsp, yylsp, Rule, yyscanner); \
} while (0)

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args) ((void) 0)
# define YY_SYMBOL_PRINT(Title, Kind, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif






/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

static void
yydestruct (const char *yymsg,
            yysymbol_kind_t yykind, YYSTYPE *yyvaluep, YYLTYPE *yylocationp, core_yyscan_t yyscanner)
{
  YY_USE (yyvaluep);
  YY_USE (yylocationp);
  YY_USE (yyscanner);
  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yykind, yyvaluep, yylocationp);

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YY_USE (yykind);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}






/*----------.
| yyparse.  |
`----------*/

int
yyparse (core_yyscan_t yyscanner)
{
/* Lookahead token kind.  */
int yychar;


/* The semantic value of the lookahead symbol.  */
/* Default value used for initialization, for pacifying older GCCs
   or non-GCC compilers.  */
YY_INITIAL_VALUE (static YYSTYPE yyval_default;)
YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);

/* Location data for the lookahead symbol.  */
static YYLTYPE yyloc_default
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
  = { 1, 1, 1, 1 }
# endif
;
YYLTYPE yylloc = yyloc_default;

    /* Number of syntax errors so far.  */
    int yynerrs = 0; (void)yynerrs;

    yy_state_fast_t yystate = 0;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus = 0;

    /* Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* Their size.  */
    YYPTRDIFF_T yystacksize = YYINITDEPTH;

    /* The state stack: array, bottom, top.  */
    yy_state_t yyssa[YYINITDEPTH];
    yy_state_t *yyss = yyssa;
    yy_state_t *yyssp = yyss;

    /* The semantic value stack: array, bottom, top.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs = yyvsa;
    YYSTYPE *yyvsp = yyvs;

    /* The location stack: array, bottom, top.  */
    YYLTYPE yylsa[YYINITDEPTH];
    YYLTYPE *yyls = yylsa;
    YYLTYPE *yylsp = yyls;

  int yyn;
  /* The return value of yyparse.  */
  int yyresult;
  /* Lookahead symbol kind.  */
  yysymbol_kind_t yytoken = YYSYMBOL_YYEMPTY;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
  YYLTYPE yyloc;

  /* The locations where the error started and ended.  */
  YYLTYPE yyerror_range[3];



#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N), yylsp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yychar = YYEMPTY; /* Cause a token to be read.  */

  yylsp[0] = yylloc;
  goto yysetstate;


/*------------------------------------------------------------.
| yynewstate -- push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;


/*--------------------------------------------------------------------.
| yysetstate -- set current state (the top of the stack) to yystate.  |
`--------------------------------------------------------------------*/
yysetstate:
  YYDPRINTF ((stderr, "Entering state %d\n", yystate));
  YY_ASSERT (0 <= yystate && yystate < YYNSTATES);
  YY_IGNORE_USELESS_CAST_BEGIN
  *yyssp = YY_CAST (yy_state_t, yystate);
  YY_IGNORE_USELESS_CAST_END
  YY_STACK_PRINT (yyss, yyssp);

  if (yyss + yystacksize - 1 <= yyssp)
#if !defined yyoverflow && !defined YYSTACK_RELOCATE
    YYNOMEM;
#else
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYPTRDIFF_T yysize = yyssp - yyss + 1;

# if defined yyoverflow
      {
        /* Give user a chance to reallocate the stack.  Use copies of
           these so that the &'s don't force the real ones into
           memory.  */
        yy_state_t *yyss1 = yyss;
        YYSTYPE *yyvs1 = yyvs;
        YYLTYPE *yyls1 = yyls;

        /* Each stack pointer address is followed by the size of the
           data in use in that stack, in bytes.  This used to be a
           conditional around just the two extra args, but that might
           be undefined if yyoverflow is a macro.  */
        yyoverflow (YY_("memory exhausted"),
                    &yyss1, yysize * YYSIZEOF (*yyssp),
                    &yyvs1, yysize * YYSIZEOF (*yyvsp),
                    &yyls1, yysize * YYSIZEOF (*yylsp),
                    &yystacksize);
        yyss = yyss1;
        yyvs = yyvs1;
        yyls = yyls1;
      }
# else /* defined YYSTACK_RELOCATE */
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
        YYNOMEM;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
        yystacksize = YYMAXDEPTH;

      {
        yy_state_t *yyss1 = yyss;
        union yyalloc *yyptr =
          YY_CAST (union yyalloc *,
                   YYSTACK_ALLOC (YY_CAST (YYSIZE_T, YYSTACK_BYTES (yystacksize))));
        if (! yyptr)
          YYNOMEM;
        YYSTACK_RELOCATE (yyss_alloc, yyss);
        YYSTACK_RELOCATE (yyvs_alloc, yyvs);
        YYSTACK_RELOCATE (yyls_alloc, yyls);
#  undef YYSTACK_RELOCATE
        if (yyss1 != yyssa)
          YYSTACK_FREE (yyss1);
      }
# endif

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
      yylsp = yyls + yysize - 1;

      YY_IGNORE_USELESS_CAST_BEGIN
      YYDPRINTF ((stderr, "Stack size increased to %ld\n",
                  YY_CAST (long, yystacksize)));
      YY_IGNORE_USELESS_CAST_END

      if (yyss + yystacksize - 1 <= yyssp)
        YYABORT;
    }
#endif /* !defined yyoverflow && !defined YYSTACK_RELOCATE */


  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;


/*-----------.
| yybackup.  |
`-----------*/
yybackup:
  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default (yyn))
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either empty, or end-of-input, or a valid lookahead.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token\n"));
      yychar = yylex (&yylval, &yylloc, yyscanner);
    }

  if (yychar <= YYEOF)
    {
      yychar = YYEOF;
      yytoken = YYSYMBOL_YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else if (yychar == YYerror)
    {
      /* The scanner already issued an error message, process directly
         to error recovery.  But do not keep the error token as
         lookahead, it is too special and may lead us to an endless
         loop in error recovery. */
      yychar = YYUNDEF;
      yytoken = YYSYMBOL_YYerror;
      yyerror_range[1] = yylloc;
      goto yyerrlab1;
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);
  yystate = yyn;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END
  *++yylsp = yylloc;

  /* Discard the shifted token.  */
  yychar = YYEMPTY;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     '$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

  /* Default location. */
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
  yyerror_range[1] = yyloc;
  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
  case 2: /* stmtblock: stmtmulti  */
#line 522 "third_party/libpg_query/grammar/grammar.y"
                        {
				pg_yyget_extra(yyscanner)->parsetree = (yyvsp[0].list);
			}
#line 20400 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 3: /* stmtmulti: stmtmulti ';' stmt  */
#line 538 "third_party/libpg_query/grammar/grammar.y"
                                {
					if ((yyvsp[-2].list) != NIL)
					{
						/* update length of previous stmt */
						updateRawStmtEnd(llast_node(PGRawStmt, (yyvsp[-2].list)), (yylsp[-1]));
					}
					if ((yyvsp[0].node) != NULL)
						(yyval.list) = lappend((yyvsp[-2].list), makeRawStmt((yyvsp[0].node), (yylsp[-1]) + 1));
					else
						(yyval.list) = (yyvsp[-2].list);
				}
#line 20416 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 4: /* stmtmulti: stmt  */
#line 550 "third_party/libpg_query/grammar/grammar.y"
                                {
					if ((yyvsp[0].node) != NULL)
						(yyval.list) = list_make1(makeRawStmt((yyvsp[0].node), 0));
					else
						(yyval.list) = NIL;
				}
#line 20427 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 47: /* stmt: %empty  */
#line 601 "third_party/libpg_query/grammar/grammar.y"
        { (yyval.node) = NULL; }
#line 20433 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 48: /* VariableSetStmt: SET set_rest  */
#line 11 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_DEFAULT;
					(yyval.node) = (PGNode *) n;
				}
#line 20443 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 49: /* VariableSetStmt: SET LOCAL set_rest  */
#line 17 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_LOCAL;
					(yyval.node) = (PGNode *) n;
				}
#line 20453 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 50: /* VariableSetStmt: SET SESSION set_rest  */
#line 23 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_SESSION;
					(yyval.node) = (PGNode *) n;
				}
#line 20463 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 51: /* VariableSetStmt: SET GLOBAL set_rest  */
#line 29 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_GLOBAL;
					(yyval.node) = (PGNode *) n;
				}
#line 20473 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 52: /* VariableSetStmt: SET VARIABLE_P set_rest  */
#line 35 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_VARIABLE;
					(yyval.node) = (PGNode *) n;
				}
#line 20483 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 53: /* set_rest: generic_set  */
#line 44 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                {(yyval.vsetstmt) = (yyvsp[0].vsetstmt);}
#line 20489 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 54: /* set_rest: var_name FROM CURRENT_P  */
#line 46 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_CURRENT;
					n->name = (yyvsp[-2].str);
					(yyval.vsetstmt) = n;
				}
#line 20500 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 55: /* set_rest: TIME ZONE zone_value  */
#line 54 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (char*) "timezone";
					if ((yyvsp[0].node) != NULL)
						n->args = list_make1((yyvsp[0].node));
					else
						n->kind = VAR_SET_DEFAULT;
					(yyval.vsetstmt) = n;
				}
#line 20515 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 56: /* set_rest: SCHEMA Sconst  */
#line 65 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (char*) "search_path";
					n->args = list_make1(makeStringConst((yyvsp[0].str), (yylsp[0])));
					(yyval.vsetstmt) = n;
				}
#line 20527 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 57: /* generic_set: var_name TO var_list  */
#line 77 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.vsetstmt) = n;
				}
#line 20539 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 58: /* generic_set: var_name '=' var_list  */
#line 85 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.vsetstmt) = n;
				}
#line 20551 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 59: /* var_value: a_expr  */
#line 96 "third_party/libpg_query/grammar/statements/variable_set.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 20557 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 60: /* zone_value: Sconst  */
#line 102 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					(yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 20565 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 61: /* zone_value: IDENT  */
#line 106 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					(yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 20573 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 62: /* zone_value: ConstInterval Sconst opt_interval  */
#line 110 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGTypeName *t = (yyvsp[-2].typnam);
					if ((yyvsp[0].list) != NIL)
					{
						PGAConst *n = (PGAConst *) linitial((yyvsp[0].list));
						if ((n->val.val.ival & ~(INTERVAL_MASK(HOUR) | INTERVAL_MASK(MINUTE))) != 0)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("time zone interval must be HOUR or HOUR TO MINUTE"),
									 parser_errposition((yylsp[0]))));
					}
					t->typmods = (yyvsp[0].list);
					(yyval.node) = makeStringConstCast((yyvsp[-1].str), (yylsp[-1]), t);
				}
#line 20592 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 63: /* zone_value: ConstInterval '(' Iconst ')' Sconst  */
#line 125 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGTypeName *t = (yyvsp[-4].typnam);
					t->typmods = list_make2(makeIntConst(INTERVAL_FULL_RANGE, -1),
											makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 20603 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 64: /* zone_value: NumericOnly  */
#line 131 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                        { (yyval.node) = makeAConst((yyvsp[0].value), (yylsp[0])); }
#line 20609 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 65: /* zone_value: DEFAULT  */
#line 132 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                                { (yyval.node) = NULL; }
#line 20615 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 66: /* zone_value: LOCAL  */
#line 133 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                                { (yyval.node) = NULL; }
#line 20621 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 67: /* var_list: var_value  */
#line 137 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 20627 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 68: /* var_list: var_list ',' var_value  */
#line 138 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 20633 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 69: /* AttachStmt: ATTACH opt_database Sconst opt_database_alias copy_options  */
#line 8 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					PGAttachStmt *n = makeNode(PGAttachStmt);
					n->path = (yyvsp[-2].str);
					n->name = (yyvsp[-1].str);
					n->options = (yyvsp[0].list);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 20646 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 70: /* AttachStmt: ATTACH IF_P NOT EXISTS opt_database Sconst opt_database_alias copy_options  */
#line 17 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					PGAttachStmt *n = makeNode(PGAttachStmt);
					n->path = (yyvsp[-2].str);
					n->name = (yyvsp[-1].str);
					n->options = (yyvsp[0].list);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 20659 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 71: /* AttachStmt: ATTACH OR REPLACE opt_database Sconst opt_database_alias copy_options  */
#line 26 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					PGAttachStmt *n = makeNode(PGAttachStmt);
					n->path = (yyvsp[-2].str);
					n->name = (yyvsp[-1].str);
					n->options = (yyvsp[0].list);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 20672 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 72: /* DetachStmt: DETACH ColLabel  */
#line 38 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					PGDetachStmt *n = makeNode(PGDetachStmt);
					n->missing_ok = false;
					n->db_name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 20683 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 73: /* DetachStmt: DETACH DATABASE ColLabel  */
#line 45 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					PGDetachStmt *n = makeNode(PGDetachStmt);
					n->missing_ok = false;
					n->db_name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 20694 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 74: /* DetachStmt: DETACH DATABASE IF_P EXISTS ColLabel  */
#line 52 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					PGDetachStmt *n = makeNode(PGDetachStmt);
					n->missing_ok = true;
					n->db_name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 20705 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 75: /* opt_database: DATABASE  */
#line 60 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                {}
#line 20711 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 76: /* opt_database: %empty  */
#line 61 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                                {}
#line 20717 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 77: /* opt_database_alias: AS ColId  */
#line 65 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 20723 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 78: /* opt_database_alias: %empty  */
#line 66 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                                        { (yyval.str) = NULL; }
#line 20729 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 79: /* ExplainStmt: EXPLAIN ExplainableStmt  */
#line 10 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = NIL;
					(yyval.node) = (PGNode *) n;
				}
#line 20740 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 80: /* ExplainStmt: EXPLAIN analyze_keyword opt_verbose ExplainableStmt  */
#line 17 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = list_make1(makeDefElem("analyze", NULL, (yylsp[-2])));
					if ((yyvsp[-1].boolean))
						n->options = lappend(n->options,
											 makeDefElem("verbose", NULL, (yylsp[-1])));
					(yyval.node) = (PGNode *) n;
				}
#line 20754 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 81: /* ExplainStmt: EXPLAIN VERBOSE ExplainableStmt  */
#line 27 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = list_make1(makeDefElem("verbose", NULL, (yylsp[-1])));
					(yyval.node) = (PGNode *) n;
				}
#line 20765 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 82: /* ExplainStmt: EXPLAIN '(' explain_option_list ')' ExplainableStmt  */
#line 34 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = (yyvsp[-2].list);
					(yyval.node) = (PGNode *) n;
				}
#line 20776 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 83: /* opt_verbose: VERBOSE  */
#line 44 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.boolean) = true; }
#line 20782 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 84: /* opt_verbose: %empty  */
#line 45 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.boolean) = false; }
#line 20788 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 85: /* explain_option_arg: opt_boolean_or_string  */
#line 50 "third_party/libpg_query/grammar/statements/explain.y"
                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 20794 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 86: /* explain_option_arg: NumericOnly  */
#line 51 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.node) = (PGNode *) (yyvsp[0].value); }
#line 20800 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 87: /* explain_option_arg: %empty  */
#line 52 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.node) = NULL; }
#line 20806 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 120: /* NonReservedWord: IDENT  */
#line 92 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 20812 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 121: /* NonReservedWord: unreserved_keyword  */
#line 93 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 20818 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 122: /* NonReservedWord: other_keyword  */
#line 94 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 20824 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 123: /* NonReservedWord_or_Sconst: NonReservedWord  */
#line 99 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 20830 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 124: /* NonReservedWord_or_Sconst: Sconst  */
#line 100 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 20836 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 125: /* explain_option_list: explain_option_elem  */
#line 106 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 20844 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 126: /* explain_option_list: explain_option_list ',' explain_option_elem  */
#line 110 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 20852 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 127: /* analyze_keyword: ANALYZE  */
#line 117 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                {}
#line 20858 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 128: /* analyze_keyword: ANALYSE  */
#line 118 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                {}
#line 20864 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 129: /* opt_boolean_or_string: TRUE_P  */
#line 123 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "true"; }
#line 20870 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 130: /* opt_boolean_or_string: FALSE_P  */
#line 124 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "false"; }
#line 20876 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 131: /* opt_boolean_or_string: ON  */
#line 125 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "on"; }
#line 20882 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 132: /* opt_boolean_or_string: NonReservedWord_or_Sconst  */
#line 131 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 20888 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 133: /* explain_option_elem: explain_option_name explain_option_arg  */
#line 137 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 20896 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 134: /* explain_option_name: NonReservedWord  */
#line 144 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.str) = (yyvsp[0].str); }
#line 20902 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 135: /* explain_option_name: analyze_keyword  */
#line 145 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.str) = (char*) "analyze"; }
#line 20908 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 136: /* IndexStmt: CREATE_P opt_unique INDEX opt_concurrently opt_index_name ON qualified_name access_method_clause '(' index_params ')' opt_reloptions where_clause  */
#line 11 "third_party/libpg_query/grammar/statements/index.y"
                                {
					PGIndexStmt *n = makeNode(PGIndexStmt);
					n->unique = (yyvsp[-11].boolean);
					n->concurrent = (yyvsp[-9].boolean);
					n->idxname = (yyvsp[-8].str);
					n->relation = (yyvsp[-6].range);
					n->accessMethod = (yyvsp[-5].str);
					n->indexParams = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->whereClause = (yyvsp[0].node);
					n->excludeOpNames = NIL;
					n->idxcomment = NULL;
					n->indexOid = InvalidOid;
					n->oldNode = InvalidOid;
					n->primary = false;
					n->isconstraint = false;
					n->deferrable = false;
					n->initdeferred = false;
					n->transformed = false;
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 20935 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 137: /* IndexStmt: CREATE_P opt_unique INDEX opt_concurrently IF_P NOT EXISTS index_name ON qualified_name access_method_clause '(' index_params ')' opt_reloptions where_clause  */
#line 36 "third_party/libpg_query/grammar/statements/index.y"
                                {
					PGIndexStmt *n = makeNode(PGIndexStmt);
					n->unique = (yyvsp[-14].boolean);
					n->concurrent = (yyvsp[-12].boolean);
					n->idxname = (yyvsp[-8].str);
					n->relation = (yyvsp[-6].range);
					n->accessMethod = (yyvsp[-5].str);
					n->indexParams = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->whereClause = (yyvsp[0].node);
					n->excludeOpNames = NIL;
					n->idxcomment = NULL;
					n->indexOid = InvalidOid;
					n->oldNode = InvalidOid;
					n->primary = false;
					n->isconstraint = false;
					n->deferrable = false;
					n->initdeferred = false;
					n->transformed = false;
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 20962 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 138: /* access_method: ColId  */
#line 62 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 20968 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 139: /* access_method_clause: USING access_method  */
#line 66 "third_party/libpg_query/grammar/statements/index.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 20974 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 140: /* access_method_clause: %empty  */
#line 67 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (char*) DEFAULT_INDEX_TYPE; }
#line 20980 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 141: /* opt_concurrently: CONCURRENTLY  */
#line 72 "third_party/libpg_query/grammar/statements/index.y"
                                                                                        { (yyval.boolean) = true; }
#line 20986 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 142: /* opt_concurrently: %empty  */
#line 73 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = false; }
#line 20992 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 143: /* opt_index_name: index_name  */
#line 78 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 20998 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 144: /* opt_index_name: %empty  */
#line 79 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = NULL; }
#line 21004 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 145: /* opt_reloptions: WITH reloptions  */
#line 83 "third_party/libpg_query/grammar/statements/index.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 21010 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 146: /* opt_reloptions: %empty  */
#line 84 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.list) = NIL; }
#line 21016 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 147: /* opt_unique: UNIQUE  */
#line 89 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = true; }
#line 21022 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 148: /* opt_unique: %empty  */
#line 90 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = false; }
#line 21028 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 149: /* AnalyzeStmt: analyze_keyword opt_verbose  */
#line 10 "third_party/libpg_query/grammar/statements/analyze.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_ANALYZE;
					if ((yyvsp[0].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 21042 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 150: /* AnalyzeStmt: analyze_keyword opt_verbose qualified_name opt_name_list  */
#line 20 "third_party/libpg_query/grammar/statements/analyze.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_ANALYZE;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = (yyvsp[-1].range);
					n->va_cols = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 21056 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 151: /* VariableShowStmt: show_or_describe SelectStmt  */
#line 3 "third_party/libpg_query/grammar/statements/variable_show.y"
                                                    {
				PGVariableShowSelectStmt *n = makeNode(PGVariableShowSelectStmt);
				n->stmt = (yyvsp[0].node);
				n->name = (char*) "select";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 21068 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 152: /* VariableShowStmt: SUMMARIZE SelectStmt  */
#line 10 "third_party/libpg_query/grammar/statements/variable_show.y"
                                        {
				PGVariableShowSelectStmt *n = makeNode(PGVariableShowSelectStmt);
				n->stmt = (yyvsp[0].node);
				n->name = (char*) "select";
				n->is_summary = 1;
				(yyval.node) = (PGNode *) n;
			}
#line 21080 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 153: /* VariableShowStmt: SUMMARIZE qualified_name  */
#line 18 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->relation = (yyvsp[0].range);
				n->is_summary = 1;
				(yyval.node) = (PGNode *) n;
			}
#line 21091 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 154: /* VariableShowStmt: show_or_describe qualified_name  */
#line 25 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->relation = (yyvsp[0].range);
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 21102 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 155: /* VariableShowStmt: show_or_describe TIME ZONE  */
#line 32 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->set = (char*) "timezone";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 21113 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 156: /* VariableShowStmt: show_or_describe TRANSACTION ISOLATION LEVEL  */
#line 39 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->set = (char*) "transaction_isolation";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 21124 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 157: /* VariableShowStmt: show_or_describe ALL opt_tables  */
#line 46 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->set = (char*) "__show_tables_expanded";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 21135 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 158: /* VariableShowStmt: show_or_describe  */
#line 53 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->set = (char*) "__show_tables_expanded";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 21146 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 165: /* var_name: ColId  */
#line 67 "third_party/libpg_query/grammar/statements/variable_show.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 21152 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 166: /* var_name: var_name '.' ColId  */
#line 69 "third_party/libpg_query/grammar/statements/variable_show.y"
                                { (yyval.str) = psprintf("%s.%s", (yyvsp[-2].str), (yyvsp[0].str)); }
#line 21158 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 167: /* CreateTypeStmt: CREATE_P OptTemp TYPE_P qualified_name AS create_type_value  */
#line 8 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					PGCreateTypeStmt *n = (PGCreateTypeStmt *) (yyvsp[0].node);
					(yyvsp[-2].range)->relpersistence = (yyvsp[-4].ival);
					n->typeName = (yyvsp[-2].range);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 21170 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 168: /* CreateTypeStmt: CREATE_P OptTemp TYPE_P IF_P NOT EXISTS qualified_name AS create_type_value  */
#line 16 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					PGCreateTypeStmt *n = (PGCreateTypeStmt *) (yyvsp[0].node);
					(yyvsp[-2].range)->relpersistence = (yyvsp[-7].ival);
					n->typeName = (yyvsp[-2].range);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 21182 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 169: /* CreateTypeStmt: CREATE_P OR REPLACE OptTemp TYPE_P qualified_name AS create_type_value  */
#line 24 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					PGCreateTypeStmt *n = (PGCreateTypeStmt *) (yyvsp[0].node);
					(yyvsp[-2].range)->relpersistence = (yyvsp[-4].ival);
					n->typeName = (yyvsp[-2].range);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 21194 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 170: /* create_type_value: ENUM_P select_with_parens  */
#line 35 "third_party/libpg_query/grammar/statements/create_type.y"
        {
		PGCreateTypeStmt *n = makeNode(PGCreateTypeStmt);
		n->kind = PG_NEWTYPE_ENUM;
		n->query = (yyvsp[0].node);
		n->vals = NULL;
		(yyval.node) = (PGNode *)n;
	}
#line 21206 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 171: /* create_type_value: ENUM_P '(' opt_enum_val_list ')'  */
#line 43 "third_party/libpg_query/grammar/statements/create_type.y"
        {
		PGCreateTypeStmt *n = makeNode(PGCreateTypeStmt);
		n->kind = PG_NEWTYPE_ENUM;
		n->vals = (yyvsp[-1].list);
		n->query = NULL;
		(yyval.node) = (PGNode *)n;
	}
#line 21218 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 172: /* create_type_value: Typename  */
#line 51 "third_party/libpg_query/grammar/statements/create_type.y"
        {
		PGCreateTypeStmt *n = makeNode(PGCreateTypeStmt);
		n->query = NULL;
		auto name = std::string(reinterpret_cast<PGValue *>((yyvsp[0].typnam)->names->tail->data.ptr_value)->val.str);
		if (name == "enum") {
			n->kind = PG_NEWTYPE_ENUM;
			n->vals = (yyvsp[0].typnam)->typmods;
		} else {
			n->kind = PG_NEWTYPE_ALIAS;
			n->ofType = (yyvsp[0].typnam);
		}
		(yyval.node) = (PGNode *)n;
	}
#line 21236 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 173: /* opt_enum_val_list: enum_val_list  */
#line 68 "third_party/libpg_query/grammar/statements/create_type.y"
                                      { (yyval.list) = (yyvsp[0].list);}
#line 21242 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 174: /* opt_enum_val_list: %empty  */
#line 69 "third_party/libpg_query/grammar/statements/create_type.y"
                                                        {(yyval.list) = NIL;}
#line 21248 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 175: /* enum_val_list: Sconst  */
#line 73 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					(yyval.list) = list_make1(makeStringConst((yyvsp[0].str), (yylsp[0])));
				}
#line 21256 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 176: /* enum_val_list: enum_val_list ',' Sconst  */
#line 77 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), makeStringConst((yyvsp[0].str), (yylsp[0])));
				}
#line 21264 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 177: /* qualified_name: ColIdOrString  */
#line 10 "third_party/libpg_query/grammar/statements/common.y"
                                {
					(yyval.range) = makeRangeVar(NULL, (yyvsp[0].str), (yylsp[0]));
				}
#line 21272 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 178: /* qualified_name: ColId indirection  */
#line 14 "third_party/libpg_query/grammar/statements/common.y"
                                {
					check_qualified_name((yyvsp[0].list), yyscanner);
					(yyval.range) = makeRangeVar(NULL, NULL, (yylsp[-1]));
					switch (list_length((yyvsp[0].list)))
					{
						case 1:
							(yyval.range)->catalogname = NULL;
							(yyval.range)->schemaname = (yyvsp[-1].str);
							(yyval.range)->relname = strVal(linitial((yyvsp[0].list)));
							break;
						case 2:
							(yyval.range)->catalogname = (yyvsp[-1].str);
							(yyval.range)->schemaname = strVal(linitial((yyvsp[0].list)));
							(yyval.range)->relname = strVal(lsecond((yyvsp[0].list)));
							break;
						case 3:
						default:
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("improper qualified name (too many dotted names): %s",
											NameListToString(lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)))),
									 parser_errposition((yylsp[-1]))));
							break;
					}
				}
#line 21302 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 179: /* ColId: IDENT  */
#line 44 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 21308 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 180: /* ColId: unreserved_keyword  */
#line 45 "third_party/libpg_query/grammar/statements/common.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 21314 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 181: /* ColId: col_name_keyword  */
#line 46 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 21320 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 182: /* ColIdOrString: ColId  */
#line 50 "third_party/libpg_query/grammar/statements/common.y"
                                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 21326 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 183: /* ColIdOrString: SCONST  */
#line 51 "third_party/libpg_query/grammar/statements/common.y"
                                                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 21332 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 184: /* Sconst: SCONST  */
#line 55 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 21338 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 185: /* indirection: indirection_el  */
#line 59 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 21344 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 186: /* indirection: indirection indirection_el  */
#line 60 "third_party/libpg_query/grammar/statements/common.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 21350 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 187: /* indirection_el: '.' attr_name  */
#line 65 "third_party/libpg_query/grammar/statements/common.y"
                                {
					(yyval.node) = (PGNode *) makeString((yyvsp[0].str));
				}
#line 21358 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 188: /* attr_name: ColLabel  */
#line 70 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 21364 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 189: /* ColLabel: IDENT  */
#line 75 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 21370 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 190: /* ColLabel: other_keyword  */
#line 76 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 21376 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 191: /* ColLabel: unreserved_keyword  */
#line 77 "third_party/libpg_query/grammar/statements/common.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 21382 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 192: /* ColLabel: reserved_keyword  */
#line 78 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 21388 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 193: /* InsertStmt: opt_with_clause INSERT opt_or_action INTO insert_target opt_by_name_or_position insert_rest opt_on_conflict returning_clause  */
#line 11 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].istmt)->relation = (yyvsp[-4].range);
					(yyvsp[-2].istmt)->onConflictAlias = (yyvsp[-6].onconflictshorthand);
					(yyvsp[-2].istmt)->onConflictClause = (yyvsp[-1].onconflict);
					(yyvsp[-2].istmt)->returningList = (yyvsp[0].list);
					(yyvsp[-2].istmt)->withClause = (yyvsp[-8].with);
					(yyvsp[-2].istmt)->insert_column_order = (yyvsp[-3].bynameorposition);
					(yyval.node) = (PGNode *) (yyvsp[-2].istmt);
				}
#line 21402 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 194: /* insert_rest: SelectStmt  */
#line 24 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 21412 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 195: /* insert_rest: OVERRIDING override_kind VALUE_P SelectStmt  */
#line 30 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->override = (yyvsp[-2].override);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 21423 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 196: /* insert_rest: '(' insert_column_list ')' SelectStmt  */
#line 37 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = (yyvsp[-2].list);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 21433 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 197: /* insert_rest: '(' insert_column_list ')' OVERRIDING override_kind VALUE_P SelectStmt  */
#line 43 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = (yyvsp[-5].list);
					(yyval.istmt)->override = (yyvsp[-2].override);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 21444 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 198: /* insert_rest: DEFAULT VALUES  */
#line 50 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->selectStmt = NULL;
				}
#line 21454 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 199: /* insert_target: qualified_name  */
#line 60 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.range) = (yyvsp[0].range);
				}
#line 21462 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 200: /* insert_target: qualified_name AS ColId  */
#line 64 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].range)->alias = makeAlias((yyvsp[0].str), NIL);
					(yyval.range) = (yyvsp[-2].range);
				}
#line 21471 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 201: /* opt_by_name_or_position: BY NAME_P  */
#line 71 "third_party/libpg_query/grammar/statements/insert.y"
                                                        { (yyval.bynameorposition) = PG_INSERT_BY_NAME; }
#line 21477 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 202: /* opt_by_name_or_position: BY POSITION  */
#line 72 "third_party/libpg_query/grammar/statements/insert.y"
                                                { (yyval.bynameorposition) = PG_INSERT_BY_POSITION; }
#line 21483 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 203: /* opt_by_name_or_position: %empty  */
#line 73 "third_party/libpg_query/grammar/statements/insert.y"
                                                { (yyval.bynameorposition) = PG_INSERT_BY_POSITION; }
#line 21489 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 204: /* opt_conf_expr: '(' index_params ')' where_clause  */
#line 78 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = makeNode(PGInferClause);
					(yyval.infer)->indexElems = (yyvsp[-2].list);
					(yyval.infer)->whereClause = (yyvsp[0].node);
					(yyval.infer)->conname = NULL;
					(yyval.infer)->location = (yylsp[-3]);
				}
#line 21501 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 205: /* opt_conf_expr: ON CONSTRAINT name  */
#line 87 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = makeNode(PGInferClause);
					(yyval.infer)->indexElems = NIL;
					(yyval.infer)->whereClause = NULL;
					(yyval.infer)->conname = (yyvsp[0].str);
					(yyval.infer)->location = (yylsp[-2]);
				}
#line 21513 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 206: /* opt_conf_expr: %empty  */
#line 95 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = NULL;
				}
#line 21521 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 207: /* opt_with_clause: with_clause  */
#line 102 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.with) = (yyvsp[0].with); }
#line 21527 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 208: /* opt_with_clause: %empty  */
#line 103 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.with) = NULL; }
#line 21533 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 209: /* insert_column_item: ColId opt_indirection  */
#line 109 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[-1].str);
					(yyval.target)->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.target)->val = NULL;
					(yyval.target)->location = (yylsp[-1]);
				}
#line 21545 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 210: /* set_clause: set_target '=' a_expr  */
#line 121 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].target)->val = (PGNode *) (yyvsp[0].node);
					(yyval.list) = list_make1((yyvsp[-2].target));
				}
#line 21554 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 211: /* set_clause: '(' set_target_list ')' '=' a_expr  */
#line 126 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					int ncolumns = list_length((yyvsp[-3].list));
					int i = 1;
					PGListCell *col_cell;

					/* Create a PGMultiAssignRef source for each target */
					foreach(col_cell, (yyvsp[-3].list))
					{
						PGResTarget *res_col = (PGResTarget *) lfirst(col_cell);
						PGMultiAssignRef *r = makeNode(PGMultiAssignRef);

						r->source = (PGNode *) (yyvsp[0].node);
						r->colno = i;
						r->ncolumns = ncolumns;
						res_col->val = (PGNode *) r;
						i++;
					}

					(yyval.list) = (yyvsp[-3].list);
				}
#line 21579 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 212: /* opt_or_action: OR REPLACE  */
#line 151 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflictshorthand) = PG_ONCONFLICT_ALIAS_REPLACE;
				}
#line 21587 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 213: /* opt_or_action: OR IGNORE_P  */
#line 156 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflictshorthand) = PG_ONCONFLICT_ALIAS_IGNORE;
				}
#line 21595 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 214: /* opt_or_action: %empty  */
#line 160 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflictshorthand) = PG_ONCONFLICT_ALIAS_NONE;
				}
#line 21603 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 215: /* opt_on_conflict: ON CONFLICT opt_conf_expr DO UPDATE SET set_clause_list_opt_comma where_clause  */
#line 167 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = makeNode(PGOnConflictClause);
					(yyval.onconflict)->action = PG_ONCONFLICT_UPDATE;
					(yyval.onconflict)->infer = (yyvsp[-5].infer);
					(yyval.onconflict)->targetList = (yyvsp[-1].list);
					(yyval.onconflict)->whereClause = (yyvsp[0].node);
					(yyval.onconflict)->location = (yylsp[-7]);
				}
#line 21616 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 216: /* opt_on_conflict: ON CONFLICT opt_conf_expr DO NOTHING  */
#line 177 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = makeNode(PGOnConflictClause);
					(yyval.onconflict)->action = PG_ONCONFLICT_NOTHING;
					(yyval.onconflict)->infer = (yyvsp[-2].infer);
					(yyval.onconflict)->targetList = NIL;
					(yyval.onconflict)->whereClause = NULL;
					(yyval.onconflict)->location = (yylsp[-4]);
				}
#line 21629 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 217: /* opt_on_conflict: %empty  */
#line 186 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = NULL;
				}
#line 21637 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 218: /* index_elem: ColId opt_collate opt_class opt_asc_desc opt_nulls_order  */
#line 193 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = (yyvsp[-4].str);
					(yyval.ielem)->expr = NULL;
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 21652 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 219: /* index_elem: func_expr_windowless opt_collate opt_class opt_asc_desc opt_nulls_order  */
#line 204 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = NULL;
					(yyval.ielem)->expr = (yyvsp[-4].node);
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 21667 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 220: /* index_elem: '(' a_expr ')' opt_collate opt_class opt_asc_desc opt_nulls_order  */
#line 215 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = NULL;
					(yyval.ielem)->expr = (yyvsp[-5].node);
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 21682 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 221: /* returning_clause: RETURNING target_list  */
#line 229 "third_party/libpg_query/grammar/statements/insert.y"
                                                        { (yyval.list) = (yyvsp[0].list); }
#line 21688 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 222: /* returning_clause: %empty  */
#line 230 "third_party/libpg_query/grammar/statements/insert.y"
                                                                { (yyval.list) = NIL; }
#line 21694 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 223: /* override_kind: USER  */
#line 236 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.override) = PG_OVERRIDING_USER_VALUE; }
#line 21700 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 224: /* override_kind: SYSTEM_P  */
#line 237 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.override) = OVERRIDING_SYSTEM_VALUE; }
#line 21706 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 225: /* set_target_list: set_target  */
#line 242 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 21712 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 226: /* set_target_list: set_target_list ',' set_target  */
#line 243 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list),(yyvsp[0].target)); }
#line 21718 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 227: /* opt_collate: COLLATE any_name  */
#line 249 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 21724 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 228: /* opt_collate: %empty  */
#line 250 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = NIL; }
#line 21730 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 229: /* opt_class: any_name  */
#line 254 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 21736 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 230: /* opt_class: %empty  */
#line 255 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = NIL; }
#line 21742 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 231: /* insert_column_list: insert_column_item  */
#line 261 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 21748 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 232: /* insert_column_list: insert_column_list ',' insert_column_item  */
#line 263 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].target)); }
#line 21754 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 233: /* set_clause_list: set_clause  */
#line 268 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 21760 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 234: /* set_clause_list: set_clause_list ',' set_clause  */
#line 269 "third_party/libpg_query/grammar/statements/insert.y"
                                                                { (yyval.list) = list_concat((yyvsp[-2].list),(yyvsp[0].list)); }
#line 21766 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 235: /* set_clause_list_opt_comma: set_clause_list  */
#line 273 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 21772 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 236: /* set_clause_list_opt_comma: set_clause_list ','  */
#line 274 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 21778 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 237: /* index_params: index_elem  */
#line 277 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].ielem)); }
#line 21784 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 238: /* index_params: index_params ',' index_elem  */
#line 278 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].ielem)); }
#line 21790 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 239: /* set_target: ColId opt_indirection  */
#line 284 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[-1].str);
					(yyval.target)->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.target)->val = NULL;	/* upper production sets this */
					(yyval.target)->location = (yylsp[-1]);
				}
#line 21802 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 240: /* DeallocateStmt: DEALLOCATE name  */
#line 8 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = (yyvsp[0].str);
						(yyval.node) = (PGNode *) n;
					}
#line 21812 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 241: /* DeallocateStmt: DEALLOCATE PREPARE name  */
#line 14 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = (yyvsp[0].str);
						(yyval.node) = (PGNode *) n;
					}
#line 21822 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 242: /* DeallocateStmt: DEALLOCATE ALL  */
#line 20 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = NULL;
						(yyval.node) = (PGNode *) n;
					}
#line 21832 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 243: /* DeallocateStmt: DEALLOCATE PREPARE ALL  */
#line 26 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = NULL;
						(yyval.node) = (PGNode *) n;
					}
#line 21842 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 244: /* CreateFunctionStmt: CREATE_P OptTemp macro_alias qualified_name table_macro_list  */
#line 9 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-1].range)->relpersistence = (yyvsp[-3].ival);
				n->name = (yyvsp[-1].range);
				n->functions = (yyvsp[0].list);
				n->onconflict = PG_ERROR_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
			}
#line 21855 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 245: /* CreateFunctionStmt: CREATE_P OptTemp macro_alias IF_P NOT EXISTS qualified_name table_macro_list  */
#line 19 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-1].range)->relpersistence = (yyvsp[-6].ival);
				n->name = (yyvsp[-1].range);
				n->functions = (yyvsp[0].list);
				n->onconflict = PG_IGNORE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;

			}
#line 21869 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 246: /* CreateFunctionStmt: CREATE_P OR REPLACE OptTemp macro_alias qualified_name table_macro_list  */
#line 30 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-1].range)->relpersistence = (yyvsp[-3].ival);
				n->name = (yyvsp[-1].range);
				n->functions = (yyvsp[0].list);
				n->onconflict = PG_REPLACE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
			}
#line 21882 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 247: /* CreateFunctionStmt: CREATE_P OptTemp macro_alias qualified_name macro_definition_list  */
#line 40 "third_party/libpg_query/grammar/statements/create_function.y"
             {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-1].range)->relpersistence = (yyvsp[-3].ival);
				n->name = (yyvsp[-1].range);
				n->functions = (yyvsp[0].list);
				n->onconflict = PG_ERROR_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
             }
#line 21895 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 248: /* CreateFunctionStmt: CREATE_P OptTemp macro_alias IF_P NOT EXISTS qualified_name macro_definition_list  */
#line 50 "third_party/libpg_query/grammar/statements/create_function.y"
                         {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-1].range)->relpersistence = (yyvsp[-6].ival);
				n->name = (yyvsp[-1].range);
				n->functions = (yyvsp[0].list);
				n->onconflict = PG_IGNORE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
			 }
#line 21908 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 249: /* CreateFunctionStmt: CREATE_P OR REPLACE OptTemp macro_alias qualified_name macro_definition_list  */
#line 60 "third_party/libpg_query/grammar/statements/create_function.y"
                         {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-1].range)->relpersistence = (yyvsp[-3].ival);
				n->name = (yyvsp[-1].range);
				n->functions = (yyvsp[0].list);
				n->onconflict = PG_REPLACE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
			 }
#line 21921 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 250: /* table_macro_definition: param_list AS TABLE select_no_parens  */
#line 72 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				PGFunctionDefinition *n = makeNode(PGFunctionDefinition);
				n->params = (yyvsp[-3].list);
				n->query = (yyvsp[0].node);
				(yyval.node) = (PGNode *)n;
			}
#line 21932 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 251: /* table_macro_definition_parens: param_list AS TABLE select_with_parens  */
#line 82 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				PGFunctionDefinition *n = makeNode(PGFunctionDefinition);
				n->params = (yyvsp[-3].list);
				n->query = (yyvsp[0].node);
				(yyval.node) = (PGNode *)n;
			}
#line 21943 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 252: /* table_macro_list_internal: table_macro_definition_parens  */
#line 92 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				(yyval.list) = list_make1((yyvsp[0].node));
			}
#line 21951 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 253: /* table_macro_list_internal: table_macro_list_internal ',' table_macro_definition_parens  */
#line 96 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
			}
#line 21959 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 254: /* table_macro_list: table_macro_definition  */
#line 103 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				(yyval.list) = list_make1((yyvsp[0].node));
			}
#line 21967 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 256: /* macro_definition: param_list AS a_expr  */
#line 111 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				PGFunctionDefinition *n = makeNode(PGFunctionDefinition);
				n->params = (yyvsp[-2].list);
				n->function = (yyvsp[0].node);
				(yyval.node) = (PGNode *)n;
			}
#line 21978 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 257: /* macro_definition_list: macro_definition  */
#line 120 "third_party/libpg_query/grammar/statements/create_function.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 21986 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 258: /* macro_definition_list: macro_definition_list ',' macro_definition  */
#line 124 "third_party/libpg_query/grammar/statements/create_function.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 21994 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 261: /* param_list: '(' ')'  */
#line 136 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				(yyval.list) = NIL;
			}
#line 22002 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 262: /* param_list: '(' func_arg_list ')'  */
#line 140 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				(yyval.list) = (yyvsp[-1].list);
			}
#line 22010 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 263: /* CreateModelStmt: CREATE_P OptTemp model_type_value MODEL qualified_name PATH SCONST model_on  */
#line 9 "third_party/libpg_query/grammar/statements/create_model.y"
                                {
					PGCreateModelStmt *n = makeNode(PGCreateModelStmt);
					(yyvsp[-3].range)->relpersistence = (yyvsp[-6].ival);
					n->model = (yyvsp[-3].range);
					n->model_type = (yyvsp[-5].ival);
					n->model_path = (yyvsp[-1].str);
					n->model_on = (yyvsp[0].node);
					n->ownerId = InvalidOid;
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 22026 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 264: /* CreateModelStmt: CREATE_P OptTemp model_type_value MODEL IF_P NOT EXISTS qualified_name PATH SCONST model_on  */
#line 21 "third_party/libpg_query/grammar/statements/create_model.y"
                                {
					PGCreateModelStmt *n = makeNode(PGCreateModelStmt);
					(yyvsp[-3].range)->relpersistence = (yyvsp[-9].ival);
					n->model = (yyvsp[-3].range);
					n->model_type = (yyvsp[-8].ival);
					n->model_path = (yyvsp[-1].str);
					n->model_on = (yyvsp[0].node);
					n->ownerId = InvalidOid;
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 22042 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 265: /* CreateModelStmt: CREATE_P OR REPLACE OptTemp model_type_value MODEL qualified_name PATH SCONST model_on  */
#line 33 "third_party/libpg_query/grammar/statements/create_model.y"
                                {
					PGCreateModelStmt *n = makeNode(PGCreateModelStmt);
					(yyvsp[-3].range)->relpersistence = (yyvsp[-6].ival);
					n->model = (yyvsp[-3].range);
					n->model_type = (yyvsp[-5].ival);
					n->model_path = (yyvsp[-1].str);
					n->model_on = (yyvsp[0].node);
					n->ownerId = InvalidOid;
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 22058 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 266: /* model_type_value: TABULAR  */
#line 47 "third_party/libpg_query/grammar/statements/create_model.y"
                                                                                        { (yyval.ival) = 0; }
#line 22064 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 267: /* model_type_value: LM  */
#line 48 "third_party/libpg_query/grammar/statements/create_model.y"
                                                                                        { (yyval.ival) = 1; }
#line 22070 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 268: /* model_type_value: GNN  */
#line 49 "third_party/libpg_query/grammar/statements/create_model.y"
                                                                                        { (yyval.ival) = 2; }
#line 22076 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 269: /* model_type_value: LLM  */
#line 50 "third_party/libpg_query/grammar/statements/create_model.y"
                                                                                { (yyval.ival) = 3; }
#line 22082 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 270: /* model_on: ON TABLE qualified_name opt_feat_col_list OUTPUT '(' with_result_col_list ')' opt_option  */
#line 55 "third_party/libpg_query/grammar/statements/create_model.y"
                                {
					PGModelOn *n = makeNode(PGModelOn);
					n->rel_name = (yyvsp[-6].range);
					n->rel_feat = (yyvsp[-5].node);
					n->result_set = (yyvsp[-2].list);
					n->options = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 22095 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 271: /* model_on: ON feat_col_list OUTPUT '(' with_result_col_list ')' opt_option  */
#line 64 "third_party/libpg_query/grammar/statements/create_model.y"
                                {
					PGModelOn *n = makeNode(PGModelOn);
					n->rel_feat = (yyvsp[-5].node);
					n->result_set = (yyvsp[-2].list);
					n->options = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 22107 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 272: /* model_on: ON NODES qualified_name opt_feat_col_list EDGES qualified_name opt_feat_col_list OUTPUT '(' with_result_col_list ')' opt_option  */
#line 72 "third_party/libpg_query/grammar/statements/create_model.y"
                                {
					PGModelOn *n = makeNode(PGModelOn);
					n->rel_name = (yyvsp[-9].range);
					n->rel_feat = (yyvsp[-8].node);
					n->opt_name = (yyvsp[-6].range);
					n->opt_feat = (yyvsp[-5].node);
					n->result_set = (yyvsp[-2].list);
					n->options = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 22122 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 273: /* model_on: ON PROMPT opt_api opt_option  */
#line 83 "third_party/libpg_query/grammar/statements/create_model.y"
                                {
					PGModelOn *n = makeNode(PGModelOn);
					n->on_prompt = true;
					n->base_api = (yyvsp[-1].str);
					n->options = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 22134 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 274: /* opt_feat_col_list: feat_col_list  */
#line 93 "third_party/libpg_query/grammar/statements/create_model.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 22140 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 275: /* opt_feat_col_list: %empty  */
#line 94 "third_party/libpg_query/grammar/statements/create_model.y"
                                                                                { (yyval.node) = NULL; }
#line 22146 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 276: /* feat_col_list: FEATURES '(' name_list_opt_comma ')'  */
#line 99 "third_party/libpg_query/grammar/statements/create_model.y"
                                {
					PGPredictFeatExpr *n = makeNode(PGPredictFeatExpr);
					n->input_set = (yyvsp[-1].list);
					(yyval.node) = (PGNode *) n;
				}
#line 22156 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 277: /* feat_col_list: FEATURES '*' opt_except_list  */
#line 105 "third_party/libpg_query/grammar/statements/create_model.y"
                                {
					PGPredictFeatExpr *n = makeNode(PGPredictFeatExpr);
					n->exclude_set = (yyvsp[0].list);
					(yyval.node) = (PGNode *) n;
				}
#line 22166 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 278: /* with_result_col_list: result_col_list  */
#line 113 "third_party/libpg_query/grammar/statements/create_model.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 22172 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 279: /* with_result_col_list: result_col_list ','  */
#line 114 "third_party/libpg_query/grammar/statements/create_model.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 22178 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 280: /* with_result_col_list: %empty  */
#line 115 "third_party/libpg_query/grammar/statements/create_model.y"
                                                                                        { (yyval.list) = NIL; }
#line 22184 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 281: /* result_col_list: columnDef  */
#line 120 "third_party/libpg_query/grammar/statements/create_model.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 22192 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 282: /* result_col_list: result_col_list ',' columnDef  */
#line 124 "third_party/libpg_query/grammar/statements/create_model.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 22200 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 283: /* opt_option: OPTIONS '{' dict_arguments_opt_comma '}'  */
#line 131 "third_party/libpg_query/grammar/statements/create_model.y"
                            { 
					(yyval.list) = (yyvsp[-1].list); 
				}
#line 22208 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 284: /* opt_option: %empty  */
#line 134 "third_party/libpg_query/grammar/statements/create_model.y"
                                                                        { (yyval.list) = NIL; }
#line 22214 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 285: /* opt_api: API SCONST  */
#line 138 "third_party/libpg_query/grammar/statements/create_model.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 22220 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 286: /* opt_api: %empty  */
#line 139 "third_party/libpg_query/grammar/statements/create_model.y"
                                                                                { (yyval.str) = NULL; }
#line 22226 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 287: /* CreateSchemaStmt: CREATE_P SCHEMA qualified_name OptSchemaEltList  */
#line 8 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
					if ((yyvsp[-1].range)->catalogname) {
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA too many dots: expected \"catalog.schema\" or \"schema\""),
								 parser_errposition((yylsp[-1]))));
					}
					if ((yyvsp[-1].range)->schemaname) {
						n->catalogname = (yyvsp[-1].range)->schemaname;
						n->schemaname = (yyvsp[-1].range)->relname;
					} else {
						n->schemaname = (yyvsp[-1].range)->relname;
					}
					n->schemaElts = (yyvsp[0].list);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 22249 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 288: /* CreateSchemaStmt: CREATE_P SCHEMA IF_P NOT EXISTS qualified_name OptSchemaEltList  */
#line 27 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
					if ((yyvsp[-1].range)->catalogname) {
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA too many dots: expected \"catalog.schema\" or \"schema\""),
								 parser_errposition((yylsp[-1]))));
					}
					if ((yyvsp[-1].range)->schemaname) {
						n->catalogname = (yyvsp[-1].range)->schemaname;
						n->schemaname = (yyvsp[-1].range)->relname;
					} else {
						n->schemaname = (yyvsp[-1].range)->relname;
					}
					if ((yyvsp[0].list) != NIL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA IF NOT EXISTS cannot include schema elements"),
								 parser_errposition((yylsp[0]))));
					n->schemaElts = (yyvsp[0].list);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 22277 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 289: /* CreateSchemaStmt: CREATE_P OR REPLACE SCHEMA qualified_name OptSchemaEltList  */
#line 51 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
					if ((yyvsp[-1].range)->catalogname) {
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA too many dots: expected \"catalog.schema\" or \"schema\""),
								 parser_errposition((yylsp[-1]))));
					}
					if ((yyvsp[-1].range)->schemaname) {
						n->catalogname = (yyvsp[-1].range)->schemaname;
						n->schemaname = (yyvsp[-1].range)->relname;
					} else {
						n->schemaname = (yyvsp[-1].range)->relname;
					}
					n->schemaElts = (yyvsp[0].list);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 22300 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 290: /* OptSchemaEltList: OptSchemaEltList schema_stmt  */
#line 74 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					if ((yyloc) < 0)			/* see comments for YYLLOC_DEFAULT */
						(yyloc) = (yylsp[0]);
					(yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node));
				}
#line 22310 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 291: /* OptSchemaEltList: %empty  */
#line 80 "third_party/libpg_query/grammar/statements/create_schema.y"
                                { (yyval.list) = NIL; }
#line 22316 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 297: /* AlterObjectSchemaStmt: ALTER TABLE relation_expr SET SCHEMA name  */
#line 8 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22329 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 298: /* AlterObjectSchemaStmt: ALTER TABLE IF_P EXISTS relation_expr SET SCHEMA name  */
#line 17 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 22342 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 299: /* AlterObjectSchemaStmt: ALTER SEQUENCE qualified_name SET SCHEMA name  */
#line 26 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22355 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 300: /* AlterObjectSchemaStmt: ALTER SEQUENCE IF_P EXISTS qualified_name SET SCHEMA name  */
#line 35 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 22368 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 301: /* AlterObjectSchemaStmt: ALTER VIEW qualified_name SET SCHEMA name  */
#line 44 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22381 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 302: /* AlterObjectSchemaStmt: ALTER VIEW IF_P EXISTS qualified_name SET SCHEMA name  */
#line 53 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 22394 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 303: /* TransactionStmt: ABORT_P opt_transaction  */
#line 3 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_ROLLBACK;
					n->options = NIL;
					n->transaction_type = PG_TRANS_TYPE_DEFAULT;
					(yyval.node) = (PGNode *)n;
				}
#line 22406 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 304: /* TransactionStmt: BEGIN_P opt_transaction opt_transaction_type  */
#line 11 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_BEGIN;
					n->transaction_type = (yyvsp[0].transactiontype);
					(yyval.node) = (PGNode *)n;
				}
#line 22417 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 305: /* TransactionStmt: START opt_transaction opt_transaction_type  */
#line 18 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_START;
					n->transaction_type = (yyvsp[0].transactiontype);
					(yyval.node) = (PGNode *)n;
				}
#line 22428 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 306: /* TransactionStmt: COMMIT opt_transaction  */
#line 25 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_COMMIT;
					n->options = NIL;
					n->transaction_type = PG_TRANS_TYPE_DEFAULT;
					(yyval.node) = (PGNode *)n;
				}
#line 22440 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 307: /* TransactionStmt: END_P opt_transaction  */
#line 33 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_COMMIT;
					n->options = NIL;
					n->transaction_type = PG_TRANS_TYPE_DEFAULT;
					(yyval.node) = (PGNode *)n;
				}
#line 22452 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 308: /* TransactionStmt: ROLLBACK opt_transaction  */
#line 41 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_ROLLBACK;
					n->options = NIL;
					n->transaction_type = PG_TRANS_TYPE_DEFAULT;
					(yyval.node) = (PGNode *)n;
				}
#line 22464 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 309: /* opt_transaction: WORK  */
#line 51 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                {}
#line 22470 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 310: /* opt_transaction: TRANSACTION  */
#line 52 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                        {}
#line 22476 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 311: /* opt_transaction: %empty  */
#line 53 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                                {}
#line 22482 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 312: /* opt_transaction_type: READ_P ONLY  */
#line 57 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                        { (yyval.transactiontype) = PG_TRANS_TYPE_READ_ONLY; }
#line 22488 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 313: /* opt_transaction_type: READ_P WRITE_P  */
#line 58 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                        { (yyval.transactiontype) = PG_TRANS_TYPE_READ_WRITE; }
#line 22494 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 314: /* opt_transaction_type: %empty  */
#line 59 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                                { (yyval.transactiontype) = PG_TRANS_TYPE_DEFAULT; }
#line 22500 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 315: /* CallStmt: CALL_P func_application  */
#line 7 "third_party/libpg_query/grammar/statements/call.y"
                                {
					PGCallStmt *n = makeNode(PGCallStmt);
					n->func = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 22510 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 316: /* CreateStmt: CREATE_P OptTemp TABLE qualified_name '(' OptTableElementList ')' OptWith OnCommitOption  */
#line 9 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-7].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 22527 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 317: /* CreateStmt: CREATE_P OptTemp TABLE IF_P NOT EXISTS qualified_name '(' OptTableElementList ')' OptWith OnCommitOption  */
#line 24 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-10].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 22544 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 318: /* CreateStmt: CREATE_P OR REPLACE OptTemp TABLE qualified_name '(' OptTableElementList ')' OptWith OnCommitOption  */
#line 39 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-7].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 22561 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 319: /* ConstraintAttributeSpec: %empty  */
#line 56 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = 0; }
#line 22567 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 320: /* ConstraintAttributeSpec: ConstraintAttributeSpec ConstraintAttributeElem  */
#line 58 "third_party/libpg_query/grammar/statements/create.y"
                                {
					/*
					 * We must complain about conflicting options.
					 * We could, but choose not to, complain about redundant
					 * options (ie, where $2's bit is already set in $1).
					 */
					int		newspec = (yyvsp[-1].ival) | (yyvsp[0].ival);

					/* special message for this case */
					if ((newspec & (CAS_NOT_DEFERRABLE | CAS_INITIALLY_DEFERRED)) == (CAS_NOT_DEFERRABLE | CAS_INITIALLY_DEFERRED))
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("constraint declared INITIALLY DEFERRED must be DEFERRABLE"),
								 parser_errposition((yylsp[0]))));
					/* generic message for other conflicts */
					if ((newspec & (CAS_NOT_DEFERRABLE | CAS_DEFERRABLE)) == (CAS_NOT_DEFERRABLE | CAS_DEFERRABLE) ||
						(newspec & (CAS_INITIALLY_IMMEDIATE | CAS_INITIALLY_DEFERRED)) == (CAS_INITIALLY_IMMEDIATE | CAS_INITIALLY_DEFERRED))
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("conflicting constraint properties"),
								 parser_errposition((yylsp[0]))));
					(yyval.ival) = newspec;
				}
#line 22595 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 321: /* def_arg: func_type  */
#line 84 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].typnam); }
#line 22601 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 322: /* def_arg: reserved_keyword  */
#line 85 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)makeString(pstrdup((yyvsp[0].keyword))); }
#line 22607 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 323: /* def_arg: qual_all_Op  */
#line 86 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].list); }
#line 22613 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 324: /* def_arg: NumericOnly  */
#line 87 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].value); }
#line 22619 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 325: /* def_arg: Sconst  */
#line 88 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (PGNode *)makeString((yyvsp[0].str)); }
#line 22625 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 326: /* def_arg: NONE  */
#line 89 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (PGNode *)makeString(pstrdup((yyvsp[0].keyword))); }
#line 22631 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 327: /* OptParenthesizedSeqOptList: '(' SeqOptList ')'  */
#line 93 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 22637 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 328: /* OptParenthesizedSeqOptList: %empty  */
#line 94 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 22643 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 329: /* generic_option_arg: Sconst  */
#line 99 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 22649 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 330: /* key_action: NO ACTION  */
#line 104 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_NOACTION; }
#line 22655 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 331: /* key_action: RESTRICT  */
#line 105 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_RESTRICT; }
#line 22661 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 332: /* key_action: CASCADE  */
#line 106 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_CASCADE; }
#line 22667 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 333: /* key_action: SET NULL_P  */
#line 107 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_FKCONSTR_ACTION_SETNULL; }
#line 22673 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 334: /* key_action: SET DEFAULT  */
#line 108 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_FKCONSTR_ACTION_SETDEFAULT; }
#line 22679 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 335: /* ColConstraint: CONSTRAINT name ColConstraintElem  */
#line 114 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = castNode(PGConstraint, (yyvsp[0].node));
					n->conname = (yyvsp[-1].str);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) n;
				}
#line 22690 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 336: /* ColConstraint: ColConstraintElem  */
#line 120 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 22696 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 337: /* ColConstraint: ConstraintAttr  */
#line 121 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 22702 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 338: /* ColConstraint: COLLATE any_name  */
#line 123 "third_party/libpg_query/grammar/statements/create.y"
                                {
					/*
					 * Note: the PGCollateClause is momentarily included in
					 * the list built by ColQualList, but we split it out
					 * again in SplitColQualList.
					 */
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = NULL;
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 22719 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 339: /* ColConstraintElem: NOT NULL_P  */
#line 140 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_NOTNULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 22730 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 340: /* ColConstraintElem: NULL_P  */
#line 147 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 22741 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 341: /* ColConstraintElem: UNIQUE opt_definition  */
#line 154 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-1]);
					n->keys = NULL;
					n->options = (yyvsp[0].list);
					n->indexname = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 22755 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 342: /* ColConstraintElem: PRIMARY KEY opt_definition  */
#line 164 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-2]);
					n->keys = NULL;
					n->options = (yyvsp[0].list);
					n->indexname = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 22769 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 343: /* ColConstraintElem: CHECK_P '(' a_expr ')' opt_no_inherit  */
#line 174 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_CHECK;
					n->location = (yylsp[-4]);
					n->is_no_inherit = (yyvsp[0].boolean);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					n->skip_validation = false;
					n->initially_valid = true;
					(yyval.node) = (PGNode *)n;
				}
#line 22785 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 344: /* ColConstraintElem: USING COMPRESSION name  */
#line 186 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_COMPRESSION;
					n->location = (yylsp[-2]);
					n->compression_name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 22797 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 345: /* ColConstraintElem: DEFAULT b_expr  */
#line 194 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_DEFAULT;
					n->location = (yylsp[-1]);
					n->raw_expr = (yyvsp[0].node);
					n->cooked_expr = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 22810 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 346: /* ColConstraintElem: REFERENCES qualified_name opt_column_list key_match key_actions  */
#line 203 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_FOREIGN;
					n->location = (yylsp[-4]);
					n->pktable			= (yyvsp[-3].range);
					n->fk_attrs			= NIL;
					n->pk_attrs			= (yyvsp[-2].list);
					n->fk_matchtype		= (yyvsp[-1].ival);
					n->fk_upd_action	= (char) ((yyvsp[0].ival) >> 8);
					n->fk_del_action	= (char) ((yyvsp[0].ival) & 0xFF);
					n->skip_validation  = false;
					n->initially_valid  = true;
					(yyval.node) = (PGNode *)n;
				}
#line 22829 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 347: /* GeneratedColumnType: VIRTUAL  */
#line 220 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.constr) = PG_CONSTR_GENERATED_VIRTUAL; }
#line 22835 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 348: /* GeneratedColumnType: STORED  */
#line 221 "third_party/libpg_query/grammar/statements/create.y"
                                 { (yyval.constr) = PG_CONSTR_GENERATED_STORED; }
#line 22841 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 349: /* opt_GeneratedColumnType: GeneratedColumnType  */
#line 225 "third_party/libpg_query/grammar/statements/create.y"
                                            { (yyval.constr) = (yyvsp[0].constr); }
#line 22847 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 350: /* opt_GeneratedColumnType: %empty  */
#line 226 "third_party/libpg_query/grammar/statements/create.y"
                                      { (yyval.constr) = PG_CONSTR_GENERATED_VIRTUAL; }
#line 22853 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 351: /* GeneratedConstraintElem: GENERATED generated_when AS IDENTITY_P OptParenthesizedSeqOptList  */
#line 231 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_IDENTITY;
					n->generated_when = (yyvsp[-3].ival);
					n->options = (yyvsp[0].list);
					n->location = (yylsp[-4]);
					(yyval.node) = (PGNode *)n;
				}
#line 22866 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 352: /* GeneratedConstraintElem: GENERATED generated_when AS '(' a_expr ')' opt_GeneratedColumnType  */
#line 240 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = (yyvsp[0].constr);
					n->generated_when = (yyvsp[-5].ival);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					n->location = (yylsp[-6]);

					/*
					 * Can't do this in the grammar because of shift/reduce
					 * conflicts.  (IDENTITY allows both ALWAYS and BY
					 * DEFAULT, but generated columns only allow ALWAYS.)  We
					 * can also give a more useful error message and location.
					 */
					if ((yyvsp[-5].ival) != PG_ATTRIBUTE_IDENTITY_ALWAYS)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("for a generated column, GENERATED ALWAYS must be specified"),
								 parser_errposition((yylsp[-5]))));

					(yyval.node) = (PGNode *)n;
				}
#line 22893 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 353: /* GeneratedConstraintElem: AS '(' a_expr ')' opt_GeneratedColumnType  */
#line 263 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = (yyvsp[0].constr);
					n->generated_when = PG_ATTRIBUTE_IDENTITY_ALWAYS;
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					n->location = (yylsp[-4]);
					(yyval.node) = (PGNode *)n;
				}
#line 22907 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 354: /* generic_option_elem: generic_option_name generic_option_arg  */
#line 277 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 22915 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 355: /* key_update: ON UPDATE key_action  */
#line 283 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 22921 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 356: /* key_actions: key_update  */
#line 289 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[0].ival) << 8) | (PG_FKCONSTR_ACTION_NOACTION & 0xFF); }
#line 22927 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 357: /* key_actions: key_delete  */
#line 291 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = (PG_FKCONSTR_ACTION_NOACTION << 8) | ((yyvsp[0].ival) & 0xFF); }
#line 22933 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 358: /* key_actions: key_update key_delete  */
#line 293 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[-1].ival) << 8) | ((yyvsp[0].ival) & 0xFF); }
#line 22939 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 359: /* key_actions: key_delete key_update  */
#line 295 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[0].ival) << 8) | ((yyvsp[-1].ival) & 0xFF); }
#line 22945 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 360: /* key_actions: %empty  */
#line 297 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = (PG_FKCONSTR_ACTION_NOACTION << 8) | (PG_FKCONSTR_ACTION_NOACTION & 0xFF); }
#line 22951 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 361: /* OnCommitOption: ON COMMIT DROP  */
#line 300 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.oncommit) = ONCOMMIT_DROP; }
#line 22957 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 362: /* OnCommitOption: ON COMMIT DELETE_P ROWS  */
#line 301 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.oncommit) = PG_ONCOMMIT_DELETE_ROWS; }
#line 22963 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 363: /* OnCommitOption: ON COMMIT PRESERVE ROWS  */
#line 302 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.oncommit) = PG_ONCOMMIT_PRESERVE_ROWS; }
#line 22969 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 364: /* OnCommitOption: %empty  */
#line 303 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.oncommit) = PG_ONCOMMIT_NOOP; }
#line 22975 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 365: /* reloptions: '(' reloption_list ')'  */
#line 308 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 22981 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 366: /* opt_no_inherit: NO INHERIT  */
#line 312 "third_party/libpg_query/grammar/statements/create.y"
                                                                                {  (yyval.boolean) = true; }
#line 22987 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 367: /* opt_no_inherit: %empty  */
#line 313 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        {  (yyval.boolean) = false; }
#line 22993 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 368: /* TableConstraint: CONSTRAINT name ConstraintElem  */
#line 319 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = castNode(PGConstraint, (yyvsp[0].node));
					n->conname = (yyvsp[-1].str);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) n;
				}
#line 23004 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 369: /* TableConstraint: ConstraintElem  */
#line 325 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 23010 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 370: /* TableLikeOption: COMMENTS  */
#line 330 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_COMMENTS; }
#line 23016 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 371: /* TableLikeOption: CONSTRAINTS  */
#line 331 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_CONSTRAINTS; }
#line 23022 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 372: /* TableLikeOption: DEFAULTS  */
#line 332 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_DEFAULTS; }
#line 23028 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 373: /* TableLikeOption: IDENTITY_P  */
#line 333 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_IDENTITY; }
#line 23034 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 374: /* TableLikeOption: INDEXES  */
#line 334 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_INDEXES; }
#line 23040 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 375: /* TableLikeOption: STATISTICS  */
#line 335 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_STATISTICS; }
#line 23046 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 376: /* TableLikeOption: STORAGE  */
#line 336 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_STORAGE; }
#line 23052 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 377: /* TableLikeOption: ALL  */
#line 337 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_ALL; }
#line 23058 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 378: /* reloption_list: reloption_elem  */
#line 343 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 23064 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 379: /* reloption_list: reloption_list ',' reloption_elem  */
#line 344 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt)); }
#line 23070 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 380: /* ExistingIndex: USING INDEX index_name  */
#line 348 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 23076 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 381: /* ConstraintAttr: DEFERRABLE  */
#line 354 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_DEFERRABLE;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 23087 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 382: /* ConstraintAttr: NOT DEFERRABLE  */
#line 361 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_NOT_DEFERRABLE;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 23098 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 383: /* ConstraintAttr: INITIALLY DEFERRED  */
#line 368 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_DEFERRED;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 23109 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 384: /* ConstraintAttr: INITIALLY IMMEDIATE  */
#line 375 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_IMMEDIATE;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 23120 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 385: /* OptWith: WITH reloptions  */
#line 386 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.list) = (yyvsp[0].list); }
#line 23126 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 386: /* OptWith: WITH OIDS  */
#line 387 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = list_make1(makeDefElem("oids", (PGNode *) makeInteger(true), (yylsp[-1]))); }
#line 23132 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 387: /* OptWith: WITHOUT OIDS  */
#line 388 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.list) = list_make1(makeDefElem("oids", (PGNode *) makeInteger(false), (yylsp[-1]))); }
#line 23138 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 388: /* OptWith: %empty  */
#line 389 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = NIL; }
#line 23144 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 389: /* definition: '(' def_list ')'  */
#line 393 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 23150 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 390: /* TableLikeOptionList: TableLikeOptionList INCLUDING TableLikeOption  */
#line 398 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) | (yyvsp[0].ival); }
#line 23156 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 391: /* TableLikeOptionList: TableLikeOptionList EXCLUDING TableLikeOption  */
#line 399 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) & ~(yyvsp[0].ival); }
#line 23162 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 392: /* TableLikeOptionList: %empty  */
#line 400 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.ival) = 0; }
#line 23168 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 393: /* generic_option_name: ColLabel  */
#line 405 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 23174 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 394: /* ConstraintAttributeElem: NOT DEFERRABLE  */
#line 410 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_NOT_DEFERRABLE; }
#line 23180 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 395: /* ConstraintAttributeElem: DEFERRABLE  */
#line 411 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_DEFERRABLE; }
#line 23186 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 396: /* ConstraintAttributeElem: INITIALLY IMMEDIATE  */
#line 412 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = CAS_INITIALLY_IMMEDIATE; }
#line 23192 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 397: /* ConstraintAttributeElem: INITIALLY DEFERRED  */
#line 413 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = CAS_INITIALLY_DEFERRED; }
#line 23198 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 398: /* ConstraintAttributeElem: NOT VALID  */
#line 414 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = CAS_NOT_VALID; }
#line 23204 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 399: /* ConstraintAttributeElem: NO INHERIT  */
#line 415 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_NO_INHERIT; }
#line 23210 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 400: /* regularColumnDef: Typename ColQualList  */
#line 421 "third_party/libpg_query/grammar/statements/create.y"
        {
		PGColumnDef *n = makeNode(PGColumnDef);
		n->category = COL_STANDARD;
		n->typeName = (yyvsp[-1].typnam);
		n->inhcount = 0;
		n->is_local = true;
		n->is_not_null = false;
		n->is_from_type = false;
		n->storage = 0;
		n->raw_default = NULL;
		n->cooked_default = NULL;
		n->collOid = InvalidOid;
		SplitColQualList((yyvsp[0].list), &n->constraints, &n->collClause,
						 yyscanner);
		(yyval.node) = (PGNode *) n;
	}
#line 23231 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 401: /* generatedColumnDef: opt_Typename GeneratedConstraintElem ColQualList  */
#line 441 "third_party/libpg_query/grammar/statements/create.y"
        {
		PGColumnDef *n = makeNode(PGColumnDef);
		n->category = COL_GENERATED;
		n->typeName = (yyvsp[-2].typnam);
		n->inhcount = 0;
		n->is_local = true;
		n->is_not_null = false;
		n->is_from_type = false;
		n->storage = 0;
		n->raw_default = NULL;
		n->cooked_default = NULL;
		n->collOid = InvalidOid;
		// merge the constraints with the generated column constraint
		auto constraints = (yyvsp[0].list);
		if (constraints) {
			constraints = lappend(constraints, (yyvsp[-1].node));
		} else {
			constraints = list_make1((yyvsp[-1].node));
		}
		SplitColQualList(constraints, &n->constraints, &n->collClause,
						 yyscanner);
		(yyval.node) = (PGNode *)n;
	}
#line 23259 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 402: /* columnDef: ColId regularColumnDef  */
#line 467 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGColumnDef *n = (PGColumnDef *) (yyvsp[0].node);
					n->colname = (yyvsp[-1].str);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
			}
#line 23270 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 403: /* columnDef: ColId generatedColumnDef  */
#line 475 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGColumnDef *n = (PGColumnDef *) (yyvsp[0].node);
					n->colname = (yyvsp[-1].str);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
			}
#line 23281 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 404: /* def_list: def_elem  */
#line 484 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 23287 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 405: /* def_list: def_list ',' def_elem  */
#line 485 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt)); }
#line 23293 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 406: /* index_name: ColId  */
#line 489 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 23299 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 407: /* TableElement: columnDef  */
#line 493 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 23305 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 408: /* TableElement: TableLikeClause  */
#line 494 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 23311 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 409: /* TableElement: TableConstraint  */
#line 495 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 23317 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 410: /* def_elem: ColLabel '=' def_arg  */
#line 500 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-2].str), (PGNode *) (yyvsp[0].node), (yylsp[-2]));
				}
#line 23325 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 411: /* def_elem: ColLabel  */
#line 504 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[0].str), NULL, (yylsp[0]));
				}
#line 23333 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 412: /* opt_definition: WITH definition  */
#line 511 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 23339 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 413: /* opt_definition: %empty  */
#line 512 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 23345 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 414: /* OptTableElementList: TableElementList  */
#line 517 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 23351 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 415: /* OptTableElementList: TableElementList ','  */
#line 518 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 23357 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 416: /* OptTableElementList: %empty  */
#line 519 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = NIL; }
#line 23363 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 417: /* columnElem: ColId  */
#line 524 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.node) = (PGNode *) makeString((yyvsp[0].str));
				}
#line 23371 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 418: /* opt_column_list: '(' columnList ')'  */
#line 531 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 23377 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 419: /* opt_column_list: %empty  */
#line 532 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 23383 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 420: /* ColQualList: ColQualList ColConstraint  */
#line 537 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 23389 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 421: /* ColQualList: %empty  */
#line 538 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 23395 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 422: /* key_delete: ON DELETE_P key_action  */
#line 542 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 23401 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 423: /* reloption_elem: ColLabel '=' def_arg  */
#line 548 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-2].str), (PGNode *) (yyvsp[0].node), (yylsp[-2]));
				}
#line 23409 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 424: /* reloption_elem: ColLabel  */
#line 552 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[0].str), NULL, (yylsp[0]));
				}
#line 23417 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 425: /* reloption_elem: ColLabel '.' ColLabel '=' def_arg  */
#line 556 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElemExtended((yyvsp[-4].str), (yyvsp[-2].str), (PGNode *) (yyvsp[0].node),
											 PG_DEFELEM_UNSPEC, (yylsp[-4]));
				}
#line 23426 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 426: /* reloption_elem: ColLabel '.' ColLabel  */
#line 561 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElemExtended((yyvsp[-2].str), (yyvsp[0].str), NULL, PG_DEFELEM_UNSPEC, (yylsp[-2]));
				}
#line 23434 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 427: /* columnList: columnElem  */
#line 568 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 23440 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 428: /* columnList: columnList ',' columnElem  */
#line 569 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 23446 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 429: /* columnList_opt_comma: columnList  */
#line 573 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 23452 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 430: /* columnList_opt_comma: columnList ','  */
#line 574 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 23458 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 431: /* func_type: Typename  */
#line 578 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 23464 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 432: /* func_type: type_function_name attrs '%' TYPE_P  */
#line 580 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.typnam) = makeTypeNameFromNameList(lcons(makeString((yyvsp[-3].str)), (yyvsp[-2].list)));
					(yyval.typnam)->pct_type = true;
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 23474 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 433: /* func_type: SETOF type_function_name attrs '%' TYPE_P  */
#line 586 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.typnam) = makeTypeNameFromNameList(lcons(makeString((yyvsp[-3].str)), (yyvsp[-2].list)));
					(yyval.typnam)->pct_type = true;
					(yyval.typnam)->setof = true;
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 23485 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 434: /* ConstraintElem: CHECK_P '(' a_expr ')' ConstraintAttributeSpec  */
#line 597 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_CHECK;
					n->location = (yylsp[-4]);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "CHECK",
								   NULL, NULL, &n->skip_validation,
								   &n->is_no_inherit, yyscanner);
					n->initially_valid = !n->skip_validation;
					(yyval.node) = (PGNode *)n;
				}
#line 23502 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 435: /* ConstraintElem: UNIQUE '(' columnList_opt_comma ')' opt_definition ConstraintAttributeSpec  */
#line 611 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-5]);
					n->keys = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->indexname = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "UNIQUE",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 23519 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 436: /* ConstraintElem: UNIQUE ExistingIndex ConstraintAttributeSpec  */
#line 624 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-2]);
					n->keys = NIL;
					n->options = NIL;
					n->indexname = (yyvsp[-1].str);
					n->indexspace = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "UNIQUE",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 23537 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 437: /* ConstraintElem: PRIMARY KEY '(' columnList_opt_comma ')' opt_definition ConstraintAttributeSpec  */
#line 639 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-6]);
					n->keys = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->indexname = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "PRIMARY KEY",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 23554 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 438: /* ConstraintElem: PRIMARY KEY ExistingIndex ConstraintAttributeSpec  */
#line 652 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-3]);
					n->keys = NIL;
					n->options = NIL;
					n->indexname = (yyvsp[-1].str);
					n->indexspace = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "PRIMARY KEY",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 23572 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 439: /* ConstraintElem: FOREIGN KEY '(' columnList_opt_comma ')' REFERENCES qualified_name opt_column_list key_match key_actions ConstraintAttributeSpec  */
#line 667 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_FOREIGN;
					n->location = (yylsp[-10]);
					n->pktable			= (yyvsp[-4].range);
					n->fk_attrs			= (yyvsp[-7].list);
					n->pk_attrs			= (yyvsp[-3].list);
					n->fk_matchtype		= (yyvsp[-2].ival);
					n->fk_upd_action	= (char) ((yyvsp[-1].ival) >> 8);
					n->fk_del_action	= (char) ((yyvsp[-1].ival) & 0xFF);
					processCASbits((yyvsp[0].ival), (yylsp[0]), "FOREIGN KEY",
								   &n->deferrable, &n->initdeferred,
								   &n->skip_validation, NULL,
								   yyscanner);
					n->initially_valid = !n->skip_validation;
					(yyval.node) = (PGNode *)n;
				}
#line 23594 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 440: /* TableElementList: TableElement  */
#line 689 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 23602 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 441: /* TableElementList: TableElementList ',' TableElement  */
#line 693 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 23610 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 442: /* key_match: MATCH FULL  */
#line 700 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_FULL;
			}
#line 23618 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 443: /* key_match: MATCH PARTIAL  */
#line 704 "third_party/libpg_query/grammar/statements/create.y"
                        {
				ereport(ERROR,
						(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
						 errmsg("MATCH PARTIAL not yet implemented"),
						 parser_errposition((yylsp[-1]))));
				(yyval.ival) = PG_FKCONSTR_MATCH_PARTIAL;
			}
#line 23630 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 444: /* key_match: MATCH SIMPLE  */
#line 712 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_SIMPLE;
			}
#line 23638 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 445: /* key_match: %empty  */
#line 716 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_SIMPLE;
			}
#line 23646 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 446: /* TableLikeClause: LIKE qualified_name TableLikeOptionList  */
#line 724 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGTableLikeClause *n = makeNode(PGTableLikeClause);
					n->relation = (yyvsp[-1].range);
					n->options = (yyvsp[0].ival);
					(yyval.node) = (PGNode *)n;
				}
#line 23657 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 447: /* OptTemp: TEMPORARY  */
#line 733 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 23663 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 448: /* OptTemp: TEMP  */
#line 734 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 23669 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 449: /* OptTemp: LOCAL TEMPORARY  */
#line 735 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 23675 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 450: /* OptTemp: LOCAL TEMP  */
#line 736 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 23681 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 451: /* OptTemp: GLOBAL TEMPORARY  */
#line 738 "third_party/libpg_query/grammar/statements/create.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-1]))));
					(yyval.ival) = PG_RELPERSISTENCE_TEMP;
				}
#line 23692 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 452: /* OptTemp: GLOBAL TEMP  */
#line 745 "third_party/libpg_query/grammar/statements/create.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-1]))));
					(yyval.ival) = PG_RELPERSISTENCE_TEMP;
				}
#line 23703 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 453: /* OptTemp: UNLOGGED  */
#line 751 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_RELPERSISTENCE_UNLOGGED; }
#line 23709 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 454: /* OptTemp: %empty  */
#line 752 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = RELPERSISTENCE_PERMANENT; }
#line 23715 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 455: /* generated_when: ALWAYS  */
#line 757 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = PG_ATTRIBUTE_IDENTITY_ALWAYS; }
#line 23721 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 456: /* generated_when: BY DEFAULT  */
#line 758 "third_party/libpg_query/grammar/statements/create.y"
                                        { (yyval.ival) = ATTRIBUTE_IDENTITY_BY_DEFAULT; }
#line 23727 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 457: /* CreateSeqStmt: CREATE_P OptTemp SEQUENCE qualified_name OptSeqOptList  */
#line 10 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                {
					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
					(yyvsp[-1].range)->relpersistence = (yyvsp[-3].ival);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->ownerId = InvalidOid;
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 23741 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 458: /* CreateSeqStmt: CREATE_P OptTemp SEQUENCE IF_P NOT EXISTS qualified_name OptSeqOptList  */
#line 20 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                {
					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
					(yyvsp[-1].range)->relpersistence = (yyvsp[-6].ival);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->ownerId = InvalidOid;
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 23755 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 459: /* CreateSeqStmt: CREATE_P OR REPLACE OptTemp SEQUENCE qualified_name OptSeqOptList  */
#line 30 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                {
					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
					(yyvsp[-1].range)->relpersistence = (yyvsp[-3].ival);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->ownerId = InvalidOid;
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 23769 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 460: /* OptSeqOptList: SeqOptList  */
#line 42 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 23775 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 461: /* OptSeqOptList: %empty  */
#line 43 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                                                                                { (yyval.list) = NIL; }
#line 23781 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 464: /* select_with_parens: '(' select_no_parens ')'  */
#line 52 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 23787 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 465: /* select_with_parens: '(' select_with_parens ')'  */
#line 53 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.node) = (yyvsp[-1].node); }
#line 23793 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 466: /* select_with_parens: '(' VariableShowStmt ')'  */
#line 55 "third_party/libpg_query/grammar/statements/select.y"
                    {
		    	(yyval.node) = (yyvsp[-1].node);
			}
#line 23801 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 467: /* select_no_parens: simple_select  */
#line 72 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 23807 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 468: /* select_no_parens: select_clause sort_clause  */
#line 74 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-1].node), (yyvsp[0].list), NIL,
										NULL, NULL, NULL, NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-1].node);
				}
#line 23818 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 469: /* select_no_parens: select_clause opt_sort_clause for_locking_clause opt_select_limit  */
#line 81 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[-1].list),
										(PGNode*) list_nth((yyvsp[0].list), 0), (PGNode*) list_nth((yyvsp[0].list), 1), (PGNode*) list_nth((yyvsp[0].list), 2),
										NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 23830 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 470: /* select_no_parens: select_clause opt_sort_clause select_limit opt_for_locking_clause  */
#line 89 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[0].list),
										(PGNode*) list_nth((yyvsp[-1].list), 0), (PGNode*) list_nth((yyvsp[-1].list), 1), (PGNode*) list_nth((yyvsp[-1].list), 2),
										NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 23842 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 471: /* select_no_parens: with_clause select_clause  */
#line 97 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[0].node), NULL, NIL,
										NULL, NULL, NULL,
										(yyvsp[-1].with),
										yyscanner);
					(yyval.node) = (yyvsp[0].node);
				}
#line 23854 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 472: /* select_no_parens: with_clause select_clause sort_clause  */
#line 105 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-1].node), (yyvsp[0].list), NIL,
										NULL, NULL, NULL,
										(yyvsp[-2].with),
										yyscanner);
					(yyval.node) = (yyvsp[-1].node);
				}
#line 23866 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 473: /* select_no_parens: with_clause select_clause opt_sort_clause for_locking_clause opt_select_limit  */
#line 113 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[-1].list),
										(PGNode*) list_nth((yyvsp[0].list), 0), (PGNode*) list_nth((yyvsp[0].list), 1), (PGNode*) list_nth((yyvsp[0].list), 2),
										(yyvsp[-4].with),
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 23878 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 474: /* select_no_parens: with_clause select_clause opt_sort_clause select_limit opt_for_locking_clause  */
#line 121 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[0].list),
										(PGNode*) list_nth((yyvsp[-1].list), 0), (PGNode*) list_nth((yyvsp[-1].list), 1), (PGNode*) list_nth((yyvsp[-1].list), 2),
										(yyvsp[-4].with),
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 23890 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 475: /* select_clause: simple_select  */
#line 131 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 23896 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 476: /* select_clause: select_with_parens  */
#line 132 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 23902 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 477: /* opt_select: SELECT opt_all_clause opt_target_list_opt_comma  */
#line 160 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.list) = (yyvsp[0].list);
			}
#line 23910 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 478: /* opt_select: %empty  */
#line 164 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGAStar *star = makeNode(PGAStar);
				(yyval.list) = list_make1(star);
			}
#line 23919 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 479: /* simple_select: SELECT opt_all_clause opt_target_list_opt_comma into_clause from_clause where_clause group_clause having_clause window_clause qualify_clause sample_clause  */
#line 175 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->targetList = (yyvsp[-8].list);
					n->intoClause = (yyvsp[-7].into);
					n->fromClause = (yyvsp[-6].list);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 23937 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 480: /* simple_select: SELECT distinct_clause target_list_opt_comma into_clause from_clause where_clause group_clause having_clause window_clause qualify_clause sample_clause  */
#line 191 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->distinctClause = (yyvsp[-9].list);
					n->targetList = (yyvsp[-8].list);
					n->intoClause = (yyvsp[-7].into);
					n->fromClause = (yyvsp[-6].list);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 23956 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 481: /* simple_select: FROM from_list opt_select into_clause where_clause group_clause having_clause window_clause qualify_clause sample_clause  */
#line 208 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->targetList = (yyvsp[-7].list);
					n->fromClause = (yyvsp[-8].list);
					n->intoClause = (yyvsp[-6].into);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					n->from_first = true;
					(yyval.node) = (PGNode *)n;
				}
#line 23975 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 482: /* simple_select: FROM from_list SELECT distinct_clause target_list_opt_comma into_clause where_clause group_clause having_clause window_clause qualify_clause sample_clause  */
#line 226 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->targetList = (yyvsp[-7].list);
					n->distinctClause = (yyvsp[-8].list);
					n->fromClause = (yyvsp[-10].list);
					n->intoClause = (yyvsp[-6].into);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					n->from_first = true;
					(yyval.node) = (PGNode *)n;
				}
#line 23995 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 483: /* simple_select: values_clause_opt_comma  */
#line 241 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 24001 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 484: /* simple_select: TABLE relation_expr  */
#line 243 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* same as SELECT * FROM relation_expr */
					PGColumnRef *cr = makeNode(PGColumnRef);
					PGResTarget *rt = makeNode(PGResTarget);
					PGSelectStmt *n = makeNode(PGSelectStmt);

					cr->fields = list_make1(makeNode(PGAStar));
					cr->location = -1;

					rt->name = NULL;
					rt->indirection = NIL;
					rt->val = (PGNode *)cr;
					rt->location = -1;

					n->targetList = list_make1(rt);
					n->fromClause = list_make1((yyvsp[0].range));
					(yyval.node) = (PGNode *)n;
				}
#line 24024 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 485: /* simple_select: select_clause UNION all_or_distinct by_name select_clause  */
#line 262 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_UNION_BY_NAME, (yyvsp[-2].boolean), (yyvsp[-4].node), (yyvsp[0].node));
				}
#line 24032 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 486: /* simple_select: select_clause UNION all_or_distinct select_clause  */
#line 266 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_UNION, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 24040 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 487: /* simple_select: select_clause INTERSECT all_or_distinct select_clause  */
#line 270 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_INTERSECT, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 24048 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 488: /* simple_select: select_clause EXCEPT all_or_distinct select_clause  */
#line 274 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_EXCEPT, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 24056 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 489: /* simple_select: pivot_keyword table_ref USING target_list_opt_comma  */
#line 278 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-2].node);
					n->aggrs = (yyvsp[0].list);
					n->location = (yylsp[-3]);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 24070 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 490: /* simple_select: pivot_keyword table_ref USING target_list_opt_comma GROUP_P BY name_list_opt_comma_opt_bracket  */
#line 288 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-5].node);
					n->aggrs = (yyvsp[-3].list);
					n->groups = (yyvsp[0].list);
					n->location = (yylsp[-6]);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 24085 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 491: /* simple_select: pivot_keyword table_ref GROUP_P BY name_list_opt_comma_opt_bracket  */
#line 299 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-3].node);
					n->groups = (yyvsp[0].list);
					n->location = (yylsp[-4]);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 24099 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 492: /* simple_select: pivot_keyword table_ref ON pivot_column_list  */
#line 309 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-2].node);
					n->columns = (yyvsp[0].list);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 24112 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 493: /* simple_select: pivot_keyword table_ref ON pivot_column_list GROUP_P BY name_list_opt_comma_opt_bracket  */
#line 318 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-5].node);
					n->columns = (yyvsp[-3].list);
					n->groups = (yyvsp[0].list);
					n->location = (yylsp[-6]);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 24127 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 494: /* simple_select: pivot_keyword table_ref ON pivot_column_list USING target_list_opt_comma  */
#line 329 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-4].node);
					n->columns = (yyvsp[-2].list);
					n->aggrs = (yyvsp[0].list);
					n->location = (yylsp[-5]);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 24142 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 495: /* simple_select: pivot_keyword table_ref ON pivot_column_list USING target_list_opt_comma GROUP_P BY name_list_opt_comma_opt_bracket  */
#line 340 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-7].node);
					n->columns = (yyvsp[-5].list);
					n->aggrs = (yyvsp[-3].list);
					n->groups = (yyvsp[0].list);
					n->location = (yylsp[-8]);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 24158 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 496: /* simple_select: unpivot_keyword table_ref ON target_list_opt_comma INTO NAME_P name value_or_values name_list_opt_comma_opt_bracket  */
#line 352 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-7].node);
					n->unpivots = (yyvsp[0].list);
					n->location = (yylsp[-8]);
					PGPivot *piv = makeNode(PGPivot);
					piv->unpivot_columns = list_make1(makeString((yyvsp[-2].str)));
					piv->pivot_value = (yyvsp[-5].list);
					n->columns = list_make1(piv);

					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 24177 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 497: /* simple_select: unpivot_keyword table_ref ON target_list_opt_comma  */
#line 367 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-2].node);
					n->unpivots = list_make1(makeString("value"));
					n->location = (yylsp[-3]);
					PGPivot *piv = makeNode(PGPivot);
					piv->unpivot_columns = list_make1(makeString("name"));
					piv->pivot_value = (yyvsp[0].list);
					n->columns = list_make1(piv);

					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 24196 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 504: /* pivot_column_entry: b_expr  */
#line 397 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGPivot *n = makeNode(PGPivot);
				n->pivot_columns = list_make1((yyvsp[0].node));
				(yyval.node) = (PGNode *) n;
			}
#line 24206 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 505: /* pivot_column_entry: b_expr IN_P '(' select_no_parens ')'  */
#line 403 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGPivot *n = makeNode(PGPivot);
				n->pivot_columns = list_make1((yyvsp[-4].node));
				n->subquery = (yyvsp[-1].node);
				(yyval.node) = (PGNode *) n;
			}
#line 24217 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 506: /* pivot_column_entry: single_pivot_value  */
#line 409 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 24223 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 507: /* pivot_column_list_internal: pivot_column_entry  */
#line 413 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 24229 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 508: /* pivot_column_list_internal: pivot_column_list_internal ',' pivot_column_entry  */
#line 414 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 24235 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 509: /* pivot_column_list: pivot_column_list_internal  */
#line 418 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 24241 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 510: /* pivot_column_list: pivot_column_list_internal ','  */
#line 419 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 24247 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 511: /* with_clause: WITH cte_list  */
#line 434 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = false;
				(yyval.with)->location = (yylsp[-1]);
			}
#line 24258 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 512: /* with_clause: WITH_LA cte_list  */
#line 441 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = false;
				(yyval.with)->location = (yylsp[-1]);
			}
#line 24269 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 513: /* with_clause: WITH RECURSIVE cte_list  */
#line 448 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = true;
				(yyval.with)->location = (yylsp[-2]);
			}
#line 24280 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 514: /* cte_list: common_table_expr  */
#line 457 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 24286 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 515: /* cte_list: cte_list ',' common_table_expr  */
#line 458 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 24292 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 516: /* common_table_expr: name opt_name_list opt_on_key AS opt_materialized '(' PreparableStmt ')'  */
#line 462 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGCommonTableExpr *n = makeNode(PGCommonTableExpr);
				n->ctename = (yyvsp[-7].str);
				n->aliascolnames = (yyvsp[-6].list);
				n->recursive_keys = (yyvsp[-5].list);
				n->ctematerialized = (yyvsp[-3].ctematerialize);
				n->ctequery = (yyvsp[-1].node);
				n->location = (yylsp[-7]);
				(yyval.node) = (PGNode *) n;
			}
#line 24307 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 517: /* opt_on_key: USING KEY '(' column_ref_list_opt_comma ')'  */
#line 475 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 24313 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 518: /* opt_on_key: %empty  */
#line 476 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                        { (yyval.list) = list_make1(NIL); }
#line 24319 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 519: /* column_ref_list_opt_comma: column_ref_list  */
#line 480 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 24325 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 520: /* column_ref_list_opt_comma: column_ref_list ','  */
#line 481 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 24331 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 521: /* column_ref_list: columnref  */
#line 485 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 24337 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 522: /* column_ref_list: column_ref_list ',' columnref  */
#line 486 "third_party/libpg_query/grammar/statements/select.y"
                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 24343 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 523: /* opt_materialized: MATERIALIZED  */
#line 490 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.ctematerialize) = PGCTEMaterializeAlways; }
#line 24349 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 524: /* opt_materialized: NOT MATERIALIZED  */
#line 491 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.ctematerialize) = PGCTEMaterializeNever; }
#line 24355 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 525: /* opt_materialized: %empty  */
#line 492 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ctematerialize) = PGCTEMaterializeDefault; }
#line 24361 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 526: /* into_clause: INTO OptTempTableName  */
#line 497 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.into) = makeNode(PGIntoClause);
					(yyval.into)->rel = (yyvsp[0].range);
					(yyval.into)->colNames = NIL;
					(yyval.into)->options = NIL;
					(yyval.into)->onCommit = PG_ONCOMMIT_NOOP;
					(yyval.into)->viewQuery = NULL;
					(yyval.into)->skipData = false;
				}
#line 24375 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 527: /* into_clause: %empty  */
#line 507 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.into) = NULL; }
#line 24381 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 528: /* OptTempTableName: TEMPORARY opt_table qualified_name  */
#line 516 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 24390 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 529: /* OptTempTableName: TEMP opt_table qualified_name  */
#line 521 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 24399 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 530: /* OptTempTableName: LOCAL TEMPORARY opt_table qualified_name  */
#line 526 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 24408 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 531: /* OptTempTableName: LOCAL TEMP opt_table qualified_name  */
#line 531 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 24417 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 532: /* OptTempTableName: GLOBAL TEMPORARY opt_table qualified_name  */
#line 536 "third_party/libpg_query/grammar/statements/select.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-3]))));
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 24429 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 533: /* OptTempTableName: GLOBAL TEMP opt_table qualified_name  */
#line 544 "third_party/libpg_query/grammar/statements/select.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-3]))));
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 24441 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 534: /* OptTempTableName: UNLOGGED opt_table qualified_name  */
#line 552 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_UNLOGGED;
				}
#line 24450 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 535: /* OptTempTableName: TABLE qualified_name  */
#line 557 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = RELPERSISTENCE_PERMANENT;
				}
#line 24459 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 536: /* OptTempTableName: qualified_name  */
#line 562 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = RELPERSISTENCE_PERMANENT;
				}
#line 24468 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 537: /* opt_table: TABLE  */
#line 568 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        {}
#line 24474 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 538: /* opt_table: %empty  */
#line 569 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                {}
#line 24480 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 539: /* all_or_distinct: ALL  */
#line 573 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.boolean) = true; }
#line 24486 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 540: /* all_or_distinct: DISTINCT  */
#line 574 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 24492 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 541: /* all_or_distinct: %empty  */
#line 575 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 24498 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 542: /* by_name: BY NAME_P  */
#line 579 "third_party/libpg_query/grammar/statements/select.y"
                                                          { }
#line 24504 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 543: /* distinct_clause: DISTINCT  */
#line 586 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1(NIL); }
#line 24510 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 544: /* distinct_clause: DISTINCT ON '(' expr_list_opt_comma ')'  */
#line 587 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 24516 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 545: /* opt_all_clause: ALL  */
#line 591 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = NIL;}
#line 24522 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 546: /* opt_all_clause: %empty  */
#line 592 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 24528 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 547: /* opt_ignore_nulls: IGNORE_P NULLS_P  */
#line 596 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ignorenulls) = PG_IGNORE_NULLS;}
#line 24534 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 548: /* opt_ignore_nulls: RESPECT_P NULLS_P  */
#line 597 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ignorenulls) = PG_RESPECT_NULLS;}
#line 24540 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 549: /* opt_ignore_nulls: %empty  */
#line 598 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.ignorenulls) = PG_DEFAULT_NULLS; }
#line 24546 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 550: /* opt_sort_clause: sort_clause  */
#line 602 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list);}
#line 24552 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 551: /* opt_sort_clause: %empty  */
#line 603 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 24558 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 552: /* sort_clause: ORDER BY sortby_list  */
#line 607 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 24564 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 553: /* sort_clause: ORDER BY ALL opt_asc_desc opt_nulls_order  */
#line 609 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSortBy *sort = makeNode(PGSortBy);
					PGAStar *star = makeNode(PGAStar);
					star->columns = true;
					star->location = (yylsp[-2]);
					sort->node = (PGNode *) star;
					sort->sortby_dir = (yyvsp[-1].sortorder);
					sort->sortby_nulls = (yyvsp[0].nullorder);
					sort->useOp = NIL;
					sort->location = -1;		/* no operator */
					(yyval.list) = list_make1(sort);
				}
#line 24581 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 554: /* sortby_list: sortby  */
#line 624 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].sortby)); }
#line 24587 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 555: /* sortby_list: sortby_list ',' sortby  */
#line 625 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].sortby)); }
#line 24593 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 556: /* sortby: a_expr USING qual_all_Op opt_nulls_order  */
#line 629 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.sortby) = makeNode(PGSortBy);
					(yyval.sortby)->node = (yyvsp[-3].node);
					(yyval.sortby)->sortby_dir = SORTBY_USING;
					(yyval.sortby)->sortby_nulls = (yyvsp[0].nullorder);
					(yyval.sortby)->useOp = (yyvsp[-1].list);
					(yyval.sortby)->location = (yylsp[-1]);
				}
#line 24606 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 557: /* sortby: a_expr opt_asc_desc opt_nulls_order  */
#line 638 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.sortby) = makeNode(PGSortBy);
					(yyval.sortby)->node = (yyvsp[-2].node);
					(yyval.sortby)->sortby_dir = (yyvsp[-1].sortorder);
					(yyval.sortby)->sortby_nulls = (yyvsp[0].nullorder);
					(yyval.sortby)->useOp = NIL;
					(yyval.sortby)->location = -1;		/* no operator */
				}
#line 24619 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 558: /* opt_asc_desc: ASC_P  */
#line 648 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.sortorder) = PG_SORTBY_ASC; }
#line 24625 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 559: /* opt_asc_desc: DESC_P  */
#line 649 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.sortorder) = PG_SORTBY_DESC; }
#line 24631 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 560: /* opt_asc_desc: %empty  */
#line 650 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.sortorder) = PG_SORTBY_DEFAULT; }
#line 24637 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 561: /* opt_nulls_order: NULLS_LA FIRST_P  */
#line 653 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.nullorder) = PG_SORTBY_NULLS_FIRST; }
#line 24643 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 562: /* opt_nulls_order: NULLS_LA LAST_P  */
#line 654 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.nullorder) = PG_SORTBY_NULLS_LAST; }
#line 24649 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 563: /* opt_nulls_order: %empty  */
#line 655 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.nullorder) = PG_SORTBY_NULLS_DEFAULT; }
#line 24655 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 564: /* select_limit: limit_clause offset_clause  */
#line 659 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = list_make3((yyvsp[0].node), (yyvsp[-1].node), NULL); }
#line 24661 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 565: /* select_limit: offset_clause limit_clause  */
#line 660 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make3((yyvsp[-1].node), (yyvsp[0].node), (yyvsp[-1].node)); }
#line 24667 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 566: /* select_limit: limit_clause  */
#line 661 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make3(NULL, (yyvsp[0].node), NULL); }
#line 24673 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 567: /* select_limit: offset_clause  */
#line 662 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make3((yyvsp[0].node), NULL, (yyvsp[0].node)); }
#line 24679 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 568: /* opt_select_limit: select_limit  */
#line 666 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 24685 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 569: /* opt_select_limit: %empty  */
#line 667 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make3(NULL,NULL,NULL); }
#line 24691 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 570: /* limit_clause: LIMIT select_limit_value  */
#line 672 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 24697 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 571: /* limit_clause: LIMIT select_limit_value ',' select_offset_value  */
#line 674 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* Disabled because it was too confusing, bjm 2002-02-18 */
					ereport(ERROR,
							(errcode(PG_ERRCODE_SYNTAX_ERROR),
							 errmsg("LIMIT #,# syntax is not supported"),
							 errhint("Use separate LIMIT and OFFSET clauses."),
							 parser_errposition((yylsp[-3]))));
				}
#line 24710 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 572: /* limit_clause: FETCH first_or_next select_fetch_first_value row_or_rows ONLY  */
#line 690 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[-2].node); }
#line 24716 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 573: /* limit_clause: FETCH first_or_next row_or_rows ONLY  */
#line 692 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeIntConst(1, -1); }
#line 24722 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 574: /* offset_clause: OFFSET select_offset_value  */
#line 697 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 24728 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 575: /* offset_clause: OFFSET select_fetch_first_value row_or_rows  */
#line 700 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[-1].node); }
#line 24734 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 576: /* sample_value: FCONST  */
#line 705 "third_party/libpg_query/grammar/statements/select.y"
        {
            (yyval.node) = makeFloatConst((yyvsp[0].str), (yylsp[0]));
        }
#line 24742 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 577: /* sample_value: ICONST  */
#line 709 "third_party/libpg_query/grammar/statements/select.y"
        {
            (yyval.node) = makeIntConst((yyvsp[0].ival), (yylsp[0]));
        }
#line 24750 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 579: /* sample_count: sample_value '%'  */
#line 720 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize((yyvsp[-1].node), true);
		}
#line 24758 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 580: /* sample_count: sample_value PERCENT  */
#line 724 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize((yyvsp[-1].node), true);
		}
#line 24766 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 581: /* sample_count: sample_value  */
#line 728 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize((yyvsp[0].node), false);
		}
#line 24774 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 582: /* sample_count: sample_value ROWS  */
#line 732 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize((yyvsp[-1].node), false);
		}
#line 24782 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 583: /* sample_clause: USING SAMPLE tablesample_entry  */
#line 739 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 24790 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 584: /* sample_clause: %empty  */
#line 743 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = NULL; }
#line 24796 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 585: /* opt_sample_func: ColId  */
#line 750 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 24802 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 586: /* opt_sample_func: %empty  */
#line 751 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.str) = NULL; }
#line 24808 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 587: /* tablesample_entry: opt_sample_func '(' sample_count ')' opt_repeatable_clause  */
#line 756 "third_party/libpg_query/grammar/statements/select.y"
                                {
					int seed = (yyvsp[0].ival);
					(yyval.node) = makeSampleOptions((yyvsp[-2].node), (yyvsp[-4].str), &seed, (yylsp[-4]));
				}
#line 24817 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 588: /* tablesample_entry: sample_count  */
#line 761 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleOptions((yyvsp[0].node), NULL, NULL, (yylsp[0]));
		}
#line 24825 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 589: /* tablesample_entry: sample_count '(' ColId ')'  */
#line 765 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleOptions((yyvsp[-3].node), (yyvsp[-1].str), NULL, (yylsp[-3]));
		}
#line 24833 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 590: /* tablesample_entry: sample_count '(' ColId ',' ICONST ')'  */
#line 769 "third_party/libpg_query/grammar/statements/select.y"
                {
			int seed = (yyvsp[-1].ival);
			(yyval.node) = makeSampleOptions((yyvsp[-5].node), (yyvsp[-3].str), &seed, (yylsp[-5]));
		}
#line 24842 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 591: /* tablesample_clause: TABLESAMPLE tablesample_entry  */
#line 777 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 24850 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 592: /* opt_tablesample_clause: tablesample_clause  */
#line 783 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 24856 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 593: /* opt_tablesample_clause: %empty  */
#line 784 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.node) = NULL; }
#line 24862 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 594: /* opt_repeatable_clause: REPEATABLE '(' ICONST ')'  */
#line 789 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.ival) = (yyvsp[-1].ival); }
#line 24868 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 595: /* opt_repeatable_clause: %empty  */
#line 790 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.ival) = -1; }
#line 24874 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 596: /* at_unit: TIMESTAMP  */
#line 795 "third_party/libpg_query/grammar/statements/select.y"
                  { (yyval.str) = (char*) "TIMESTAMP"; }
#line 24880 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 597: /* at_unit: VERSION_P  */
#line 796 "third_party/libpg_query/grammar/statements/select.y"
                    { (yyval.str) = (char*) "VERSION"; }
#line 24886 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 598: /* at_specifier: at_unit EQUALS_GREATER a_expr  */
#line 801 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGAtClause *n = makeNode(PGAtClause);
				n->unit = (yyvsp[-2].str);
				n->expr = (yyvsp[0].node);
				(yyval.node) = (PGNode *) n;
			}
#line 24897 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 599: /* opt_at_clause: AT '(' at_specifier ')'  */
#line 810 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.node) = (yyvsp[-1].node); }
#line 24903 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 600: /* opt_at_clause: %empty  */
#line 811 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.node) = NULL; }
#line 24909 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 601: /* select_limit_value: a_expr  */
#line 816 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 24915 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 602: /* select_limit_value: ALL  */
#line 818 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* LIMIT ALL is represented as a NULL constant */
					(yyval.node) = makeNullAConst((yylsp[0]));
				}
#line 24924 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 603: /* select_limit_value: a_expr '%'  */
#line 823 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeLimitPercent((yyvsp[-1].node)); }
#line 24930 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 604: /* select_limit_value: FCONST PERCENT  */
#line 825 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeLimitPercent(makeFloatConst((yyvsp[-1].str),(yylsp[-1]))); }
#line 24936 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 605: /* select_limit_value: ICONST PERCENT  */
#line 827 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeLimitPercent(makeIntConst((yyvsp[-1].ival),(yylsp[-1]))); }
#line 24942 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 606: /* select_offset_value: a_expr  */
#line 831 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 24948 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 607: /* select_fetch_first_value: c_expr  */
#line 851 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 24954 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 608: /* select_fetch_first_value: '+' I_or_F_const  */
#line 853 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 24960 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 609: /* select_fetch_first_value: '-' I_or_F_const  */
#line 855 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 24966 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 610: /* I_or_F_const: Iconst  */
#line 859 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = makeIntConst((yyvsp[0].ival),(yylsp[0])); }
#line 24972 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 611: /* I_or_F_const: FCONST  */
#line 860 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = makeFloatConst((yyvsp[0].str),(yylsp[0])); }
#line 24978 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 612: /* row_or_rows: ROW  */
#line 864 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ival) = 0; }
#line 24984 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 613: /* row_or_rows: ROWS  */
#line 865 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.ival) = 0; }
#line 24990 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 614: /* first_or_next: FIRST_P  */
#line 868 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.ival) = 0; }
#line 24996 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 615: /* first_or_next: NEXT  */
#line 869 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.ival) = 0; }
#line 25002 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 616: /* group_clause: GROUP_P BY group_by_list_opt_comma  */
#line 894 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 25008 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 617: /* group_clause: GROUP_P BY ALL  */
#line 896 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNode *node = (PGNode *) makeGroupingSet(GROUPING_SET_ALL, NIL, (yylsp[0]));
					(yyval.list) = list_make1(node);
				}
#line 25017 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 618: /* group_clause: %empty  */
#line 900 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 25023 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 619: /* group_by_list: group_by_item  */
#line 904 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 25029 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 620: /* group_by_list: group_by_list ',' group_by_item  */
#line 905 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list),(yyvsp[0].node)); }
#line 25035 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 621: /* group_by_list_opt_comma: group_by_list  */
#line 909 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 25041 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 622: /* group_by_list_opt_comma: group_by_list ','  */
#line 910 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 25047 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 623: /* group_by_item: a_expr  */
#line 914 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 25053 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 624: /* group_by_item: empty_grouping_set  */
#line 915 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 25059 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 625: /* group_by_item: cube_clause  */
#line 916 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 25065 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 626: /* group_by_item: rollup_clause  */
#line 917 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 25071 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 627: /* group_by_item: grouping_sets_clause  */
#line 918 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 25077 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 628: /* empty_grouping_set: '(' ')'  */
#line 923 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_EMPTY, NIL, (yylsp[-1]));
				}
#line 25085 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 629: /* rollup_clause: ROLLUP '(' expr_list_opt_comma ')'  */
#line 936 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_ROLLUP, (yyvsp[-1].list), (yylsp[-3]));
				}
#line 25093 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 630: /* cube_clause: CUBE '(' expr_list_opt_comma ')'  */
#line 943 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_CUBE, (yyvsp[-1].list), (yylsp[-3]));
				}
#line 25101 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 631: /* grouping_sets_clause: GROUPING SETS '(' group_by_list_opt_comma ')'  */
#line 950 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_SETS, (yyvsp[-1].list), (yylsp[-4]));
				}
#line 25109 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 632: /* grouping_or_grouping_id: GROUPING  */
#line 956 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = NULL; }
#line 25115 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 633: /* grouping_or_grouping_id: GROUPING_ID  */
#line 957 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = NULL; }
#line 25121 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 634: /* having_clause: HAVING a_expr  */
#line 961 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 25127 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 635: /* having_clause: %empty  */
#line 962 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 25133 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 636: /* qualify_clause: QUALIFY a_expr  */
#line 966 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 25139 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 637: /* qualify_clause: %empty  */
#line 967 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 25145 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 638: /* for_locking_clause: for_locking_items  */
#line 971 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 25151 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 639: /* for_locking_clause: FOR READ_P ONLY  */
#line 972 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 25157 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 640: /* opt_for_locking_clause: for_locking_clause  */
#line 976 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 25163 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 641: /* opt_for_locking_clause: %empty  */
#line 977 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 25169 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 642: /* for_locking_items: for_locking_item  */
#line 981 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 25175 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 643: /* for_locking_items: for_locking_items for_locking_item  */
#line 982 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 25181 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 644: /* for_locking_item: for_locking_strength locked_rels_list opt_nowait_or_skip  */
#line 987 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGLockingClause *n = makeNode(PGLockingClause);
					n->lockedRels = (yyvsp[-1].list);
					n->strength = (yyvsp[-2].lockstrength);
					n->waitPolicy = (yyvsp[0].lockwaitpolicy);
					(yyval.node) = (PGNode *) n;
				}
#line 25193 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 645: /* for_locking_strength: FOR UPDATE  */
#line 997 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.lockstrength) = LCS_FORUPDATE; }
#line 25199 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 646: /* for_locking_strength: FOR NO KEY UPDATE  */
#line 998 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.lockstrength) = PG_LCS_FORNOKEYUPDATE; }
#line 25205 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 647: /* for_locking_strength: FOR SHARE  */
#line 999 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockstrength) = PG_LCS_FORSHARE; }
#line 25211 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 648: /* for_locking_strength: FOR KEY SHARE  */
#line 1000 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockstrength) = PG_LCS_FORKEYSHARE; }
#line 25217 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 649: /* locked_rels_list: OF qualified_name_list  */
#line 1004 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 25223 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 650: /* locked_rels_list: %empty  */
#line 1005 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 25229 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 651: /* opt_nowait_or_skip: NOWAIT  */
#line 1010 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockwaitpolicy) = LockWaitError; }
#line 25235 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 652: /* opt_nowait_or_skip: SKIP LOCKED  */
#line 1011 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.lockwaitpolicy) = PGLockWaitSkip; }
#line 25241 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 653: /* opt_nowait_or_skip: %empty  */
#line 1012 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockwaitpolicy) = PGLockWaitBlock; }
#line 25247 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 654: /* values_clause: VALUES '(' expr_list_opt_comma ')'  */
#line 1022 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->valuesLists = list_make1((yyvsp[-1].list));
					(yyval.node) = (PGNode *) n;
				}
#line 25257 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 655: /* values_clause: values_clause ',' '(' expr_list_opt_comma ')'  */
#line 1028 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = (PGSelectStmt *) (yyvsp[-4].node);
					n->valuesLists = lappend(n->valuesLists, (yyvsp[-1].list));
					(yyval.node) = (PGNode *) n;
				}
#line 25267 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 656: /* values_clause_opt_comma: values_clause  */
#line 1036 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 25273 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 657: /* values_clause_opt_comma: values_clause ','  */
#line 1037 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 25279 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 658: /* from_clause: FROM from_list_opt_comma  */
#line 1050 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 25285 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 659: /* from_clause: %empty  */
#line 1051 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 25291 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 660: /* from_list: table_ref  */
#line 1055 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 25297 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 661: /* from_list: from_list ',' table_ref  */
#line 1056 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 25303 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 662: /* from_list_opt_comma: from_list  */
#line 1060 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 25309 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 663: /* from_list_opt_comma: from_list ','  */
#line 1061 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 25315 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 664: /* alias_prefix_colon_clause: ColIdOrString SINGLE_COLON  */
#line 1066 "third_party/libpg_query/grammar/statements/select.y"
            {
                (yyval.alias) = makeNode(PGAlias);
                (yyval.alias)->aliasname = (yyvsp[-1].str);
            }
#line 25324 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 665: /* table_ref: relation_expr opt_alias_clause opt_at_clause opt_tablesample_clause  */
#line 1077 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyvsp[-3].range)->at_clause = (yyvsp[-1].node);
					(yyvsp[-3].range)->alias = (yyvsp[-2].alias);
					(yyvsp[-3].range)->sample = (yyvsp[0].node);
					(yyval.node) = (PGNode *) (yyvsp[-3].range);
				}
#line 25335 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 666: /* table_ref: alias_prefix_colon_clause relation_expr opt_at_clause opt_tablesample_clause  */
#line 1084 "third_party/libpg_query/grammar/statements/select.y"
                {
					(yyvsp[-2].range)->at_clause = (yyvsp[-1].node);
                    (yyvsp[-2].range)->alias = (yyvsp[-3].alias);
                    (yyvsp[-2].range)->sample = (yyvsp[0].node);
                    (yyval.node) = (PGNode *) (yyvsp[-2].range);
                }
#line 25346 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 667: /* table_ref: func_table func_alias_clause opt_tablesample_clause  */
#line 1091 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = (PGRangeFunction *) (yyvsp[-2].node);
					n->alias = (PGAlias*) linitial((yyvsp[-1].list));
					n->coldeflist = (PGList*) lsecond((yyvsp[-1].list));
					n->sample = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 25358 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 668: /* table_ref: alias_prefix_colon_clause func_table opt_tablesample_clause  */
#line 1099 "third_party/libpg_query/grammar/statements/select.y"
                    {
                        PGRangeFunction *n = (PGRangeFunction *) (yyvsp[-1].node);
                        n->alias = (yyvsp[-2].alias);
                        n->sample = (yyvsp[0].node);
                        (yyval.node) = (PGNode *) n;
                    }
#line 25369 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 669: /* table_ref: values_clause_opt_comma alias_clause opt_tablesample_clause  */
#line 1107 "third_party/libpg_query/grammar/statements/select.y"
                {
                    PGRangeSubselect *n = makeNode(PGRangeSubselect);
                    n->lateral = false;
                    n->subquery = (yyvsp[-2].node);
                    n->alias = (yyvsp[-1].alias);
                    n->sample = (yyvsp[0].node);
                    (yyval.node) = (PGNode *) n;
                }
#line 25382 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 670: /* table_ref: LATERAL_P func_table func_alias_clause  */
#line 1117 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = (PGRangeFunction *) (yyvsp[-1].node);
					n->lateral = true;
					n->alias = (PGAlias*) linitial((yyvsp[0].list));
					n->coldeflist = (PGList*) lsecond((yyvsp[0].list));
					(yyval.node) = (PGNode *) n;
				}
#line 25394 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 671: /* table_ref: select_with_parens opt_alias_clause opt_tablesample_clause  */
#line 1125 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeSubselect *n = makeNode(PGRangeSubselect);
					n->lateral = false;
					n->subquery = (yyvsp[-2].node);
					n->alias = (yyvsp[-1].alias);
					n->sample = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 25407 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 672: /* table_ref: alias_prefix_colon_clause select_with_parens opt_tablesample_clause  */
#line 1134 "third_party/libpg_query/grammar/statements/select.y"
                {
                    PGRangeSubselect *n = makeNode(PGRangeSubselect);
                    n->lateral = false;
                    n->subquery = (yyvsp[-1].node);
                    n->alias = (yyvsp[-2].alias);
                    n->sample = (yyvsp[0].node);
                    (yyval.node) = (PGNode *) n;
                }
#line 25420 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 673: /* table_ref: LATERAL_P select_with_parens opt_alias_clause  */
#line 1143 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeSubselect *n = makeNode(PGRangeSubselect);
					n->lateral = true;
					n->subquery = (yyvsp[-1].node);
					n->alias = (yyvsp[0].alias);
					n->sample = NULL;
					(yyval.node) = (PGNode *) n;
				}
#line 25433 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 674: /* table_ref: joined_table  */
#line 1152 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) (yyvsp[0].jexpr);
				}
#line 25441 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 675: /* table_ref: '(' joined_table ')' alias_clause  */
#line 1156 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyvsp[-2].jexpr)->alias = (yyvsp[0].alias);
					(yyval.node) = (PGNode *) (yyvsp[-2].jexpr);
				}
#line 25450 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 676: /* table_ref: alias_prefix_colon_clause '(' joined_table ')'  */
#line 1161 "third_party/libpg_query/grammar/statements/select.y"
                {
                    (yyvsp[-1].jexpr)->alias = (yyvsp[-3].alias);
                    (yyval.node) = (PGNode *) (yyvsp[-1].jexpr);
                }
#line 25459 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 677: /* table_ref: table_ref PIVOT '(' target_list_opt_comma FOR pivot_value_list opt_pivot_group_by ')' opt_alias_clause  */
#line 1166 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGPivotExpr *n = makeNode(PGPivotExpr);
					n->source = (yyvsp[-8].node);
					n->aggrs = (yyvsp[-5].list);
					n->pivots = (yyvsp[-3].list);
					n->groups = (yyvsp[-2].list);
					n->alias = (yyvsp[0].alias);
					n->location = (yylsp[-7]);
					(yyval.node) = (PGNode *) n;
				}
#line 25474 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 678: /* table_ref: table_ref UNPIVOT opt_include_nulls '(' unpivot_header FOR unpivot_value_list ')' opt_alias_clause  */
#line 1177 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGPivotExpr *n = makeNode(PGPivotExpr);
					n->source = (yyvsp[-8].node);
					n->include_nulls = (yyvsp[-6].boolean);
					n->unpivots = (yyvsp[-4].list);
					n->pivots = (yyvsp[-2].list);
					n->alias = (yyvsp[0].alias);
					n->location = (yylsp[-7]);
					(yyval.node) = (PGNode *) n;
				}
#line 25489 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 679: /* table_ref: PREDICT '(' qualified_name ',' table_ref ')' opt_alias_clause  */
#line 1188 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGPredictExpr *n = makeNode(PGPredictExpr);
					n->source = (yyvsp[-2].node);
					n->model_name = (yyvsp[-4].range);
					n->alias = (yyvsp[0].alias);
					(yyval.node) = (PGNode *) n;
				}
#line 25501 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 680: /* table_ref: PREDICT '(' qualified_name ',' PROMPT SCONST ',' table_ref ')' opt_alias_clause  */
#line 1196 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGPredictExpr *n = makeNode(PGPredictExpr);
					n->source = (yyvsp[-2].node);
					n->model_name = (yyvsp[-7].range);
					n->prompt = (yyvsp[-4].str);
					n->alias = (yyvsp[0].alias);
					(yyval.node) = (PGNode *) n;
				}
#line 25514 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 681: /* table_ref: PREDICT '(' qualified_name ',' table_ref ',' table_ref ')' opt_alias_clause  */
#line 1205 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGPredictExpr *n = makeNode(PGPredictExpr);
					n->source = (yyvsp[-4].node);
					n->model_name = (yyvsp[-6].range);
					n->opt_source = (yyvsp[-2].node);
					n->has_opt = 1;
					n->alias = (yyvsp[0].alias);
					(yyval.node) = (PGNode *) n;
				}
#line 25528 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 682: /* opt_pivot_group_by: GROUP_P BY name_list_opt_comma  */
#line 1217 "third_party/libpg_query/grammar/statements/select.y"
                                                { (yyval.list) = (yyvsp[0].list); }
#line 25534 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 683: /* opt_pivot_group_by: %empty  */
#line 1218 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = NULL; }
#line 25540 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 684: /* opt_include_nulls: INCLUDE_P NULLS_P  */
#line 1221 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.boolean) = true; }
#line 25546 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 685: /* opt_include_nulls: EXCLUDE NULLS_P  */
#line 1222 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.boolean) = false; }
#line 25552 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 686: /* opt_include_nulls: %empty  */
#line 1223 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.boolean) = false; }
#line 25558 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 687: /* single_pivot_value: b_expr IN_P '(' target_list_opt_comma ')'  */
#line 1227 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->pivot_columns = list_make1((yyvsp[-4].node));
			n->pivot_value = (yyvsp[-1].list);
			(yyval.node) = (PGNode *) n;
		}
#line 25569 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 688: /* single_pivot_value: b_expr IN_P ColIdOrString  */
#line 1235 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->pivot_columns = list_make1((yyvsp[-2].node));
			n->pivot_enum = (yyvsp[0].str);
			(yyval.node) = (PGNode *) n;
		}
#line 25580 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 689: /* pivot_header: d_expr  */
#line 1244 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 25586 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 690: /* pivot_header: indirection_expr  */
#line 1245 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 25592 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 691: /* pivot_header: '(' c_expr_list_opt_comma ')'  */
#line 1246 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 25598 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 692: /* pivot_value: pivot_header IN_P '(' target_list_opt_comma ')'  */
#line 1250 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->pivot_columns = (yyvsp[-4].list);
			n->pivot_value = (yyvsp[-1].list);
			(yyval.node) = (PGNode *) n;
		}
#line 25609 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 693: /* pivot_value: pivot_header IN_P ColIdOrString  */
#line 1258 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->pivot_columns = (yyvsp[-2].list);
			n->pivot_enum = (yyvsp[0].str);
			(yyval.node) = (PGNode *) n;
		}
#line 25620 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 694: /* pivot_value_list: pivot_value  */
#line 1267 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 25628 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 695: /* pivot_value_list: pivot_value_list pivot_value  */
#line 1271 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node));
				}
#line 25636 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 696: /* unpivot_header: ColIdOrString  */
#line 1277 "third_party/libpg_query/grammar/statements/select.y"
                                                          { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 25642 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 697: /* unpivot_header: '(' name_list_opt_comma ')'  */
#line 1278 "third_party/libpg_query/grammar/statements/select.y"
                                              { (yyval.list) = (yyvsp[-1].list); }
#line 25648 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 698: /* unpivot_value: unpivot_header IN_P '(' target_list_opt_comma ')'  */
#line 1283 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->unpivot_columns = (yyvsp[-4].list);
			n->pivot_value = (yyvsp[-1].list);
			(yyval.node) = (PGNode *) n;
		}
#line 25659 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 699: /* unpivot_value_list: unpivot_value  */
#line 1292 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 25667 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 700: /* unpivot_value_list: unpivot_value_list unpivot_value  */
#line 1296 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node));
				}
#line 25675 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 701: /* joined_table: '(' joined_table ')'  */
#line 1321 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.jexpr) = (yyvsp[-1].jexpr);
				}
#line 25683 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 702: /* joined_table: table_ref CROSS JOIN table_ref  */
#line 1325 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* CROSS JOIN is same as unqualified inner join */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->joinreftype = PG_JOIN_REGULAR;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL;
					n->quals = NULL;
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 25700 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 703: /* joined_table: table_ref join_type JOIN table_ref join_qual  */
#line 1338 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = (yyvsp[-3].jtype);
					n->joinreftype = PG_JOIN_REGULAR;
					n->larg = (yyvsp[-4].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-3]);
					(yyval.jexpr) = n;
				}
#line 25718 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 704: /* joined_table: table_ref JOIN table_ref join_qual  */
#line 1352 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* letting join_type reduce to empty doesn't work */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->joinreftype = PG_JOIN_REGULAR;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 25737 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 705: /* joined_table: table_ref NATURAL join_type JOIN table_ref  */
#line 1367 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = (yyvsp[-2].jtype);
					n->joinreftype = PG_JOIN_NATURAL;
					n->larg = (yyvsp[-4].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL; /* figure out which columns later... */
					n->quals = NULL; /* fill later */
					n->location = (yylsp[-3]);
					(yyval.jexpr) = n;
				}
#line 25753 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 706: /* joined_table: table_ref NATURAL JOIN table_ref  */
#line 1379 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* letting join_type reduce to empty doesn't work */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->joinreftype = PG_JOIN_NATURAL;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL; /* figure out which columns later... */
					n->quals = NULL; /* fill later */
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 25770 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 707: /* joined_table: table_ref ASOF join_type JOIN table_ref join_qual  */
#line 1392 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = (yyvsp[-3].jtype);
					n->joinreftype = PG_JOIN_ASOF;
					n->larg = (yyvsp[-5].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-4]);
					(yyval.jexpr) = n;
				}
#line 25788 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 708: /* joined_table: table_ref ASOF JOIN table_ref join_qual  */
#line 1406 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->joinreftype = PG_JOIN_ASOF;
					n->larg = (yyvsp[-4].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-3]);
					(yyval.jexpr) = n;
				}
#line 25806 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 709: /* joined_table: table_ref POSITIONAL JOIN table_ref  */
#line 1420 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* POSITIONAL JOIN is a coordinated scan */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_POSITION;
					n->joinreftype = PG_JOIN_REGULAR;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL;
					n->quals = NULL;
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 25823 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 710: /* joined_table: table_ref ANTI JOIN table_ref join_qual  */
#line 1433 "third_party/libpg_query/grammar/statements/select.y"
                {
                    /* ANTI JOIN is a filter */
                    PGJoinExpr *n = makeNode(PGJoinExpr);
                    n->jointype = PG_JOIN_ANTI;
                    n->joinreftype = PG_JOIN_REGULAR;
                    n->larg = (yyvsp[-4].node);
                    n->rarg = (yyvsp[-1].node);
                    if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
                        n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
                    else
                        n->quals = (yyvsp[0].node); /* ON clause */
                    n->location = (yylsp[-3]);
                    (yyval.jexpr) = n;
                }
#line 25842 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 711: /* joined_table: table_ref SEMI JOIN table_ref join_qual  */
#line 1448 "third_party/libpg_query/grammar/statements/select.y"
               {
                   /* SEMI JOIN is also a filter */
                   PGJoinExpr *n = makeNode(PGJoinExpr);
                   n->jointype = PG_JOIN_SEMI;
                   n->joinreftype = PG_JOIN_REGULAR;
                   n->larg = (yyvsp[-4].node);
                   n->rarg = (yyvsp[-1].node);
                   if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
                       n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
                   else
                       n->quals = (yyvsp[0].node); /* ON clause */
                   n->location = (yylsp[-3]);
                   n->location = (yylsp[-3]);
                   (yyval.jexpr) = n;
               }
#line 25862 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 712: /* alias_clause: AS ColIdOrString '(' name_list_opt_comma ')'  */
#line 1467 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[-3].str);
					(yyval.alias)->colnames = (yyvsp[-1].list);
				}
#line 25872 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 713: /* alias_clause: AS ColIdOrString  */
#line 1473 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[0].str);
				}
#line 25881 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 714: /* alias_clause: ColId '(' name_list_opt_comma ')'  */
#line 1478 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[-3].str);
					(yyval.alias)->colnames = (yyvsp[-1].list);
				}
#line 25891 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 715: /* alias_clause: ColId  */
#line 1484 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[0].str);
				}
#line 25900 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 716: /* opt_alias_clause: alias_clause  */
#line 1490 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.alias) = (yyvsp[0].alias); }
#line 25906 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 717: /* opt_alias_clause: %empty  */
#line 1491 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.alias) = NULL; }
#line 25912 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 718: /* func_alias_clause: alias_clause  */
#line 1500 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2((yyvsp[0].alias), NIL);
				}
#line 25920 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 719: /* func_alias_clause: AS '(' TableFuncElementList ')'  */
#line 1504 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(NULL, (yyvsp[-1].list));
				}
#line 25928 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 720: /* func_alias_clause: AS ColIdOrString '(' TableFuncElementList ')'  */
#line 1508 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAlias *a = makeNode(PGAlias);
					a->aliasname = (yyvsp[-3].str);
					(yyval.list) = list_make2(a, (yyvsp[-1].list));
				}
#line 25938 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 721: /* func_alias_clause: ColId '(' TableFuncElementList ')'  */
#line 1514 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAlias *a = makeNode(PGAlias);
					a->aliasname = (yyvsp[-3].str);
					(yyval.list) = list_make2(a, (yyvsp[-1].list));
				}
#line 25948 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 722: /* func_alias_clause: %empty  */
#line 1520 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(NULL, NIL);
				}
#line 25956 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 723: /* join_type: FULL join_outer  */
#line 1525 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.jtype) = PG_JOIN_FULL; }
#line 25962 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 724: /* join_type: LEFT join_outer  */
#line 1526 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_LEFT; }
#line 25968 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 725: /* join_type: RIGHT join_outer  */
#line 1527 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_RIGHT; }
#line 25974 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 726: /* join_type: SEMI  */
#line 1528 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_SEMI; }
#line 25980 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 727: /* join_type: ANTI  */
#line 1529 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_ANTI; }
#line 25986 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 728: /* join_type: INNER_P  */
#line 1530 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.jtype) = PG_JOIN_INNER; }
#line 25992 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 729: /* join_outer: OUTER_P  */
#line 1534 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = NULL; }
#line 25998 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 730: /* join_outer: %empty  */
#line 1535 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 26004 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 731: /* join_qual: USING '(' name_list_opt_comma ')'  */
#line 1547 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (PGNode *) (yyvsp[-1].list); }
#line 26010 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 732: /* join_qual: ON a_expr  */
#line 1548 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 26016 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 733: /* relation_expr: qualified_name  */
#line 1554 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* inheritance query, implicitly */
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->inh = true;
					(yyval.range)->alias = NULL;
				}
#line 26027 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 734: /* relation_expr: qualified_name '*'  */
#line 1561 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* inheritance query, explicitly */
					(yyval.range) = (yyvsp[-1].range);
					(yyval.range)->inh = true;
					(yyval.range)->alias = NULL;
				}
#line 26038 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 735: /* relation_expr: ONLY qualified_name  */
#line 1568 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* no inheritance */
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->inh = false;
					(yyval.range)->alias = NULL;
				}
#line 26049 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 736: /* relation_expr: ONLY '(' qualified_name ')'  */
#line 1575 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* no inheritance, SQL99-style syntax */
					(yyval.range) = (yyvsp[-1].range);
					(yyval.range)->inh = false;
					(yyval.range)->alias = NULL;
				}
#line 26060 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 737: /* func_table: func_expr_windowless opt_ordinality  */
#line 1607 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = makeNode(PGRangeFunction);
					n->lateral = false;
					n->ordinality = (yyvsp[0].boolean);
					n->is_rowsfrom = false;
					n->functions = list_make1(list_make2((yyvsp[-1].node), NIL));
					n->sample = NULL;
					/* alias and coldeflist are set by table_ref production */
					(yyval.node) = (PGNode *) n;
				}
#line 26075 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 738: /* func_table: ROWS FROM '(' rowsfrom_list ')' opt_ordinality  */
#line 1618 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = makeNode(PGRangeFunction);
					n->lateral = false;
					n->ordinality = (yyvsp[0].boolean);
					n->is_rowsfrom = true;
					n->functions = (yyvsp[-2].list);
					n->sample = NULL;
					/* alias and coldeflist are set by table_ref production */
					(yyval.node) = (PGNode *) n;
				}
#line 26090 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 739: /* rowsfrom_item: func_expr_windowless opt_col_def_list  */
#line 1631 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].list)); }
#line 26096 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 740: /* rowsfrom_list: rowsfrom_item  */
#line 1635 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 26102 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 741: /* rowsfrom_list: rowsfrom_list ',' rowsfrom_item  */
#line 1636 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 26108 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 742: /* opt_col_def_list: AS '(' TableFuncElementList ')'  */
#line 1639 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 26114 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 743: /* opt_col_def_list: %empty  */
#line 1640 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 26120 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 744: /* opt_ordinality: WITH_LA ORDINALITY  */
#line 1643 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.boolean) = true; }
#line 26126 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 745: /* opt_ordinality: %empty  */
#line 1644 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 26132 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 746: /* where_clause: WHERE a_expr  */
#line 1649 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 26138 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 747: /* where_clause: %empty  */
#line 1650 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 26144 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 748: /* TableFuncElementList: TableFuncElement  */
#line 1656 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 26152 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 749: /* TableFuncElementList: TableFuncElementList ',' TableFuncElement  */
#line 1660 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 26160 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 750: /* TableFuncElement: ColIdOrString Typename opt_collate_clause  */
#line 1666 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->colname = (yyvsp[-2].str);
					n->typeName = (yyvsp[-1].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collClause = (PGCollateClause *) (yyvsp[0].node);
					n->collOid = InvalidOid;
					n->constraints = NIL;
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 26182 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 751: /* opt_collate_clause: COLLATE any_name  */
#line 1687 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = NULL;
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 26194 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 752: /* opt_collate_clause: %empty  */
#line 1694 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = NULL; }
#line 26200 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 753: /* colid_type_list: ColId Typename  */
#line 1708 "third_party/libpg_query/grammar/statements/select.y"
                             {
             (yyval.list) = list_make1(list_make2(makeString((yyvsp[-1].str)), (yyvsp[0].typnam)));
            }
#line 26208 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 754: /* colid_type_list: colid_type_list ',' ColId Typename  */
#line 1711 "third_party/libpg_query/grammar/statements/select.y"
                                                 {
             (yyval.list) = lappend((yyvsp[-3].list), list_make2(makeString((yyvsp[-1].str)), (yyvsp[0].typnam)));
            }
#line 26216 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 757: /* opt_Typename: Typename  */
#line 1718 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 26222 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 758: /* opt_Typename: %empty  */
#line 1719 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.typnam) = NULL; }
#line 26228 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 759: /* Typename: SimpleTypename opt_array_bounds  */
#line 1722 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = (yyvsp[0].list);
				}
#line 26237 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 760: /* Typename: SETOF SimpleTypename opt_array_bounds  */
#line 1727 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = (yyvsp[0].list);
					(yyval.typnam)->setof = true;
				}
#line 26247 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 761: /* Typename: SimpleTypename ARRAY '[' Iconst ']'  */
#line 1734 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-4].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger((yyvsp[-1].ival)));
				}
#line 26256 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 762: /* Typename: SETOF SimpleTypename ARRAY '[' Iconst ']'  */
#line 1739 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-4].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger((yyvsp[-1].ival)));
					(yyval.typnam)->setof = true;
				}
#line 26266 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 763: /* Typename: SimpleTypename ARRAY  */
#line 1745 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger(-1));
				}
#line 26275 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 764: /* Typename: SETOF SimpleTypename ARRAY  */
#line 1750 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger(-1));
					(yyval.typnam)->setof = true;
				}
#line 26285 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 765: /* Typename: qualified_typename  */
#line 1756 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = makeTypeNameFromNameList((yyvsp[0].list));
				}
#line 26293 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 766: /* Typename: RowOrStruct '(' colid_type_list ')' opt_array_bounds  */
#line 1760 "third_party/libpg_query/grammar/statements/select.y"
                                {
				   (yyval.typnam) = SystemTypeName("struct");
				   (yyval.typnam)->arrayBounds = (yyvsp[0].list);
				   (yyval.typnam)->typmods = (yyvsp[-2].list);
				   (yyval.typnam)->location = (yylsp[-4]);
               }
#line 26304 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 767: /* Typename: MAP '(' type_list ')' opt_array_bounds  */
#line 1767 "third_party/libpg_query/grammar/statements/select.y"
                {
				   (yyval.typnam) = SystemTypeName("map");
				   (yyval.typnam)->arrayBounds = (yyvsp[0].list);
				   (yyval.typnam)->typmods = (yyvsp[-2].list);
				   (yyval.typnam)->location = (yylsp[-4]);
				}
#line 26315 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 768: /* Typename: UNION '(' colid_type_list ')' opt_array_bounds  */
#line 1774 "third_party/libpg_query/grammar/statements/select.y"
                                {
				   (yyval.typnam) = SystemTypeName("union");
				   (yyval.typnam)->arrayBounds = (yyvsp[0].list);
				   (yyval.typnam)->typmods = (yyvsp[-2].list);
				   (yyval.typnam)->location = (yylsp[-4]);
				}
#line 26326 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 769: /* qualified_typename: IDENT '.' IDENT  */
#line 1783 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = list_make2(makeString((yyvsp[-2].str)), makeString((yyvsp[0].str))); }
#line 26332 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 770: /* qualified_typename: qualified_typename '.' IDENT  */
#line 1784 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str))); }
#line 26338 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 771: /* opt_array_bounds: opt_array_bounds '[' ']'  */
#line 1789 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = lappend((yyvsp[-2].list), makeInteger(-1)); }
#line 26344 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 772: /* opt_array_bounds: opt_array_bounds '[' Iconst ']'  */
#line 1791 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = lappend((yyvsp[-3].list), makeInteger((yyvsp[-1].ival))); }
#line 26350 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 773: /* opt_array_bounds: %empty  */
#line 1793 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = NIL; }
#line 26356 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 774: /* SimpleTypename: GenericType  */
#line 1797 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 26362 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 775: /* SimpleTypename: Numeric  */
#line 1798 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 26368 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 776: /* SimpleTypename: Bit  */
#line 1799 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 26374 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 777: /* SimpleTypename: Character  */
#line 1800 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 26380 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 778: /* SimpleTypename: ConstDatetime  */
#line 1801 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 26386 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 779: /* SimpleTypename: ConstInterval opt_interval  */
#line 1803 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->typmods = (yyvsp[0].list);
				}
#line 26395 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 780: /* SimpleTypename: ConstInterval '(' Iconst ')'  */
#line 1808 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-3].typnam);
					(yyval.typnam)->typmods = list_make2(makeIntConst(INTERVAL_FULL_RANGE, -1),
											 makeIntConst((yyvsp[-1].ival), (yylsp[-1])));
				}
#line 26405 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 781: /* ConstTypename: Numeric  */
#line 1827 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 26411 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 782: /* ConstTypename: ConstBit  */
#line 1828 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 26417 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 783: /* ConstTypename: ConstCharacter  */
#line 1829 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 26423 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 784: /* ConstTypename: ConstDatetime  */
#line 1830 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 26429 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 785: /* GenericType: type_name_token opt_type_modifiers  */
#line 1842 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = makeTypeName((yyvsp[-1].str));
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 26439 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 786: /* opt_type_modifiers: '(' opt_expr_list_opt_comma ')'  */
#line 1855 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 26445 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 787: /* opt_type_modifiers: %empty  */
#line 1856 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 26451 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 788: /* Numeric: INT_P  */
#line 1863 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 26460 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 789: /* Numeric: INTEGER  */
#line 1868 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 26469 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 790: /* Numeric: SMALLINT  */
#line 1873 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int2");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 26478 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 791: /* Numeric: BIGINT  */
#line 1878 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int8");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 26487 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 792: /* Numeric: REAL  */
#line 1883 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 26496 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 793: /* Numeric: FLOAT_P opt_float  */
#line 1888 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 26505 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 794: /* Numeric: DOUBLE_P PRECISION  */
#line 1893 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float8");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 26514 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 795: /* Numeric: DECIMAL_P opt_type_modifiers  */
#line 1898 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 26524 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 796: /* Numeric: DEC opt_type_modifiers  */
#line 1904 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 26534 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 797: /* Numeric: NUMERIC opt_type_modifiers  */
#line 1910 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 26544 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 798: /* Numeric: BOOLEAN_P  */
#line 1916 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("bool");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 26553 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 799: /* opt_float: '(' Iconst ')'  */
#line 1923 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Check FLOAT() precision limits assuming IEEE floating
					 * types - thomas 1997-09-18
					 */
					if ((yyvsp[-1].ival) < 1)
						ereport(ERROR,
								(errcode(PG_ERRCODE_INVALID_PARAMETER_VALUE),
								 errmsg("precision for type float must be at least 1 bit"),
								 parser_errposition((yylsp[-1]))));
					else if ((yyvsp[-1].ival) <= 24)
						(yyval.typnam) = SystemTypeName("float4");
					else if ((yyvsp[-1].ival) <= 53)
						(yyval.typnam) = SystemTypeName("float8");
					else
						ereport(ERROR,
								(errcode(PG_ERRCODE_INVALID_PARAMETER_VALUE),
								 errmsg("precision for type float must be less than 54 bits"),
								 parser_errposition((yylsp[-1]))));
				}
#line 26578 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 800: /* opt_float: %empty  */
#line 1944 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float4");
				}
#line 26586 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 801: /* Bit: BitWithLength  */
#line 1954 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 26594 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 802: /* Bit: BitWithoutLength  */
#line 1958 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 26602 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 803: /* ConstBit: BitWithLength  */
#line 1966 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 26610 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 804: /* ConstBit: BitWithoutLength  */
#line 1970 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->typmods = NIL;
				}
#line 26619 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 805: /* BitWithLength: BIT opt_varying '(' expr_list_opt_comma ')'  */
#line 1978 "third_party/libpg_query/grammar/statements/select.y"
                                {
					const char *typname;

					typname = (yyvsp[-3].boolean) ? "varbit" : "bit";
					(yyval.typnam) = SystemTypeName(typname);
					(yyval.typnam)->typmods = (yyvsp[-1].list);
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 26632 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 806: /* BitWithoutLength: BIT opt_varying  */
#line 1990 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* bit defaults to bit(1), varbit to no limit */
					if ((yyvsp[0].boolean))
					{
						(yyval.typnam) = SystemTypeName("varbit");
					}
					else
					{
						(yyval.typnam) = SystemTypeName("bit");
						(yyval.typnam)->typmods = list_make1(makeIntConst(1, -1));
					}
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 26650 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 807: /* Character: CharacterWithLength  */
#line 2011 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 26658 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 808: /* Character: CharacterWithoutLength  */
#line 2015 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 26666 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 809: /* ConstCharacter: CharacterWithLength  */
#line 2021 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 26674 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 810: /* ConstCharacter: CharacterWithoutLength  */
#line 2025 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* Length was not specified so allow to be unrestricted.
					 * This handles problems with fixed-length (bpchar) strings
					 * which in column definitions must default to a length
					 * of one, but should not be constrained if the length
					 * was not specified.
					 */
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->typmods = NIL;
				}
#line 26689 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 811: /* CharacterWithLength: character '(' Iconst ')'  */
#line 2038 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName((yyvsp[-3].conststr));
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-1].ival), (yylsp[-1])));
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 26699 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 812: /* CharacterWithoutLength: character  */
#line 2046 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName((yyvsp[0].conststr));
					/* char defaults to char(1), varchar to no limit */
					if (strcmp((yyvsp[0].conststr), "bpchar") == 0)
						(yyval.typnam)->typmods = list_make1(makeIntConst(1, -1));
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 26711 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 813: /* character: CHARACTER opt_varying  */
#line 2056 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 26717 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 814: /* character: CHAR_P opt_varying  */
#line 2058 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 26723 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 815: /* character: VARCHAR  */
#line 2060 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = "varchar"; }
#line 26729 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 816: /* character: NATIONAL CHARACTER opt_varying  */
#line 2062 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 26735 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 817: /* character: NATIONAL CHAR_P opt_varying  */
#line 2064 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 26741 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 818: /* character: NCHAR opt_varying  */
#line 2066 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 26747 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 819: /* opt_varying: VARYING  */
#line 2070 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = true; }
#line 26753 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 820: /* opt_varying: %empty  */
#line 2071 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 26759 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 821: /* ConstDatetime: TIMESTAMP '(' Iconst ')' opt_timezone  */
#line 2079 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timestamptz");
					else
						(yyval.typnam) = SystemTypeName("timestamp");
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 26772 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 822: /* ConstDatetime: TIMESTAMP opt_timezone  */
#line 2088 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timestamptz");
					else
						(yyval.typnam) = SystemTypeName("timestamp");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 26784 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 823: /* ConstDatetime: TIME '(' Iconst ')' opt_timezone  */
#line 2096 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timetz");
					else
						(yyval.typnam) = SystemTypeName("time");
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 26797 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 824: /* ConstDatetime: TIME opt_timezone  */
#line 2105 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timetz");
					else
						(yyval.typnam) = SystemTypeName("time");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 26809 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 825: /* ConstInterval: INTERVAL  */
#line 2116 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("interval");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 26818 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 826: /* opt_timezone: WITH_LA TIME ZONE  */
#line 2123 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = true; }
#line 26824 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 827: /* opt_timezone: WITHOUT TIME ZONE  */
#line 2124 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = false; }
#line 26830 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 828: /* opt_timezone: %empty  */
#line 2125 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 26836 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 855: /* opt_interval: year_keyword  */
#line 2169 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(YEAR), (yylsp[0]))); }
#line 26842 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 856: /* opt_interval: month_keyword  */
#line 2171 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MONTH), (yylsp[0]))); }
#line 26848 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 857: /* opt_interval: day_keyword  */
#line 2173 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY), (yylsp[0]))); }
#line 26854 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 858: /* opt_interval: hour_keyword  */
#line 2175 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR), (yylsp[0]))); }
#line 26860 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 859: /* opt_interval: minute_keyword  */
#line 2177 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MINUTE), (yylsp[0]))); }
#line 26866 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 860: /* opt_interval: second_keyword  */
#line 2179 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(SECOND), (yylsp[0]))); }
#line 26872 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 861: /* opt_interval: millisecond_keyword  */
#line 2181 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MILLISECOND), (yylsp[0]))); }
#line 26878 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 862: /* opt_interval: microsecond_keyword  */
#line 2183 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MICROSECOND), (yylsp[0]))); }
#line 26884 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 863: /* opt_interval: week_keyword  */
#line 2185 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(WEEK), (yylsp[0]))); }
#line 26890 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 864: /* opt_interval: quarter_keyword  */
#line 2187 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(QUARTER), (yylsp[0]))); }
#line 26896 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 865: /* opt_interval: decade_keyword  */
#line 2189 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DECADE), (yylsp[0]))); }
#line 26902 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 866: /* opt_interval: century_keyword  */
#line 2191 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(CENTURY), (yylsp[0]))); }
#line 26908 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 867: /* opt_interval: millennium_keyword  */
#line 2193 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MILLENNIUM), (yylsp[0]))); }
#line 26914 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 868: /* opt_interval: year_keyword TO month_keyword  */
#line 2195 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(YEAR) |
												 INTERVAL_MASK(MONTH), (yylsp[-2])));
				}
#line 26923 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 869: /* opt_interval: day_keyword TO hour_keyword  */
#line 2200 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR), (yylsp[-2])));
				}
#line 26932 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 870: /* opt_interval: day_keyword TO minute_keyword  */
#line 2205 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE), (yylsp[-2])));
				}
#line 26942 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 871: /* opt_interval: day_keyword TO second_keyword  */
#line 2211 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 26953 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 872: /* opt_interval: hour_keyword TO minute_keyword  */
#line 2218 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE), (yylsp[-2])));
				}
#line 26962 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 873: /* opt_interval: hour_keyword TO second_keyword  */
#line 2223 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 26972 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 874: /* opt_interval: minute_keyword TO second_keyword  */
#line 2229 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 26981 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 875: /* opt_interval: %empty  */
#line 2234 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = NIL; }
#line 26987 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 876: /* a_expr: c_expr  */
#line 2265 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 26993 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 877: /* a_expr: a_expr TYPECAST Typename  */
#line 2268 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.node) = makeTypeCast((yyvsp[-2].node), (yyvsp[0].typnam), 0, (yylsp[-1])); }
#line 26999 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 878: /* a_expr: a_expr COLLATE any_name  */
#line 2270 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = (yyvsp[-2].node);
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 27011 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 879: /* a_expr: a_expr AT TIME ZONE a_expr  */
#line 2278 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("timezone"),
											   list_make2((yyvsp[0].node), (yyvsp[-4].node)),
											   (yylsp[-3]));
				}
#line 27021 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 880: /* a_expr: '+' a_expr  */
#line 2293 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 27027 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 881: /* a_expr: '-' a_expr  */
#line 2295 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 27033 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 882: /* a_expr: a_expr '+' a_expr  */
#line 2297 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27039 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 883: /* a_expr: a_expr '-' a_expr  */
#line 2299 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27045 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 884: /* a_expr: a_expr '*' a_expr  */
#line 2301 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "*", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27051 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 885: /* a_expr: a_expr '/' a_expr  */
#line 2303 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "/", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27057 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 886: /* a_expr: a_expr INTEGER_DIVISION a_expr  */
#line 2305 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "//", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27063 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 887: /* a_expr: a_expr '%' a_expr  */
#line 2307 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "%", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27069 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 888: /* a_expr: a_expr '^' a_expr  */
#line 2309 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "^", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27075 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 889: /* a_expr: a_expr POWER_OF a_expr  */
#line 2311 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "**", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27081 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 890: /* a_expr: a_expr '<' a_expr  */
#line 2313 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27087 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 891: /* a_expr: a_expr '>' a_expr  */
#line 2315 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27093 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 892: /* a_expr: a_expr '=' a_expr  */
#line 2317 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27099 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 893: /* a_expr: a_expr LESS_EQUALS a_expr  */
#line 2319 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27105 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 894: /* a_expr: a_expr GREATER_EQUALS a_expr  */
#line 2321 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27111 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 895: /* a_expr: a_expr NOT_EQUALS a_expr  */
#line 2323 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27117 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 896: /* a_expr: a_expr qual_Op a_expr  */
#line 2326 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27123 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 897: /* a_expr: qual_Op a_expr  */
#line 2328 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 27129 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 898: /* a_expr: a_expr qual_Op  */
#line 2330 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[0].list), (yyvsp[-1].node), NULL, (yylsp[0])); }
#line 27135 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 899: /* a_expr: a_expr AND a_expr  */
#line 2333 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeAndExpr((yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27141 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 900: /* a_expr: a_expr OR a_expr  */
#line 2335 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeOrExpr((yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27147 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 901: /* a_expr: NOT a_expr  */
#line 2337 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeNotExpr((yyvsp[0].node), (yylsp[-1])); }
#line 27153 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 902: /* a_expr: NOT_LA a_expr  */
#line 2339 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeNotExpr((yyvsp[0].node), (yylsp[-1])); }
#line 27159 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 903: /* a_expr: a_expr GLOB a_expr  */
#line 2341 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_GLOB, "~~~",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 27168 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 904: /* a_expr: a_expr LIKE a_expr  */
#line 2346 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "~~",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 27177 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 905: /* a_expr: a_expr LIKE a_expr ESCAPE a_expr  */
#line 2351 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("like_escape"),
											   list_make3((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) n;
				}
#line 27188 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 906: /* a_expr: a_expr NOT_LA LIKE a_expr  */
#line 2358 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "!~~",
												   (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
				}
#line 27197 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 907: /* a_expr: a_expr NOT_LA LIKE a_expr ESCAPE a_expr  */
#line 2363 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("not_like_escape"),
											   list_make3((yyvsp[-5].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) n;
				}
#line 27208 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 908: /* a_expr: a_expr ILIKE a_expr  */
#line 2370 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "~~*",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 27217 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 909: /* a_expr: a_expr ILIKE a_expr ESCAPE a_expr  */
#line 2375 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("ilike_escape"),
											   list_make3((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) n;
				}
#line 27228 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 910: /* a_expr: a_expr NOT_LA ILIKE a_expr  */
#line 2382 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "!~~*",
												   (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
				}
#line 27237 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 911: /* a_expr: a_expr NOT_LA ILIKE a_expr ESCAPE a_expr  */
#line 2387 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("not_ilike_escape"),
											   list_make3((yyvsp[-5].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) n;
				}
#line 27248 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 912: /* a_expr: a_expr SIMILAR TO a_expr  */
#line 2395 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[0].node), makeNullAConst(-1)),
											   (yylsp[-2]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
												   (yyvsp[-3].node), (PGNode *) n, (yylsp[-2]));
				}
#line 27260 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 913: /* a_expr: a_expr SIMILAR TO a_expr ESCAPE a_expr  */
#line 2403 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
												   (yyvsp[-5].node), (PGNode *) n, (yylsp[-4]));
				}
#line 27272 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 914: /* a_expr: a_expr NOT_LA SIMILAR TO a_expr  */
#line 2411 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[0].node), makeNullAConst(-1)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
												   (yyvsp[-4].node), (PGNode *) n, (yylsp[-3]));
				}
#line 27284 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 915: /* a_expr: a_expr NOT_LA SIMILAR TO a_expr ESCAPE a_expr  */
#line 2419 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-5]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
												   (yyvsp[-6].node), (PGNode *) n, (yylsp[-5]));
				}
#line 27296 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 916: /* a_expr: a_expr IS NULL_P  */
#line 2437 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-2].node);
					n->nulltesttype = PG_IS_NULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 27308 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 917: /* a_expr: a_expr ISNULL  */
#line 2445 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-1].node);
					n->nulltesttype = PG_IS_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 27320 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 918: /* a_expr: a_expr IS NOT NULL_P  */
#line 2453 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-3].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 27332 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 919: /* a_expr: a_expr NOT NULL_P  */
#line 2461 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-2].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 27344 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 920: /* a_expr: a_expr NOTNULL  */
#line 2469 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-1].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 27356 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 921: /* a_expr: LAMBDA name_list SINGLE_COLON a_expr  */
#line 2477 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGLambdaFunction *n = makeNode(PGLambdaFunction);
				n->lhs = (yyvsp[-2].list);
				n->rhs = (yyvsp[0].node);
				n->location = (yylsp[-2]);
				(yyval.node) = (PGNode *) n;
			}
#line 27368 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 922: /* a_expr: a_expr SINGLE_ARROW a_expr  */
#line 2485 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGSingleArrowFunction *n = makeNode(PGSingleArrowFunction);
				n->lhs = (yyvsp[-2].node);
				n->rhs = (yyvsp[0].node);
				n->location = (yylsp[-1]);
				(yyval.node) = (PGNode *) n;
			}
#line 27380 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 923: /* a_expr: a_expr DOUBLE_ARROW a_expr  */
#line 2493 "third_party/libpg_query/grammar/statements/select.y"
                        {
							(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "->>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
			}
#line 27388 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 924: /* a_expr: row OVERLAPS row  */
#line 2497 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if (list_length((yyvsp[-2].list)) != 2)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("wrong number of parameters on left side of OVERLAPS expression"),
								 parser_errposition((yylsp[-2]))));
					if (list_length((yyvsp[0].list)) != 2)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("wrong number of parameters on right side of OVERLAPS expression"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("overlaps"),
											   list_concat((yyvsp[-2].list), (yyvsp[0].list)),
											   (yylsp[-1]));
				}
#line 27408 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 925: /* a_expr: a_expr IS TRUE_P  */
#line 2513 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = PG_IS_TRUE;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 27420 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 926: /* a_expr: a_expr IS NOT TRUE_P  */
#line 2521 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_TRUE;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 27432 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 927: /* a_expr: a_expr IS FALSE_P  */
#line 2529 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = IS_FALSE;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 27444 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 928: /* a_expr: a_expr IS NOT FALSE_P  */
#line 2537 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_FALSE;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 27456 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 929: /* a_expr: a_expr IS UNKNOWN  */
#line 2545 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = IS_UNKNOWN;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 27468 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 930: /* a_expr: a_expr IS NOT UNKNOWN  */
#line 2553 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_UNKNOWN;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 27480 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 931: /* a_expr: a_expr IS DISTINCT FROM a_expr  */
#line 2561 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_DISTINCT, "=", (yyvsp[-4].node), (yyvsp[0].node), (yylsp[-3]));
				}
#line 27488 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 932: /* a_expr: a_expr IS NOT DISTINCT FROM a_expr  */
#line 2565 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_DISTINCT, "=", (yyvsp[-5].node), (yyvsp[0].node), (yylsp[-4]));
				}
#line 27496 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 933: /* a_expr: a_expr IS OF '(' type_list ')'  */
#line 2569 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "=", (yyvsp[-5].node), (PGNode *) (yyvsp[-1].list), (yylsp[-4]));
				}
#line 27504 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 934: /* a_expr: a_expr IS NOT OF '(' type_list ')'  */
#line 2573 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "<>", (yyvsp[-6].node), (PGNode *) (yyvsp[-1].list), (yylsp[-5]));
				}
#line 27512 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 935: /* a_expr: a_expr BETWEEN opt_asymmetric b_expr AND a_expr  */
#line 2577 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN,
												   "BETWEEN",
												   (yyvsp[-5].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-4]));
				}
#line 27524 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 936: /* a_expr: a_expr NOT_LA BETWEEN opt_asymmetric b_expr AND a_expr  */
#line 2585 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN,
												   "NOT BETWEEN",
												   (yyvsp[-6].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-5]));
				}
#line 27536 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 937: /* a_expr: a_expr BETWEEN SYMMETRIC b_expr AND a_expr  */
#line 2593 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN_SYM,
												   "BETWEEN SYMMETRIC",
												   (yyvsp[-5].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-4]));
				}
#line 27548 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 938: /* a_expr: a_expr NOT_LA BETWEEN SYMMETRIC b_expr AND a_expr  */
#line 2601 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN_SYM,
												   "NOT BETWEEN SYMMETRIC",
												   (yyvsp[-6].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-5]));
				}
#line 27560 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 939: /* a_expr: a_expr IN_P in_expr  */
#line 2609 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* in_expr returns a PGSubLink or a list of a_exprs */
					if (IsA((yyvsp[0].node), PGSubLink))
					{
						/* generate foo = ANY (subquery) */
						PGSubLink *n = (PGSubLink *) (yyvsp[0].node);
						n->subLinkType = PG_ANY_SUBLINK;
						n->subLinkId = 0;
						n->testexpr = (yyvsp[-2].node);
						n->operName = NIL;		/* show it's IN not = ANY */
						n->location = (yylsp[-1]);
						(yyval.node) = (PGNode *)n;
					}
					else
					{
						/* generate scalar IN expression */
						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
					}
				}
#line 27584 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 940: /* a_expr: a_expr NOT_LA IN_P in_expr  */
#line 2629 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* in_expr returns a PGSubLink or a list of a_exprs */
					if (IsA((yyvsp[0].node), PGSubLink))
					{
						/* generate NOT (foo = ANY (subquery)) */
						/* Make an = ANY node */
						PGSubLink *n = (PGSubLink *) (yyvsp[0].node);
						n->subLinkType = PG_ANY_SUBLINK;
						n->subLinkId = 0;
						n->testexpr = (yyvsp[-3].node);
						n->operName = NIL;		/* show it's IN not = ANY */
						n->location = (yylsp[-2]);
						/* Stick a NOT on top; must have same parse location */
						(yyval.node) = makeNotExpr((PGNode *) n, (yylsp[-2]));
					}
					else
					{
						/* generate scalar NOT IN expression */
						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "<>", (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
					}
				}
#line 27610 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 941: /* a_expr: a_expr subquery_Op sub_type select_with_parens  */
#line 2651 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = (yyvsp[-1].subquerytype);
					n->subLinkId = 0;
					n->testexpr = (yyvsp[-3].node);
					n->operName = (yyvsp[-2].list);
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 27625 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 942: /* a_expr: a_expr subquery_Op sub_type '(' a_expr ')'  */
#line 2662 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[-3].subquerytype) == PG_ANY_SUBLINK)
						(yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP_ANY, (yyvsp[-4].list), (yyvsp[-5].node), (yyvsp[-1].node), (yylsp[-4]));
					else
						(yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP_ALL, (yyvsp[-4].list), (yyvsp[-5].node), (yyvsp[-1].node), (yylsp[-4]));
				}
#line 27636 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 943: /* a_expr: DEFAULT  */
#line 2669 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * The SQL spec only allows DEFAULT in "contextually typed
					 * expressions", but for us, it's easier to allow it in
					 * any a_expr and then throw error during parse analysis
					 * if it's in an inappropriate context.  This way also
					 * lets us say something smarter than "syntax error".
					 */
					PGSetToDefault *n = makeNode(PGSetToDefault);
					/* parse analysis will fill in the rest */
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 27654 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 944: /* a_expr: COLUMNS '(' a_expr ')'  */
#line 2683 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAStar *star = makeNode(PGAStar);
					star->expr = (yyvsp[-1].node);
					star->columns = true;
					star->location = (yylsp[-3]);
					(yyval.node) = (PGNode *) star;
				}
#line 27666 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 945: /* a_expr: UNPACK '(' a_expr ')'  */
#line 2691 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("unpack"), list_make1((yyvsp[-1].node)), (yylsp[-3]));
					(yyval.node) = (PGNode *) n;
				}
#line 27675 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 946: /* a_expr: '*' COLUMNS '(' a_expr ')'  */
#line 2696 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAStar *star = makeNode(PGAStar);
					star->expr = (yyvsp[-1].node);
					star->columns = true;
					star->location = (yylsp[-4]);

					PGFuncCall *n = makeFuncCall(SystemFuncName("unpack"), list_make1((PGNode *)star), (yylsp[-4]));
					(yyval.node) = (PGNode *) n;
				}
#line 27689 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 947: /* a_expr: '*' opt_except_list opt_replace_list opt_rename_list  */
#line 2706 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAStar *star = makeNode(PGAStar);
					star->except_list = (yyvsp[-2].list);
					star->replace_list = (yyvsp[-1].list);
					star->rename_list = (yyvsp[0].list);
					star->location = (yylsp[-3]);
					(yyval.node) = (PGNode *) star;
				}
#line 27702 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 948: /* a_expr: ColId '.' '*' opt_except_list opt_replace_list opt_rename_list  */
#line 2715 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAStar *star = makeNode(PGAStar);
					star->relation = (yyvsp[-5].str);
					star->except_list = (yyvsp[-2].list);
					star->replace_list = (yyvsp[-1].list);
					star->rename_list = (yyvsp[0].list);
					star->location = (yylsp[-5]);
					(yyval.node) = (PGNode *) star;
				}
#line 27716 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 949: /* b_expr: c_expr  */
#line 2736 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 27722 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 950: /* b_expr: b_expr TYPECAST Typename  */
#line 2738 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeTypeCast((yyvsp[-2].node), (yyvsp[0].typnam), 0, (yylsp[-1])); }
#line 27728 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 951: /* b_expr: '+' b_expr  */
#line 2740 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 27734 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 952: /* b_expr: '-' b_expr  */
#line 2742 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 27740 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 953: /* b_expr: b_expr '+' b_expr  */
#line 2744 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27746 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 954: /* b_expr: b_expr '-' b_expr  */
#line 2746 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27752 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 955: /* b_expr: b_expr '*' b_expr  */
#line 2748 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "*", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27758 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 956: /* b_expr: b_expr '/' b_expr  */
#line 2750 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "/", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27764 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 957: /* b_expr: b_expr INTEGER_DIVISION b_expr  */
#line 2752 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "//", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27770 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 958: /* b_expr: b_expr '%' b_expr  */
#line 2754 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "%", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27776 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 959: /* b_expr: b_expr '^' b_expr  */
#line 2756 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "^", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27782 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 960: /* b_expr: b_expr POWER_OF b_expr  */
#line 2758 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "**", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27788 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 961: /* b_expr: b_expr '<' b_expr  */
#line 2760 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27794 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 962: /* b_expr: b_expr '>' b_expr  */
#line 2762 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27800 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 963: /* b_expr: b_expr '=' b_expr  */
#line 2764 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27806 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 964: /* b_expr: b_expr LESS_EQUALS b_expr  */
#line 2766 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27812 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 965: /* b_expr: b_expr GREATER_EQUALS b_expr  */
#line 2768 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27818 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 966: /* b_expr: b_expr NOT_EQUALS b_expr  */
#line 2770 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27824 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 967: /* b_expr: b_expr qual_Op b_expr  */
#line 2772 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27830 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 968: /* b_expr: qual_Op b_expr  */
#line 2774 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 27836 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 969: /* b_expr: b_expr qual_Op  */
#line 2776 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[0].list), (yyvsp[-1].node), NULL, (yylsp[0])); }
#line 27842 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 970: /* b_expr: b_expr IS DISTINCT FROM b_expr  */
#line 2778 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_DISTINCT, "=", (yyvsp[-4].node), (yyvsp[0].node), (yylsp[-3]));
				}
#line 27850 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 971: /* b_expr: b_expr IS NOT DISTINCT FROM b_expr  */
#line 2782 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_DISTINCT, "=", (yyvsp[-5].node), (yyvsp[0].node), (yylsp[-4]));
				}
#line 27858 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 972: /* b_expr: b_expr IS OF '(' type_list ')'  */
#line 2786 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "=", (yyvsp[-5].node), (PGNode *) (yyvsp[-1].list), (yylsp[-4]));
				}
#line 27866 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 973: /* b_expr: b_expr IS NOT OF '(' type_list ')'  */
#line 2790 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "<>", (yyvsp[-6].node), (PGNode *) (yyvsp[-1].list), (yylsp[-5]));
				}
#line 27874 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 975: /* c_expr: indirection_expr_or_a_expr opt_extended_indirection  */
#line 2805 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].list))
					{
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = (PGNode *) (yyvsp[-1].node);
						n->indirection = check_indirection((yyvsp[0].list), yyscanner);
						(yyval.node) = (PGNode *) n;
					}
					else
						(yyval.node) = (PGNode *) (yyvsp[-1].node);
				}
#line 27890 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 976: /* d_expr: columnref_opt_indirection  */
#line 2818 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 27896 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 977: /* d_expr: AexprConst  */
#line 2819 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 27902 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 978: /* d_expr: select_with_parens  */
#line 2821 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_EXPR_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 27917 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 979: /* d_expr: select_with_parens indirection  */
#line 2832 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Because the select_with_parens nonterminal is designed
					 * to "eat" as many levels of parens as possible, the
					 * '(' a_expr ')' opt_indirection production above will
					 * fail to match a sub-SELECT with indirection decoration;
					 * the sub-SELECT won't be regarded as an a_expr as long
					 * as there are parens around it.  To support applying
					 * subscripting or field selection to a sub-SELECT result,
					 * we need this redundant-looking production.
					 */
					PGSubLink *n = makeNode(PGSubLink);
					PGAIndirection *a = makeNode(PGAIndirection);
					n->subLinkType = PG_EXPR_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[-1].node);
					n->location = (yylsp[-1]);
					a->arg = (PGNode *)n;
					a->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.node) = (PGNode *)a;
				}
#line 27945 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 980: /* d_expr: EXISTS select_with_parens  */
#line 2856 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_EXISTS_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 27960 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 981: /* d_expr: grouping_or_grouping_id '(' expr_list_opt_comma ')'  */
#line 2867 "third_party/libpg_query/grammar/statements/select.y"
                          {
				  PGGroupingFunc *g = makeNode(PGGroupingFunc);
				  g->args = (yyvsp[-1].list);
				  g->location = (yylsp[-3]);
				  (yyval.node) = (PGNode *)g;
			  }
#line 27971 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 982: /* indirection_expr_or_a_expr: '(' a_expr ')'  */
#line 2877 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[-1].node);
				}
#line 27979 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 983: /* indirection_expr_or_a_expr: indirection_expr  */
#line 2881 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 27987 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 984: /* indirection_expr_or_a_expr: row  */
#line 2884 "third_party/libpg_query/grammar/statements/select.y"
                              {
				PGFuncCall *n = makeFuncCall(SystemFuncName("row"), (yyvsp[0].list), (yylsp[0]));
				(yyval.node) = (PGNode *) n;
			}
#line 27996 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 985: /* param_expr: '?'  */
#line 2892 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeParamRef(0, (yylsp[0]));
				}
#line 28004 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 986: /* param_expr: PARAM  */
#line 2896 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGParamRef *p = makeNode(PGParamRef);
					p->number = (yyvsp[0].ival);
					p->location = (yylsp[0]);
					(yyval.node) = (PGNode *) p;
				}
#line 28015 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 987: /* param_expr: '$' ColLabel  */
#line 2903 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeNamedParamRef((yyvsp[0].str), (yylsp[-1]));
				}
#line 28023 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 995: /* indirection_expr: ARRAY select_with_parens  */
#line 2917 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_ARRAY_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NULL;
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 28038 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 996: /* indirection_expr: ARRAY '[' opt_expr_list_opt_comma ']'  */
#line 2927 "third_party/libpg_query/grammar/statements/select.y"
                                                                {
				PGList *func_name = list_make1(makeString("construct_array"));
				PGFuncCall *n = makeFuncCall(func_name, (yyvsp[-1].list), (yylsp[-3]));
				(yyval.node) = (PGNode *) n;
			}
#line 28048 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 997: /* indirection_expr: '#' ICONST  */
#line 2933 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGPositionalReference *n = makeNode(PGPositionalReference);
					n->position = (yyvsp[0].ival);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 28059 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 998: /* list_expr: '[' opt_expr_list_opt_comma ']'  */
#line 2941 "third_party/libpg_query/grammar/statements/select.y"
                                            {
                PGFuncCall *n = makeFuncCall(SystemFuncName("list_value"), (yyvsp[-1].list), (yylsp[-1]));
                (yyval.node) = (PGNode *) n;
            }
#line 28068 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 999: /* struct_expr: '{' dict_arguments_opt_comma '}'  */
#line 2948 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *f = makeFuncCall(SystemFuncName("struct_pack"), (yyvsp[-1].list), (yylsp[-1]));
					(yyval.node) = (PGNode *) f;
				}
#line 28077 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1000: /* map_expr: MAP '{' opt_map_arguments_opt_comma '}'  */
#line 2955 "third_party/libpg_query/grammar/statements/select.y"
                {
                    PGList *key_list = NULL;
                    PGList *value_list = NULL;
                    PGListCell *lc;
                    PGList *entry_list = (yyvsp[-1].list);
                    foreach(lc, entry_list)
                    {
                        PGList *l = (PGList *) lc->data.ptr_value;
                        key_list = lappend(key_list, (PGNode *) l->head->data.ptr_value);
                        value_list = lappend(value_list, (PGNode *) l->tail->data.ptr_value);
                    }
                    PGNode *keys   = (PGNode *) makeFuncCall(SystemFuncName("list_value"), key_list, (yylsp[-1]));
                    PGNode *values = (PGNode *) makeFuncCall(SystemFuncName("list_value"), value_list, (yylsp[-1]));
                    PGFuncCall *f = makeFuncCall(SystemFuncName("map"), list_make2(keys, values), (yylsp[-1]));
                    (yyval.node) = (PGNode *) f;
                }
#line 28098 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1001: /* func_application: func_name '(' ')'  */
#line 2975 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall((yyvsp[-2].list), NIL, (yylsp[-2]));
				}
#line 28106 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1002: /* func_application: func_name '(' sort_clause opt_ignore_nulls ')'  */
#line 2979 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-4].list), NIL, (yylsp[-4]));
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].ignorenulls);
					(yyval.node) = (PGNode *)n;
				}
#line 28117 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1003: /* func_application: func_name '(' func_arg_list opt_sort_clause opt_ignore_nulls ')'  */
#line 2986 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-5].list), (yyvsp[-3].list), (yylsp[-5]));
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].ignorenulls);
					(yyval.node) = (PGNode *)n;
				}
#line 28128 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1004: /* func_application: func_name '(' VARIADIC func_arg_expr opt_sort_clause opt_ignore_nulls ')'  */
#line 2993 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-6].list), list_make1((yyvsp[-3].node)), (yylsp[-6]));
					n->func_variadic = true;
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].ignorenulls);
					(yyval.node) = (PGNode *)n;
				}
#line 28140 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1005: /* func_application: func_name '(' func_arg_list ',' VARIADIC func_arg_expr opt_sort_clause opt_ignore_nulls ')'  */
#line 3001 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-8].list), lappend((yyvsp[-6].list), (yyvsp[-3].node)), (yylsp[-8]));
					n->func_variadic = true;
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].ignorenulls);
					(yyval.node) = (PGNode *)n;
				}
#line 28152 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1006: /* func_application: func_name '(' ALL func_arg_list opt_sort_clause opt_ignore_nulls ')'  */
#line 3009 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-6].list), (yyvsp[-3].list), (yylsp[-6]));
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].ignorenulls);
					/* Ideally we'd mark the PGFuncCall node to indicate
					 * "must be an aggregate", but there's no provision
					 * for that in PGFuncCall at the moment.
					 */
					(yyval.node) = (PGNode *)n;
				}
#line 28167 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1007: /* func_application: func_name '(' DISTINCT func_arg_list opt_sort_clause opt_ignore_nulls ')'  */
#line 3020 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-6].list), (yyvsp[-3].list), (yylsp[-6]));
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].ignorenulls);
					n->agg_distinct = true;
					(yyval.node) = (PGNode *)n;
				}
#line 28179 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1008: /* func_expr: func_application within_group_clause filter_clause export_clause over_clause  */
#line 3040 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = (PGFuncCall *) (yyvsp[-4].node);
					/*
					 * The order clause for WITHIN GROUP and the one for
					 * plain-aggregate ORDER BY share a field, so we have to
					 * check here that at most one is present.  We also check
					 * for DISTINCT and VARIADIC here to give a better error
					 * location.  Other consistency checks are deferred to
					 * parse analysis.
					 */
					if ((yyvsp[-3].list) != NIL)
					{
						if (n->agg_order != NIL)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use multiple ORDER BY clauses with WITHIN GROUP"),
									 parser_errposition((yylsp[-3]))));
						if (n->agg_distinct)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use DISTINCT with WITHIN GROUP"),
									 parser_errposition((yylsp[-3]))));
						if (n->func_variadic)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use VARIADIC with WITHIN GROUP"),
									 parser_errposition((yylsp[-3]))));
						n->agg_order = (yyvsp[-3].list);
						n->agg_within_group = true;
					}
					n->agg_filter = (yyvsp[-2].node);
					n->export_state = (yyvsp[-1].boolean);
					n->over = (yyvsp[0].windef);
					(yyval.node) = (PGNode *) n;
				}
#line 28219 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1009: /* func_expr: func_expr_common_subexpr  */
#line 3076 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 28225 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1010: /* func_expr_windowless: func_application  */
#line 3086 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 28231 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1011: /* func_expr_windowless: func_expr_common_subexpr  */
#line 3087 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 28237 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1012: /* func_expr_common_subexpr: COLLATION FOR '(' a_expr ')'  */
#line 3095 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("pg_collation_for"),
											   list_make1((yyvsp[-1].node)),
											   (yylsp[-4]));
				}
#line 28247 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1013: /* func_expr_common_subexpr: CAST '(' a_expr AS Typename ')'  */
#line 3101 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeTypeCast((yyvsp[-3].node), (yyvsp[-1].typnam), 0, (yylsp[-5])); }
#line 28253 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1014: /* func_expr_common_subexpr: TRY_CAST '(' a_expr AS Typename ')'  */
#line 3103 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeTypeCast((yyvsp[-3].node), (yyvsp[-1].typnam), 1, (yylsp[-5])); }
#line 28259 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1015: /* func_expr_common_subexpr: EXTRACT '(' extract_list ')'  */
#line 3105 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("date_part"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 28267 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1016: /* func_expr_common_subexpr: OVERLAY '(' overlay_list ')'  */
#line 3109 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* overlay(A PLACING B FROM C FOR D) is converted to
					 * overlay(A, B, C, D)
					 * overlay(A PLACING B FROM C) is converted to
					 * overlay(A, B, C)
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("overlay"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 28280 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1017: /* func_expr_common_subexpr: POSITION '(' position_list ')'  */
#line 3118 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* position(A in B) is converted to position_inverse(A, B) */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("__internal_position_operator"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 28289 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1018: /* func_expr_common_subexpr: SUBSTRING '(' substr_list ')'  */
#line 3123 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* substring(A from B for C) is converted to
					 * substring(A, B, C) - thomas 2000-11-28
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("substring"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 28300 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1019: /* func_expr_common_subexpr: TREAT '(' a_expr AS Typename ')'  */
#line 3130 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* TREAT(expr AS target) converts expr of a particular type to target,
					 * which is defined to be a subtype of the original expression.
					 * In SQL99, this is intended for use with structured UDTs,
					 * but let's make this a generally useful form allowing stronger
					 * coercions than are handled by implicit casting.
					 *
					 * Convert SystemTypeName() to SystemFuncName() even though
					 * at the moment they result in the same thing.
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName(((PGValue *)llast((yyvsp[-1].typnam)->names))->val.str),
												list_make1((yyvsp[-3].node)),
												(yylsp[-5]));
				}
#line 28319 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1020: /* func_expr_common_subexpr: TRIM '(' BOTH trim_list ')'  */
#line 3145 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* various trim expressions are defined in SQL
					 * - thomas 1997-07-19
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("trim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 28330 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1021: /* func_expr_common_subexpr: TRIM '(' LEADING trim_list ')'  */
#line 3152 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("ltrim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 28338 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1022: /* func_expr_common_subexpr: TRIM '(' TRAILING trim_list ')'  */
#line 3156 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("rtrim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 28346 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1023: /* func_expr_common_subexpr: TRIM '(' trim_list ')'  */
#line 3160 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("trim"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 28354 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1024: /* func_expr_common_subexpr: NULLIF '(' a_expr ',' a_expr ')'  */
#line 3164 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NULLIF, "=", (yyvsp[-3].node), (yyvsp[-1].node), (yylsp[-5]));
				}
#line 28362 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1025: /* func_expr_common_subexpr: COALESCE '(' expr_list_opt_comma ')'  */
#line 3168 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCoalesceExpr *c = makeNode(PGCoalesceExpr);
					c->args = (yyvsp[-1].list);
					c->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)c;
				}
#line 28373 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1026: /* list_comprehension: '[' a_expr FOR name_list IN_P a_expr ']'  */
#line 3178 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGLambdaFunction *lambda = makeNode(PGLambdaFunction);
					lambda->lhs = (yyvsp[-3].list);
					lambda->rhs = (yyvsp[-5].node);
					lambda->location = (yylsp[-6]);
					PGFuncCall *n = makeFuncCall(SystemFuncName("list_apply"), list_make2((yyvsp[-1].node), lambda), (yylsp[-6]));
					(yyval.node) = (PGNode *) n;
				}
#line 28386 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1027: /* list_comprehension: '[' a_expr FOR name_list IN_P c_expr IF_P a_expr ']'  */
#line 3187 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGLambdaFunction *lambda = makeNode(PGLambdaFunction);
					lambda->lhs = (yyvsp[-5].list);
					lambda->rhs = (yyvsp[-7].node);
					lambda->location = (yylsp[-8]);

					PGLambdaFunction *lambda_filter = makeNode(PGLambdaFunction);
					lambda_filter->lhs = (yyvsp[-5].list);
					lambda_filter->rhs = (yyvsp[-1].node);
					lambda_filter->location = (yylsp[-1]);
					PGFuncCall *filter = makeFuncCall(SystemFuncName("list_filter"), list_make2((yyvsp[-3].node), lambda_filter), (yylsp[-8]));
					PGFuncCall *n = makeFuncCall(SystemFuncName("list_apply"), list_make2(filter, lambda), (yylsp[-8]));
					(yyval.node) = (PGNode *) n;
				}
#line 28405 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1028: /* within_group_clause: WITHIN GROUP_P '(' sort_clause ')'  */
#line 3208 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 28411 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1029: /* within_group_clause: %empty  */
#line 3209 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 28417 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1030: /* filter_clause: FILTER '(' WHERE a_expr ')'  */
#line 3213 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 28423 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1031: /* filter_clause: FILTER '(' a_expr ')'  */
#line 3214 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 28429 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1032: /* filter_clause: %empty  */
#line 3215 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 28435 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1033: /* export_clause: EXPORT_STATE  */
#line 3219 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.boolean) = true; }
#line 28441 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1034: /* export_clause: %empty  */
#line 3220 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 28447 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1035: /* window_clause: WINDOW window_definition_list  */
#line 3227 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 28453 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1036: /* window_clause: %empty  */
#line 3228 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 28459 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1037: /* window_definition_list: window_definition  */
#line 3232 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].windef)); }
#line 28465 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1038: /* window_definition_list: window_definition_list ',' window_definition  */
#line 3234 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].windef)); }
#line 28471 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1039: /* window_definition: ColId AS window_specification  */
#line 3239 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);
					n->name = (yyvsp[-2].str);
					(yyval.windef) = n;
				}
#line 28481 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1040: /* over_clause: OVER window_specification  */
#line 3247 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.windef) = (yyvsp[0].windef); }
#line 28487 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1041: /* over_clause: OVER ColId  */
#line 3249 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->name = (yyvsp[0].str);
					n->refname = NULL;
					n->partitionClause = NIL;
					n->orderClause = NIL;
					n->frameOptions = FRAMEOPTION_DEFAULTS;
					n->startOffset = NULL;
					n->endOffset = NULL;
					n->location = (yylsp[0]);
					(yyval.windef) = n;
				}
#line 28504 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1042: /* over_clause: %empty  */
#line 3262 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.windef) = NULL; }
#line 28510 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1043: /* window_specification: '(' opt_existing_window_name opt_partition_clause opt_sort_clause opt_frame_clause ')'  */
#line 3267 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->name = NULL;
					n->refname = (yyvsp[-4].str);
					n->partitionClause = (yyvsp[-3].list);
					n->orderClause = (yyvsp[-2].list);
					/* copy relevant fields of opt_frame_clause */
					n->frameOptions = (yyvsp[-1].windef)->frameOptions;
					n->startOffset = (yyvsp[-1].windef)->startOffset;
					n->endOffset = (yyvsp[-1].windef)->endOffset;
					n->location = (yylsp[-5]);
					(yyval.windef) = n;
				}
#line 28528 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1044: /* opt_existing_window_name: ColId  */
#line 3292 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 28534 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1045: /* opt_existing_window_name: %empty  */
#line 3293 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = NULL; }
#line 28540 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1046: /* opt_partition_clause: PARTITION BY expr_list  */
#line 3296 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = (yyvsp[0].list); }
#line 28546 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1047: /* opt_partition_clause: %empty  */
#line 3297 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 28552 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1048: /* opt_frame_clause: RANGE frame_extent opt_window_exclusion_clause  */
#line 3306 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[-1].windef);

					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_RANGE;
					n->frameOptions |= (yyvsp[0].ival);
					(yyval.windef) = n;
				}
#line 28564 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1049: /* opt_frame_clause: ROWS frame_extent opt_window_exclusion_clause  */
#line 3314 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[-1].windef);

					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_ROWS;
					n->frameOptions |= (yyvsp[0].ival);
					(yyval.windef) = n;
				}
#line 28576 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1050: /* opt_frame_clause: GROUPS frame_extent opt_window_exclusion_clause  */
#line 3322 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[-1].windef);

					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_GROUPS;
					n->frameOptions |= (yyvsp[0].ival);
					(yyval.windef) = n;
				}
#line 28588 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1051: /* opt_frame_clause: %empty  */
#line 3330 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);

					n->frameOptions = FRAMEOPTION_DEFAULTS;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 28601 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1052: /* frame_extent: frame_bound  */
#line 3341 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);

					/* reject invalid cases */
					if (n->frameOptions & FRAMEOPTION_START_UNBOUNDED_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame start cannot be UNBOUNDED FOLLOWING"),
								 parser_errposition((yylsp[0]))));
					if (n->frameOptions & FRAMEOPTION_START_OFFSET_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from following row cannot end with current row"),
								 parser_errposition((yylsp[0]))));
					n->frameOptions |= FRAMEOPTION_END_CURRENT_ROW;
					(yyval.windef) = n;
				}
#line 28623 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1053: /* frame_extent: BETWEEN frame_bound AND frame_bound  */
#line 3359 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n1 = (yyvsp[-2].windef);
					PGWindowDef *n2 = (yyvsp[0].windef);

					/* form merged options */
					int		frameOptions = n1->frameOptions;
					/* shift converts START_ options to END_ options */
					frameOptions |= n2->frameOptions << 1;
					frameOptions |= FRAMEOPTION_BETWEEN;
					/* reject invalid cases */
					if (frameOptions & FRAMEOPTION_START_UNBOUNDED_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame start cannot be UNBOUNDED FOLLOWING"),
								 parser_errposition((yylsp[-2]))));
					if (frameOptions & FRAMEOPTION_END_UNBOUNDED_PRECEDING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame end cannot be UNBOUNDED PRECEDING"),
								 parser_errposition((yylsp[0]))));
					if ((frameOptions & FRAMEOPTION_START_CURRENT_ROW) &&
						(frameOptions & FRAMEOPTION_END_OFFSET_PRECEDING))
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from current row cannot have preceding rows"),
								 parser_errposition((yylsp[0]))));
					if ((frameOptions & FRAMEOPTION_START_OFFSET_FOLLOWING) &&
						(frameOptions & (FRAMEOPTION_END_OFFSET_PRECEDING |
										 FRAMEOPTION_END_CURRENT_ROW)))
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from following row cannot have preceding rows"),
								 parser_errposition((yylsp[0]))));
					n1->frameOptions = frameOptions;
					n1->endOffset = n2->startOffset;
					(yyval.windef) = n1;
				}
#line 28665 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1054: /* frame_bound: UNBOUNDED PRECEDING  */
#line 3405 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);

					n->frameOptions = FRAMEOPTION_START_UNBOUNDED_PRECEDING;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 28678 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1055: /* frame_bound: UNBOUNDED FOLLOWING  */
#line 3414 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);

					n->frameOptions = FRAMEOPTION_START_UNBOUNDED_FOLLOWING;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 28691 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1056: /* frame_bound: CURRENT_P ROW  */
#line 3423 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);

					n->frameOptions = FRAMEOPTION_START_CURRENT_ROW;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 28704 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1057: /* frame_bound: a_expr PRECEDING  */
#line 3432 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);

					n->frameOptions = FRAMEOPTION_START_OFFSET_PRECEDING;
					n->startOffset = (yyvsp[-1].node);
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 28717 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1058: /* frame_bound: a_expr FOLLOWING  */
#line 3441 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);

					n->frameOptions = FRAMEOPTION_START_OFFSET_FOLLOWING;
					n->startOffset = (yyvsp[-1].node);
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 28730 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1059: /* opt_window_exclusion_clause: EXCLUDE CURRENT_P ROW  */
#line 3452 "third_party/libpg_query/grammar/statements/select.y"
                                                { (yyval.ival) = FRAMEOPTION_EXCLUDE_CURRENT_ROW; }
#line 28736 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1060: /* opt_window_exclusion_clause: EXCLUDE GROUP_P  */
#line 3453 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.ival) = FRAMEOPTION_EXCLUDE_GROUP; }
#line 28742 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1061: /* opt_window_exclusion_clause: EXCLUDE TIES  */
#line 3454 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.ival) = FRAMEOPTION_EXCLUDE_TIES; }
#line 28748 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1062: /* opt_window_exclusion_clause: EXCLUDE NO OTHERS  */
#line 3455 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.ival) = 0; }
#line 28754 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1063: /* opt_window_exclusion_clause: %empty  */
#line 3456 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.ival) = 0; }
#line 28760 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1064: /* qualified_row: ROW '(' expr_list_opt_comma ')'  */
#line 3470 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 28766 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1065: /* qualified_row: ROW '(' ')'  */
#line 3471 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 28772 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1066: /* row: qualified_row  */
#line 3474 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list);}
#line 28778 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1067: /* row: '(' expr_list ',' a_expr ')'  */
#line 3475 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-3].list), (yyvsp[-1].node)); }
#line 28784 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1068: /* dict_arg: ColIdOrString SINGLE_COLON a_expr  */
#line 3479 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        {
		PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
		na->name = (yyvsp[-2].str);
		na->arg = (PGExpr *) (yyvsp[0].node);
		na->argnumber = -1;
		na->location = (yylsp[-2]);
		(yyval.node) = (PGNode *) na;
	}
#line 28797 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1069: /* dict_arguments: dict_arg  */
#line 3489 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 28803 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1070: /* dict_arguments: dict_arguments ',' dict_arg  */
#line 3490 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 28809 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1071: /* dict_arguments_opt_comma: dict_arguments  */
#line 3494 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 28815 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1072: /* dict_arguments_opt_comma: dict_arguments ','  */
#line 3495 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 28821 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1073: /* map_arg: a_expr SINGLE_COLON a_expr  */
#line 3500 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.list) = list_make2((yyvsp[-2].node), (yyvsp[0].node));
			}
#line 28829 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1074: /* map_arguments: map_arg  */
#line 3506 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 28835 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1075: /* map_arguments: map_arguments ',' map_arg  */
#line 3507 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 28841 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1076: /* map_arguments_opt_comma: map_arguments  */
#line 3512 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 28847 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1077: /* map_arguments_opt_comma: map_arguments ','  */
#line 3513 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 28853 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1078: /* opt_map_arguments_opt_comma: map_arguments_opt_comma  */
#line 3518 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 28859 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1079: /* opt_map_arguments_opt_comma: %empty  */
#line 3519 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NULL; }
#line 28865 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1080: /* sub_type: ANY  */
#line 3522 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ANY_SUBLINK; }
#line 28871 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1081: /* sub_type: SOME  */
#line 3523 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ANY_SUBLINK; }
#line 28877 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1082: /* sub_type: ALL  */
#line 3524 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ALL_SUBLINK; }
#line 28883 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1083: /* all_Op: Op  */
#line 3527 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 28889 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1084: /* all_Op: MathOp  */
#line 3528 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) (yyvsp[0].conststr); }
#line 28895 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1085: /* MathOp: '+'  */
#line 3531 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "+"; }
#line 28901 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1086: /* MathOp: '-'  */
#line 3532 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "-"; }
#line 28907 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1087: /* MathOp: '*'  */
#line 3533 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "*"; }
#line 28913 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1088: /* MathOp: '/'  */
#line 3534 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "/"; }
#line 28919 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1089: /* MathOp: INTEGER_DIVISION  */
#line 3535 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "//"; }
#line 28925 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1090: /* MathOp: '%'  */
#line 3536 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "%"; }
#line 28931 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1091: /* MathOp: '^'  */
#line 3537 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "^"; }
#line 28937 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1092: /* MathOp: POWER_OF  */
#line 3538 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "**"; }
#line 28943 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1093: /* MathOp: '<'  */
#line 3539 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "<"; }
#line 28949 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1094: /* MathOp: '>'  */
#line 3540 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = ">"; }
#line 28955 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1095: /* MathOp: '='  */
#line 3541 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "="; }
#line 28961 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1096: /* MathOp: LESS_EQUALS  */
#line 3542 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "<="; }
#line 28967 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1097: /* MathOp: GREATER_EQUALS  */
#line 3543 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = ">="; }
#line 28973 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1098: /* MathOp: NOT_EQUALS  */
#line 3544 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "<>"; }
#line 28979 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1099: /* qual_Op: Op  */
#line 3548 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 28985 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1100: /* qual_Op: OPERATOR '(' any_operator ')'  */
#line 3550 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 28991 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1101: /* qual_all_Op: all_Op  */
#line 3555 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 28997 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1102: /* qual_all_Op: OPERATOR '(' any_operator ')'  */
#line 3557 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 29003 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1103: /* subquery_Op: all_Op  */
#line 3562 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 29009 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1104: /* subquery_Op: OPERATOR '(' any_operator ')'  */
#line 3564 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 29015 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1105: /* subquery_Op: LIKE  */
#line 3566 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~")); }
#line 29021 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1106: /* subquery_Op: NOT_LA LIKE  */
#line 3568 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~")); }
#line 29027 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1107: /* subquery_Op: GLOB  */
#line 3570 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~~")); }
#line 29033 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1108: /* subquery_Op: NOT_LA GLOB  */
#line 3572 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~~")); }
#line 29039 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1109: /* subquery_Op: ILIKE  */
#line 3574 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~*")); }
#line 29045 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1110: /* subquery_Op: NOT_LA ILIKE  */
#line 3576 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~*")); }
#line 29051 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1111: /* any_operator: all_Op  */
#line 3590 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 29057 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1112: /* any_operator: ColId '.' any_operator  */
#line 3592 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lcons(makeString((yyvsp[-2].str)), (yyvsp[0].list)); }
#line 29063 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1113: /* c_expr_list: c_expr  */
#line 3597 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 29071 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1114: /* c_expr_list: c_expr_list ',' c_expr  */
#line 3601 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 29079 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1115: /* c_expr_list_opt_comma: c_expr_list  */
#line 3608 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 29087 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1116: /* c_expr_list_opt_comma: c_expr_list ','  */
#line 3613 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[-1].list);
				}
#line 29095 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1117: /* expr_list: a_expr  */
#line 3619 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 29103 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1118: /* expr_list: expr_list ',' a_expr  */
#line 3623 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 29111 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1119: /* expr_list_opt_comma: expr_list  */
#line 3630 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 29119 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1120: /* expr_list_opt_comma: expr_list ','  */
#line 3635 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[-1].list);
				}
#line 29127 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1121: /* opt_expr_list_opt_comma: expr_list_opt_comma  */
#line 3642 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 29135 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1122: /* opt_expr_list_opt_comma: %empty  */
#line 3646 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = NULL;
				}
#line 29143 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1123: /* func_arg_list: func_arg_expr  */
#line 3655 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 29151 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1124: /* func_arg_list: func_arg_list ',' func_arg_expr  */
#line 3659 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 29159 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1125: /* func_arg_expr: a_expr  */
#line 3665 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 29167 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1126: /* func_arg_expr: param_name COLON_EQUALS a_expr  */
#line 3669 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
					na->name = (yyvsp[-2].str);
					na->arg = (PGExpr *) (yyvsp[0].node);
					na->argnumber = -1;		/* until determined */
					na->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) na;
				}
#line 29180 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1127: /* func_arg_expr: param_name EQUALS_GREATER a_expr  */
#line 3678 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
					na->name = (yyvsp[-2].str);
					na->arg = (PGExpr *) (yyvsp[0].node);
					na->argnumber = -1;		/* until determined */
					na->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) na;
				}
#line 29193 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1128: /* type_list: Typename  */
#line 3688 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].typnam)); }
#line 29199 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1129: /* type_list: type_list ',' Typename  */
#line 3689 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].typnam)); }
#line 29205 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1130: /* extract_list: extract_arg FROM a_expr  */
#line 3694 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(makeStringConst((yyvsp[-2].str), (yylsp[-2])), (yyvsp[0].node));
				}
#line 29213 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1131: /* extract_list: %empty  */
#line 3697 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 29219 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1132: /* extract_arg: IDENT  */
#line 3704 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 29225 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1133: /* extract_arg: year_keyword  */
#line 3705 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "year"; }
#line 29231 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1134: /* extract_arg: month_keyword  */
#line 3706 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "month"; }
#line 29237 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1135: /* extract_arg: day_keyword  */
#line 3707 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "day"; }
#line 29243 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1136: /* extract_arg: hour_keyword  */
#line 3708 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "hour"; }
#line 29249 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1137: /* extract_arg: minute_keyword  */
#line 3709 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "minute"; }
#line 29255 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1138: /* extract_arg: second_keyword  */
#line 3710 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "second"; }
#line 29261 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1139: /* extract_arg: millisecond_keyword  */
#line 3711 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) "millisecond"; }
#line 29267 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1140: /* extract_arg: microsecond_keyword  */
#line 3712 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) "microsecond"; }
#line 29273 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1141: /* extract_arg: week_keyword  */
#line 3713 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "week"; }
#line 29279 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1142: /* extract_arg: quarter_keyword  */
#line 3714 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "quarter"; }
#line 29285 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1143: /* extract_arg: decade_keyword  */
#line 3715 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "decade"; }
#line 29291 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1144: /* extract_arg: century_keyword  */
#line 3716 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "century"; }
#line 29297 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1145: /* extract_arg: millennium_keyword  */
#line 3717 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) "millennium"; }
#line 29303 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1146: /* extract_arg: Sconst  */
#line 3718 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 29309 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1147: /* overlay_list: a_expr overlay_placing substr_from substr_for  */
#line 3729 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make4((yyvsp[-3].node), (yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 29317 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1148: /* overlay_list: a_expr overlay_placing substr_from  */
#line 3733 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 29325 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1149: /* overlay_placing: PLACING a_expr  */
#line 3740 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 29331 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1150: /* position_list: b_expr IN_P b_expr  */
#line 3746 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make2((yyvsp[-2].node), (yyvsp[0].node)); }
#line 29337 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1151: /* position_list: %empty  */
#line 3747 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 29343 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1152: /* substr_list: a_expr substr_from substr_for  */
#line 3764 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 29351 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1153: /* substr_list: a_expr substr_for substr_from  */
#line 3768 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* not legal per SQL99, but might as well allow it */
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[0].node), (yyvsp[-1].node));
				}
#line 29360 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1154: /* substr_list: a_expr substr_from  */
#line 3773 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].node));
				}
#line 29368 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1155: /* substr_list: a_expr substr_for  */
#line 3777 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Since there are no cases where this syntax allows
					 * a textual FOR value, we forcibly cast the argument
					 * to int4.  The possible matches in pg_proc are
					 * substring(text,int4) and substring(text,text),
					 * and we don't want the parser to choose the latter,
					 * which it is likely to do if the second argument
					 * is unknown or doesn't have an implicit cast to int4.
					 */
					(yyval.list) = list_make3((yyvsp[-1].node), makeIntConst(1, -1),
									makeTypeCast((yyvsp[0].node),
												 SystemTypeName("int4"), 0, -1));
				}
#line 29387 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1156: /* substr_list: expr_list  */
#line 3792 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 29395 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1157: /* substr_list: %empty  */
#line 3796 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = NIL; }
#line 29401 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1158: /* substr_from: FROM a_expr  */
#line 3800 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 29407 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1159: /* substr_for: FOR a_expr  */
#line 3803 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 29413 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1160: /* trim_list: a_expr FROM expr_list_opt_comma  */
#line 3806 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[0].list), (yyvsp[-2].node)); }
#line 29419 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1161: /* trim_list: FROM expr_list_opt_comma  */
#line 3807 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 29425 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1162: /* trim_list: expr_list_opt_comma  */
#line 3808 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 29431 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1163: /* in_expr: select_with_parens  */
#line 3812 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subselect = (yyvsp[0].node);
					/* other fields will be filled later */
					(yyval.node) = (PGNode *)n;
				}
#line 29442 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1164: /* in_expr: '(' expr_list_opt_comma ')'  */
#line 3818 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (PGNode *)(yyvsp[-1].list); }
#line 29448 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1166: /* in_expr: indirection_expr  */
#line 3820 "third_party/libpg_query/grammar/statements/select.y"
                                           { (yyval.node) = (PGNode *)(yyvsp[0].node); }
#line 29454 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1167: /* case_expr: CASE case_arg when_clause_list case_default END_P  */
#line 3831 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCaseExpr *c = makeNode(PGCaseExpr);
					c->casetype = InvalidOid; /* not analyzed yet */
					c->arg = (PGExpr *) (yyvsp[-3].node);
					c->args = (yyvsp[-2].list);
					c->defresult = (PGExpr *) (yyvsp[-1].node);
					c->location = (yylsp[-4]);
					(yyval.node) = (PGNode *)c;
				}
#line 29468 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1168: /* when_clause_list: when_clause  */
#line 3844 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 29474 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1169: /* when_clause_list: when_clause_list when_clause  */
#line 3845 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 29480 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1170: /* when_clause: WHEN a_expr THEN a_expr  */
#line 3850 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCaseWhen *w = makeNode(PGCaseWhen);
					w->expr = (PGExpr *) (yyvsp[-2].node);
					w->result = (PGExpr *) (yyvsp[0].node);
					w->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)w;
				}
#line 29492 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1171: /* case_default: ELSE a_expr  */
#line 3860 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 29498 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1172: /* case_default: %empty  */
#line 3861 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 29504 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1173: /* case_arg: a_expr  */
#line 3864 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 29510 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1174: /* case_arg: %empty  */
#line 3865 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 29516 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1175: /* columnref: ColId  */
#line 3874 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeColumnRef((yyvsp[0].str), NIL, (yylsp[0]), yyscanner);
		}
#line 29524 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1176: /* columnref_opt_indirection: ColId  */
#line 3880 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeColumnRef((yyvsp[0].str), NIL, (yylsp[0]), yyscanner);
				}
#line 29532 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1177: /* columnref_opt_indirection: ColId indirection  */
#line 3884 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeColumnRef((yyvsp[-1].str), (yyvsp[0].list), (yylsp[-1]), yyscanner);
				}
#line 29540 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1178: /* indirection_el: '[' a_expr ']'  */
#line 3891 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = false;
					ai->lidx = NULL;
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 29552 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1179: /* indirection_el: '[' opt_slice_bound SINGLE_COLON opt_slice_bound ']'  */
#line 3899 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-3].node);
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 29564 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1180: /* indirection_el: '[' opt_slice_bound SINGLE_COLON opt_slice_bound SINGLE_COLON opt_slice_bound ']'  */
#line 3906 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                            {
				    	PGAIndices *ai = makeNode(PGAIndices);
				    	ai->is_slice = true;
				    	ai->lidx = (yyvsp[-5].node);
				    	ai->uidx = (yyvsp[-3].node);
				    	ai->step = (yyvsp[-1].node);
				    	(yyval.node) = (PGNode *) ai;
				}
#line 29577 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1181: /* indirection_el: '[' opt_slice_bound SINGLE_COLON '-' SINGLE_COLON opt_slice_bound ']'  */
#line 3914 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-5].node);
					ai->step = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 29589 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1182: /* opt_slice_bound: a_expr  */
#line 3924 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 29595 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1183: /* opt_slice_bound: %empty  */
#line 3925 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 29601 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1184: /* opt_indirection: %empty  */
#line 3930 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 29607 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1185: /* opt_indirection: opt_indirection indirection_el  */
#line 3931 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 29613 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1186: /* opt_func_arguments: %empty  */
#line 3935 "third_party/libpg_query/grammar/statements/select.y"
                                                { (yyval.list) = NULL; }
#line 29619 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1187: /* opt_func_arguments: '(' ')'  */
#line 3936 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = list_make1(NULL); }
#line 29625 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1188: /* opt_func_arguments: '(' func_arg_list ')'  */
#line 3937 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 29631 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1189: /* extended_indirection_el: '.' attr_name opt_func_arguments  */
#line 3942 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].list)) {
						PGFuncCall *n = makeFuncCall(list_make1(makeString((yyvsp[-1].str))), (yyvsp[0].list)->head->data.ptr_value ? (yyvsp[0].list) : NULL, (yylsp[-1]));
						(yyval.node) = (PGNode *) n;
					} else {
						(yyval.node) = (PGNode *) makeString((yyvsp[-1].str));
					}
				}
#line 29644 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1190: /* extended_indirection_el: '[' a_expr ']'  */
#line 3951 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = false;
					ai->lidx = NULL;
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 29656 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1191: /* extended_indirection_el: '[' opt_slice_bound SINGLE_COLON opt_slice_bound ']'  */
#line 3959 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-3].node);
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 29668 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1192: /* extended_indirection_el: '[' opt_slice_bound SINGLE_COLON opt_slice_bound SINGLE_COLON opt_slice_bound ']'  */
#line 3966 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                            {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-5].node);
					ai->uidx = (yyvsp[-3].node);
					ai->step = (yyvsp[-1].node);
                 			(yyval.node) = (PGNode *) ai;
                		}
#line 29681 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1193: /* extended_indirection_el: '[' opt_slice_bound SINGLE_COLON '-' SINGLE_COLON opt_slice_bound ']'  */
#line 3975 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-5].node);
					ai->step = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 29693 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1194: /* opt_extended_indirection: %empty  */
#line 3990 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                                { (yyval.list) = NIL; }
#line 29699 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1195: /* opt_extended_indirection: opt_extended_indirection extended_indirection_el  */
#line 3991 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 29705 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1198: /* opt_target_list_opt_comma: target_list_opt_comma  */
#line 4007 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 29711 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1199: /* opt_target_list_opt_comma: %empty  */
#line 4008 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 29717 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1200: /* target_list: target_el  */
#line 4012 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 29723 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1201: /* target_list: target_list ',' target_el  */
#line 4013 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].target)); }
#line 29729 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1202: /* target_list_opt_comma: target_list  */
#line 4017 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 29735 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1203: /* target_list_opt_comma: target_list ','  */
#line 4018 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 29741 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1204: /* target_el: a_expr AS ColLabelOrString  */
#line 4022 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[0].str);
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[-2].node);
					(yyval.target)->location = (yylsp[-2]);
				}
#line 29753 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1205: /* target_el: a_expr IDENT  */
#line 4038 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[0].str);
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[-1].node);
					(yyval.target)->location = (yylsp[-1]);
				}
#line 29765 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1206: /* target_el: a_expr  */
#line 4046 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = NULL;
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[0].node);
					(yyval.target)->location = (yylsp[0]);
				}
#line 29777 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1207: /* target_el: ColId SINGLE_COLON a_expr  */
#line 4054 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[-2].str);
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[0].node);
					(yyval.target)->location = (yylsp[-2]);
				}
#line 29789 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1208: /* except_list: EXCLUDE '(' except_name_list_opt_comma ')'  */
#line 4063 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 29795 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1209: /* except_list: EXCLUDE except_name  */
#line 4064 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                        { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 29801 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1210: /* except_name: ColIdOrString  */
#line 4069 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.list) = list_make1((yyvsp[0].str));
			}
#line 29809 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1211: /* except_name: except_name '.' ColIdOrString  */
#line 4073 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].str));
			}
#line 29817 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1212: /* except_name_list: except_name  */
#line 4079 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 29823 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1213: /* except_name_list: except_name_list ',' except_name  */
#line 4081 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 29829 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1214: /* except_name_list_opt_comma: except_name_list  */
#line 4085 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 29835 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1215: /* except_name_list_opt_comma: except_name_list ','  */
#line 4086 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 29841 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1216: /* opt_except_list: except_list  */
#line 4090 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 29847 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1217: /* opt_except_list: %empty  */
#line 4091 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NULL; }
#line 29853 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1218: /* replace_list_el: a_expr AS ColId  */
#line 4094 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = list_make2((yyvsp[-2].node), makeString((yyvsp[0].str))); }
#line 29859 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1219: /* replace_list: replace_list_el  */
#line 4098 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 29865 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1220: /* replace_list: replace_list ',' replace_list_el  */
#line 4099 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 29871 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1221: /* replace_list_opt_comma: replace_list  */
#line 4103 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 29877 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1222: /* replace_list_opt_comma: replace_list ','  */
#line 4104 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 29883 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1223: /* opt_replace_list: REPLACE '(' replace_list_opt_comma ')'  */
#line 4107 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 29889 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1224: /* opt_replace_list: REPLACE replace_list_el  */
#line 4108 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 29895 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1225: /* opt_replace_list: %empty  */
#line 4109 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NULL; }
#line 29901 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1226: /* rename_list_el: except_name AS ColId  */
#line 4112 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make2((yyvsp[-2].list), (yyvsp[0].str)); }
#line 29907 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1227: /* rename_list: rename_list_el  */
#line 4116 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 29913 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1228: /* rename_list: rename_list ',' rename_list_el  */
#line 4117 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 29919 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1229: /* rename_list_opt_comma: rename_list  */
#line 4121 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 29925 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1230: /* rename_list_opt_comma: rename_list ','  */
#line 4122 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 29931 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1231: /* opt_rename_list: RENAME '(' rename_list_opt_comma ')'  */
#line 4124 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 29937 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1232: /* opt_rename_list: RENAME rename_list_el  */
#line 4125 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 29943 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1233: /* opt_rename_list: %empty  */
#line 4126 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                { (yyval.list) = NULL; }
#line 29949 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1234: /* qualified_name_list: qualified_name  */
#line 4136 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].range)); }
#line 29955 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1235: /* qualified_name_list: qualified_name_list ',' qualified_name  */
#line 4137 "third_party/libpg_query/grammar/statements/select.y"
                                                                 { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].range)); }
#line 29961 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1236: /* name_list: name  */
#line 4142 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 29967 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1237: /* name_list: name_list ',' name  */
#line 4144 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str))); }
#line 29973 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1238: /* name_list_opt_comma: name_list  */
#line 4149 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 29979 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1239: /* name_list_opt_comma: name_list ','  */
#line 4150 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 29985 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1240: /* name_list_opt_comma_opt_bracket: name_list_opt_comma  */
#line 4154 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 29991 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1241: /* name_list_opt_comma_opt_bracket: '(' name_list_opt_comma ')'  */
#line 4155 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 29997 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1242: /* name: ColIdOrString  */
#line 4158 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 30003 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1243: /* func_name: function_name_token  */
#line 4170 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 30009 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1244: /* func_name: ColId indirection  */
#line 4173 "third_party/libpg_query/grammar/statements/select.y"
                                        {
						(yyval.list) = check_func_name(lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)),
											 yyscanner);
					}
#line 30018 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1245: /* AexprConst: Iconst  */
#line 4184 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntConst((yyvsp[0].ival), (yylsp[0]));
				}
#line 30026 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1246: /* AexprConst: FCONST  */
#line 4188 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeFloatConst((yyvsp[0].str), (yylsp[0]));
				}
#line 30034 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1247: /* AexprConst: Sconst opt_indirection  */
#line 4192 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].list))
					{
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = makeStringConst((yyvsp[-1].str), (yylsp[-1]));
						n->indirection = check_indirection((yyvsp[0].list), yyscanner);
						(yyval.node) = (PGNode *) n;
					}
					else
						(yyval.node) = makeStringConst((yyvsp[-1].str), (yylsp[-1]));
				}
#line 30050 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1248: /* AexprConst: BCONST  */
#line 4204 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBitStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 30058 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1249: /* AexprConst: XCONST  */
#line 4208 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* This is a bit constant per SQL99:
					 * Without Feature F511, "BIT data type",
					 * a <general literal> shall not be a
					 * <bit string literal> or a <hex string literal>.
					 */
					(yyval.node) = makeBitStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 30071 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1250: /* AexprConst: func_name Sconst  */
#line 4217 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* generic type 'literal' syntax */
					PGTypeName *t = makeTypeNameFromNameList((yyvsp[-1].list));
					t->location = (yylsp[-1]);
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 30082 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1251: /* AexprConst: func_name '(' func_arg_list opt_sort_clause opt_ignore_nulls ')' Sconst  */
#line 4224 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* generic syntax with a type modifier */
					PGTypeName *t = makeTypeNameFromNameList((yyvsp[-6].list));
					PGListCell *lc;

					/*
					 * We must use func_arg_list and opt_sort_clause in the
					 * production to avoid reduce/reduce conflicts, but we
					 * don't actually wish to allow PGNamedArgExpr in this
					 * context, ORDER BY, nor IGNORE NULLS.
					 */
					foreach(lc, (yyvsp[-4].list))
					{
						PGNamedArgExpr *arg = (PGNamedArgExpr *) lfirst(lc);

						if (IsA(arg, PGNamedArgExpr))
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have parameter name"),
									 parser_errposition(arg->location)));
					}
					if ((yyvsp[-3].list) != NIL)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have ORDER BY"),
									 parser_errposition((yylsp[-3]))));
					if ((yyvsp[-2].ignorenulls) != false)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have IGNORE NULLS"),
									 parser_errposition((yylsp[-2]))));


					t->typmods = (yyvsp[-4].list);
					t->location = (yylsp[-6]);
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 30124 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1252: /* AexprConst: ConstTypename Sconst  */
#line 4262 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), (yyvsp[-1].typnam));
				}
#line 30132 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1253: /* AexprConst: ConstInterval '(' a_expr ')' opt_interval  */
#line 4266 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntervalNode((yyvsp[-2].node), (yylsp[-2]), (yyvsp[0].list));
				}
#line 30140 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1254: /* AexprConst: ConstInterval Iconst opt_interval  */
#line 4270 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntervalNode((yyvsp[-1].ival), (yylsp[-1]), (yyvsp[0].list));
				}
#line 30148 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1255: /* AexprConst: ConstInterval Sconst opt_interval  */
#line 4274 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntervalNode((yyvsp[-1].str), (yylsp[-1]), (yyvsp[0].list));
				}
#line 30156 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1256: /* AexprConst: TRUE_P  */
#line 4278 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBoolAConst(true, (yylsp[0]));
				}
#line 30164 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1257: /* AexprConst: FALSE_P  */
#line 4282 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBoolAConst(false, (yylsp[0]));
				}
#line 30172 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1258: /* AexprConst: NULL_P  */
#line 4286 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeNullAConst((yylsp[0]));
				}
#line 30180 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1259: /* Iconst: ICONST  */
#line 4291 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ival) = (yyvsp[0].ival); }
#line 30186 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1260: /* type_function_name: IDENT  */
#line 4308 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 30192 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1261: /* type_function_name: unreserved_keyword  */
#line 4309 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 30198 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1262: /* type_function_name: type_func_name_keyword  */
#line 4310 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 30204 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1263: /* function_name_token: IDENT  */
#line 4313 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 30210 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1264: /* function_name_token: unreserved_keyword  */
#line 4314 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 30216 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1265: /* function_name_token: func_name_keyword  */
#line 4315 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 30222 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1266: /* type_name_token: IDENT  */
#line 4318 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 30228 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1267: /* type_name_token: unreserved_keyword  */
#line 4319 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 30234 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1268: /* type_name_token: type_name_keyword  */
#line 4320 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 30240 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1269: /* any_name: ColId  */
#line 4323 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 30246 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1270: /* any_name: ColId attrs  */
#line 4324 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)); }
#line 30252 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1271: /* attrs: '.' attr_name  */
#line 4328 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 30258 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1272: /* attrs: attrs '.' attr_name  */
#line 4330 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str))); }
#line 30264 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1273: /* opt_name_list: '(' name_list_opt_comma ')'  */
#line 4334 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 30270 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1274: /* opt_name_list: %empty  */
#line 4335 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 30276 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1276: /* ColLabelOrString: ColLabel  */
#line 4342 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 30282 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1277: /* ColLabelOrString: SCONST  */
#line 4343 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 30288 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1278: /* ExportStmt: EXPORT_P DATABASE Sconst copy_options  */
#line 8 "third_party/libpg_query/grammar/statements/export.y"
                                {
					PGExportStmt *n = makeNode(PGExportStmt);
					n->database = NULL;
					n->filename = (yyvsp[-1].str);
					n->options = NIL;
					if ((yyvsp[0].list)) {
						n->options = list_concat(n->options, (yyvsp[0].list));
					}
					(yyval.node) = (PGNode *)n;
				}
#line 30303 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1279: /* ExportStmt: EXPORT_P DATABASE ColId TO Sconst copy_options  */
#line 20 "third_party/libpg_query/grammar/statements/export.y"
                                {
					PGExportStmt *n = makeNode(PGExportStmt);
					n->database = (yyvsp[-3].str);
					n->filename = (yyvsp[-1].str);
					n->options = NIL;
					if ((yyvsp[0].list)) {
						n->options = list_concat(n->options, (yyvsp[0].list));
					}
					(yyval.node) = (PGNode *)n;
				}
#line 30318 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1280: /* ImportStmt: IMPORT_P DATABASE Sconst  */
#line 34 "third_party/libpg_query/grammar/statements/export.y"
                                {
					PGImportStmt *n = makeNode(PGImportStmt);
					n->filename = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 30328 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1281: /* PrepareStmt: PREPARE name prep_type_clause AS PreparableStmt  */
#line 8 "third_party/libpg_query/grammar/statements/prepare.y"
                                {
					PGPrepareStmt *n = makeNode(PGPrepareStmt);
					n->name = (yyvsp[-3].str);
					n->argtypes = (yyvsp[-2].list);
					n->query = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 30340 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1282: /* prep_type_clause: '(' type_list ')'  */
#line 18 "third_party/libpg_query/grammar/statements/prepare.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 30346 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1283: /* prep_type_clause: %empty  */
#line 19 "third_party/libpg_query/grammar/statements/prepare.y"
                                                                        { (yyval.list) = NIL; }
#line 30352 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1290: /* VariableResetStmt: RESET reset_rest  */
#line 3 "third_party/libpg_query/grammar/statements/variable_reset.y"
                        {
				(yyvsp[0].vsetstmt)->scope = VAR_SET_SCOPE_DEFAULT;
				(yyval.node) = (PGNode *) (yyvsp[0].vsetstmt);
			}
#line 30361 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1291: /* VariableResetStmt: RESET LOCAL reset_rest  */
#line 8 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					(yyvsp[0].vsetstmt)->scope = VAR_SET_SCOPE_LOCAL;
					(yyval.node) = (PGNode *) (yyvsp[0].vsetstmt);
				}
#line 30370 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1292: /* VariableResetStmt: RESET SESSION reset_rest  */
#line 13 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					(yyvsp[0].vsetstmt)->scope = VAR_SET_SCOPE_SESSION;
					(yyval.node) = (PGNode *) (yyvsp[0].vsetstmt);
				}
#line 30379 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1293: /* VariableResetStmt: RESET GLOBAL reset_rest  */
#line 18 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					(yyvsp[0].vsetstmt)->scope = VAR_SET_SCOPE_GLOBAL;
					(yyval.node) = (PGNode *) (yyvsp[0].vsetstmt);
				}
#line 30388 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1294: /* VariableResetStmt: RESET VARIABLE_P reset_rest  */
#line 23 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					(yyvsp[0].vsetstmt)->scope = VAR_SET_SCOPE_VARIABLE;
					(yyval.node) = (PGNode *) (yyvsp[0].vsetstmt);
				}
#line 30397 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1295: /* generic_reset: var_name  */
#line 32 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (yyvsp[0].str);
					(yyval.vsetstmt) = n;
				}
#line 30408 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1296: /* generic_reset: ALL  */
#line 39 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET_ALL;
					(yyval.vsetstmt) = n;
				}
#line 30418 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1297: /* reset_rest: generic_reset  */
#line 48 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                                                                        { (yyval.vsetstmt) = (yyvsp[0].vsetstmt); }
#line 30424 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1298: /* reset_rest: TIME ZONE  */
#line 50 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (char*) "timezone";
					(yyval.vsetstmt) = n;
				}
#line 30435 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1299: /* reset_rest: TRANSACTION ISOLATION LEVEL  */
#line 57 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (char*) "transaction_isolation";
					(yyval.vsetstmt) = n;
				}
#line 30446 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1300: /* CommentOnStmt: COMMENT ON comment_on_type_any_name qualified_name IS comment_value  */
#line 8 "third_party/libpg_query/grammar/statements/comment_on.y"
                                {
					PGCommentOnStmt *n = makeNode(PGCommentOnStmt);
					n->object_type = (yyvsp[-3].objtype);
					n->name = (yyvsp[-2].range);
					n->value = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 30458 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1301: /* CommentOnStmt: COMMENT ON COLUMN a_expr IS comment_value  */
#line 16 "third_party/libpg_query/grammar/statements/comment_on.y"
                {
                    PGCommentOnStmt *n = makeNode(PGCommentOnStmt);
                    n->object_type = PG_OBJECT_COLUMN;
                    n->column_expr = (yyvsp[-2].node);
                    n->value = (yyvsp[0].node);
                    (yyval.node) = (PGNode *)n;
                }
#line 30470 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1302: /* comment_value: Sconst  */
#line 26 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                { (yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0])); }
#line 30476 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1303: /* comment_value: NULL_P  */
#line 27 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                            { (yyval.node) = makeNullAConst((yylsp[0])); }
#line 30482 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1304: /* comment_on_type_any_name: TABLE  */
#line 30 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TABLE; }
#line 30488 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1305: /* comment_on_type_any_name: SEQUENCE  */
#line 31 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_SEQUENCE; }
#line 30494 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1306: /* comment_on_type_any_name: MODEL  */
#line 32 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_MODEL; }
#line 30500 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1307: /* comment_on_type_any_name: FUNCTION  */
#line 33 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FUNCTION; }
#line 30506 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1308: /* comment_on_type_any_name: MACRO  */
#line 34 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FUNCTION; }
#line 30512 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1309: /* comment_on_type_any_name: MACRO TABLE  */
#line 35 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                { (yyval.objtype) = PG_OBJECT_TABLE_MACRO; }
#line 30518 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1310: /* comment_on_type_any_name: VIEW  */
#line 36 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_VIEW; }
#line 30524 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1311: /* comment_on_type_any_name: DATABASE  */
#line 37 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_DATABASE; }
#line 30530 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1312: /* comment_on_type_any_name: INDEX  */
#line 38 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_INDEX; }
#line 30536 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1313: /* comment_on_type_any_name: SCHEMA  */
#line 39 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_SCHEMA; }
#line 30542 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1314: /* comment_on_type_any_name: TYPE_P  */
#line 40 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TYPE; }
#line 30548 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1315: /* VacuumStmt: VACUUM opt_full opt_freeze opt_verbose  */
#line 9 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-1].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[0].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 30566 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1316: /* VacuumStmt: VACUUM opt_full opt_freeze opt_verbose qualified_name opt_name_list  */
#line 23 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM;
					if ((yyvsp[-4].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-3].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = (yyvsp[-1].range);
					n->va_cols = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 30584 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1317: /* VacuumStmt: VACUUM opt_full opt_freeze opt_verbose AnalyzeStmt  */
#line 37 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = (PGVacuumStmt *) (yyvsp[0].node);
					n->options |= PG_VACOPT_VACUUM;
					if ((yyvsp[-3].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[-1].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					(yyval.node) = (PGNode *)n;
				}
#line 30600 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1318: /* VacuumStmt: VACUUM '(' vacuum_option_list ')'  */
#line 49 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM | (yyvsp[-1].ival);
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *) n;
				}
#line 30612 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1319: /* VacuumStmt: VACUUM '(' vacuum_option_list ')' qualified_name opt_name_list  */
#line 57 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM | (yyvsp[-3].ival);
					n->relation = (yyvsp[-1].range);
					n->va_cols = (yyvsp[0].list);
					if (n->va_cols != NIL)	/* implies analyze */
						n->options |= PG_VACOPT_ANALYZE;
					(yyval.node) = (PGNode *) n;
				}
#line 30626 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1320: /* vacuum_option_elem: analyze_keyword  */
#line 70 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                { (yyval.ival) = PG_VACOPT_ANALYZE; }
#line 30632 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1321: /* vacuum_option_elem: VERBOSE  */
#line 71 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                        { (yyval.ival) = PG_VACOPT_VERBOSE; }
#line 30638 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1322: /* vacuum_option_elem: FREEZE  */
#line 72 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                        { (yyval.ival) = PG_VACOPT_FREEZE; }
#line 30644 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1323: /* vacuum_option_elem: FULL  */
#line 73 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                        { (yyval.ival) = PG_VACOPT_FULL; }
#line 30650 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1324: /* vacuum_option_elem: IDENT  */
#line 75 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					if (strcmp((yyvsp[0].str), "disable_page_skipping") == 0)
						(yyval.ival) = PG_VACOPT_DISABLE_PAGE_SKIPPING;
					else
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
							 errmsg("unrecognized VACUUM option \"%s\"", (yyvsp[0].str)),
									 parser_errposition((yylsp[0]))));
				}
#line 30664 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1325: /* opt_full: FULL  */
#line 87 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                        { (yyval.boolean) = true; }
#line 30670 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1326: /* opt_full: %empty  */
#line 88 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                                { (yyval.boolean) = false; }
#line 30676 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1327: /* vacuum_option_list: vacuum_option_elem  */
#line 93 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                                        { (yyval.ival) = (yyvsp[0].ival); }
#line 30682 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1328: /* vacuum_option_list: vacuum_option_list ',' vacuum_option_elem  */
#line 94 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) | (yyvsp[0].ival); }
#line 30688 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1329: /* opt_freeze: FREEZE  */
#line 98 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                        { (yyval.boolean) = true; }
#line 30694 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1330: /* opt_freeze: %empty  */
#line 99 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                                { (yyval.boolean) = false; }
#line 30700 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1331: /* DropSecretStmt: DROP opt_persist SECRET ColId opt_storage_drop_specifier  */
#line 8 "third_party/libpg_query/grammar/statements/drop_secret.y"
                                {
					PGDropSecretStmt *n = makeNode(PGDropSecretStmt);
					n->persist_type = (yyvsp[-3].str);
					n->secret_name = (yyvsp[-1].str);
					n->secret_storage = (yyvsp[0].str);
					n->missing_ok  = false;
					(yyval.node) = (PGNode *)n;
				}
#line 30713 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1332: /* DropSecretStmt: DROP opt_persist SECRET IF_P EXISTS ColId opt_storage_drop_specifier  */
#line 17 "third_party/libpg_query/grammar/statements/drop_secret.y"
                {
                    PGDropSecretStmt *n = makeNode(PGDropSecretStmt);
                    n->persist_type = (yyvsp[-5].str);
                    n->secret_name = (yyvsp[-1].str);
                    n->secret_storage = (yyvsp[0].str);
                    n->missing_ok  = true;
                    (yyval.node) = (PGNode *)n;
                }
#line 30726 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1333: /* opt_storage_drop_specifier: %empty  */
#line 28 "third_party/libpg_query/grammar/statements/drop_secret.y"
                                                    { (yyval.str) = pstrdup(""); }
#line 30732 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1334: /* opt_storage_drop_specifier: FROM IDENT  */
#line 29 "third_party/libpg_query/grammar/statements/drop_secret.y"
                                                    { (yyval.str) = (yyvsp[0].str); }
#line 30738 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1335: /* AlterTableStmt: ALTER TABLE relation_expr alter_table_cmds  */
#line 10 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_TABLE;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 30751 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1336: /* AlterTableStmt: ALTER TABLE IF_P EXISTS relation_expr alter_table_cmds  */
#line 19 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_TABLE;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 30764 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1337: /* AlterTableStmt: ALTER INDEX qualified_name alter_table_cmds  */
#line 28 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_INDEX;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 30777 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1338: /* AlterTableStmt: ALTER INDEX IF_P EXISTS qualified_name alter_table_cmds  */
#line 37 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_INDEX;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 30790 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1339: /* AlterTableStmt: ALTER SEQUENCE qualified_name alter_table_cmds  */
#line 46 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_SEQUENCE;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 30803 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1340: /* AlterTableStmt: ALTER SEQUENCE IF_P EXISTS qualified_name alter_table_cmds  */
#line 55 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_SEQUENCE;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 30816 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1341: /* AlterTableStmt: ALTER VIEW qualified_name alter_table_cmds  */
#line 64 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_VIEW;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 30829 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1342: /* AlterTableStmt: ALTER VIEW IF_P EXISTS qualified_name alter_table_cmds  */
#line 73 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_VIEW;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 30842 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1343: /* alter_identity_column_option_list: alter_identity_column_option  */
#line 86 "third_party/libpg_query/grammar/statements/alter_table.y"
                                { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 30848 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1344: /* alter_identity_column_option_list: alter_identity_column_option_list alter_identity_column_option  */
#line 88 "third_party/libpg_query/grammar/statements/alter_table.y"
                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 30854 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1345: /* alter_column_default: SET DEFAULT a_expr  */
#line 93 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 30860 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1346: /* alter_column_default: DROP DEFAULT  */
#line 94 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = NULL; }
#line 30866 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1347: /* alter_identity_column_option: RESTART  */
#line 100 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("restart", NULL, (yylsp[0]));
				}
#line 30874 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1348: /* alter_identity_column_option: RESTART opt_with NumericOnly  */
#line 104 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("restart", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 30882 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1349: /* alter_identity_column_option: SET SeqOptElem  */
#line 108 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					if (strcmp((yyvsp[0].defelt)->defname, "as") == 0 ||
						strcmp((yyvsp[0].defelt)->defname, "restart") == 0 ||
						strcmp((yyvsp[0].defelt)->defname, "owned_by") == 0)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("sequence option \"%s\" not supported here", (yyvsp[0].defelt)->defname),
								 parser_errposition((yylsp[0]))));
					(yyval.defelt) = (yyvsp[0].defelt);
				}
#line 30897 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1350: /* alter_identity_column_option: SET GENERATED generated_when  */
#line 119 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("generated", (PGNode *) makeInteger((yyvsp[0].ival)), (yylsp[-2]));
				}
#line 30905 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1351: /* alter_generic_option_list: alter_generic_option_elem  */
#line 127 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 30913 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1352: /* alter_generic_option_list: alter_generic_option_list ',' alter_generic_option_elem  */
#line 131 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 30921 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1353: /* qualify_list: qualify_el  */
#line 138 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].str)); }
#line 30927 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1354: /* qualify_list: qualify_list qualify_el  */
#line 139 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].str)); }
#line 30933 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1355: /* qualify_el: '.' attr_name  */
#line 144 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.str) = (yyvsp[0].str);
				}
#line 30941 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1356: /* qualified_column: ColId  */
#line 150 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].str)); }
#line 30947 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1357: /* qualified_column: ColId qualify_list  */
#line 151 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                        { (yyval.list) = list_concat(list_make1((yyvsp[-1].str)), (yyvsp[0].list)); }
#line 30953 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1358: /* qualifiedColumnDef: qualified_column regularColumnDef  */
#line 157 "third_party/libpg_query/grammar/statements/alter_table.y"
                        {
					PGColumnDef *n = (PGColumnDef *) (yyvsp[0].node);
					n->location = (yylsp[-1]);
					(yyval.list) = list_make2((yyvsp[-1].list), n);
			}
#line 30963 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1359: /* qualifiedColumnDef: qualified_column generatedColumnDef  */
#line 164 "third_party/libpg_query/grammar/statements/alter_table.y"
                        {
					PGColumnDef *n = (PGColumnDef *) (yyvsp[0].node);
					n->location = (yylsp[-1]);
					(yyval.list) = list_make2((yyvsp[-1].list), n);
			}
#line 30973 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1360: /* alter_table_cmd: ADD_P qualifiedColumnDef  */
#line 174 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def_list = (yyvsp[0].list);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 30985 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1361: /* alter_table_cmd: ADD_P IF_P NOT EXISTS qualifiedColumnDef  */
#line 183 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def_list = (yyvsp[0].list);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 30997 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1362: /* alter_table_cmd: ADD_P COLUMN qualifiedColumnDef  */
#line 192 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def_list = (yyvsp[0].list);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 31009 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1363: /* alter_table_cmd: ADD_P COLUMN IF_P NOT EXISTS qualifiedColumnDef  */
#line 201 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def_list = (yyvsp[0].list);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 31021 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1364: /* alter_table_cmd: SET PARTITIONED BY '(' expr_list_opt_comma ')'  */
#line 210 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetPartitionedBy;
					n->def_list = (yyvsp[-1].list);
					(yyval.node) = (PGNode *)n;
				}
#line 31032 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1365: /* alter_table_cmd: RESET PARTITIONED BY  */
#line 218 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetPartitionedBy;
					n->def_list = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 31043 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1366: /* alter_table_cmd: SET SORTED BY '(' sortby_list ')'  */
#line 226 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetSortedBy;
					n->def_list = (yyvsp[-1].list);
					(yyval.node) = (PGNode *)n;
				}
#line 31054 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1367: /* alter_table_cmd: RESET SORTED BY  */
#line 234 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetSortedBy;
					n->def_list = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 31065 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1368: /* alter_table_cmd: ALTER opt_column ColId alter_column_default  */
#line 242 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ColumnDefault;
					n->name = (yyvsp[-1].str);
					n->def = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 31077 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1369: /* alter_table_cmd: ALTER opt_column ColId DROP NOT NULL_P  */
#line 251 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropNotNull;
					n->name = (yyvsp[-3].str);
					(yyval.node) = (PGNode *)n;
				}
#line 31088 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1370: /* alter_table_cmd: ALTER opt_column ColId SET NOT NULL_P  */
#line 259 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetNotNull;
					n->name = (yyvsp[-3].str);
					(yyval.node) = (PGNode *)n;
				}
#line 31099 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1371: /* alter_table_cmd: ALTER opt_column ColId SET STATISTICS SignedIconst  */
#line 267 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetStatistics;
					n->name = (yyvsp[-3].str);
					n->def = (PGNode *) makeInteger((yyvsp[0].ival));
					(yyval.node) = (PGNode *)n;
				}
#line 31111 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1372: /* alter_table_cmd: ALTER opt_column ColId SET reloptions  */
#line 276 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetOptions;
					n->name = (yyvsp[-2].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 31123 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1373: /* alter_table_cmd: ALTER opt_column ColId RESET reloptions  */
#line 285 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ResetOptions;
					n->name = (yyvsp[-2].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 31135 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1374: /* alter_table_cmd: ALTER opt_column ColId SET STORAGE ColId  */
#line 294 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetStorage;
					n->name = (yyvsp[-3].str);
					n->def = (PGNode *) makeString((yyvsp[0].str));
					(yyval.node) = (PGNode *)n;
				}
#line 31147 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1375: /* alter_table_cmd: ALTER opt_column ColId ADD_P GENERATED generated_when AS IDENTITY_P OptParenthesizedSeqOptList  */
#line 303 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGConstraint *c = makeNode(PGConstraint);

					c->contype = PG_CONSTR_IDENTITY;
					c->generated_when = (yyvsp[-3].ival);
					c->options = (yyvsp[0].list);
					c->location = (yylsp[-4]);

					n->subtype = PG_AT_AddIdentity;
					n->name = (yyvsp[-6].str);
					n->def = (PGNode *) c;

					(yyval.node) = (PGNode *)n;
				}
#line 31167 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1376: /* alter_table_cmd: ALTER opt_column ColId alter_identity_column_option_list  */
#line 320 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetIdentity;
					n->name = (yyvsp[-1].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 31179 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1377: /* alter_table_cmd: ALTER opt_column ColId DROP IDENTITY_P  */
#line 329 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = AT_DropIdentity;
					n->name = (yyvsp[-2].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 31191 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1378: /* alter_table_cmd: ALTER opt_column ColId DROP IDENTITY_P IF_P EXISTS  */
#line 338 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = AT_DropIdentity;
					n->name = (yyvsp[-4].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 31203 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1379: /* alter_table_cmd: DROP opt_column IF_P EXISTS qualified_column opt_drop_behavior  */
#line 347 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropColumn;
					n->def_list = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 31216 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1380: /* alter_table_cmd: DROP opt_column qualified_column opt_drop_behavior  */
#line 357 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropColumn;
					n->def_list = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 31229 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1381: /* alter_table_cmd: ALTER opt_column ColId opt_set_data TYPE_P opt_Typename opt_collate_clause alter_using  */
#line 370 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGColumnDef *def = makeNode(PGColumnDef);
					n->subtype = PG_AT_AlterColumnType;
					n->name = (yyvsp[-5].str);
					n->def = (PGNode *) def;
					/* We only use these fields of the PGColumnDef node */
					def->typeName = (yyvsp[-2].typnam);
					def->collClause = (PGCollateClause *) (yyvsp[-1].node);
					def->raw_default = (yyvsp[0].node);
					def->location = (yylsp[-5]);
					(yyval.node) = (PGNode *)n;
				}
#line 31247 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1382: /* alter_table_cmd: ALTER opt_column ColId alter_generic_options  */
#line 385 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AlterColumnGenericOptions;
					n->name = (yyvsp[-1].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 31259 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1383: /* alter_table_cmd: ADD_P TableConstraint  */
#line 394 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddConstraint;
					n->def = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 31270 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1384: /* alter_table_cmd: ALTER CONSTRAINT name ConstraintAttributeSpec  */
#line 402 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGConstraint *c = makeNode(PGConstraint);
					n->subtype = PG_AT_AlterConstraint;
					n->def = (PGNode *) c;
					c->contype = PG_CONSTR_FOREIGN; /* others not supported, yet */
					c->conname = (yyvsp[-1].str);
					processCASbits((yyvsp[0].ival), (yylsp[0]), "ALTER CONSTRAINT statement",
									&c->deferrable,
									&c->initdeferred,
									NULL, NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 31288 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1385: /* alter_table_cmd: VALIDATE CONSTRAINT name  */
#line 417 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ValidateConstraint;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 31299 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1386: /* alter_table_cmd: DROP CONSTRAINT IF_P EXISTS name opt_drop_behavior  */
#line 425 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropConstraint;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 31312 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1387: /* alter_table_cmd: DROP CONSTRAINT name opt_drop_behavior  */
#line 435 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropConstraint;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 31325 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1388: /* alter_table_cmd: SET LOGGED  */
#line 445 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetLogged;
					(yyval.node) = (PGNode *)n;
				}
#line 31335 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1389: /* alter_table_cmd: SET UNLOGGED  */
#line 452 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetUnLogged;
					(yyval.node) = (PGNode *)n;
				}
#line 31345 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1390: /* alter_table_cmd: SET reloptions  */
#line 459 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetRelOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 31356 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1391: /* alter_table_cmd: RESET reloptions  */
#line 467 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ResetRelOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 31367 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1392: /* alter_table_cmd: alter_generic_options  */
#line 474 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_GenericOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *) n;
				}
#line 31378 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1393: /* alter_using: USING a_expr  */
#line 484 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 31384 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1394: /* alter_using: %empty  */
#line 485 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = NULL; }
#line 31390 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1395: /* alter_generic_option_elem: generic_option_elem  */
#line 491 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
				}
#line 31398 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1396: /* alter_generic_option_elem: SET generic_option_elem  */
#line 495 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
					(yyval.defelt)->defaction = PG_DEFELEM_SET;
				}
#line 31407 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1397: /* alter_generic_option_elem: ADD_P generic_option_elem  */
#line 500 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
					(yyval.defelt)->defaction = PG_DEFELEM_ADD;
				}
#line 31416 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1398: /* alter_generic_option_elem: DROP generic_option_name  */
#line 505 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElemExtended(NULL, (yyvsp[0].str), NULL, DEFELEM_DROP, (yylsp[0]));
				}
#line 31424 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1399: /* alter_table_cmds: alter_table_cmd  */
#line 512 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 31430 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1400: /* alter_table_cmds: alter_table_cmds ',' alter_table_cmd  */
#line 513 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 31436 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1401: /* alter_generic_options: OPTIONS '(' alter_generic_option_list ')'  */
#line 518 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 31442 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1402: /* opt_set_data: SET DATA_P  */
#line 522 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                { (yyval.ival) = 1; }
#line 31448 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1403: /* opt_set_data: SET  */
#line 523 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                                { (yyval.ival) = 0; }
#line 31454 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1404: /* opt_set_data: %empty  */
#line 524 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                                { (yyval.ival) = 0; }
#line 31460 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1405: /* PragmaStmt: PRAGMA_P ColId  */
#line 8 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_NOTHING;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 31471 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1406: /* PragmaStmt: PRAGMA_P ColId '=' var_list  */
#line 15 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_ASSIGNMENT;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 31483 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1407: /* PragmaStmt: PRAGMA_P ColId '(' func_arg_list ')'  */
#line 23 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_CALL;
					n->name = (yyvsp[-3].str);
					n->args = (yyvsp[-1].list);
					(yyval.node) = (PGNode *)n;
				}
#line 31495 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1408: /* CopyStmt: COPY opt_binary qualified_name opt_column_list opt_oids copy_from opt_program copy_file_name copy_delimiter opt_with copy_options  */
#line 3 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					PGCopyStmt *n = makeNode(PGCopyStmt);
					n->relation = (yyvsp[-8].range);
					n->query = NULL;
					n->attlist = (yyvsp[-7].list);
					n->is_from = (yyvsp[-5].boolean);
					n->is_program = (yyvsp[-4].boolean);
					n->filename = (yyvsp[-3].str);

					if (n->is_program && n->filename == NULL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("STDIN/STDOUT not allowed with PROGRAM"),
								 parser_errposition((yylsp[-3]))));

					n->options = NIL;
					/* Concatenate user-supplied flags */
					if ((yyvsp[-9].defelt))
						n->options = lappend(n->options, (yyvsp[-9].defelt));
					if ((yyvsp[-6].defelt))
						n->options = lappend(n->options, (yyvsp[-6].defelt));
					if ((yyvsp[-2].defelt))
						n->options = lappend(n->options, (yyvsp[-2].defelt));
					if ((yyvsp[0].list))
						n->options = list_concat(n->options, (yyvsp[0].list));
					(yyval.node) = (PGNode *)n;
				}
#line 31527 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1409: /* CopyStmt: COPY '(' SelectStmt ')' TO opt_program copy_file_name opt_with copy_options  */
#line 31 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					PGCopyStmt *n = makeNode(PGCopyStmt);
					n->relation = NULL;
					n->query = (yyvsp[-6].node);
					n->attlist = NIL;
					n->is_from = false;
					n->is_program = (yyvsp[-3].boolean);
					n->filename = (yyvsp[-2].str);
					n->options = (yyvsp[0].list);

					if (n->is_program && n->filename == NULL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("STDIN/STDOUT not allowed with PROGRAM"),
								 parser_errposition((yylsp[-4]))));

					(yyval.node) = (PGNode *)n;
				}
#line 31550 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1410: /* CopyStmt: COPY FROM DATABASE ColId TO ColId copy_database_flag  */
#line 50 "third_party/libpg_query/grammar/statements/copy.y"
                {
				PGCopyDatabaseStmt *n = makeNode(PGCopyDatabaseStmt);
				n->from_database = (yyvsp[-3].str);
				n->to_database = (yyvsp[-1].str);
				n->copy_database_flag = (yyvsp[0].conststr);
				(yyval.node) = (PGNode *)n;
			}
#line 31562 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1411: /* copy_database_flag: %empty  */
#line 61 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                        { (yyval.conststr) = NULL; }
#line 31568 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1412: /* copy_database_flag: '(' SCHEMA ')'  */
#line 62 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.conststr) = "schema"; }
#line 31574 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1413: /* copy_database_flag: '(' DATA_P ')'  */
#line 63 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.conststr) = "data"; }
#line 31580 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1414: /* copy_from: FROM  */
#line 67 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = true; }
#line 31586 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1415: /* copy_from: TO  */
#line 68 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = false; }
#line 31592 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1416: /* copy_delimiter: opt_using DELIMITERS Sconst  */
#line 74 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("delimiter", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-1]));
				}
#line 31600 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1417: /* copy_delimiter: %empty  */
#line 77 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 31606 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1418: /* copy_generic_opt_arg_list: copy_generic_opt_arg_list_item  */
#line 83 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 31614 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1419: /* copy_generic_opt_arg_list: copy_generic_opt_arg_list ',' copy_generic_opt_arg_list_item  */
#line 87 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 31622 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1420: /* opt_using: USING  */
#line 94 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 31628 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1421: /* opt_using: %empty  */
#line 95 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 31634 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1422: /* opt_as: AS  */
#line 99 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 31640 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1423: /* opt_as: %empty  */
#line 100 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        {}
#line 31646 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1424: /* opt_program: PROGRAM  */
#line 105 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = true; }
#line 31652 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1425: /* opt_program: %empty  */
#line 106 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        { (yyval.boolean) = false; }
#line 31658 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1426: /* copy_options: copy_opt_list  */
#line 110 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 31664 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1427: /* copy_options: '(' copy_generic_opt_list ')'  */
#line 111 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 31670 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1428: /* copy_generic_opt_arg: opt_boolean_or_string  */
#line 116 "third_party/libpg_query/grammar/statements/copy.y"
                                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 31676 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1429: /* copy_generic_opt_arg: NumericOnly  */
#line 117 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = (PGNode *) (yyvsp[0].value); }
#line 31682 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1430: /* copy_generic_opt_arg: list_expr  */
#line 118 "third_party/libpg_query/grammar/statements/copy.y"
                                                        { (yyval.node) = (PGNode *) (yyvsp[0].node); }
#line 31688 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1431: /* copy_generic_opt_arg: '*'  */
#line 119 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.node) = (PGNode *) makeNode(PGAStar); }
#line 31694 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1432: /* copy_generic_opt_arg: '(' copy_generic_opt_arg_list ')'  */
#line 120 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = (PGNode *) (yyvsp[-1].list); }
#line 31700 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1433: /* copy_generic_opt_arg: struct_expr  */
#line 121 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = (PGNode *) (yyvsp[0].node); }
#line 31706 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1434: /* copy_generic_opt_arg: map_expr  */
#line 122 "third_party/libpg_query/grammar/statements/copy.y"
                                                                            { (yyval.node) = (PGNode *) (yyvsp[0].node); }
#line 31712 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1435: /* copy_generic_opt_arg: %empty  */
#line 123 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = NULL; }
#line 31718 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1436: /* copy_generic_opt_elem: ColLabel copy_generic_opt_arg  */
#line 129 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 31726 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1437: /* opt_oids: WITH OIDS  */
#line 137 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("oids", (PGNode *)makeInteger(true), (yylsp[-1]));
				}
#line 31734 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1438: /* opt_oids: %empty  */
#line 140 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 31740 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1439: /* copy_opt_list: copy_opt_list copy_opt_item  */
#line 145 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 31746 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1440: /* copy_opt_list: %empty  */
#line 146 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        { (yyval.list) = NIL; }
#line 31752 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1441: /* opt_binary: BINARY  */
#line 152 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("binary"), (yylsp[0]));
				}
#line 31760 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1442: /* opt_binary: %empty  */
#line 155 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 31766 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1443: /* copy_opt_item: BINARY  */
#line 161 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("binary"), (yylsp[0]));
				}
#line 31774 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1444: /* copy_opt_item: OIDS  */
#line 165 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("oids", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 31782 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1445: /* copy_opt_item: FREEZE  */
#line 169 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("freeze", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 31790 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1446: /* copy_opt_item: DELIMITER opt_as Sconst  */
#line 173 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("delimiter", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 31798 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1447: /* copy_opt_item: NULL_P opt_as Sconst  */
#line 177 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("null", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 31806 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1448: /* copy_opt_item: CSV  */
#line 181 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("csv"), (yylsp[0]));
				}
#line 31814 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1449: /* copy_opt_item: HEADER_P  */
#line 185 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("header", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 31822 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1450: /* copy_opt_item: QUOTE opt_as Sconst  */
#line 189 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("quote", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 31830 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1451: /* copy_opt_item: ESCAPE opt_as Sconst  */
#line 193 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("escape", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 31838 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1452: /* copy_opt_item: FORCE QUOTE columnList  */
#line 197 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_quote", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 31846 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1453: /* copy_opt_item: FORCE QUOTE '*'  */
#line 201 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_quote", (PGNode *)makeNode(PGAStar), (yylsp[-2]));
				}
#line 31854 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1454: /* copy_opt_item: PARTITION BY columnList  */
#line 205 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("partition_by", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 31862 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1455: /* copy_opt_item: PARTITION BY '*'  */
#line 209 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("partition_by", (PGNode *)makeNode(PGAStar), (yylsp[-2]));
				}
#line 31870 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1456: /* copy_opt_item: FORCE NOT NULL_P columnList  */
#line 213 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_not_null", (PGNode *)(yyvsp[0].list), (yylsp[-3]));
				}
#line 31878 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1457: /* copy_opt_item: FORCE NULL_P columnList  */
#line 217 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_null", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 31886 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1458: /* copy_opt_item: ENCODING Sconst  */
#line 221 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("encoding", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-1]));
				}
#line 31894 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1459: /* copy_generic_opt_arg_list_item: opt_boolean_or_string  */
#line 228 "third_party/libpg_query/grammar/statements/copy.y"
                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 31900 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1460: /* copy_file_name: Sconst  */
#line 233 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 31906 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1461: /* copy_file_name: STDIN  */
#line 234 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = NULL; }
#line 31912 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1462: /* copy_file_name: STDOUT  */
#line 235 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = NULL; }
#line 31918 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1463: /* copy_file_name: IDENT '.' ColId  */
#line 236 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        { (yyval.str) = psprintf("%s.%s", (yyvsp[-2].str), (yyvsp[0].str)); }
#line 31924 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1464: /* copy_file_name: IDENT  */
#line 237 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 31930 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1465: /* copy_generic_opt_list: copy_generic_opt_elem  */
#line 244 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 31938 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1466: /* copy_generic_opt_list: copy_generic_opt_list ',' copy_generic_opt_elem  */
#line 248 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 31946 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1467: /* LoadStmt: LOAD file_name  */
#line 8 "third_party/libpg_query/grammar/statements/load.y"
                                {
					PGLoadStmt *n = makeNode(PGLoadStmt);
					n->filename = (yyvsp[0].str);
					n->repository = NULL;
					n->repo_is_alias = false;
					n->version = NULL;
					n->load_type = PG_LOAD_TYPE_LOAD;
					(yyval.node) = (PGNode *)n;
				}
#line 31960 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1468: /* LoadStmt: opt_force INSTALL file_name opt_ext_version  */
#line 17 "third_party/libpg_query/grammar/statements/load.y"
                                                                            {
                    PGLoadStmt *n = makeNode(PGLoadStmt);
                    n->filename = (yyvsp[-1].str);
                    n->repository = NULL;
                    n->repo_is_alias = false;
                    n->version = (yyvsp[0].str);
                    n->load_type = (yyvsp[-3].loadinstalltype);
                    (yyval.node) = (PGNode *)n;
				}
#line 31974 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1469: /* LoadStmt: opt_force INSTALL file_name FROM ColId opt_ext_version  */
#line 26 "third_party/libpg_query/grammar/statements/load.y"
                                                                                       {
                    PGLoadStmt *n = makeNode(PGLoadStmt);
                    n->repository = (yyvsp[-1].str);
                    n->repo_is_alias = true;
                    n->filename = (yyvsp[-3].str);
                    n->version = (yyvsp[0].str);
                    n->load_type = (yyvsp[-5].loadinstalltype);
                    (yyval.node) = (PGNode *)n;
				}
#line 31988 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1470: /* LoadStmt: opt_force INSTALL file_name FROM Sconst opt_ext_version  */
#line 35 "third_party/libpg_query/grammar/statements/load.y"
                                                                                        {
                    PGLoadStmt *n = makeNode(PGLoadStmt);
                    n->filename = (yyvsp[-3].str);
                    n->repository = (yyvsp[-1].str);
                    n->repo_is_alias = false;
                    n->version = (yyvsp[0].str);
                    n->load_type = (yyvsp[-5].loadinstalltype);
                    (yyval.node) = (PGNode *)n;
				}
#line 32002 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1471: /* opt_force: %empty  */
#line 46 "third_party/libpg_query/grammar/statements/load.y"
                                                                                { (yyval.loadinstalltype) = PG_LOAD_TYPE_INSTALL; }
#line 32008 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1472: /* opt_force: FORCE  */
#line 47 "third_party/libpg_query/grammar/statements/load.y"
                                                { (yyval.loadinstalltype) = PG_LOAD_TYPE_FORCE_INSTALL; }
#line 32014 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1473: /* file_name: Sconst  */
#line 49 "third_party/libpg_query/grammar/statements/load.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 32020 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1474: /* file_name: ColId  */
#line 50 "third_party/libpg_query/grammar/statements/load.y"
                                                { (yyval.str) = (yyvsp[0].str); }
#line 32026 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1475: /* opt_ext_version: %empty  */
#line 53 "third_party/libpg_query/grammar/statements/load.y"
                                                { (yyval.str) = NULL; }
#line 32032 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1476: /* opt_ext_version: VERSION_P Sconst  */
#line 54 "third_party/libpg_query/grammar/statements/load.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 32038 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1477: /* opt_ext_version: VERSION_P ColId  */
#line 55 "third_party/libpg_query/grammar/statements/load.y"
                                                { (yyval.str) = (yyvsp[0].str); }
#line 32044 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1478: /* UpdateStmt: opt_with_clause UPDATE relation_expr_opt_alias SET set_clause_list_opt_comma from_clause where_or_current_clause returning_clause  */
#line 12 "third_party/libpg_query/grammar/statements/update.y"
                                {
					PGUpdateStmt *n = makeNode(PGUpdateStmt);
					n->relation = (yyvsp[-5].range);
					n->targetList = (yyvsp[-3].list);
					n->fromClause = (yyvsp[-2].list);
					n->whereClause = (yyvsp[-1].node);
					n->returningList = (yyvsp[0].list);
					n->withClause = (yyvsp[-7].with);
					(yyval.node) = (PGNode *)n;
				}
#line 32059 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1479: /* ViewStmt: CREATE_P OptTemp VIEW qualified_name opt_column_list opt_reloptions AS SelectStmt opt_check_option  */
#line 10 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-5].range);
					n->view->relpersistence = (yyvsp[-7].ival);
					n->aliases = (yyvsp[-4].list);
					n->query = (yyvsp[-1].node);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				}
#line 32075 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1480: /* ViewStmt: CREATE_P OptTemp VIEW IF_P NOT EXISTS qualified_name opt_column_list opt_reloptions AS SelectStmt opt_check_option  */
#line 23 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-5].range);
					n->view->relpersistence = (yyvsp[-10].ival);
					n->aliases = (yyvsp[-4].list);
					n->query = (yyvsp[-1].node);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				}
#line 32091 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1481: /* ViewStmt: CREATE_P OR REPLACE OptTemp VIEW qualified_name opt_column_list opt_reloptions AS SelectStmt opt_check_option  */
#line 36 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-5].range);
					n->view->relpersistence = (yyvsp[-7].ival);
					n->aliases = (yyvsp[-4].list);
					n->query = (yyvsp[-1].node);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				}
#line 32107 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1482: /* ViewStmt: CREATE_P OptTemp RECURSIVE VIEW qualified_name '(' columnList ')' opt_reloptions AS SelectStmt opt_check_option  */
#line 49 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-7].range);
					n->view->relpersistence = (yyvsp[-10].ival);
					n->aliases = (yyvsp[-5].list);
					n->query = makeRecursiveViewSelect(n->view->relname, n->aliases, (yyvsp[-1].node));
					n->onconflict = PG_ERROR_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					if (n->withCheckOption != PG_NO_CHECK_OPTION)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("WITH CHECK OPTION not supported on recursive views"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) n;
				}
#line 32128 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1483: /* ViewStmt: CREATE_P OR REPLACE OptTemp RECURSIVE VIEW qualified_name '(' columnList ')' opt_reloptions AS SelectStmt opt_check_option  */
#line 67 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-7].range);
					n->view->relpersistence = (yyvsp[-10].ival);
					n->aliases = (yyvsp[-5].list);
					n->query = makeRecursiveViewSelect(n->view->relname, n->aliases, (yyvsp[-1].node));
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					if (n->withCheckOption != PG_NO_CHECK_OPTION)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("WITH CHECK OPTION not supported on recursive views"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) n;
				}
#line 32149 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1484: /* opt_check_option: WITH CHECK_P OPTION  */
#line 87 "third_party/libpg_query/grammar/statements/view.y"
                                                                { (yyval.viewcheckoption) = CASCADED_CHECK_OPTION; }
#line 32155 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1485: /* opt_check_option: WITH CASCADED CHECK_P OPTION  */
#line 88 "third_party/libpg_query/grammar/statements/view.y"
                                                { (yyval.viewcheckoption) = CASCADED_CHECK_OPTION; }
#line 32161 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1486: /* opt_check_option: WITH LOCAL CHECK_P OPTION  */
#line 89 "third_party/libpg_query/grammar/statements/view.y"
                                                        { (yyval.viewcheckoption) = PG_LOCAL_CHECK_OPTION; }
#line 32167 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1487: /* opt_check_option: %empty  */
#line 90 "third_party/libpg_query/grammar/statements/view.y"
                                                                { (yyval.viewcheckoption) = PG_NO_CHECK_OPTION; }
#line 32173 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1488: /* AlterSeqStmt: ALTER SEQUENCE qualified_name SeqOptList  */
#line 10 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					PGAlterSeqStmt *n = makeNode(PGAlterSeqStmt);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 32185 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1489: /* AlterSeqStmt: ALTER SEQUENCE IF_P EXISTS qualified_name SeqOptList  */
#line 18 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					PGAlterSeqStmt *n = makeNode(PGAlterSeqStmt);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 32197 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1490: /* SeqOptList: SeqOptElem  */
#line 29 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 32203 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1491: /* SeqOptList: SeqOptList SeqOptElem  */
#line 30 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 32209 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1492: /* opt_with: WITH  */
#line 34 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        {}
#line 32215 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1493: /* opt_with: WITH_LA  */
#line 35 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                                {}
#line 32221 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1494: /* opt_with: %empty  */
#line 36 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                                {}
#line 32227 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1495: /* NumericOnly: FCONST  */
#line 41 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.value) = makeFloat((yyvsp[0].str)); }
#line 32233 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1496: /* NumericOnly: '+' FCONST  */
#line 42 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.value) = makeFloat((yyvsp[0].str)); }
#line 32239 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1497: /* NumericOnly: '-' FCONST  */
#line 44 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.value) = makeFloat((yyvsp[0].str));
					doNegateFloat((yyval.value));
				}
#line 32248 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1498: /* NumericOnly: SignedIconst  */
#line 48 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.value) = makeInteger((yyvsp[0].ival)); }
#line 32254 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1499: /* SeqOptElem: AS SimpleTypename  */
#line 53 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("as", (PGNode *)(yyvsp[0].typnam), (yylsp[-1]));
				}
#line 32262 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1500: /* SeqOptElem: CACHE NumericOnly  */
#line 57 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cache", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 32270 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1501: /* SeqOptElem: CYCLE  */
#line 61 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cycle", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 32278 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1502: /* SeqOptElem: NO CYCLE  */
#line 65 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cycle", (PGNode *)makeInteger(false), (yylsp[-1]));
				}
#line 32286 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1503: /* SeqOptElem: INCREMENT opt_by NumericOnly  */
#line 69 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("increment", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 32294 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1504: /* SeqOptElem: MAXVALUE NumericOnly  */
#line 73 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("maxvalue", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 32302 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1505: /* SeqOptElem: MINVALUE NumericOnly  */
#line 77 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("minvalue", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 32310 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1506: /* SeqOptElem: NO MAXVALUE  */
#line 81 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("maxvalue", NULL, (yylsp[-1]));
				}
#line 32318 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1507: /* SeqOptElem: NO MINVALUE  */
#line 85 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("minvalue", NULL, (yylsp[-1]));
				}
#line 32326 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1508: /* SeqOptElem: OWNED BY any_name  */
#line 89 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("owned_by", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 32334 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1509: /* SeqOptElem: SEQUENCE NAME_P any_name  */
#line 93 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					/* not documented, only used by pg_dump */
					(yyval.defelt) = makeDefElem("sequence_name", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 32343 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1510: /* SeqOptElem: START opt_with NumericOnly  */
#line 98 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("start", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 32351 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1511: /* SeqOptElem: RESTART  */
#line 102 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("restart", NULL, (yylsp[0]));
				}
#line 32359 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1512: /* SeqOptElem: RESTART opt_with NumericOnly  */
#line 106 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("restart", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 32367 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1513: /* opt_by: BY  */
#line 112 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                {}
#line 32373 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1514: /* opt_by: %empty  */
#line 113 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                        {}
#line 32379 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1515: /* SignedIconst: Iconst  */
#line 117 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 32385 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1516: /* SignedIconst: '+' Iconst  */
#line 118 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.ival) = + (yyvsp[0].ival); }
#line 32391 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1517: /* SignedIconst: '-' Iconst  */
#line 119 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.ival) = - (yyvsp[0].ival); }
#line 32397 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1518: /* UseStmt: USE_P qualified_name  */
#line 3 "third_party/libpg_query/grammar/statements/use.y"
                                {
					PGUseStmt *n = makeNode(PGUseStmt);
					n->name = (yyvsp[0].range);
					(yyval.node) = (PGNode *) n;
				}
#line 32407 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1519: /* CheckPointStmt: FORCE CHECKPOINT opt_col_id  */
#line 6 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                {
					PGCheckPointStmt *n = makeNode(PGCheckPointStmt);
					n->force = true;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 32418 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1520: /* CheckPointStmt: CHECKPOINT opt_col_id  */
#line 13 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                {
					PGCheckPointStmt *n = makeNode(PGCheckPointStmt);
					n->force = false;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 32429 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1521: /* opt_col_id: ColId  */
#line 22 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                                        { (yyval.str) = (yyvsp[0].str); }
#line 32435 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1522: /* opt_col_id: %empty  */
#line 23 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                                { (yyval.str) = NULL; }
#line 32441 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1523: /* CreateAsStmt: CREATE_P OptTemp TABLE create_as_target AS SelectStmt opt_with_data  */
#line 12 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_ERROR_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-5].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 32458 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1524: /* CreateAsStmt: CREATE_P OptTemp TABLE IF_P NOT EXISTS create_as_target AS SelectStmt opt_with_data  */
#line 25 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_IGNORE_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-8].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 32475 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1525: /* CreateAsStmt: CREATE_P OR REPLACE OptTemp TABLE create_as_target AS SelectStmt opt_with_data  */
#line 38 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_REPLACE_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-5].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 32492 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1526: /* opt_with_data: WITH DATA_P  */
#line 54 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                                { (yyval.boolean) = true; }
#line 32498 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1527: /* opt_with_data: WITH NO DATA_P  */
#line 55 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                        { (yyval.boolean) = false; }
#line 32504 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1528: /* opt_with_data: %empty  */
#line 56 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                                { (yyval.boolean) = true; }
#line 32510 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1529: /* create_as_target: qualified_name opt_column_list OptWith OnCommitOption  */
#line 62 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					(yyval.into) = makeNode(PGIntoClause);
					(yyval.into)->rel = (yyvsp[-3].range);
					(yyval.into)->colNames = (yyvsp[-2].list);
					(yyval.into)->options = (yyvsp[-1].list);
					(yyval.into)->onCommit = (yyvsp[0].oncommit);
					(yyval.into)->viewQuery = NULL;
					(yyval.into)->skipData = false;		/* might get changed later */
				}
#line 32524 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1530: /* CreateSecretStmt: CREATE_P opt_persist SECRET opt_secret_name opt_storage_specifier '(' create_secret_generic_opt_list ')'  */
#line 8 "third_party/libpg_query/grammar/statements/create_secret.y"
                                {
					PGCreateSecretStmt *n = makeNode(PGCreateSecretStmt);
					n->persist_type = (yyvsp[-6].str);
					n->secret_name = (yyvsp[-4].str);
					n->secret_storage = (yyvsp[-3].str);
					n->options = (yyvsp[-1].list);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 32538 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1531: /* CreateSecretStmt: CREATE_P opt_persist SECRET IF_P NOT EXISTS opt_secret_name opt_storage_specifier '(' create_secret_generic_opt_list ')'  */
#line 18 "third_party/libpg_query/grammar/statements/create_secret.y"
                                {
					PGCreateSecretStmt *n = makeNode(PGCreateSecretStmt);
					n->persist_type = (yyvsp[-9].str);
					n->secret_name = (yyvsp[-4].str);
					n->secret_storage = (yyvsp[-3].str);
					n->options = (yyvsp[-1].list);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 32552 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1532: /* CreateSecretStmt: CREATE_P OR REPLACE opt_persist SECRET opt_secret_name opt_storage_specifier '(' create_secret_generic_opt_list ')'  */
#line 28 "third_party/libpg_query/grammar/statements/create_secret.y"
                                {
					PGCreateSecretStmt *n = makeNode(PGCreateSecretStmt);
					n->persist_type = (yyvsp[-6].str);
					n->secret_name = (yyvsp[-4].str);
					n->secret_storage = (yyvsp[-3].str);
					n->options = (yyvsp[-1].list);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 32566 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1533: /* opt_secret_name: %empty  */
#line 40 "third_party/libpg_query/grammar/statements/create_secret.y"
                    { (yyval.str) = NULL; }
#line 32572 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1534: /* opt_secret_name: ColId  */
#line 41 "third_party/libpg_query/grammar/statements/create_secret.y"
                { (yyval.str) = (yyvsp[0].str); }
#line 32578 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1535: /* opt_persist: %empty  */
#line 45 "third_party/libpg_query/grammar/statements/create_secret.y"
                                                    { (yyval.str) = pstrdup("default"); }
#line 32584 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1536: /* opt_persist: TEMPORARY  */
#line 46 "third_party/libpg_query/grammar/statements/create_secret.y"
                                                    { (yyval.str) = pstrdup("temporary"); }
#line 32590 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1537: /* opt_persist: PERSISTENT  */
#line 47 "third_party/libpg_query/grammar/statements/create_secret.y"
                                                    { (yyval.str) = pstrdup("persistent"); }
#line 32596 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1538: /* opt_storage_specifier: %empty  */
#line 51 "third_party/libpg_query/grammar/statements/create_secret.y"
                                                    { (yyval.str) = pstrdup(""); }
#line 32602 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1539: /* opt_storage_specifier: IN_P IDENT  */
#line 52 "third_party/libpg_query/grammar/statements/create_secret.y"
                                                    { (yyval.str) = (yyvsp[0].str); }
#line 32608 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1540: /* create_secret_generic_opt_arg: a_expr  */
#line 57 "third_party/libpg_query/grammar/statements/create_secret.y"
                                                { (yyval.node) = (PGNode *) (yyvsp[0].node); }
#line 32614 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1541: /* create_secret_generic_opt_elem: ColLabel create_secret_generic_opt_arg  */
#line 62 "third_party/libpg_query/grammar/statements/create_secret.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 32622 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1542: /* create_secret_generic_opt_list: create_secret_generic_opt_elem  */
#line 69 "third_party/libpg_query/grammar/statements/create_secret.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 32630 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1543: /* create_secret_generic_opt_list: create_secret_generic_opt_list ',' create_secret_generic_opt_elem  */
#line 73 "third_party/libpg_query/grammar/statements/create_secret.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 32638 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1544: /* DropStmt: DROP drop_type_any_name IF_P EXISTS any_name_list opt_drop_behavior  */
#line 10 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->missing_ok = true;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 32652 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1545: /* DropStmt: DROP drop_type_any_name any_name_list opt_drop_behavior  */
#line 20 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-2].objtype);
					n->missing_ok = false;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 32666 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1546: /* DropStmt: DROP drop_type_name IF_P EXISTS name_list opt_drop_behavior  */
#line 30 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->missing_ok = true;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 32680 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1547: /* DropStmt: DROP drop_type_name name_list opt_drop_behavior  */
#line 40 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-2].objtype);
					n->missing_ok = false;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 32694 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1548: /* DropStmt: DROP drop_type_name_on_any_name name ON any_name opt_drop_behavior  */
#line 50 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->objects = list_make1(lappend((yyvsp[-1].list), makeString((yyvsp[-3].str))));
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 32708 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1549: /* DropStmt: DROP drop_type_name_on_any_name IF_P EXISTS name ON any_name opt_drop_behavior  */
#line 60 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-6].objtype);
					n->objects = list_make1(lappend((yyvsp[-1].list), makeString((yyvsp[-3].str))));
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 32722 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1550: /* drop_type_any_name: TABLE  */
#line 73 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TABLE; }
#line 32728 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1551: /* drop_type_any_name: SEQUENCE  */
#line 74 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_SEQUENCE; }
#line 32734 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1552: /* drop_type_any_name: MODEL  */
#line 75 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_MODEL; }
#line 32740 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1553: /* drop_type_any_name: FUNCTION  */
#line 76 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FUNCTION; }
#line 32746 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1554: /* drop_type_any_name: MACRO  */
#line 77 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FUNCTION; }
#line 32752 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1555: /* drop_type_any_name: MACRO TABLE  */
#line 78 "third_party/libpg_query/grammar/statements/drop.y"
                                                                { (yyval.objtype) = PG_OBJECT_TABLE_MACRO; }
#line 32758 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1556: /* drop_type_any_name: VIEW  */
#line 79 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_VIEW; }
#line 32764 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1557: /* drop_type_any_name: MATERIALIZED VIEW  */
#line 80 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_MATVIEW; }
#line 32770 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1558: /* drop_type_any_name: INDEX  */
#line 81 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_INDEX; }
#line 32776 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1559: /* drop_type_any_name: FOREIGN TABLE  */
#line 82 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_FOREIGN_TABLE; }
#line 32782 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1560: /* drop_type_any_name: COLLATION  */
#line 83 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_COLLATION; }
#line 32788 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1561: /* drop_type_any_name: CONVERSION_P  */
#line 84 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_CONVERSION; }
#line 32794 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1562: /* drop_type_any_name: SCHEMA  */
#line 85 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_SCHEMA; }
#line 32800 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1563: /* drop_type_any_name: STATISTICS  */
#line 86 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_STATISTIC_EXT; }
#line 32806 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1564: /* drop_type_any_name: TEXT_P SEARCH PARSER  */
#line 87 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSPARSER; }
#line 32812 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1565: /* drop_type_any_name: TEXT_P SEARCH DICTIONARY  */
#line 88 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSDICTIONARY; }
#line 32818 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1566: /* drop_type_any_name: TEXT_P SEARCH TEMPLATE  */
#line 89 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSTEMPLATE; }
#line 32824 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1567: /* drop_type_any_name: TEXT_P SEARCH CONFIGURATION  */
#line 90 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.objtype) = PG_OBJECT_TSCONFIGURATION; }
#line 32830 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1568: /* drop_type_any_name: TYPE_P  */
#line 91 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TYPE; }
#line 32836 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1569: /* drop_type_name: ACCESS METHOD  */
#line 96 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_ACCESS_METHOD; }
#line 32842 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1570: /* drop_type_name: EVENT TRIGGER  */
#line 97 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_EVENT_TRIGGER; }
#line 32848 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1571: /* drop_type_name: EXTENSION  */
#line 98 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_EXTENSION; }
#line 32854 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1572: /* drop_type_name: FOREIGN DATA_P WRAPPER  */
#line 99 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_FDW; }
#line 32860 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1573: /* drop_type_name: PUBLICATION  */
#line 100 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_PUBLICATION; }
#line 32866 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1574: /* drop_type_name: SERVER  */
#line 101 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FOREIGN_SERVER; }
#line 32872 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1575: /* any_name_list: any_name  */
#line 106 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 32878 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1576: /* any_name_list: any_name_list ',' any_name  */
#line 107 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 32884 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1577: /* opt_drop_behavior: CASCADE  */
#line 112 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.dbehavior) = PG_DROP_CASCADE; }
#line 32890 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1578: /* opt_drop_behavior: RESTRICT  */
#line 113 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.dbehavior) = PG_DROP_RESTRICT; }
#line 32896 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1579: /* opt_drop_behavior: %empty  */
#line 114 "third_party/libpg_query/grammar/statements/drop.y"
                                                                { (yyval.dbehavior) = PG_DROP_RESTRICT; /* default */ }
#line 32902 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1580: /* drop_type_name_on_any_name: POLICY  */
#line 119 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_POLICY; }
#line 32908 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1581: /* drop_type_name_on_any_name: RULE  */
#line 120 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_RULE; }
#line 32914 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1582: /* drop_type_name_on_any_name: TRIGGER  */
#line 121 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TRIGGER; }
#line 32920 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1583: /* ExecuteStmt: EXECUTE name execute_param_clause  */
#line 8 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-1].str);
					n->params = (yyvsp[0].list);
					(yyval.node) = (PGNode *) n;
				}
#line 32931 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1584: /* ExecuteStmt: CREATE_P OptTemp TABLE create_as_target AS EXECUTE name execute_param_clause opt_with_data  */
#line 16 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-2].str);
					n->params = (yyvsp[-1].list);
					ctas->query = (PGNode *) n;
					ctas->into = (yyvsp[-5].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_ERROR_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-5].into)->rel->relpersistence = (yyvsp[-7].ival);
					(yyvsp[-5].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 32951 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1585: /* ExecuteStmt: CREATE_P OptTemp TABLE IF_P NOT EXISTS create_as_target AS EXECUTE name execute_param_clause opt_with_data  */
#line 33 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-2].str);
					n->params = (yyvsp[-1].list);
					ctas->query = (PGNode *) n;
					ctas->into = (yyvsp[-5].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_IGNORE_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-5].into)->rel->relpersistence = (yyvsp[-10].ival);
					(yyvsp[-5].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 32971 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1586: /* execute_param_expr: a_expr  */
#line 52 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 32979 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1587: /* execute_param_expr: param_name COLON_EQUALS a_expr  */
#line 56 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
					na->name = (yyvsp[-2].str);
					na->arg = (PGExpr *) (yyvsp[0].node);
					na->argnumber = -1;		/* until determined */
					na->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) na;
				}
#line 32992 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1588: /* execute_param_list: execute_param_expr  */
#line 66 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 33000 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1589: /* execute_param_list: execute_param_list ',' execute_param_expr  */
#line 70 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 33008 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1590: /* execute_param_clause: '(' execute_param_list ')'  */
#line 75 "third_party/libpg_query/grammar/statements/execute.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 33014 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1591: /* execute_param_clause: %empty  */
#line 76 "third_party/libpg_query/grammar/statements/execute.y"
                                                                                        { (yyval.list) = NIL; }
#line 33020 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1592: /* DeleteStmt: opt_with_clause DELETE_P FROM relation_expr_opt_alias using_clause where_or_current_clause returning_clause  */
#line 9 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGDeleteStmt *n = makeNode(PGDeleteStmt);
					n->relation = (yyvsp[-3].range);
					n->usingClause = (yyvsp[-2].list);
					n->whereClause = (yyvsp[-1].node);
					n->returningList = (yyvsp[0].list);
					n->withClause = (yyvsp[-6].with);
					(yyval.node) = (PGNode *)n;
				}
#line 33034 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1593: /* DeleteStmt: TRUNCATE opt_table relation_expr_opt_alias  */
#line 19 "third_party/libpg_query/grammar/statements/delete.y"
                            {
					PGDeleteStmt *n = makeNode(PGDeleteStmt);
					n->relation = (yyvsp[0].range);
					n->usingClause = NULL;
					n->whereClause = NULL;
					n->returningList = NULL;
					n->withClause = NULL;
					(yyval.node) = (PGNode *)n;
			    }
#line 33048 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1594: /* relation_expr_opt_alias: relation_expr  */
#line 32 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					(yyval.range) = (yyvsp[0].range);
				}
#line 33056 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1595: /* relation_expr_opt_alias: relation_expr ColId  */
#line 36 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGAlias *alias = makeNode(PGAlias);
					alias->aliasname = (yyvsp[0].str);
					(yyvsp[-1].range)->alias = alias;
					(yyval.range) = (yyvsp[-1].range);
				}
#line 33067 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1596: /* relation_expr_opt_alias: relation_expr AS ColId  */
#line 43 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGAlias *alias = makeNode(PGAlias);
					alias->aliasname = (yyvsp[0].str);
					(yyvsp[-2].range)->alias = alias;
					(yyval.range) = (yyvsp[-2].range);
				}
#line 33078 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1597: /* where_or_current_clause: WHERE a_expr  */
#line 53 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 33084 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1598: /* where_or_current_clause: %empty  */
#line 54 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                                { (yyval.node) = NULL; }
#line 33090 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1599: /* using_clause: USING from_list_opt_comma  */
#line 60 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 33096 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1600: /* using_clause: %empty  */
#line 61 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                                { (yyval.list) = NIL; }
#line 33102 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1601: /* RenameStmt: ALTER SCHEMA name RENAME TO name  */
#line 7 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SCHEMA;
					n->subname = (yyvsp[-3].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 33115 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1602: /* RenameStmt: ALTER TABLE relation_expr RENAME TO name  */
#line 16 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 33129 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1603: /* RenameStmt: ALTER TABLE IF_P EXISTS relation_expr RENAME TO name  */
#line 26 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 33143 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1604: /* RenameStmt: ALTER SEQUENCE qualified_name RENAME TO name  */
#line 36 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 33157 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1605: /* RenameStmt: ALTER SEQUENCE IF_P EXISTS qualified_name RENAME TO name  */
#line 46 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 33171 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1606: /* RenameStmt: ALTER VIEW qualified_name RENAME TO name  */
#line 56 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 33185 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1607: /* RenameStmt: ALTER VIEW IF_P EXISTS qualified_name RENAME TO name  */
#line 66 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 33199 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1608: /* RenameStmt: ALTER INDEX qualified_name RENAME TO name  */
#line 76 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_INDEX;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 33213 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1609: /* RenameStmt: ALTER INDEX IF_P EXISTS qualified_name RENAME TO name  */
#line 86 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_INDEX;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 33227 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1610: /* RenameStmt: ALTER TABLE relation_expr RENAME opt_column qualified_column TO name  */
#line 96 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_COLUMN;
					n->relationType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-5].range);
					n->name_list = (yyvsp[-2].list);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 33242 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1611: /* RenameStmt: ALTER TABLE IF_P EXISTS relation_expr RENAME opt_column qualified_column TO name  */
#line 107 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_COLUMN;
					n->relationType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-5].range);
					n->name_list = (yyvsp[-2].list);
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 33257 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1612: /* RenameStmt: ALTER TABLE relation_expr RENAME CONSTRAINT name TO name  */
#line 118 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABCONSTRAINT;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 33271 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1613: /* RenameStmt: ALTER TABLE IF_P EXISTS relation_expr RENAME CONSTRAINT name TO name  */
#line 128 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABCONSTRAINT;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 33285 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1614: /* opt_column: COLUMN  */
#line 140 "third_party/libpg_query/grammar/statements/rename.y"
                                                                                        { (yyval.ival) = COLUMN; }
#line 33291 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1615: /* opt_column: %empty  */
#line 141 "third_party/libpg_query/grammar/statements/rename.y"
                                                                                                { (yyval.ival) = 0; }
#line 33297 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1616: /* UpdateExtensionsStmt: opt_with_clause UPDATE EXTENSIONS opt_column_list  */
#line 8 "third_party/libpg_query/grammar/statements/update_extensions.y"
                                {
					PGUpdateExtensionsStmt *n = makeNode(PGUpdateExtensionsStmt);
					n->extensions = (yyvsp[0].list);

					if ((yyvsp[-3].with)) {
                          ereport(ERROR,
                                  (errcode(PG_ERRCODE_SYNTAX_ERROR),
                                   errmsg("Providing a with clause with an UPDATE EXTENSIONS statement is not allowed"),
                                   parser_errposition((yylsp[-3]))));
                          break;
                    }

					(yyval.node) = (PGNode *)n;
				}
#line 33316 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;


#line 33320 "third_party/libpg_query/grammar/grammar_out.cpp"

      default: break;
    }
  /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT ("-> $$ =", YY_CAST (yysymbol_kind_t, yyr1[yyn]), &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;

  *++yyvsp = yyval;
  *++yylsp = yyloc;

  /* Now 'shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */
  {
    const int yylhs = yyr1[yyn] - YYNTOKENS;
    const int yyi = yypgoto[yylhs] + *yyssp;
    yystate = (0 <= yyi && yyi <= YYLAST && yycheck[yyi] == *yyssp
               ? yytable[yyi]
               : yydefgoto[yylhs]);
  }

  goto yynewstate;


/*--------------------------------------.
| yyerrlab -- here on detecting error.  |
`--------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYSYMBOL_YYEMPTY : YYTRANSLATE (yychar);
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
      yyerror (&yylloc, yyscanner, YY_("syntax error"));
    }

  yyerror_range[1] = yylloc;
  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
         error, discard it.  */

      if (yychar <= YYEOF)
        {
          /* Return failure if at end of input.  */
          if (yychar == YYEOF)
            YYABORT;
        }
      else
        {
          yydestruct ("Error: discarding",
                      yytoken, &yylval, &yylloc, yyscanner);
          yychar = YYEMPTY;
        }
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:
  /* Pacify compilers when the user code never invokes YYERROR and the
     label yyerrorlab therefore never appears in user code.  */
  if (0)
    YYERROR;
  ++yynerrs;

  /* Do not reclaim the symbols of the rule whose action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;      /* Each real token shifted decrements this.  */

  /* Pop stack until we find a state that shifts the error token.  */
  for (;;)
    {
      yyn = yypact[yystate];
      if (!yypact_value_is_default (yyn))
        {
          yyn += YYSYMBOL_YYerror;
          if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYSYMBOL_YYerror)
            {
              yyn = yytable[yyn];
              if (0 < yyn)
                break;
            }
        }

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
        YYABORT;

      yyerror_range[1] = *yylsp;
      yydestruct ("Error: popping",
                  YY_ACCESSING_SYMBOL (yystate), yyvsp, yylsp, yyscanner);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END

  yyerror_range[2] = yylloc;
  ++yylsp;
  YYLLOC_DEFAULT (*yylsp, yyerror_range, 2);

  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", YY_ACCESSING_SYMBOL (yyn), yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturnlab;


/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturnlab;


/*-----------------------------------------------------------.
| yyexhaustedlab -- YYNOMEM (memory exhaustion) comes here.  |
`-----------------------------------------------------------*/
yyexhaustedlab:
  yyerror (&yylloc, yyscanner, YY_("memory exhausted"));
  yyresult = 2;
  goto yyreturnlab;


/*----------------------------------------------------------.
| yyreturnlab -- parsing is finished, clean up and return.  |
`----------------------------------------------------------*/
yyreturnlab:
  if (yychar != YYEMPTY)
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct ("Cleanup: discarding lookahead",
                  yytoken, &yylval, &yylloc, yyscanner);
    }
  /* Do not reclaim the symbols of the rule whose action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
                  YY_ACCESSING_SYMBOL (+*yyssp), yyvsp, yylsp, yyscanner);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif

  return yyresult;
}

#line 34 "third_party/libpg_query/grammar/statements/update_extensions.y"


#line 1 "third_party/libpg_query/grammar/grammar.cpp"
/*
 * The signature of this function is required by bison.  However, we
 * ignore the passed yylloc and instead use the last token position
 * available from the scanner.
 */
static void
base_yyerror(YYLTYPE *yylloc, core_yyscan_t yyscanner, const char *msg)
{
	parser_yyerror(msg);
}

static PGRawStmt *
makeRawStmt(PGNode *stmt, int stmt_location)
{
	PGRawStmt    *rs = makeNode(PGRawStmt);

	rs->stmt = stmt;
	rs->stmt_location = stmt_location;
	rs->stmt_len = 0;			/* might get changed later */
	return rs;
}

/* Adjust a PGRawStmt to reflect that it doesn't run to the end of the string */
static void
updateRawStmtEnd(PGRawStmt *rs, int end_location)
{
	/*
	 * If we already set the length, don't change it.  This is for situations
	 * like "select foo ;; select bar" where the same statement will be last
	 * in the string for more than one semicolon.
	 */
	if (rs->stmt_len > 0)
		return;

	/* OK, update length of PGRawStmt */
	rs->stmt_len = end_location - rs->stmt_location;
}

static PGNode *
makeColumnRef(char *colname, PGList *indirection,
			  int location, core_yyscan_t yyscanner)
{
	/*
	 * Generate a PGColumnRef node, with an PGAIndirection node added if there
	 * is any subscripting in the specified indirection list.  However,
	 * any field selection at the start of the indirection list must be
	 * transposed into the "fields" part of the PGColumnRef node.
	 */
	PGColumnRef  *c = makeNode(PGColumnRef);
	int		nfields = 0;
	PGListCell *l;

	c->location = location;
	foreach(l, indirection)
	{
		if (IsA(lfirst(l), PGAIndices))
		{
			PGAIndirection *i = makeNode(PGAIndirection);

			if (nfields == 0)
			{
				/* easy case - all indirection goes to PGAIndirection */
				c->fields = list_make1(makeString(colname));
				i->indirection = check_indirection(indirection, yyscanner);
			}
			else
			{
				/* got to split the list in two */
				i->indirection = check_indirection(list_copy_tail(indirection,
																  nfields),
												   yyscanner);
				indirection = list_truncate(indirection, nfields);
				c->fields = lcons(makeString(colname), indirection);
			}
			i->arg = (PGNode *) c;
			return (PGNode *) i;
		}
		else if (IsA(lfirst(l), PGAStar))
		{
			/* We only allow '*' at the end of a PGColumnRef */
			if (lnext(l) != NULL)
				parser_yyerror("improper use of \"*\"");
		}
		nfields++;
	}
	/* No subscripting, so all indirection gets added to field list */
	c->fields = lcons(makeString(colname), indirection);
	return (PGNode *) c;
}

static PGNode *
makeTypeCast(PGNode *arg, PGTypeName *tpname, int trycast, int location)
{
	PGTypeCast *n = makeNode(PGTypeCast);
	n->arg = arg;
	n->typeName = tpname;
	n->tryCast = trycast;
	n->location = location;
	return (PGNode *) n;
}

static PGNode *
makeStringConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGString;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeStringConstCast(char *str, int location, PGTypeName *tpname)
{
	PGNode *s = makeStringConst(str, location);

	return makeTypeCast(s, tpname, 0, -1);
}

static PGNode *
makeIntervalNode(char *str, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGString;
	n->sval = str;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;

}

static PGNode *
makeIntervalNode(int val, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGInteger;
	n->ival = val;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;
}

static PGNode *
makeIntervalNode(PGNode *arg, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGAExpr;
	n->eval = arg;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;
}

static PGNode *
makeSampleSize(PGNode *sample_size, bool is_percentage) {
	PGSampleSize *n = makeNode(PGSampleSize);

	n->sample_size = sample_size;
	n->is_percentage = is_percentage;

	return (PGNode *)n;
}

static PGNode *
makeSampleOptions(PGNode *sample_size, char *method, int *seed, int location) {
	PGSampleOptions *n = makeNode(PGSampleOptions);

	n->sample_size = sample_size;
	n->method = method;
	if (seed) {
		n->has_seed = true;
		n->seed = *seed;
	}
	n->location = location;

	return (PGNode *)n;
}

/* makeLimitPercent()
 * Make limit percent node
 */
static PGNode *
makeLimitPercent(PGNode *limit_percent) {
	PGLimitPercent *n = makeNode(PGLimitPercent);

	n->limit_percent = limit_percent;

	return (PGNode *)n;
}

static PGNode *
makeIntConst(int val, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGInteger;
	n->val.val.ival = val;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeFloatConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGFloat;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeBitStringConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGBitString;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeNullAConst(int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGNull;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeAConst(PGValue *v, int location)
{
	PGNode *n;

	switch (v->type)
	{
		case T_PGFloat:
			n = makeFloatConst(v->val.str, location);
			break;

		case T_PGInteger:
			n = makeIntConst(v->val.ival, location);
			break;

		case T_PGString:
		default:
			n = makeStringConst(v->val.str, location);
			break;
	}

	return n;
}

/* makeBoolAConst()
 * Create an PGAConst string node and put it inside a boolean cast.
 */
static PGNode *
makeBoolAConst(bool state, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGString;
	n->val.val.str = (state ? (char*) "t" : (char*) "f");
	n->location = location;

	return makeTypeCast((PGNode *)n, SystemTypeName("bool"), 0, -1);
}

/* check_qualified_name --- check the result of qualified_name production
 *
 * It's easiest to let the grammar production for qualified_name allow
 * subscripts and '*', which we then must reject here.
 */
static void
check_qualified_name(PGList *names, core_yyscan_t yyscanner)
{
	PGListCell   *i;

	foreach(i, names)
	{
		if (!IsA(lfirst(i), PGString))
			parser_yyerror("syntax error");
	}
}

/* check_func_name --- check the result of func_name production
 *
 * It's easiest to let the grammar production for func_name allow subscripts
 * and '*', which we then must reject here.
 */
static PGList *
check_func_name(PGList *names, core_yyscan_t yyscanner)
{
	PGListCell   *i;

	foreach(i, names)
	{
		if (!IsA(lfirst(i), PGString))
			parser_yyerror("syntax error");
	}
	return names;
}

/* check_indirection --- check the result of indirection production
 *
 * We only allow '*' at the end of the list, but it's hard to enforce that
 * in the grammar, so do it here.
 */
static PGList *
check_indirection(PGList *indirection, core_yyscan_t yyscanner)
{
	PGListCell *l;

	foreach(l, indirection)
	{
		if (IsA(lfirst(l), PGAStar))
		{
			if (lnext(l) != NULL)
				parser_yyerror("improper use of \"*\"");
		}
	}
	return indirection;
}

/* makeParamRef
 * Creates a new PGParamRef node
 */
static PGNode* makeParamRef(int number, int location)
{
	PGParamRef *p = makeNode(PGParamRef);
	p->number = number;
	p->location = location;
	p->name = NULL;
	return (PGNode *) p;
}

/* makeNamedParamRef
 * Creates a new PGParamRef node
 */
static PGNode* makeNamedParamRef(char *name, int location)
{
	PGParamRef *p = (PGParamRef *)makeParamRef(0, location);
	p->name = name;
	return (PGNode *) p;
}


/* insertSelectOptions()
 * Insert ORDER BY, etc into an already-constructed SelectStmt.
 *
 * This routine is just to avoid duplicating code in PGSelectStmt productions.
 */
static void
insertSelectOptions(PGSelectStmt *stmt,
					PGList *sortClause, PGList *lockingClause,
					PGNode *limitOffset, PGNode *limitCount, PGNode *isLimitOffsetFirst,
					PGWithClause *withClause,
					core_yyscan_t yyscanner)
{
	if (stmt->type != T_PGSelectStmt) {
		ereport(ERROR,
				(errcode(PG_ERRCODE_SYNTAX_ERROR),
						errmsg("DESCRIBE/SHOW/SUMMARIZE with CTE/ORDER BY/... not allowed - wrap the statement in a subquery instead"),
						parser_errposition(exprLocation((PGNode *) stmt))));
	}
	Assert(IsA(stmt, PGSelectStmt));

	/*
	 * Tests here are to reject constructs like
	 *	(SELECT foo ORDER BY bar) ORDER BY baz
	 */
	if (sortClause)
	{
		if (stmt->sortClause)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple ORDER BY clauses not allowed"),
					 parser_errposition(exprLocation((PGNode *) sortClause))));
		stmt->sortClause = sortClause;
	}
	/* We can handle multiple locking clauses, though */
	stmt->lockingClause = list_concat(stmt->lockingClause, lockingClause);
	if (limitOffset)
	{
		if (stmt->limitOffset)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple OFFSET clauses not allowed"),
					 parser_errposition(exprLocation(limitOffset))));
		stmt->limitOffset = limitOffset;
	}
	if (limitCount)
	{
		if (stmt->limitCount)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple LIMIT clauses not allowed"),
					 parser_errposition(exprLocation(limitCount))));
		stmt->limitCount = limitCount;
	}
	if (limitOffset == isLimitOffsetFirst) {
		stmt->offset_first = true;
	}
	if (withClause)
	{
		if (stmt->withClause)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple WITH clauses not allowed"),
					 parser_errposition(exprLocation((PGNode *) withClause))));
		stmt->withClause = withClause;
	}
}

static PGNode *
makeSetOp(PGSetOperation op, bool all, PGNode *larg, PGNode *rarg)
{
	PGSelectStmt *n = makeNode(PGSelectStmt);

	n->op = op;
	n->all = all;
	n->larg = larg;
	n->rarg = rarg;
	return (PGNode *) n;
}

/* SystemFuncName()
 * Build a properly-qualified reference to a built-in function.
 */
PGList *
SystemFuncName(const char *name)
{
	return list_make2(makeString(DEFAULT_SCHEMA), makeString(name));
}

/* SystemTypeName()
 * Build a properly-qualified reference to a built-in type.
 *
 * typmod is defaulted, but may be changed afterwards by caller.
 * Likewise for the location.
 */
PGTypeName *
SystemTypeName(const char *name)
{
	return makeTypeNameFromNameList(list_make1(makeString(name)));
}

/* doNegate()
 * Handle negation of a numeric constant.
 *
 * Formerly, we did this here because the optimizer couldn't cope with
 * indexquals that looked like "var = -4" --- it wants "var = const"
 * and a unary minus operator applied to a constant didn't qualify.
 * As of Postgres 7.0, that problem doesn't exist anymore because there
 * is a constant-subexpression simplifier in the optimizer.  However,
 * there's still a good reason for doing this here, which is that we can
 * postpone committing to a particular internal representation for simple
 * negative constants.	It's better to leave "-123.456" in string form
 * until we know what the desired type is.
 */
static PGNode *
doNegate(PGNode *n, int location)
{
	if (IsA(n, PGAConst))
	{
		PGAConst *con = (PGAConst *)n;

		/* report the constant's location as that of the '-' sign */
		con->location = location;

		if (con->val.type == T_PGInteger)
		{
			con->val.val.ival = -con->val.val.ival;
			return n;
		}
		if (con->val.type == T_PGFloat)
		{
			doNegateFloat(&con->val);
			return n;
		}
	}

	return (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", NULL, n, location);
}

static void
doNegateFloat(PGValue *v)
{
	char   *oldval = v->val.str;

	Assert(IsA(v, PGFloat));
	if (*oldval == '+')
		oldval++;
	if (*oldval == '-')
		v->val.str = oldval+1;	/* just strip the '-' */
	else
		v->val.str = psprintf("-%s", oldval);
}

static PGNode *
makeAndExpr(PGNode *lexpr, PGNode *rexpr, int location)
{
	PGNode	   *lexp = lexpr;

	/* Look through AEXPR_PAREN nodes so they don't affect flattening */
	while (IsA(lexp, PGAExpr) &&
		   ((PGAExpr *) lexp)->kind == AEXPR_PAREN)
		lexp = ((PGAExpr *) lexp)->lexpr;
	/* Flatten "a AND b AND c ..." to a single PGBoolExpr on sight */
	if (IsA(lexp, PGBoolExpr))
	{
		PGBoolExpr *blexpr = (PGBoolExpr *) lexp;

		if (blexpr->boolop == PG_AND_EXPR)
		{
			blexpr->args = lappend(blexpr->args, rexpr);
			return (PGNode *) blexpr;
		}
	}
	return (PGNode *) makeBoolExpr(PG_AND_EXPR, list_make2(lexpr, rexpr), location);
}

static PGNode *
makeOrExpr(PGNode *lexpr, PGNode *rexpr, int location)
{
	PGNode	   *lexp = lexpr;

	/* Look through AEXPR_PAREN nodes so they don't affect flattening */
	while (IsA(lexp, PGAExpr) &&
		   ((PGAExpr *) lexp)->kind == AEXPR_PAREN)
		lexp = ((PGAExpr *) lexp)->lexpr;
	/* Flatten "a OR b OR c ..." to a single PGBoolExpr on sight */
	if (IsA(lexp, PGBoolExpr))
	{
		PGBoolExpr *blexpr = (PGBoolExpr *) lexp;

		if (blexpr->boolop == PG_OR_EXPR)
		{
			blexpr->args = lappend(blexpr->args, rexpr);
			return (PGNode *) blexpr;
		}
	}
	return (PGNode *) makeBoolExpr(PG_OR_EXPR, list_make2(lexpr, rexpr), location);
}

static PGNode *
makeNotExpr(PGNode *expr, int location)
{
	return (PGNode *) makeBoolExpr(PG_NOT_EXPR, list_make1(expr), location);
}

/* Separate PGConstraint nodes from COLLATE clauses in a */
static void
SplitColQualList(PGList *qualList,
				 PGList **constraintList, PGCollateClause **collClause,
				 core_yyscan_t yyscanner)
{
	PGListCell   *cell;
	PGListCell   *prev;
	PGListCell   *next;

	*collClause = NULL;
	prev = NULL;
	for (cell = list_head(qualList); cell; cell = next)
	{
		PGNode   *n = (PGNode *) lfirst(cell);

		next = lnext(cell);
		if (IsA(n, PGConstraint))
		{
			/* keep it in list */
			prev = cell;
			continue;
		}
		if (IsA(n, PGCollateClause))
		{
			PGCollateClause *c = (PGCollateClause *) n;

			if (*collClause)
				ereport(ERROR,
						(errcode(PG_ERRCODE_SYNTAX_ERROR),
						 errmsg("multiple COLLATE clauses not allowed"),
						 parser_errposition(c->location)));
			*collClause = c;
		}
		else
			elog(ERROR, "unexpected node type %d", (int) n->type);
		/* remove non-Constraint nodes from qualList */
		qualList = list_delete_cell(qualList, cell, prev);
	}
	*constraintList = qualList;
}

/*
 * Process result of ConstraintAttributeSpec, and set appropriate bool flags
 * in the output command node.  Pass NULL for any flags the particular
 * command doesn't support.
 */
static void
processCASbits(int cas_bits, int location, const char *constrType,
			   bool *deferrable, bool *initdeferred, bool *not_valid,
			   bool *no_inherit, core_yyscan_t yyscanner)
{
	/* defaults */
	if (deferrable)
		*deferrable = false;
	if (initdeferred)
		*initdeferred = false;
	if (not_valid)
		*not_valid = false;

	if (cas_bits & (CAS_DEFERRABLE | CAS_INITIALLY_DEFERRED))
	{
		if (deferrable)
			*deferrable = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked DEFERRABLE",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_INITIALLY_DEFERRED)
	{
		if (initdeferred)
			*initdeferred = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked DEFERRABLE",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_NOT_VALID)
	{
		if (not_valid)
			*not_valid = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked NOT VALID",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_NO_INHERIT)
	{
		if (no_inherit)
			*no_inherit = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked NO INHERIT",
							constrType),
					 parser_errposition(location)));
	}
}

/*----------
 * Recursive view transformation
 *
 * Convert
 *
 *     CREATE RECURSIVE VIEW relname (aliases) AS query
 *
 * to
 *
 *     CREATE VIEW relname (aliases) AS
 *         WITH RECURSIVE relname (aliases) AS (query)
 *         SELECT aliases FROM relname
 *
 * Actually, just the WITH ... part, which is then inserted into the original
 * view as the query.
 * ----------
 */
static PGNode *
makeRecursiveViewSelect(char *relname, PGList *aliases, PGNode *query)
{
	PGSelectStmt *s = makeNode(PGSelectStmt);
	PGWithClause *w = makeNode(PGWithClause);
	PGCommonTableExpr *cte = makeNode(PGCommonTableExpr);
	PGList	   *tl = NIL;
	PGListCell   *lc;

	/* create common table expression */
	cte->ctename = relname;
	cte->aliascolnames = aliases;
	cte->ctequery = query;
	cte->location = -1;

	/* create WITH clause and attach CTE */
	w->recursive = true;
	w->ctes = list_make1(cte);
	w->location = -1;

	/* create target list for the new SELECT from the alias list of the
	 * recursive view specification */
	foreach (lc, aliases)
	{
		PGResTarget *rt = makeNode(PGResTarget);

		rt->name = NULL;
		rt->indirection = NIL;
		rt->val = makeColumnRef(strVal(lfirst(lc)), NIL, -1, 0);
		rt->location = -1;

		tl = lappend(tl, rt);
	}

	/* create new SELECT combining WITH clause, target list, and fake FROM
	 * clause */
	s->withClause = w;
	s->targetList = tl;
	s->fromClause = list_make1(makeRangeVar(NULL, relname, -1));

	return (PGNode *) s;
}

/* parser_init()
 * Initialize to parse one query string
 */
void
parser_init(base_yy_extra_type *yyext)
{
	yyext->parsetree = NIL;		/* in case grammar forgets to set it */
}

#undef yyparse
#undef yylex
#undef yyerror
#undef yylval
#undef yychar
#undef yydebug
#undef yynerrs
#undef yylloc

} // namespace duckdb_libpgquery
